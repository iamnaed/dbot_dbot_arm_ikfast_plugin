/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2024-02-06 03:40:26.450263
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51;
x0=IKcos(j[0]);
x1=IKsin(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[1]);
x4=IKcos(j[2]);
x5=IKsin(j[3]);
x6=IKcos(j[3]);
x7=IKsin(j[5]);
x8=IKsin(j[0]);
x9=IKsin(j[4]);
x10=IKcos(j[4]);
x11=IKcos(j[5]);
x12=((0.3)*x4);
x13=((1.0)*x8);
x14=((1.0)*x0);
x15=((0.125)*x1);
x16=((0.125)*x4);
x17=((0.3)*x3);
x18=((0.125)*x2);
x19=((1.0)*x10);
x20=((0.0565)*x5);
x21=((0.0565)*x6);
x22=((0.125)*x3);
x23=(x10*x8);
x24=(x0*x1);
x25=(x2*x8);
x26=(x0*x2);
x27=(x1*x4);
x28=(x3*x4);
x29=(x1*x2);
x30=(x1*x8);
x31=(x2*x3);
x32=(x14*x29);
x33=(x13*x29);
x34=((((-1.0)*x29))+x28);
x35=(x31+x27);
x36=(x35*x6);
x37=(x34*x5);
x38=((((-1.0)*x32))+((x0*x28)));
x39=((((-1.0)*x33))+((x28*x8)));
x40=(x14*(((((-1.0)*x31))+(((-1.0)*x27)))));
x41=(x13*(((((-1.0)*x31))+(((-1.0)*x27)))));
x42=(x38*x6);
x43=(x39*x6);
x44=(x40*x5);
x45=(x37+x36);
x46=(((x34*x6))+((x5*(((((-1.0)*x31))+(((-1.0)*x27)))))));
x47=(x44+x42);
x48=(((x41*x5))+x43);
x49=(((x5*(((((-1.0)*x14*x28))+x32))))+((x40*x6)));
x50=(((x41*x6))+((x5*(((((-1.0)*x13*x28))+x33)))));
x51=(x10*x47);
eerot[0]=(((x11*(((((-1.0)*x8*x9))+x51))))+((x49*x7)));
eerot[1]=(((x11*x49))+((x7*(((((-1.0)*x19*x47))+((x13*x9)))))));
eerot[2]=(((x47*x9))+x23);
IkReal x52=((1.0)*x0*x3);
eetrans[0]=(((x5*(((((-1.0)*x16*x52))+((x15*x26))))))+(((-0.35)*x24))+((x9*((((x20*x40))+((x21*x38))))))+(((-0.125)*x8))+((x6*(((((-1.0)*x18*x52))+(((-1.0)*x0*x15*x4))))))+(((-1.0)*x12*x24))+(((0.0565)*x23))+(((-1.0)*x17*x26)));
eerot[3]=(((x50*x7))+((x11*((((x0*x9))+((x10*x48)))))));
eerot[4]=(((x7*(((((-1.0)*x19*x48))+(((-1.0)*x14*x9))))))+((x11*x50)));
eerot[5]=(((x48*x9))+(((-1.0)*x10*x14)));
IkReal x53=((1.0)*x8);
eetrans[1]=(((x6*(((((-1.0)*x18*x3*x53))+(((-1.0)*x15*x4*x53))))))+(((-1.0)*x12*x30))+((x5*(((((-1.0)*x16*x3*x53))+((x15*x25))))))+(((-1.0)*x17*x25))+(((-0.0565)*x0*x10))+(((-0.35)*x30))+(((0.125)*x0))+((x9*((((x20*x41))+((x21*x39)))))));
eerot[6]=(((x46*x7))+((x10*x11*x45)));
eerot[7]=(((x11*x46))+((x10*x7*(((((-1.0)*x37))+(((-1.0)*x36)))))));
eerot[8]=(x45*x9);
IkReal x54=((1.0)*x15);
eetrans[2]=((0.242)+(((0.35)*x3))+(((-0.3)*x29))+((x5*(((((-1.0)*x18*x3))+(((-1.0)*x4*x54))))))+((x12*x3))+((x6*(((((-1.0)*x2*x54))+((x16*x3))))))+((x9*((((x20*x34))+((x21*x35)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((((-0.0565)*r02))+px);
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((((-0.0565)*r12))+py);
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.242)+pz+(((-0.0565)*r22)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x55=((1.0)*px);
IkReal x56=((1.0)*pz);
IkReal x57=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x57))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x56)));
rxp0_2=((((-1.0)*r10*x55))+((py*r00)));
rxp1_0=((((-1.0)*r21*x57))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x56)));
rxp1_2=((((-1.0)*r11*x55))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x57)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x56)));
rxp2_2=((((-1.0)*r12*x55))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x58=((0.125)*r20);
IkReal x59=((0.125)*r21);
IkReal x60=((0.125)*r22);
IkReal x61=((-0.25)*npx);
IkReal x62=((-0.25)*npy);
IkReal x63=((-1.0)*npz);
IkReal x64=((-1.0)*r21);
IkReal x65=((-1.0)*npy);
IkReal x66=((-0.125)*r21);
IkReal x67=((-1.0)*rxp0_2);
IkReal x68=((-1.0)*r22);
IkReal x69=((-0.125)*r22);
IkReal x70=((-1.0)*rxp1_2);
IkReal x71=((-1.0)*npx);
matrixinvcoeffs[0]=x58;
matrixinvcoeffs[1]=x61;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=r20;
matrixinvcoeffs[9]=0;
matrixinvcoeffs[10]=0;
matrixinvcoeffs[11]=x71;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=rxp0_2;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x58;
matrixinvcoeffs[19]=x61;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=0;
matrixinvcoeffs[25]=npx;
matrixinvcoeffs[26]=((-1.0)*r20);
matrixinvcoeffs[27]=0;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=x67;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x59;
matrixinvcoeffs[33]=x62;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=r21;
matrixinvcoeffs[41]=0;
matrixinvcoeffs[42]=0;
matrixinvcoeffs[43]=x65;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=rxp1_2;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x59;
matrixinvcoeffs[51]=x62;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=0;
matrixinvcoeffs[57]=npy;
matrixinvcoeffs[58]=x64;
matrixinvcoeffs[59]=0;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=x70;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=0;
matrixinvcoeffs[73]=x63;
matrixinvcoeffs[74]=r22;
matrixinvcoeffs[75]=0;
matrixinvcoeffs[76]=x60;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=rxp2_2;
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0;
matrixinvcoeffs[88]=r22;
matrixinvcoeffs[89]=0;
matrixinvcoeffs[90]=0;
matrixinvcoeffs[91]=x63;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x60;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=rxp2_2;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=x64;
matrixinvcoeffs[101]=x65;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=rxp1_2;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=x66;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=x64;
matrixinvcoeffs[119]=x65;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=rxp1_2;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x66;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=r20;
matrixinvcoeffs[133]=npx;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=x67;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=x58;
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=r20;
matrixinvcoeffs[151]=npx;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=0;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=x67;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=x58;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=x68;
matrixinvcoeffs[165]=x63;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=rxp2_2;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x69;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=x68;
matrixinvcoeffs[183]=x63;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=rxp2_2;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=x69;
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=0;
matrixinvcoeffs[201]=npy;
matrixinvcoeffs[202]=x64;
matrixinvcoeffs[203]=0;
matrixinvcoeffs[204]=x66;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x70;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=0;
matrixinvcoeffs[216]=x64;
matrixinvcoeffs[217]=0;
matrixinvcoeffs[218]=0;
matrixinvcoeffs[219]=npy;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x66;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=x70;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=0;
matrixinvcoeffs[233]=x71;
matrixinvcoeffs[234]=r20;
matrixinvcoeffs[235]=0;
matrixinvcoeffs[236]=x58;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=rxp0_2;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=r20;
matrixinvcoeffs[249]=0;
matrixinvcoeffs[250]=0;
matrixinvcoeffs[251]=x71;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=x58;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=rxp0_2;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh4_9=matrixinvcoeffs[148], gclwh4_10=matrixinvcoeffs[164], gclwh4_14=matrixinvcoeffs[228], gclwh5_0=matrixinvcoeffs[5], gclwh5_6=matrixinvcoeffs[101], gclwh5_8=matrixinvcoeffs[133], gclwh5_11=matrixinvcoeffs[181], gclwh5_15=matrixinvcoeffs[245], gclwh6_2=matrixinvcoeffs[38], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_10=matrixinvcoeffs[166], gclwh6_12=matrixinvcoeffs[198], gclwh7_0=matrixinvcoeffs[7], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_8=matrixinvcoeffs[135], gclwh7_13=matrixinvcoeffs[215], gclwh8_2=matrixinvcoeffs[40], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_10=matrixinvcoeffs[168], gclwh8_12=matrixinvcoeffs[200], gclwh9_0=matrixinvcoeffs[9], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_8=matrixinvcoeffs[137], gclwh9_13=matrixinvcoeffs[217], gclwh10_2=matrixinvcoeffs[42], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_10=matrixinvcoeffs[170], gclwh10_12=matrixinvcoeffs[202], gclwh11_0=matrixinvcoeffs[11], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_8=matrixinvcoeffs[139], gclwh11_13=matrixinvcoeffs[219], gclwh12_2=matrixinvcoeffs[44], gclwh12_3=matrixinvcoeffs[60], gclwh12_4=matrixinvcoeffs[76], gclwh12_9=matrixinvcoeffs[156], gclwh12_10=matrixinvcoeffs[172], gclwh12_14=matrixinvcoeffs[236], gclwh13_0=matrixinvcoeffs[13], gclwh13_1=matrixinvcoeffs[29], gclwh13_6=matrixinvcoeffs[109], gclwh13_8=matrixinvcoeffs[141], gclwh13_11=matrixinvcoeffs[189], gclwh13_15=matrixinvcoeffs[253], gclwh14_2=matrixinvcoeffs[46], gclwh14_3=matrixinvcoeffs[62], gclwh14_4=matrixinvcoeffs[78], gclwh14_9=matrixinvcoeffs[158], gclwh14_10=matrixinvcoeffs[174], gclwh14_14=matrixinvcoeffs[238], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_6=matrixinvcoeffs[111], gclwh15_8=matrixinvcoeffs[143], gclwh15_11=matrixinvcoeffs[191], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x72=pz*pz;
IkReal x73=pp*pp;
IkReal x74=(pp*r22);
IkReal x75=((0.5)*gclwh5_15);
IkReal x76=(gclwh11_0*r22);
IkReal x77=((0.015625)*pz);
IkReal x78=((0.0066015625)*r21);
IkReal x79=(npx*pz);
IkReal x80=(npz*pz);
IkReal x81=(npy*pz);
IkReal x82=((2.0)*gclwh6_10);
IkReal x83=((0.03125)*r20);
IkReal x84=((0.015625)*r22);
IkReal x85=((0.0109375)*r22);
IkReal x86=((0.001953125)*r22);
IkReal x87=((0.0625)*r22);
IkReal x88=(pp*r21);
IkReal x89=((4.0)*gclwh13_8);
IkReal x90=(gclwh10_2*r22);
IkReal x91=(gclwh10_12*r22);
IkReal x92=(gclwh12_9*rxp1_2);
IkReal x93=((0.01875)*r21);
IkReal x94=(gclwh15_15*rxp0_2);
IkReal x95=((1.0)*gclwh6_10);
IkReal x96=(gclwh8_12*rxp0_2);
IkReal x97=((0.25)*rxp1_2);
IkReal x98=((0.25)*gclwh4_14);
IkReal x99=(gclwh0_0*r20);
IkReal x100=((0.03125)*rxp1_2);
IkReal x101=((4.0)*gclwh4_10);
IkReal x102=(gclwh15_11*rxp0_2);
IkReal x103=((0.25)*rxp0_2);
IkReal x104=(gclwh15_0*pz);
IkReal x105=(pp*r20);
IkReal x106=(gclwh13_0*rxp1_2);
IkReal x107=((0.25)*gclwh14_14);
IkReal x108=(gclwh5_0*r22);
IkReal x109=((1.0)*rxp1_2);
IkReal x110=((0.1625)*rxp0_2);
IkReal x111=((0.00390625)*r22);
IkReal x112=((0.5)*rxp2_2);
IkReal x113=((2.0)*gclwh8_10);
IkReal x114=((0.01015625)*r20);
IkReal x115=((0.03125)*r21);
IkReal x116=((1.0)*pz);
IkReal x117=(gclwh14_2*rxp0_2);
IkReal x118=((0.0625)*r21);
IkReal x119=(gclwh4_9*rxp2_2);
IkReal x120=((0.000625)*rxp1_2);
IkReal x121=(gclwh6_2*r21);
IkReal x122=((4.0)*gclwh11_8);
IkReal x123=(gclwh7_0*r21);
IkReal x124=((0.0066015625)*r20);
IkReal x125=((4.0)*gclwh9_8);
IkReal x126=(gclwh11_13*r22);
IkReal x127=(gclwh14_9*rxp0_2);
IkReal x128=(gclwh7_0*pz);
IkReal x129=((0.3)*rxp2_2);
IkReal x130=(gclwh14_10*rxp0_2);
IkReal x131=((0.03125)*rxp2_2);
IkReal x132=((2.0)*pp);
IkReal x133=(gclwh12_14*rxp1_2);
IkReal x134=((0.105625)*rxp1_2);
IkReal x135=((0.3)*rxp1_2);
IkReal x136=(gclwh9_0*r20);
IkReal x137=(gclwh14_14*rxp0_2);
IkReal x138=((0.001953125)*r21);
IkReal x139=((0.0625)*r20);
IkReal x140=(gclwh5_0*pz);
IkReal x141=((0.01875)*r20);
IkReal x142=(gclwh5_11*rxp2_2);
IkReal x143=((2.0)*gclwh7_8);
IkReal x144=((0.00390625)*r21);
IkReal x145=(gclwh11_13*rxp2_2);
IkReal x146=((2.0)*gclwh5_8);
IkReal x147=((0.001953125)*r20);
IkReal x148=((0.03125)*r22);
IkReal x149=((0.03125)*rxp0_2);
IkReal x150=((2.0)*gclwh13_8);
IkReal x151=((0.25)*gclwh13_15);
IkReal x152=((0.0109375)*r20);
IkReal x153=((2.0)*gclwh15_8);
IkReal x154=((0.5)*gclwh4_14);
IkReal x155=((0.25)*gclwh15_15);
IkReal x156=(gclwh8_10*rxp0_2);
IkReal x157=((2.0)*gclwh10_10);
IkReal x158=((0.015625)*r21);
IkReal x159=((0.125)*gclwh5_15);
IkReal x160=((0.0203125)*r21);
IkReal x161=((2.0)*gclwh9_8);
IkReal x162=((0.5)*gclwh12_14);
IkReal x163=((4.0)*gclwh14_10);
IkReal x164=((0.325)*rxp1_2);
IkReal x165=((0.009375)*r21);
IkReal x166=((0.1625)*rxp1_2);
IkReal x167=((0.5)*rxp1_2);
IkReal x168=((0.015625)*r20);
IkReal x169=(gclwh14_14*r20);
IkReal x170=(gclwh5_8*rxp2_2);
IkReal x171=(gclwh13_15*rxp1_2);
IkReal x172=(gclwh4_3*rxp2_2);
IkReal x173=((4.0)*gclwh10_10);
IkReal x174=((0.0078125)*r22);
IkReal x175=((1.0)*gclwh10_10);
IkReal x176=(gclwh15_1*rxp0_2);
IkReal x177=((0.5)*gclwh15_15);
IkReal x178=((4.0)*gclwh12_10);
IkReal x179=(gclwh11_0*rxp2_2);
IkReal x180=(gclwh14_3*rxp0_2);
IkReal x181=((0.5)*rxp0_2);
IkReal x182=((4.0)*gclwh8_10);
IkReal x183=((2.0)*gclwh11_8);
IkReal x184=(gclwh8_2*r20);
IkReal x185=((0.25)*rxp2_2);
IkReal x186=((0.25)*pz);
IkReal x187=(gclwh9_13*rxp0_2);
IkReal x188=((0.0203125)*r20);
IkReal x189=((0.0109375)*r21);
IkReal x190=((0.5)*gclwh13_15);
IkReal x191=((4.0)*gclwh5_8);
IkReal x192=(gclwh10_12*rxp2_2);
IkReal x193=((1.0)*gclwh11_8);
IkReal x194=((0.3)*rxp0_2);
IkReal x195=((4.0)*gclwh6_10);
IkReal x196=(gclwh6_12*rxp1_2);
IkReal x197=(gclwh4_2*rxp2_2);
IkReal x198=(gclwh13_11*rxp1_2);
IkReal x199=(gclwh15_15*r20);
IkReal x200=((0.5)*gclwh14_14);
IkReal x201=(gclwh4_14*rxp2_2);
IkReal x202=(gclwh5_0*rxp2_2);
IkReal x203=((0.0015625)*r21);
IkReal x204=((4.0)*gclwh15_8);
IkReal x205=((0.25)*gclwh12_14);
IkReal x206=((0.01015625)*r21);
IkReal x207=((0.009375)*r20);
IkReal x208=((0.0015625)*r20);
IkReal x209=((4.0)*gclwh7_8);
IkReal x210=((0.25)*gclwh5_15);
IkReal x211=((0.0078125)*r21);
IkReal x212=(gclwh7_13*rxp1_2);
IkReal x213=((0.03125)*x137);
IkReal x214=(gclwh6_5*x138);
IkReal x215=(gclwh4_14*x131);
IkReal x216=(gclwh10_5*x86);
IkReal x217=(gclwh12_14*x100);
IkReal x218=(gclwh8_5*x147);
IkReal x219=(gclwh14_10*x103);
IkReal x220=(gclwh4_10*x185);
IkReal x221=(gclwh8_10*x168);
IkReal x222=(gclwh6_10*x158);
IkReal x223=(gclwh12_10*x97);
IkReal x224=(gclwh10_10*x84);
IkReal x225=(gclwh9_8*x168);
IkReal x226=(gclwh15_8*x103);
IkReal x227=((0.25)*x170);
IkReal x228=(gclwh13_8*x97);
IkReal x229=(gclwh11_8*x84);
IkReal x230=(gclwh7_8*x158);
IkReal x231=(gclwh7_7*x138);
IkReal x232=(gclwh11_7*x86);
IkReal x233=(gclwh13_15*x100);
IkReal x234=(gclwh5_15*x131);
IkReal x235=((0.03125)*x94);
IkReal x236=(gclwh9_7*x147);
IkReal x237=(gclwh12_14*x138);
IkReal x238=(gclwh6_5*x100);
IkReal x239=(gclwh10_5*x131);
IkReal x240=(gclwh8_5*x149);
IkReal x241=(gclwh4_14*x86);
IkReal x242=(gclwh14_14*x147);
IkReal x243=(gclwh11_7*x131);
IkReal x244=(gclwh5_15*x86);
IkReal x245=(gclwh7_7*x100);
IkReal x246=(gclwh15_15*x147);
IkReal x247=(gclwh9_7*x149);
IkReal x248=(gclwh13_15*x138);
IkReal x249=(gclwh12_10*x167);
IkReal x250=(gclwh10_10*x148);
IkReal x251=(gclwh6_10*x115);
IkReal x252=((0.5)*x130);
IkReal x253=(gclwh8_10*x83);
IkReal x254=(gclwh4_10*x112);
IkReal x255=((0.0625)*x133);
IkReal x256=(gclwh9_8*x83);
IkReal x257=(gclwh15_8*x181);
IkReal x258=(gclwh5_8*x112);
IkReal x259=(gclwh7_8*x115);
IkReal x260=(gclwh11_8*x148);
IkReal x261=(gclwh13_8*x167);
IkReal x262=((0.0625)*x171);
IkReal x263=(gclwh14_10*x83);
IkReal x264=(gclwh4_10*x148);
IkReal x265=(gclwh6_10*x167);
IkReal x266=(gclwh10_10*x112);
IkReal x267=(gclwh12_10*x115);
IkReal x268=((0.5)*x156);
IkReal x269=(gclwh13_8*x115);
IkReal x270=(gclwh9_8*x181);
IkReal x271=(gclwh7_8*x167);
IkReal x272=(gclwh5_8*x148);
IkReal x273=(gclwh15_8*x83);
IkReal x274=(gclwh11_8*x112);
IkReal x275=((2.0)*x72);
IkReal x276=(r21*x73);
IkReal x277=((0.125)*gclwh10_5*x74);
IkReal x278=((0.125)*gclwh6_5*x88);
IkReal x279=((0.25)*gclwh8_5*x79);
IkReal x280=((0.125)*gclwh8_5*x105);
IkReal x281=((0.25)*gclwh6_5*x81);
IkReal x282=((0.25)*gclwh10_5*x80);
IkReal x283=(gclwh12_2*pz*x97);
IkReal x284=(x81*x82);
IkReal x285=(x77*x90);
IkReal x286=(gclwh6_2*pz*x88);
IkReal x287=(x157*x80);
IkReal x288=(gclwh10_2*pz*x74);
IkReal x289=((0.25)*pp*x172);
IkReal x290=(x121*x77);
IkReal x291=(gclwh14_3*pp*x103);
IkReal x292=(gclwh4_2*pz*x185);
IkReal x293=(x113*x79);
IkReal x294=(gclwh12_3*pp*x97);
IkReal x295=(x184*x77);
IkReal x296=(gclwh14_2*pz*x103);
IkReal x297=(x183*x80);
IkReal x298=(gclwh13_0*pz*x97);
IkReal x299=(gclwh15_1*pp*x103);
IkReal x300=(x143*x81);
IkReal x301=(x128*x88);
IkReal x302=(gclwh11_0*pz*x74);
IkReal x303=(x76*x77);
IkReal x304=(x123*x77);
IkReal x305=(x103*x104);
IkReal x306=(x136*x77);
IkReal x307=(x161*x79);
IkReal x308=(gclwh13_1*pp*x97);
IkReal x309=(x140*x185);
IkReal x310=((0.125)*gclwh11_7*x74);
IkReal x311=((0.125)*gclwh7_7*x88);
IkReal x312=((0.25)*gclwh9_7*x79);
IkReal x313=((0.125)*gclwh9_7*x105);
IkReal x314=((0.25)*gclwh11_7*x80);
IkReal x315=((0.25)*gclwh7_7*x81);
IkReal x316=(x80*x98);
IkReal x317=(x107*x79);
IkReal x318=((0.125)*gclwh12_14*x88);
IkReal x319=((0.125)*gclwh14_14*x105);
IkReal x320=((0.125)*gclwh4_14*x74);
IkReal x321=(x205*x81);
IkReal x322=(x151*x81);
IkReal x323=((0.125)*gclwh15_15*x105);
IkReal x324=(x159*x74);
IkReal x325=((0.125)*gclwh13_15*x88);
IkReal x326=(x155*x79);
IkReal x327=(x210*x80);
IkReal x328=(x82*x88);
IkReal x329=(x182*x79);
IkReal x330=(x157*x74);
IkReal x331=(x195*x81);
IkReal x332=(x173*x80);
IkReal x333=(x105*x113);
IkReal x334=(x209*x81);
IkReal x335=(x122*x80);
IkReal x336=(x105*x161);
IkReal x337=(x125*x79);
IkReal x338=(x143*x88);
IkReal x339=(x183*x74);
IkReal x340=((2.0)*gclwh14_10*x105);
IkReal x341=((2.0)*gclwh4_10*x74);
IkReal x342=(x178*x81);
IkReal x343=((2.0)*gclwh12_10*x88);
IkReal x344=(x163*x79);
IkReal x345=(x101*x80);
IkReal x346=(x150*x88);
IkReal x347=(x204*x79);
IkReal x348=(x191*x80);
IkReal x349=(x81*x89);
IkReal x350=(x105*x153);
IkReal x351=(x146*x74);
IkReal x352=((1.0)*r20*x73);
IkReal x353=(gclwh8_2*npx*x275);
IkReal x354=(gclwh6_2*npy*x275);
IkReal x355=(gclwh8_2*x105*x116);
IkReal x356=(gclwh10_2*npz*x275);
IkReal x357=(gclwh9_0*npx*x275);
IkReal x358=(gclwh9_0*x105*x116);
IkReal x359=(gclwh11_0*npz*x275);
IkReal x360=(gclwh7_0*npy*x275);
IkReal x361=((((0.0625)*x137))+(((0.0625)*x201)));
IkReal x362=((((0.0625)*x94))+(((0.0625)*gclwh5_15*rxp2_2)));
IkReal x363=(x238+x239);
IkReal x364=(x234+x235);
IkReal x365=(x213+x215);
IkReal x366=(x243+x245);
IkReal x367=(x361+(((-1.0)*x255)));
IkReal x368=(x362+(((-1.0)*x262)));
IkReal x369=(x307+x229+x228+x230);
IkReal x370=(x223+x222+x224+x293);
IkReal x371=(((x205*x88))+((gclwh12_14*x144))+((x200*x79))+((x154*x80)));
IkReal x372=(((x151*x88))+((x75*x80))+((gclwh13_15*x144))+((x177*x79)));
IkReal x373=(x318+x317+x316+x237);
IkReal x374=(x315+x314+x313+x236);
IkReal x375=(x325+x326+x327+x248);
IkReal x376=(x218+x282+x281+x280);
IkReal x377=(x300+x225+x227+x226+x297);
IkReal x378=(x219+x221+x220+x287+x284);
IkReal x379=(((x162*x81))+((gclwh4_14*x111))+(((0.00390625)*x169))+((x74*x98))+((x105*x107)));
IkReal x380=(((x190*x81))+((gclwh5_15*x111))+(((0.00390625)*x199))+((x210*x74))+((x105*x155)));
IkReal x381=(x376+x217);
IkReal x382=(x343+x344+x345+x267+x268);
IkReal x383=(x346+x347+x348+x269+x270);
IkReal x384=(x320+x321+x319+x242+x241);
IkReal x385=(x214+x216+x277+x278+x279);
IkReal x386=(x324+x322+x323+x246+x244);
IkReal x387=(x311+x310+x312+x232+x231);
IkReal x388=(x330+x328+x329+x250+x251+x249);
IkReal x389=(x336+x335+x334+x258+x256+x257);
IkReal x390=(x339+x338+x337+x259+x261+x260);
IkReal x391=(x333+x332+x331+x254+x252+x253);
IkReal x392=(x342+x340+x341+x265+x264+x266+x263);
IkReal x393=(x351+x350+x349+x274+x272+x273+x271);
IkReal x394=(x304+x302+x303+x301+x357+x298+x299);
IkReal x395=(x308+x309+x306+x305+x359+x358+x360);
IkReal x396=(x355+x354+x356+x292+x294+x295+x296);
IkReal x397=((((-1.0)*x379))+x371);
IkReal x398=(x372+(((-1.0)*x380)));
IkReal x399=(x353+x290+x291+x289+x288+x286+x285+x283);
op[0]=((-0.1625)+(((-1.0)*x365))+(((-1.0)*x376))+x385+x217);
op[1]=((((0.13125)*x127))+(((-1.0)*gclwh12_2*x166))+(((-0.13125)*x92))+(((-0.65)*gclwh10_2*x74))+(((-1.0)*x396))+(((-0.01015625)*x90))+((gclwh12_3*x134))+(((-1.0)*gclwh8_10*x105))+(((-0.01015625)*x121))+((gclwh8_2*x114))+(((-0.105625)*x180))+(((-1.0)*x378))+((gclwh14_2*x110))+(((-0.105625)*x172))+(((-1.3)*gclwh8_2*x79))+x370+x399+(((1.3)*gclwh10_2*x80))+((gclwh6_10*x88))+((gclwh10_10*x74))+(((0.1625)*x197))+(((-0.65)*gclwh6_2*x88))+(((0.65)*gclwh8_2*x105))+(((1.3)*gclwh6_2*x81))+(((0.13125)*x119)));
op[2]=((((-0.175)*x92))+(((-1.0)*x391))+(((-1.2)*gclwh8_12*x79))+(((-0.009375)*x91))+(((1.2)*gclwh6_12*x81))+(((0.6)*gclwh8_12*x105))+((gclwh8_12*x207))+x388+(((-0.6)*gclwh6_12*x88))+(((0.175)*x119))+(((1.2)*gclwh10_12*x80))+(((0.175)*x127))+(((-0.6)*gclwh10_12*x74))+(((-1.0)*gclwh6_12*x165)));
op[3]=x367;
op[4]=((-0.0125)+x385+x365+(((-1.0)*x381)));
op[5]=((((-0.05)*gclwh10_2*x74))+(((-1.0)*x175*x74))+((gclwh12_3*x120))+(((-1.0)*x396))+(((0.1)*gclwh6_2*x81))+(((-1.0)*x370))+(((-0.000625)*x180))+(((0.0125)*x197))+(((-0.000625)*x172))+(((0.04375)*x92))+x378+x399+((gclwh8_10*x105))+(((-0.05)*gclwh6_2*x88))+(((-0.1)*gclwh8_2*x79))+(((0.0125)*x117))+(((-0.0125)*gclwh12_2*rxp1_2))+(((-0.04375)*x127))+(((0.00078125)*x184))+(((-1.0)*x88*x95))+(((-0.04375)*x119))+(((0.1)*gclwh10_2*x80))+(((-0.00078125)*x90))+(((-0.00078125)*x121))+(((0.05)*gclwh8_2*x105)));
op[6]=((((-1.3)*gclwh9_0*x79))+(((-0.1625)*x106))+(((-1.0)*x395))+(((-0.65)*gclwh11_0*x74))+(((-0.01015625)*x123))+(((1.3)*gclwh7_0*x81))+(((1.3)*gclwh11_0*x80))+(((-1.0)*x377))+((gclwh13_1*x134))+((gclwh15_0*x110))+(((-0.105625)*x176))+((gclwh7_8*x88))+(((0.65)*gclwh9_0*x105))+(((0.19375)*x102))+(((-1.0)*gclwh9_8*x105))+x369+x394+(((0.1625)*x202))+(((-0.01015625)*x76))+((gclwh11_8*x74))+(((0.19375)*x142))+(((-0.19375)*x198))+((gclwh9_0*x114))+(((-0.65)*gclwh7_0*x88)));
op[7]=((-0.1625)+(((-1.0)*x374))+x387+x364+(((-1.0)*x233)));
op[8]=x368;
op[9]=((((-0.175)*x102))+(((-1.0)*x390))+(((1.2)*gclwh11_13*x80))+(((1.2)*gclwh7_13*x81))+(((-0.175)*x142))+(((-1.0)*gclwh7_13*x165))+x389+(((-0.6)*gclwh7_13*x88))+(((0.175)*x198))+((gclwh9_13*x207))+(((0.6)*gclwh9_13*x105))+(((-0.6)*gclwh11_13*x74))+(((-1.2)*gclwh9_13*x79))+(((-0.009375)*x126)));
op[10]=((((0.00078125)*x136))+(((0.1)*gclwh7_0*x81))+(((-1.0)*x395))+(((-1.0)*x369))+(((-1.0)*gclwh7_8*x88))+(((0.05)*gclwh9_0*x105))+((gclwh13_1*x120))+((gclwh9_8*x105))+(((-0.00078125)*x76))+(((-0.000625)*x176))+(((0.0125)*x202))+(((-0.1)*gclwh9_0*x79))+x377+x394+(((-0.05)*gclwh7_0*x88))+(((0.01875)*x102))+(((0.1)*gclwh11_0*x80))+(((-0.05)*gclwh11_0*x74))+(((-0.0125)*x106))+(((-0.01875)*x198))+(((0.0125)*gclwh15_0*rxp0_2))+(((-1.0)*x193*x74))+(((0.01875)*x142))+(((-0.00078125)*x123)));
op[11]=((-0.0125)+(((-1.0)*x364))+(((-1.0)*x374))+x387+x233);
op[12]=((((-1.0)*x373))+x384+x363+(((-1.0)*x240)));
op[13]=((0.406875)+(((2.0)*gclwh12_10*npy*pz))+(((0.0066015625)*gclwh14_3*r20))+(((-1.0)*gclwh12_2*pp*pz*r21))+(((2.0)*gclwh12_2*npy*(pz*pz)))+(((-0.65)*gclwh14_2*pp*r20))+((gclwh14_2*pp*pz*r20))+(((2.0)*gclwh3_2*npy*(pz*pz)))+(((2.0)*gclwh4_3*npz*pp*pz))+(((-0.01015625)*gclwh1_2*r20))+(((-0.1625)*gclwh10_2*rxp2_2))+(((2.0)*gclwh1_2*npx*(pz*pz)))+(((-1.3)*gclwh12_2*npy*pz))+(((-0.525)*gclwh4_9*pp*r22))+(((-0.01015625)*gclwh14_2*r20))+((gclwh12_3*r21*(pp*pp)))+(((-1.3)*gclwh1_2*npx*pz))+(((-1.0)*gclwh1_2*pp*pz*r20))+(((-2.0)*gclwh14_2*npx*(pz*pz)))+(((0.406875)*gclwh4_3*pp*r22))+(((-0.01015625)*gclwh3_2*r21))+(((-0.845)*gclwh4_3*npz*pz))+(((-0.25)*gclwh8_10*rxp0_2))+(((0.25)*gclwh6_2*pz*rxp1_2))+(((0.015625)*gclwh3_2*pz*r21))+(((-0.008203125)*gclwh4_9*r22))+(((0.845)*gclwh1_3*npx*pz))+(((-0.525)*gclwh14_9*pp*r20))+(((-1.05)*gclwh12_9*npy*pz))+(((1.05)*gclwh14_9*npx*pz))+(((-0.1625)*gclwh6_2*rxp1_2))+(((0.008203125)*gclwh12_9*r21))+(((0.65)*gclwh1_2*pp*r20))+(((1.3)*gclwh4_2*npz*pz))+(((0.01015625)*gclwh12_2*r21))+((gclwh3_3*r21*(pp*pp)))+(((0.015625)*gclwh14_10*r20))+(((1.3)*gclwh14_2*npx*pz))+((gclwh1_3*r20*(pp*pp)))+(((-0.438125)*gclwh1_3*pp*r20))+(((-0.0066015625)*gclwh12_3*r21))+(((0.525)*gclwh12_9*pp*r21))+(((0.1625)*gclwh8_2*rxp0_2))+(((-1.3)*gclwh3_2*npy*pz))+((gclwh14_10*pp*r20))+(((2.0)*gclwh14_3*npx*pp*pz))+(((-2.0)*gclwh12_3*npy*pp*pz))+(((0.015625)*gclwh14_2*pz*r20))+(((-0.65)*gclwh4_2*pp*r22))+(((0.0066015625)*gclwh4_3*r22))+(((-0.25)*gclwh8_2*pz*rxp0_2))+(((-0.845)*gclwh14_3*npx*pz))+(((0.406875)*gclwh14_3*pp*r20))+(((-1.0)*gclwh4_3*r22*(pp*pp)))+(((0.015625)*gclwh1_2*pz*r20))+(((-0.01015625)*gclwh4_2*r22))+(((-1.0)*gclwh3_2*pp*pz*r21))+(((-0.008203125)*gclwh14_9*r20))+(((-0.25)*pz))+(((0.65)*gclwh12_2*pp*r21))+(((0.25)*gclwh10_2*pz*rxp2_2))+(((-0.015625)*gclwh12_10*r21))+(((-1.0)*gclwh12_10*pp*r21))+(((-0.406875)*gclwh12_3*pp*r21))+(((0.015625)*gclwh4_2*pz*r22))+(((0.0066015625)*gclwh1_3*r20))+(((0.015625)*gclwh4_10*r22))+(((-1.0)*gclwh14_3*r20*(pp*pp)))+(((-0.438125)*gclwh3_3*pp*r21))+(((-2.0)*gclwh1_3*npx*pp*pz))+(((0.25)*gclwh6_10*rxp1_2))+((gclwh4_10*pp*r22))+(((1.05)*gclwh4_9*npz*pz))+(((0.0066015625)*gclwh3_3*r21))+(((0.845)*gclwh3_3*npy*pz))+(((-2.0)*gclwh3_3*npy*pp*pz))+(((0.65)*gclwh3_2*pp*r21))+(((-2.0)*gclwh14_10*npx*pz))+(((0.845)*gclwh12_3*npy*pz))+(((-0.015625)*gclwh12_2*pz*r21))+((gclwh4_2*pp*pz*r22))+(((-2.0)*gclwh4_2*npz*(pz*pz)))+(((0.25)*gclwh10_10*rxp2_2))+(((-2.0)*gclwh4_10*npz*pz)));
op[14]=((0.03375)+(((-1.0)*gclwh14_9*x152))+(((-0.7)*gclwh4_9*x74))+(((0.15)*x96))+(((-1.0)*gclwh4_9*x85))+x392+(((-1.4)*gclwh12_9*x81))+(((0.7)*gclwh12_9*x88))+(((-1.0)*x382))+((gclwh12_9*x189))+(((1.4)*gclwh4_9*x80))+(((-0.7)*gclwh14_9*x105))+(((-0.15)*x192))+(((-0.15)*x196))+(((1.4)*gclwh14_9*x79)));
op[15]=x397;
op[16]=(x373+x363+(((-1.0)*x384))+(((-1.0)*x240)));
op[17]=((0.013125)+(((-0.005)*gclwh4_3*npz*pz))+(((-0.1)*gclwh1_2*npx*pz))+(((-1.0)*gclwh12_2*pp*pz*r21))+(((2.0)*gclwh12_2*npy*(pz*pz)))+(((0.005)*gclwh12_3*npy*pz))+((gclwh14_2*pp*pz*r20))+(((0.00078125)*gclwh12_2*r21))+(((2.0)*gclwh3_2*npy*(pz*pz)))+(((-0.015625)*gclwh4_10*r22))+(((2.0)*gclwh4_3*npz*pp*pz))+(((-0.175)*gclwh12_9*pp*r21))+(((-3.90625e-5)*gclwh12_3*r21))+(((2.0)*gclwh1_2*npx*(pz*pz)))+(((-0.35)*gclwh14_9*npx*pz))+(((-0.25)*gclwh10_10*rxp2_2))+((gclwh12_3*r21*(pp*pp)))+(((0.35)*gclwh12_9*npy*pz))+(((-0.018125)*gclwh1_3*pp*r20))+(((-0.015625)*gclwh14_10*r20))+(((0.015625)*gclwh12_10*r21))+(((-1.0)*gclwh1_2*pp*pz*r20))+(((2.0)*gclwh14_10*npx*pz))+(((-0.00078125)*gclwh14_2*r20))+(((0.013125)*gclwh12_3*pp*r21))+(((-2.0)*gclwh14_2*npx*(pz*pz)))+(((-0.00078125)*gclwh3_2*r21))+(((-0.013125)*gclwh14_3*pp*r20))+(((0.05)*gclwh1_2*pp*r20))+(((0.002734375)*gclwh14_9*r20))+(((-0.35)*gclwh4_9*npz*pz))+(((-0.0125)*gclwh6_2*rxp1_2))+(((-0.05)*gclwh14_2*pp*r20))+(((-0.018125)*gclwh3_3*pp*r21))+(((0.0125)*gclwh8_2*rxp0_2))+(((-1.0)*gclwh14_10*pp*r20))+(((-0.1)*gclwh3_2*npy*pz))+(((-0.00078125)*gclwh4_2*r22))+(((0.25)*gclwh6_2*pz*rxp1_2))+(((0.015625)*gclwh3_2*pz*r21))+(((0.05)*gclwh3_2*pp*r21))+(((-2.0)*gclwh12_10*npy*pz))+((gclwh12_10*pp*r21))+(((-0.1)*gclwh12_2*npy*pz))+((gclwh3_3*r21*(pp*pp)))+((gclwh1_3*r20*(pp*pp)))+(((3.90625e-5)*gclwh14_3*r20))+(((3.90625e-5)*gclwh1_3*r20))+(((-0.0125)*gclwh10_2*rxp2_2))+(((2.0)*gclwh14_3*npx*pp*pz))+(((-0.25)*gclwh6_10*rxp1_2))+(((-0.002734375)*gclwh12_9*r21))+(((-2.0)*gclwh12_3*npy*pp*pz))+(((0.015625)*gclwh14_2*pz*r20))+(((0.175)*gclwh4_9*pp*r22))+(((-0.25)*gclwh8_2*pz*rxp0_2))+(((-1.0)*gclwh4_3*r22*(pp*pp)))+(((-0.05)*gclwh4_2*pp*r22))+(((0.015625)*gclwh1_2*pz*r20))+(((0.05)*gclwh12_2*pp*r21))+(((-1.0)*gclwh3_2*pp*pz*r21))+(((0.002734375)*gclwh4_9*r22))+(((-0.25)*pz))+(((0.25)*gclwh10_2*pz*rxp2_2))+(((0.005)*gclwh3_3*npy*pz))+(((3.90625e-5)*gclwh3_3*r21))+(((0.005)*gclwh1_3*npx*pz))+(((-0.013125)*gclwh4_3*pp*r22))+(((0.015625)*gclwh4_2*pz*r22))+(((-0.00078125)*gclwh1_2*r20))+(((-0.005)*gclwh14_3*npx*pz))+(((-1.0)*gclwh14_3*r20*(pp*pp)))+(((0.1)*gclwh14_2*npx*pz))+(((-2.0)*gclwh1_3*npx*pp*pz))+(((0.175)*gclwh14_9*pp*r20))+(((-2.0)*gclwh3_3*npy*pp*pz))+(((0.25)*gclwh8_10*rxp0_2))+(((0.1)*gclwh4_2*npz*pz))+(((-0.015625)*gclwh12_2*pz*r21))+((gclwh4_2*pp*pz*r22))+(((-2.0)*gclwh4_2*npz*(pz*pz)))+(((2.0)*gclwh4_10*npz*pz))+(((-1.0)*gclwh4_10*pp*r22))+(((3.90625e-5)*gclwh4_3*r22)));
op[18]=((0.406875)+(((-1.0)*gclwh13_8*x158))+((gclwh15_0*r20*x77))+(((1.3)*gclwh15_0*x79))+(((-1.0)*gclwh2_1*x78))+((gclwh15_8*x105))+(((-1.0)*gclwh0_1*x352))+((gclwh15_1*x132*x79))+(((0.438125)*gclwh0_1*x105))+((gclwh13_0*x206))+(((-0.65)*pp*x99))+(((0.438125)*gclwh2_1*x88))+((x150*x81))+(((-0.012109375)*gclwh15_11*r20))+(((-1.0)*gclwh0_1*x124))+(((-1.0)*gclwh2_0*r21*x77))+((gclwh11_8*x185))+(((-0.845)*gclwh2_1*x81))+(((-0.775)*gclwh15_11*x105))+((gclwh15_8*x168))+(((-1.0)*gclwh2_1*x276))+(((-0.1625)*x179))+(((-1.0)*gclwh15_0*npx*x275))+((gclwh15_1*x124))+((pp*pz*x99))+(((-1.0)*x77*x99))+(((-1.0)*gclwh15_0*x114))+((x179*x186))+(((-1.0)*gclwh0_0*npx*x275))+(((-0.012109375)*gclwh5_11*r22))+((gclwh7_8*x97))+(((-0.775)*gclwh5_11*x74))+((gclwh13_1*x276))+(((0.845)*gclwh13_1*x81))+(((-1.3)*gclwh13_0*x81))+(((1.3)*gclwh0_0*x79))+(((-0.01015625)*x108))+(((0.775)*gclwh13_11*x88))+x186+(((-1.0)*gclwh9_8*x103))+(((-1.0)*gclwh15_1*x352))+((gclwh5_8*x74))+((x140*x74))+(((1.55)*gclwh15_11*x79))+(((-1.0)*gclwh7_0*x166))+(((-0.406875)*gclwh13_1*x88))+(((0.01015625)*x99))+((gclwh0_1*x132*x79))+((x108*x77))+((gclwh2_0*pz*x88))+((gclwh2_0*x206))+(((-1.0)*gclwh13_0*r21*x77))+((gclwh2_1*x132*x81))+(((1.3)*gclwh2_0*x81))+(((1.55)*gclwh5_11*x80))+(((1.3)*gclwh5_0*x80))+(((-0.65)*gclwh5_0*x74))+(((-0.65)*gclwh15_0*x105))+((gclwh5_8*x84))+(((-0.845)*gclwh0_1*x79))+(((-1.0)*gclwh13_1*x78))+(((-1.55)*gclwh13_11*x81))+(((-1.0)*gclwh13_1*x132*x81))+(((-0.845)*gclwh15_1*x79))+(((0.65)*gclwh13_0*x88))+((gclwh9_0*x110))+(((-1.0)*gclwh9_0*pz*x103))+((x104*x105))+(((-1.0)*gclwh5_0*npz*x275))+(((-1.0)*gclwh2_0*npy*x275))+((x128*x97))+(((-1.0)*x153*x79))+(((0.012109375)*gclwh13_11*r21))+(((-1.0)*x146*x80))+(((-1.0)*gclwh13_0*x116*x88))+(((0.406875)*gclwh15_1*x105))+(((-0.65)*gclwh2_0*x88))+((gclwh13_0*npy*x275))+(((-1.0)*gclwh13_8*x88)));
op[19]=(x375+x366+(((-1.0)*x386))+(((-1.0)*x247)));
op[20]=x398;
op[21]=((-0.03375)+(((-0.15)*x212))+(((-0.15)*x145))+(((-1.4)*gclwh5_11*x80))+(((-1.0)*x393))+((gclwh5_11*x85))+(((0.15)*x187))+(((0.7)*gclwh15_11*x105))+x383+(((-1.4)*gclwh15_11*x79))+((gclwh15_11*x152))+(((-1.0)*gclwh13_11*x189))+(((-0.7)*gclwh13_11*x88))+(((1.4)*gclwh13_11*x81))+(((0.7)*gclwh5_11*x74)));
op[22]=((0.013125)+(((2.0)*gclwh2_1*npy*pp*pz))+((gclwh15_0*pp*pz*r20))+(((-0.075)*gclwh5_11*pp*r22))+((gclwh13_1*r21*(pp*pp)))+(((0.15)*gclwh15_11*npx*pz))+((gclwh13_8*pp*r21))+(((2.0)*gclwh0_1*npx*pp*pz))+(((0.1)*gclwh15_0*npx*pz))+(((-3.90625e-5)*gclwh0_1*r20))+(((0.005)*gclwh13_1*npy*pz))+(((-0.05)*gclwh2_0*pp*r21))+(((-1.0)*gclwh2_1*r21*(pp*pp)))+(((-3.90625e-5)*gclwh2_1*r21))+(((0.001171875)*gclwh13_11*r21))+((gclwh5_0*pp*pz*r22))+((gclwh2_0*pp*pz*r21))+((gclwh0_0*pp*pz*r20))+(((0.0125)*gclwh9_0*rxp0_2))+(((-0.05)*gclwh15_0*pp*r20))+(((-1.0)*gclwh15_8*pp*r20))+(((0.00078125)*gclwh13_0*r21))+(((-0.00078125)*gclwh5_0*r22))+(((2.0)*gclwh13_0*npy*(pz*pz)))+(((0.013125)*gclwh13_1*pp*r21))+(((0.00078125)*gclwh2_0*r21))+(((0.05)*gclwh13_0*pp*r21))+(((-0.015625)*gclwh0_0*pz*r20))+(((-0.25)*gclwh11_8*rxp2_2))+(((-3.90625e-5)*gclwh13_1*r21))+(((0.25)*gclwh11_0*pz*rxp2_2))+(((-0.15)*gclwh13_11*npy*pz))+(((-2.0)*gclwh13_8*npy*pz))+(((-2.0)*gclwh2_0*npy*(pz*pz)))+(((-0.25)*gclwh9_0*pz*rxp0_2))+(((0.25)*pz))+(((0.00078125)*gclwh0_0*r20))+(((-0.00078125)*gclwh15_0*r20))+(((-0.0125)*gclwh11_0*rxp2_2))+(((-0.015625)*gclwh5_8*r22))+(((0.1)*gclwh5_0*npz*pz))+(((-0.005)*gclwh15_1*npx*pz))+(((-2.0)*gclwh15_0*npx*(pz*pz)))+(((2.0)*gclwh5_8*npz*pz))+(((-0.001171875)*gclwh5_11*r22))+(((3.90625e-5)*gclwh15_1*r20))+(((-0.013125)*gclwh15_1*pp*r20))+(((-0.075)*gclwh15_11*pp*r20))+(((0.018125)*gclwh0_1*pp*r20))+(((-0.001171875)*gclwh15_11*r20))+(((-0.1)*gclwh13_0*npy*pz))+(((-2.0)*gclwh5_0*npz*(pz*pz)))+(((0.25)*gclwh7_0*pz*rxp1_2))+(((0.015625)*gclwh13_8*r21))+(((-2.0)*gclwh0_0*npx*(pz*pz)))+(((0.15)*gclwh5_11*npz*pz))+(((0.1)*gclwh2_0*npy*pz))+(((-1.0)*gclwh13_0*pp*pz*r21))+(((-0.0125)*gclwh7_0*rxp1_2))+(((-0.015625)*gclwh13_0*pz*r21))+(((-2.0)*gclwh13_1*npy*pp*pz))+(((-0.015625)*gclwh2_0*pz*r21))+(((-0.015625)*gclwh15_8*r20))+(((0.018125)*gclwh2_1*pp*r21))+(((0.015625)*gclwh5_0*pz*r22))+(((0.25)*gclwh9_8*rxp0_2))+(((-0.005)*gclwh0_1*npx*pz))+(((0.1)*gclwh0_0*npx*pz))+(((-0.005)*gclwh2_1*npy*pz))+(((-0.05)*gclwh5_0*pp*r22))+(((0.075)*gclwh13_11*pp*r21))+(((-1.0)*gclwh15_1*r20*(pp*pp)))+(((-1.0)*gclwh5_8*pp*r22))+(((-0.25)*gclwh7_8*rxp1_2))+(((-0.05)*gclwh0_0*pp*r20))+(((2.0)*gclwh15_1*npx*pp*pz))+(((-1.0)*gclwh0_1*r20*(pp*pp)))+(((0.015625)*gclwh15_0*pz*r20))+(((2.0)*gclwh15_8*npx*pz)));
op[23]=((((-1.0)*x375))+x386+x366+(((-1.0)*x247)));
op[24]=((((-1.0)*x391))+(((-2.6)*gclwh8_12*x79))+(((-1.3)*gclwh6_12*x88))+(((1.3)*gclwh8_12*x105))+(((2.6)*gclwh10_12*x80))+(((-1.3)*gclwh10_12*x74))+x388+((gclwh8_12*x188))+(((-0.0203125)*x91))+(((2.6)*gclwh6_12*x81))+(((-1.0)*gclwh6_12*x160)));
op[25]=x367;
op[26]=((0.3)+(((0.125)*x137))+(((-0.125)*x133))+(((0.125)*x201)));
op[27]=((((-1.0)*gclwh4_2*x129))+(((2.4)*gclwh8_2*x79))+(((-1.0)*gclwh12_10*x109))+(((-2.4)*gclwh6_2*x81))+(((-1.0)*x173*x74))+((gclwh6_2*x93))+(((1.2)*gclwh10_2*x74))+(((-1.0)*gclwh6_10*x118))+((gclwh12_2*x135))+(((-1.0)*gclwh10_10*x87))+(((-2.4)*gclwh10_2*x80))+((x105*x182))+x130+(((8.0)*gclwh6_10*x81))+(((-1.2)*gclwh8_2*x105))+(((1.2)*gclwh6_2*x88))+((gclwh4_10*rxp2_2))+(((-1.0)*x195*x88))+(((8.0)*gclwh10_10*x80))+((gclwh8_10*x139))+(((-8.0)*gclwh8_10*x79))+(((-0.3)*x117))+(((-1.0)*gclwh8_2*x141))+(((0.01875)*x90)));
op[28]=((((-0.1)*gclwh6_12*x88))+(((0.2)*gclwh6_12*x81))+(((-0.1)*gclwh10_12*x74))+(((0.1)*gclwh8_12*x105))+(((-0.2)*gclwh8_12*x79))+(((-1.0)*gclwh6_12*x203))+((gclwh8_12*x208))+(((-0.0015625)*x91))+x391+(((-1.0)*x388))+(((0.2)*gclwh10_12*x80)));
op[29]=((((-1.0)*x361))+x255);
op[30]=x368;
op[31]=((((2.6)*gclwh7_13*x81))+(((-1.0)*x390))+(((-1.3)*gclwh7_13*x88))+(((-0.0203125)*x126))+(((-1.0)*gclwh7_13*x160))+(((2.6)*gclwh11_13*x80))+x389+(((-1.3)*gclwh11_13*x74))+(((1.3)*gclwh9_13*x105))+(((-2.6)*gclwh9_13*x79))+((gclwh9_13*x188)));
op[32]=((((-8.0)*gclwh9_8*x79))+(((8.0)*gclwh7_8*x81))+(((1.2)*gclwh11_0*x74))+(((-1.0)*x122*x74))+((gclwh7_0*x93))+((gclwh15_8*rxp0_2))+(((-1.0)*gclwh13_8*x109))+(((-0.01875)*x136))+(((0.3)*x106))+(((-1.0)*gclwh5_0*x129))+(((1.2)*gclwh7_0*x88))+x170+(((-1.0)*gclwh15_0*x194))+(((8.0)*gclwh11_8*x80))+((gclwh9_8*x139))+(((0.01875)*x76))+((x105*x125))+(((-2.4)*gclwh7_0*x81))+(((-1.0)*gclwh11_8*x87))+(((2.4)*gclwh9_0*x79))+(((-1.2)*gclwh9_0*x105))+(((-1.0)*x209*x88))+(((-2.4)*gclwh11_0*x80))+(((-1.0)*gclwh7_8*x118)));
op[33]=((0.3)+(((-1.0)*rxp2_2*x159))+(((-0.125)*x94))+(((0.125)*x171)));
op[34]=((((-1.0)*x362))+x262);
op[35]=((((0.1)*gclwh9_13*x105))+(((0.2)*gclwh11_13*x80))+(((-0.1)*gclwh7_13*x88))+(((-0.0015625)*x126))+(((-1.0)*gclwh7_13*x203))+(((-0.2)*gclwh9_13*x79))+(((0.2)*gclwh7_13*x81))+x390+((gclwh9_13*x208))+(((-1.0)*x389))+(((-0.1)*gclwh11_13*x74)));
op[36]=((-0.87625)+x392+(((0.325)*x96))+(((-1.0)*x382))+(((-0.325)*x192))+(((-1.0)*gclwh6_12*x164)));
op[37]=x397;
op[38]=(((x162*x88))+(((-0.0078125)*x169))+(((-1.0)*x105*x200))+((gclwh4_14*x80))+((gclwh12_14*x211))+(((-1.0)*gclwh4_14*x174))+(((-1.0)*gclwh12_14*x81))+((gclwh14_14*x79))+(((-1.0)*x154*x74)));
op[39]=((0.1925)+(((-1.2)*gclwh3_2*x88))+(((-1.0)*x105*x163))+((x178*x88))+(((2.4)*gclwh1_2*x79))+((gclwh6_2*x135))+(((1.2)*gclwh14_2*x105))+(((-1.0)*gclwh12_2*x93))+(((0.01875)*gclwh4_2*r22))+(((-1.0)*gclwh14_10*x139))+((gclwh3_2*x93))+x156+(((-1.0)*rxp2_2*x175))+(((-1.0)*gclwh4_10*x87))+((gclwh14_2*x141))+((gclwh12_10*x118))+(((2.4)*gclwh12_2*x81))+(((-1.2)*gclwh12_2*x88))+(((1.2)*gclwh4_2*x74))+(((-1.0)*x101*x74))+(((-8.0)*gclwh12_10*x81))+(((8.0)*gclwh4_10*x80))+(((2.4)*gclwh3_2*x81))+(((8.0)*gclwh14_10*x79))+(((-1.2)*gclwh1_2*x105))+(((-1.0)*rxp1_2*x95))+(((-2.4)*gclwh4_2*x80))+(((-1.0)*gclwh8_2*x194))+(((-2.4)*gclwh14_2*x79))+((gclwh10_2*x129))+((gclwh1_2*x141)));
op[40]=((0.03625)+(((-1.0)*x392))+(((0.025)*x96))+x382+(((-0.025)*x196))+(((-0.025)*x192)));
op[41]=((((-1.0)*x371))+x379);
op[42]=x398;
op[43]=((0.87625)+(((-0.325)*x145))+(((-1.0)*x393))+(((-1.0)*gclwh7_13*x164))+x383+(((0.325)*x187)));
op[44]=((0.1925)+(((-1.0)*gclwh7_8*x109))+(((8.0)*gclwh5_8*x80))+((gclwh7_0*x135))+((gclwh11_0*x129))+(((-1.0)*x191*x74))+(((8.0)*gclwh15_8*x79))+(((-2.4)*gclwh5_0*x80))+(((-1.0)*x105*x204))+(((1.2)*gclwh5_0*x74))+(((1.2)*gclwh2_0*x88))+(((-1.0)*gclwh9_0*x194))+(((2.4)*gclwh13_0*x81))+(((1.2)*gclwh15_0*x105))+(((-2.4)*gclwh2_0*x81))+(((-1.2)*gclwh13_0*x88))+((x88*x89))+(((-1.0)*rxp2_2*x193))+(((0.01875)*x108))+((gclwh15_0*x141))+(((-0.01875)*x99))+(((-1.0)*gclwh15_8*x139))+(((-2.4)*gclwh15_0*x79))+((gclwh9_8*rxp0_2))+(((-2.4)*gclwh0_0*x79))+(((-1.0)*gclwh5_8*x87))+((gclwh13_8*x118))+(((-1.0)*gclwh2_0*x93))+(((1.2)*pp*x99))+(((-8.0)*gclwh13_8*x81))+(((-1.0)*gclwh13_0*x93)));
op[45]=((((0.0078125)*x199))+(((-1.0)*gclwh13_15*x211))+(((-1.0)*gclwh5_15*x80))+((gclwh13_15*x81))+((x105*x177))+(((-1.0)*x190*x88))+(((-1.0)*gclwh15_15*x79))+((gclwh5_15*x174))+((x74*x75)));
op[46]=((((-1.0)*x372))+x380);
op[47]=((-0.03625)+(((-0.025)*x212))+(((0.025)*x187))+x393+(((-1.0)*x383))+(((-0.025)*x145)));
op[48]=((0.1625)+x385+x365+(((-1.0)*x381)));
IkReal x400=pz*pz;
IkReal x401=pp*pp;
IkReal x402=((0.015625)*r22);
IkReal x403=(gclwh11_0*pz);
IkReal x404=(pp*r22);
IkReal x405=(npy*pz);
IkReal x406=((2.0)*gclwh6_10);
IkReal x407=((0.00078125)*r20);
IkReal x408=((0.03125)*r20);
IkReal x409=((0.0109375)*r22);
IkReal x410=((0.001953125)*r22);
IkReal x411=(gclwh12_9*rxp1_2);
IkReal x412=((0.0625)*rxp0_2);
IkReal x413=((0.15)*rxp0_2);
IkReal x414=((0.25)*rxp1_2);
IkReal x415=((0.25)*gclwh4_14);
IkReal x416=((0.015625)*pz);
IkReal x417=(gclwh0_0*r20);
IkReal x418=((0.03125)*rxp1_2);
IkReal x419=(gclwh15_11*rxp0_2);
IkReal x420=((0.25)*rxp0_2);
IkReal x421=(gclwh15_0*pz);
IkReal x422=(pp*r20);
IkReal x423=(gclwh5_0*npz);
IkReal x424=(gclwh9_0*npx);
IkReal x425=((0.25)*pz);
IkReal x426=(gclwh14_14*npx);
IkReal x427=((0.1625)*rxp0_2);
IkReal x428=((0.00390625)*r22);
IkReal x429=((0.5)*rxp2_2);
IkReal x430=((2.0)*gclwh8_10);
IkReal x431=(gclwh7_8*r21);
IkReal x432=(gclwh13_0*pz);
IkReal x433=(gclwh2_1*pp);
IkReal x434=(gclwh4_9*rxp2_2);
IkReal x435=((0.000625)*rxp1_2);
IkReal x436=(gclwh6_2*r21);
IkReal x437=(gclwh7_0*r21);
IkReal x438=((0.009375)*r22);
IkReal x439=(gclwh14_9*rxp0_2);
IkReal x440=(pp*pz);
IkReal x441=(gclwh9_0*pz);
IkReal x442=(gclwh13_0*rxp1_2);
IkReal x443=((0.03125)*rxp2_2);
IkReal x444=((0.00078125)*r22);
IkReal x445=((0.01015625)*r20);
IkReal x446=((0.0625)*rxp1_2);
IkReal x447=((0.105625)*rxp1_2);
IkReal x448=(gclwh13_15*r21);
IkReal x449=(gclwh10_2*npz);
IkReal x450=(gclwh5_0*pz);
IkReal x451=(gclwh5_11*rxp2_2);
IkReal x452=(npz*pz);
IkReal x453=(pp*r21);
IkReal x454=(gclwh12_14*r21);
IkReal x455=((2.0)*gclwh5_8);
IkReal x456=((0.0125)*rxp0_2);
IkReal x457=((0.001953125)*r20);
IkReal x458=((0.05)*pp);
IkReal x459=(gclwh8_2*pz);
IkReal x460=((0.03125)*r22);
IkReal x461=((0.03125)*rxp0_2);
IkReal x462=((2.0)*gclwh13_8);
IkReal x463=(npx*pz);
IkReal x464=((0.25)*pp);
IkReal x465=((0.0109375)*r20);
IkReal x466=((0.0125)*rxp1_2);
IkReal x467=((2.0)*gclwh15_8);
IkReal x468=((0.5)*rxp0_2);
IkReal x469=((2.0)*gclwh10_10);
IkReal x470=((0.015625)*r21);
IkReal x471=((0.1)*pz);
IkReal x472=((2.0)*gclwh9_8);
IkReal x473=((3.90625e-5)*r20);
IkReal x474=((0.03125)*r21);
IkReal x475=((0.001953125)*r21);
IkReal x476=((0.009375)*r21);
IkReal x477=((0.15)*rxp2_2);
IkReal x478=((0.5)*rxp1_2);
IkReal x479=((0.015625)*r20);
IkReal x480=((3.90625e-5)*r21);
IkReal x481=(gclwh4_3*rxp2_2);
IkReal x482=(gclwh15_1*rxp0_2);
IkReal x483=((0.1)*npx);
IkReal x484=(gclwh2_0*r21);
IkReal x485=(gclwh14_3*rxp0_2);
IkReal x486=((2.0)*pp);
IkReal x487=((2.0)*gclwh11_8);
IkReal x488=(gclwh5_0*rxp2_2);
IkReal x489=((0.25)*rxp2_2);
IkReal x490=(gclwh10_2*pz);
IkReal x491=((0.00390625)*r20);
IkReal x492=((0.0109375)*r21);
IkReal x493=((0.15)*rxp1_2);
IkReal x494=(gclwh4_2*rxp2_2);
IkReal x495=(gclwh13_11*rxp1_2);
IkReal x496=((0.0625)*rxp2_2);
IkReal x497=(gclwh13_0*r21);
IkReal x498=((0.01015625)*r22);
IkReal x499=((2.0)*npx);
IkReal x500=((0.65)*pp);
IkReal x501=((0.25)*gclwh12_14);
IkReal x502=((0.009375)*r20);
IkReal x503=((1.3)*pz);
IkReal x504=(gclwh6_10*x470);
IkReal x505=(gclwh12_10*x414);
IkReal x506=(gclwh10_10*x402);
IkReal x507=(gclwh14_10*x420);
IkReal x508=(gclwh4_10*x489);
IkReal x509=(gclwh8_10*x479);
IkReal x510=(gclwh13_8*x414);
IkReal x511=(gclwh11_8*x402);
IkReal x512=((0.015625)*x431);
IkReal x513=(gclwh9_8*x479);
IkReal x514=(gclwh15_8*x420);
IkReal x515=(gclwh5_8*x489);
IkReal x516=(gclwh5_15*x443);
IkReal x517=(gclwh7_7*x475);
IkReal x518=(gclwh11_7*x410);
IkReal x519=(gclwh15_15*x461);
IkReal x520=(gclwh13_15*x418);
IkReal x521=(gclwh9_7*x457);
IkReal x522=(gclwh6_5*x418);
IkReal x523=(gclwh10_5*x443);
IkReal x524=(gclwh4_14*x410);
IkReal x525=(gclwh14_14*x457);
IkReal x526=(gclwh8_5*x461);
IkReal x527=((0.001953125)*x454);
IkReal x528=(gclwh11_7*x443);
IkReal x529=(gclwh7_7*x418);
IkReal x530=((0.001953125)*x448);
IkReal x531=(gclwh5_15*x410);
IkReal x532=(gclwh9_7*x461);
IkReal x533=(gclwh15_15*x457);
IkReal x534=((0.005)*x463);
IkReal x535=((1.0)*x453);
IkReal x536=((4.0)*x452);
IkReal x537=((2.0)*x400);
IkReal x538=(r21*x401);
IkReal x539=(gclwh12_2*pz*x414);
IkReal x540=(x402*x490);
IkReal x541=(x436*x440);
IkReal x542=(x430*x463);
IkReal x543=(x404*x490);
IkReal x544=(x464*x481);
IkReal x545=(x416*x436);
IkReal x546=(gclwh14_3*pp*x420);
IkReal x547=(x405*x406);
IkReal x548=(x425*x494);
IkReal x549=(x452*x469);
IkReal x550=(gclwh12_3*pp*x414);
IkReal x551=(gclwh8_2*r20*x416);
IkReal x552=(gclwh14_2*pz*x420);
IkReal x553=(x414*x432);
IkReal x554=(gclwh15_1*pp*x420);
IkReal x555=(x437*x440);
IkReal x556=(x403*x404);
IkReal x557=(x402*x403);
IkReal x558=(x463*x472);
IkReal x559=(x416*x437);
IkReal x560=(x452*x487);
IkReal x561=(x420*x421);
IkReal x562=((2.0)*gclwh7_8*x405);
IkReal x563=(gclwh9_0*r20*x416);
IkReal x564=(gclwh13_1*pp*x414);
IkReal x565=(x425*x488);
IkReal x566=((0.125)*gclwh11_7*x404);
IkReal x567=((0.125)*gclwh7_7*x453);
IkReal x568=(gclwh9_7*npx*x425);
IkReal x569=((0.125)*gclwh9_7*x422);
IkReal x570=(gclwh11_7*npz*x425);
IkReal x571=((0.25)*gclwh7_7*x405);
IkReal x572=((0.125)*gclwh14_14*x422);
IkReal x573=((0.125)*gclwh4_14*x404);
IkReal x574=(x405*x501);
IkReal x575=(x415*x452);
IkReal x576=(x425*x426);
IkReal x577=((0.125)*gclwh12_14*x453);
IkReal x578=((0.125)*pp*x448);
IkReal x579=(gclwh15_15*npx*x425);
IkReal x580=(gclwh5_15*npz*x425);
IkReal x581=((0.25)*gclwh13_15*x405);
IkReal x582=((0.125)*gclwh15_15*x422);
IkReal x583=((0.125)*gclwh5_15*x404);
IkReal x584=((1.0)*r20*x401);
IkReal x585=(gclwh8_2*x400*x499);
IkReal x586=(gclwh6_2*npy*x537);
IkReal x587=((1.0)*x422*x459);
IkReal x588=(x449*x537);
IkReal x589=(x424*x537);
IkReal x590=((1.0)*x422*x441);
IkReal x591=(gclwh11_0*npz*x537);
IkReal x592=(gclwh7_0*npy*x537);
IkReal x593=(x522+x523);
IkReal x594=(x519+x516);
IkReal x595=(x528+x529);
IkReal x596=(x504+x505+x506+x542);
IkReal x597=(x558+x512+x511+x510);
IkReal x598=(x530+x579+x578+x580);
IkReal x599=(x521+x571+x570+x569);
IkReal x600=(x527+x575+x577+x576);
IkReal x601=(x515+x514+x513+x562+x560);
IkReal x602=(x508+x509+x507+x547+x549);
IkReal x603=(x524+x525+x574+x573+x572);
IkReal x604=(x518+x517+x568+x566+x567);
IkReal x605=(x531+x533+x581+x582+x583);
IkReal x606=(x559+x553+x557+x556+x555+x554+x589);
IkReal x607=(x552+x551+x550+x548+x586+x587+x588);
IkReal x608=(x564+x565+x563+x561+x592+x591+x590);
IkReal x609=(x544+x545+x546+x540+x541+x543+x539+x585);
op[49]=((((-1.0)*gclwh8_2*x445))+(((-0.65)*gclwh8_2*x422))+(((-1.0)*gclwh10_10*x404))+(((-1.0)*gclwh6_10*x535))+((gclwh8_10*x422))+(((-1.0)*x449*x503))+(((0.65)*gclwh10_2*x404))+(((-0.1625)*x494))+(((-0.105625)*x481))+(((-0.105625)*x485))+((x436*x500))+(((-1.0)*x596))+x602+x609+(((-1.0)*x607))+(((-0.13125)*x411))+(((1.3)*npx*x459))+(((0.1625)*gclwh12_2*rxp1_2))+(((-1.3)*gclwh6_2*x405))+((gclwh10_2*x498))+(((0.01015625)*x436))+(((-1.0)*gclwh14_2*x427))+((gclwh12_3*x447))+(((0.13125)*x434))+(((0.13125)*x439)));
op[50]=(((gclwh4_10*x429))+((gclwh6_12*x476))+((gclwh14_10*x468))+((gclwh10_12*x438))+((gclwh10_10*x536))+(((-1.0)*x404*x469))+(((0.6)*gclwh10_12*x404))+(((-1.0)*gclwh6_10*x474))+(((-4.0)*gclwh8_10*x463))+(((0.175)*x434))+(((0.175)*x439))+(((-0.175)*x411))+(((-1.0)*gclwh10_10*x460))+(((-0.6)*gclwh8_12*x422))+(((-1.2)*gclwh10_12*x452))+((gclwh8_10*x408))+(((4.0)*gclwh6_10*x405))+(((-1.0)*gclwh8_12*x502))+(((-1.0)*x406*x453))+(((1.2)*gclwh8_12*x463))+(((-1.2)*gclwh6_12*x405))+(((0.6)*gclwh6_12*x453))+(((-1.0)*gclwh12_10*x478))+((x422*x430)));
op[51]=(((gclwh12_14*x446))+(((-1.0)*gclwh4_14*x496))+(((-1.0)*gclwh14_14*x412)));
op[52]=((0.0125)+(((0.125)*gclwh10_5*x404))+(((-0.25)*gclwh6_5*x405))+((gclwh10_5*x410))+(((0.125)*gclwh6_5*x453))+((gclwh6_5*x475))+(((-1.0)*gclwh14_14*x461))+((gclwh12_14*x418))+(((-1.0)*gclwh10_5*npz*x425))+((gclwh8_5*npx*x425))+(((-0.125)*gclwh8_5*x422))+(((-1.0)*gclwh4_14*x443))+(((-1.0)*gclwh8_5*x457)));
op[53]=((((-0.0125)*x494))+((x459*x483))+(((-0.05)*gclwh8_2*x422))+(((-1.0)*x449*x471))+((gclwh6_10*x453))+((gclwh12_3*x435))+((gclwh10_2*x444))+((gclwh12_2*x466))+(((0.00078125)*x436))+(((-0.1)*gclwh6_2*x405))+x596+(((-0.04375)*x439))+(((-0.04375)*x434))+x609+(((-1.0)*gclwh14_2*x456))+(((-1.0)*x607))+(((-1.0)*x602))+((gclwh10_10*x404))+(((0.05)*gclwh10_2*x404))+(((0.04375)*x411))+((x436*x458))+(((-1.0)*gclwh8_10*x422))+(((-1.0)*gclwh8_2*x407))+(((-0.000625)*x481))+(((-0.000625)*x485)));
op[54]=((((-1.3)*npz*x403))+((x437*x500))+((gclwh11_0*x498))+(((0.19375)*x451))+(((-0.1625)*x488))+(((-1.0)*gclwh15_0*x427))+(((-1.0)*pp*x431))+(((-0.105625)*x482))+(((-1.3)*gclwh7_0*x405))+(((0.19375)*x419))+(((-1.0)*x597))+((gclwh9_8*x422))+(((-0.19375)*x495))+((x424*x503))+(((0.65)*gclwh11_0*x404))+((gclwh13_1*x447))+x601+x606+(((-1.0)*x608))+(((-1.0)*gclwh9_0*x445))+(((0.1625)*x442))+(((-0.65)*gclwh9_0*x422))+(((0.01015625)*x437))+(((-1.0)*gclwh11_8*x404)));
op[55]=((0.1625)+(((-1.0)*x599))+(((-1.0)*x594))+x520+x604);
op[56]=(((gclwh13_15*x446))+(((-1.0)*gclwh5_15*x496))+(((-1.0)*gclwh15_15*x412)));
op[57]=((((-0.175)*x451))+(((-1.0)*x422*x472))+(((0.175)*x495))+((gclwh7_13*x476))+(((0.03125)*x431))+((gclwh11_13*x438))+(((1.2)*gclwh9_13*x463))+(((0.6)*gclwh7_13*x453))+(((-1.0)*gclwh15_8*x468))+(((-1.0)*gclwh9_8*x408))+((gclwh11_8*x460))+(((-4.0)*gclwh7_8*x405))+(((-1.0)*gclwh9_13*x502))+((gclwh13_8*x478))+(((-1.0)*gclwh5_8*x429))+(((-1.0)*gclwh11_8*x536))+(((-0.175)*x419))+(((0.6)*gclwh11_13*x404))+(((-1.2)*gclwh7_13*x405))+(((4.0)*gclwh9_8*x463))+(((-1.2)*gclwh11_13*x452))+((x431*x486))+((x404*x487))+(((-0.6)*gclwh9_13*x422)));
op[58]=((((-0.01875)*x495))+(((-0.1)*npz*x403))+(((-1.0)*gclwh15_0*x456))+((gclwh11_0*x444))+((x424*x471))+((pp*x431))+(((-0.1)*gclwh7_0*x405))+(((0.01875)*x419))+(((0.00078125)*x437))+(((0.05)*gclwh11_0*x404))+x597+(((0.0125)*x442))+x606+((gclwh13_1*x435))+(((-1.0)*x601))+(((-1.0)*x608))+(((0.01875)*x451))+(((-1.0)*gclwh9_0*x407))+(((-0.0125)*x488))+((gclwh11_8*x404))+(((-0.05)*gclwh9_0*x422))+(((-1.0)*gclwh9_8*x422))+(((-0.000625)*x482))+((x437*x458)));
op[59]=((0.0125)+(((-1.0)*x520))+(((-1.0)*x599))+x594+x604);
op[60]=((((-1.0)*x526))+x593+x600+(((-1.0)*x603)));
op[61]=((-0.406875)+(((0.0066015625)*gclwh14_3*r20))+(((-1.0)*gclwh12_2*pp*pz*r21))+(((2.0)*gclwh12_2*npy*(pz*pz)))+((gclwh14_2*pp*pz*r20))+(((2.0)*gclwh3_2*npy*(pz*pz)))+(((-0.015625)*gclwh4_10*r22))+(((2.0)*gclwh4_3*npz*pp*pz))+(((1.3)*gclwh1_2*npx*pz))+(((2.0)*gclwh1_2*npx*(pz*pz)))+(((-0.525)*gclwh4_9*pp*r22))+(((-0.25)*gclwh10_10*rxp2_2))+((gclwh12_3*r21*(pp*pp)))+(((-0.65)*gclwh3_2*pp*r21))+(((1.3)*gclwh3_2*npy*pz))+(((-0.015625)*gclwh14_10*r20))+(((0.015625)*gclwh12_10*r21))+(((-1.0)*gclwh1_2*pp*pz*r20))+(((2.0)*gclwh14_10*npx*pz))+(((-2.0)*gclwh14_2*npx*(pz*pz)))+(((0.406875)*gclwh4_3*pp*r22))+(((1.3)*gclwh12_2*npy*pz))+(((-0.845)*gclwh4_3*npz*pz))+(((-1.3)*gclwh4_2*npz*pz))+(((-1.0)*gclwh14_10*pp*r20))+(((0.25)*gclwh6_2*pz*rxp1_2))+(((0.015625)*gclwh3_2*pz*r21))+(((-0.008203125)*gclwh4_9*r22))+(((0.845)*gclwh1_3*npx*pz))+(((-0.525)*gclwh14_9*pp*r20))+(((-1.05)*gclwh12_9*npy*pz))+(((1.05)*gclwh14_9*npx*pz))+(((-0.65)*gclwh12_2*pp*r21))+(((-2.0)*gclwh12_10*npy*pz))+(((0.008203125)*gclwh12_9*r21))+((gclwh12_10*pp*r21))+(((0.65)*gclwh14_2*pp*r20))+(((0.01015625)*gclwh14_2*r20))+((gclwh3_3*r21*(pp*pp)))+((gclwh1_3*r20*(pp*pp)))+(((0.01015625)*gclwh4_2*r22))+(((0.01015625)*gclwh3_2*r21))+(((-0.438125)*gclwh1_3*pp*r20))+(((-0.0066015625)*gclwh12_3*r21))+(((0.525)*gclwh12_9*pp*r21))+(((-0.1625)*gclwh8_2*rxp0_2))+(((-1.3)*gclwh14_2*npx*pz))+(((2.0)*gclwh14_3*npx*pp*pz))+(((-0.25)*gclwh6_10*rxp1_2))+(((-0.01015625)*gclwh12_2*r21))+(((-2.0)*gclwh12_3*npy*pp*pz))+(((0.015625)*gclwh14_2*pz*r20))+(((0.1625)*gclwh10_2*rxp2_2))+(((0.0066015625)*gclwh4_3*r22))+(((-0.25)*gclwh8_2*pz*rxp0_2))+(((-0.845)*gclwh14_3*npx*pz))+(((0.406875)*gclwh14_3*pp*r20))+(((-1.0)*gclwh4_3*r22*(pp*pp)))+(((-0.65)*gclwh1_2*pp*r20))+(((0.015625)*gclwh1_2*pz*r20))+(((-1.0)*gclwh3_2*pp*pz*r21))+(((-0.008203125)*gclwh14_9*r20))+(((-0.25)*pz))+(((0.25)*gclwh10_2*pz*rxp2_2))+(((-0.406875)*gclwh12_3*pp*r21))+(((0.015625)*gclwh4_2*pz*r22))+(((0.0066015625)*gclwh1_3*r20))+(((-1.0)*gclwh14_3*r20*(pp*pp)))+(((-0.438125)*gclwh3_3*pp*r21))+(((-2.0)*gclwh1_3*npx*pp*pz))+(((1.05)*gclwh4_9*npz*pz))+(((0.0066015625)*gclwh3_3*r21))+(((0.845)*gclwh3_3*npy*pz))+(((0.1625)*gclwh6_2*rxp1_2))+(((-2.0)*gclwh3_3*npy*pp*pz))+(((0.01015625)*gclwh1_2*r20))+(((0.65)*gclwh4_2*pp*r22))+(((0.25)*gclwh8_10*rxp0_2))+(((0.845)*gclwh12_3*npy*pz))+(((-0.015625)*gclwh12_2*pz*r21))+((gclwh4_2*pp*pz*r22))+(((-2.0)*gclwh4_2*npz*(pz*pz)))+(((2.0)*gclwh4_10*npz*pz))+(((-1.0)*gclwh4_10*pp*r22)));
op[62]=((-0.03375)+(((-1.0)*gclwh10_10*x429))+((gclwh6_12*x493))+(((-0.7)*gclwh4_9*x404))+(((-1.0)*gclwh14_10*x408))+(((-2.0)*gclwh14_10*x422))+(((-1.0)*gclwh8_12*x413))+((gclwh8_10*x468))+(((-1.0)*gclwh4_10*x460))+(((-1.0)*gclwh6_10*x478))+(((0.7)*gclwh12_9*x453))+(((-4.0)*gclwh12_10*x405))+((gclwh12_10*x474))+((gclwh4_10*x536))+(((-0.7)*gclwh14_9*x422))+(((-2.0)*gclwh4_10*x404))+((gclwh12_9*x492))+(((1.4)*gclwh4_9*x452))+(((-1.0)*gclwh14_9*x465))+(((-1.4)*gclwh12_9*x405))+(((2.0)*gclwh12_10*x453))+((gclwh10_12*x477))+(((1.4)*gclwh14_9*x463))+(((4.0)*gclwh14_10*x463))+(((-1.0)*gclwh4_9*x409)));
op[63]=(((gclwh4_14*x428))+(((-1.0)*x453*x501))+((x404*x415))+(((0.25)*gclwh14_14*x422))+(((-0.5)*pz*x426))+(((0.5)*gclwh12_14*x405))+(((-0.5)*gclwh4_14*x452))+((gclwh14_14*x491))+(((-0.00390625)*x454)));
op[64]=((((-1.0)*x526))+x593+x603+(((-1.0)*x600)));
op[65]=((-0.013125)+(((-0.005)*gclwh4_3*npz*pz))+(((2.0)*gclwh12_10*npy*pz))+(((0.05)*gclwh14_2*pp*r20))+(((-1.0)*gclwh12_2*pp*pz*r21))+(((2.0)*gclwh12_2*npy*(pz*pz)))+(((0.005)*gclwh12_3*npy*pz))+((gclwh14_2*pp*pz*r20))+(((2.0)*gclwh3_2*npy*(pz*pz)))+(((2.0)*gclwh4_3*npz*pp*pz))+(((-0.175)*gclwh12_9*pp*r21))+(((-0.1)*gclwh4_2*npz*pz))+(((-3.90625e-5)*gclwh12_3*r21))+(((2.0)*gclwh1_2*npx*(pz*pz)))+(((-0.35)*gclwh14_9*npx*pz))+((gclwh12_3*r21*(pp*pp)))+(((0.35)*gclwh12_9*npy*pz))+(((-0.018125)*gclwh1_3*pp*r20))+(((-1.0)*gclwh1_2*pp*pz*r20))+(((0.1)*gclwh1_2*npx*pz))+(((0.013125)*gclwh12_3*pp*r21))+(((-2.0)*gclwh14_2*npx*(pz*pz)))+(((-0.05)*gclwh3_2*pp*r21))+(((0.0125)*gclwh10_2*rxp2_2))+(((-0.013125)*gclwh14_3*pp*r20))+(((0.002734375)*gclwh14_9*r20))+(((-0.35)*gclwh4_9*npz*pz))+(((-0.018125)*gclwh3_3*pp*r21))+(((-0.25)*gclwh8_10*rxp0_2))+(((0.25)*gclwh6_2*pz*rxp1_2))+(((0.015625)*gclwh3_2*pz*r21))+(((0.1)*gclwh12_2*npy*pz))+(((0.1)*gclwh3_2*npy*pz))+(((0.00078125)*gclwh1_2*r20))+((gclwh3_3*r21*(pp*pp)))+(((-0.00078125)*gclwh12_2*r21))+(((0.015625)*gclwh14_10*r20))+((gclwh1_3*r20*(pp*pp)))+(((3.90625e-5)*gclwh14_3*r20))+(((3.90625e-5)*gclwh1_3*r20))+(((-0.0125)*gclwh8_2*rxp0_2))+(((0.00078125)*gclwh14_2*r20))+((gclwh14_10*pp*r20))+(((2.0)*gclwh14_3*npx*pp*pz))+(((-0.002734375)*gclwh12_9*r21))+(((-2.0)*gclwh12_3*npy*pp*pz))+(((0.015625)*gclwh14_2*pz*r20))+(((0.175)*gclwh4_9*pp*r22))+(((-0.25)*gclwh8_2*pz*rxp0_2))+(((-1.0)*gclwh4_3*r22*(pp*pp)))+(((0.015625)*gclwh1_2*pz*r20))+(((-1.0)*gclwh3_2*pp*pz*r21))+(((0.002734375)*gclwh4_9*r22))+(((-0.1)*gclwh14_2*npx*pz))+(((-0.25)*pz))+(((0.25)*gclwh10_2*pz*rxp2_2))+(((-0.015625)*gclwh12_10*r21))+(((0.005)*gclwh3_3*npy*pz))+(((-1.0)*gclwh12_10*pp*r21))+(((3.90625e-5)*gclwh3_3*r21))+(((0.005)*gclwh1_3*npx*pz))+(((-0.013125)*gclwh4_3*pp*r22))+(((0.015625)*gclwh4_2*pz*r22))+(((-0.005)*gclwh14_3*npx*pz))+(((0.015625)*gclwh4_10*r22))+(((-1.0)*gclwh14_3*r20*(pp*pp)))+(((-2.0)*gclwh1_3*npx*pp*pz))+(((0.25)*gclwh6_10*rxp1_2))+((gclwh4_10*pp*r22))+(((0.175)*gclwh14_9*pp*r20))+(((0.00078125)*gclwh4_2*r22))+(((-2.0)*gclwh3_3*npy*pp*pz))+(((-0.05)*gclwh12_2*pp*r21))+(((0.00078125)*gclwh3_2*r21))+(((-2.0)*gclwh14_10*npx*pz))+(((0.0125)*gclwh6_2*rxp1_2))+(((-0.015625)*gclwh12_2*pz*r21))+(((-0.05)*gclwh1_2*pp*r20))+((gclwh4_2*pp*pz*r22))+(((-2.0)*gclwh4_2*npz*(pz*pz)))+(((0.25)*gclwh10_10*rxp2_2))+(((-2.0)*gclwh4_10*npz*pz))+(((0.05)*gclwh4_2*pp*r22))+(((3.90625e-5)*gclwh4_3*r22)));
op[66]=((-0.406875)+(((2.0)*gclwh2_1*npy*pp*pz))+((gclwh15_0*pp*pz*r20))+((gclwh13_1*r21*(pp*pp)))+(((-0.01015625)*gclwh0_0*r20))+((gclwh13_8*pp*r21))+(((2.0)*gclwh0_1*npx*pp*pz))+(((-1.3)*gclwh0_0*npx*pz))+(((0.1625)*gclwh7_0*rxp1_2))+(((0.65)*gclwh2_0*pp*r21))+(((-0.012109375)*gclwh15_11*r20))+(((-1.0)*gclwh2_1*r21*(pp*pp)))+(((-0.01015625)*gclwh13_0*r21))+(((-0.0066015625)*gclwh2_1*r21))+((gclwh5_0*pp*pz*r22))+((gclwh2_0*pp*pz*r21))+((gclwh0_0*pp*pz*r20))+(((-1.0)*gclwh15_8*pp*r20))+(((2.0)*gclwh13_0*npy*(pz*pz)))+(((-0.0066015625)*gclwh13_1*r21))+(((-1.3)*gclwh15_0*npx*pz))+(((-0.015625)*gclwh0_0*pz*r20))+(((-0.012109375)*gclwh5_11*r22))+(((-0.25)*gclwh11_8*rxp2_2))+(((0.25)*gclwh11_0*pz*rxp2_2))+(((1.55)*gclwh5_11*npz*pz))+(((-2.0)*gclwh13_8*npy*pz))+(((0.845)*gclwh13_1*npy*pz))+(((0.65)*gclwh15_0*pp*r20))+(((-2.0)*gclwh2_0*npy*(pz*pz)))+(((-0.775)*gclwh5_11*pp*r22))+(((-0.25)*gclwh9_0*pz*rxp0_2))+(((0.25)*pz))+(((0.1625)*gclwh11_0*rxp2_2))+(((-0.845)*gclwh15_1*npx*pz))+(((-0.015625)*gclwh5_8*r22))+(((-2.0)*gclwh15_0*npx*(pz*pz)))+(((-0.01015625)*gclwh2_0*r21))+(((2.0)*gclwh5_8*npz*pz))+(((-0.406875)*gclwh13_1*pp*r21))+(((0.01015625)*gclwh5_0*r22))+(((0.438125)*gclwh0_1*pp*r20))+(((0.775)*gclwh13_11*pp*r21))+(((0.406875)*gclwh15_1*pp*r20))+(((-0.1625)*gclwh9_0*rxp0_2))+(((0.438125)*gclwh2_1*pp*r21))+(((-2.0)*gclwh5_0*npz*(pz*pz)))+(((0.25)*gclwh7_0*pz*rxp1_2))+(((-0.845)*gclwh0_1*npx*pz))+(((0.015625)*gclwh13_8*r21))+(((-2.0)*gclwh0_0*npx*(pz*pz)))+(((-0.775)*gclwh15_11*pp*r20))+(((-0.0066015625)*gclwh0_1*r20))+(((-0.65)*gclwh13_0*pp*r21))+(((-1.0)*gclwh13_0*pp*pz*r21))+(((-1.3)*gclwh5_0*npz*pz))+(((-1.3)*gclwh2_0*npy*pz))+(((1.55)*gclwh15_11*npx*pz))+(((0.65)*gclwh0_0*pp*r20))+(((-0.015625)*gclwh13_0*pz*r21))+(((-2.0)*gclwh13_1*npy*pp*pz))+(((-0.845)*gclwh2_1*npy*pz))+(((0.01015625)*gclwh15_0*r20))+(((-0.015625)*gclwh2_0*pz*r21))+(((0.0066015625)*gclwh15_1*r20))+(((-0.015625)*gclwh15_8*r20))+(((0.015625)*gclwh5_0*pz*r22))+(((0.25)*gclwh9_8*rxp0_2))+(((0.65)*gclwh5_0*pp*r22))+(((-1.55)*gclwh13_11*npy*pz))+(((0.012109375)*gclwh13_11*r21))+(((-1.0)*gclwh15_1*r20*(pp*pp)))+(((-1.0)*gclwh5_8*pp*r22))+(((-0.25)*gclwh7_8*rxp1_2))+(((1.3)*gclwh13_0*npy*pz))+(((2.0)*gclwh15_1*npx*pp*pz))+(((-1.0)*gclwh0_1*r20*(pp*pp)))+(((0.015625)*gclwh15_0*pz*r20))+(((2.0)*gclwh15_8*npx*pz)));
op[67]=((((-1.0)*x532))+(((-1.0)*x598))+x595+x605);
op[68]=((((-1.0)*x448*x464))+(((-0.00390625)*x448))+(((-0.5)*gclwh5_15*x452))+(((0.5)*gclwh13_15*x405))+((gclwh15_15*x491))+(((0.25)*gclwh15_15*x422))+((gclwh5_15*x428))+(((-0.5)*gclwh15_15*x463))+(((0.25)*gclwh5_15*x404)));
op[69]=((0.03375)+(((-1.0)*gclwh9_8*x468))+(((0.7)*gclwh15_11*x422))+((gclwh7_13*x493))+((gclwh5_8*x460))+(((4.0)*gclwh13_8*x405))+(((1.4)*gclwh13_11*x405))+((gclwh11_13*x477))+((gclwh15_8*x408))+(((0.7)*gclwh5_11*x404))+(((-1.0)*gclwh5_8*x536))+((gclwh11_8*x429))+((gclwh7_8*x478))+(((-4.0)*gclwh15_8*x463))+((gclwh15_11*x465))+(((-1.0)*gclwh13_8*x474))+(((-1.0)*x453*x462))+((x422*x467))+((gclwh5_11*x409))+(((-0.7)*gclwh13_11*x453))+(((-1.0)*gclwh9_13*x413))+(((-1.0)*gclwh13_11*x492))+((x404*x455))+(((-1.4)*gclwh5_11*x452))+(((-1.4)*gclwh15_11*x463)));
op[70]=((-0.013125)+(((0.018125)*r21*x433))+(((-1.0)*x416*x484))+(((-1.0)*gclwh2_1*x538))+(((-1.0)*x416*x497))+(((0.15)*gclwh15_11*x463))+(((0.075)*gclwh13_11*x453))+(((-1.0)*x421*x483))+(((2.0)*x405*x433))+(((-1.0)*gclwh0_1*x473))+((gclwh11_8*x489))+(((0.013125)*gclwh13_1*x453))+(((-1.0)*gclwh0_1*x584))+(((-1.0)*x463*x467))+(((-0.005)*gclwh2_1*x405))+(((0.001171875)*gclwh13_11*r21))+(((-1.0)*x420*x441))+((gclwh0_1*x440*x499))+(((-1.0)*gclwh13_8*x535))+(((-0.00078125)*x484))+(((-1.0)*x423*x471))+((x403*x489))+(((-1.0)*gclwh0_1*x534))+(((-0.00078125)*x497))+((x417*x458))+((x402*x450))+(((-1.0)*gclwh2_1*x480))+(((-1.0)*gclwh15_1*x534))+(((-0.1)*gclwh2_0*x405))+(((-0.15)*gclwh13_11*x405))+(((0.05)*gclwh5_0*x404))+(((0.05)*gclwh15_0*x422))+((gclwh5_0*x444))+(((-1.0)*gclwh15_0*x400*x499))+((gclwh7_0*pz*x414))+(((-1.0)*gclwh9_0*x456))+(((-1.0)*gclwh0_0*x407))+((gclwh15_0*x407))+((x440*x484))+(((-1.0)*x432*x535))+((gclwh7_0*x466))+(((-0.001171875)*gclwh5_11*r22))+(((0.05)*gclwh2_0*x453))+((gclwh15_0*r20*x416))+(((-1.0)*gclwh13_8*x470))+x425+(((-0.001171875)*gclwh15_11*r20))+(((-1.0)*x416*x417))+((gclwh15_1*x440*x499))+(((-1.0)*x452*x455))+(((-1.0)*gclwh15_1*x584))+(((0.15)*gclwh5_11*x452))+((gclwh15_8*x479))+((gclwh7_8*x414))+(((-0.1)*gclwh0_0*x463))+(((-1.0)*x423*x537))+(((-1.0)*gclwh13_1*x405*x486))+(((-0.013125)*gclwh15_1*x422))+(((-0.075)*gclwh5_11*x404))+(((0.0125)*gclwh11_0*rxp2_2))+(((-1.0)*gclwh9_8*x420))+((x417*x440))+((gclwh15_8*x422))+(((0.1)*gclwh13_0*x405))+((x404*x450))+(((-1.0)*gclwh0_0*x400*x499))+((x405*x462))+((gclwh13_0*npy*x537))+((gclwh5_8*x404))+((gclwh5_8*x402))+(((-1.0)*gclwh13_1*x480))+(((0.018125)*gclwh0_1*x422))+(((-1.0)*gclwh2_0*npy*x537))+((gclwh13_1*x538))+((x421*x422))+(((0.005)*gclwh13_1*x405))+((gclwh15_1*x473))+(((-0.05)*gclwh13_0*x453))+(((-0.075)*gclwh15_11*x422)));
op[71]=((((-1.0)*x532))+x595+x598+(((-1.0)*x605)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj3)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x610=htj1*htj1;
CheckValue<IkReal> x611=IKPowWithIntegerCheck(((1.0)+x610),-1);
if(!x611.valid){
continue;
}
cj1array[numsolutions]=((x611.value)*(((1.0)+(((-1.0)*x610)))));
CheckValue<IkReal> x612=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x612.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x612.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x613=htj2*htj2;
CheckValue<IkReal> x614=IKPowWithIntegerCheck(((1.0)+x613),-1);
if(!x614.valid){
continue;
}
cj2array[numsolutions]=((x614.value)*(((1.0)+(((-1.0)*x613)))));
CheckValue<IkReal> x615=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x615.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x615.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x616=htj3*htj3;
CheckValue<IkReal> x617=IKPowWithIntegerCheck(((1.0)+x616),-1);
if(!x617.valid){
continue;
}
cj3array[numsolutions]=((x617.value)*(((1.0)+(((-1.0)*x616)))));
CheckValue<IkReal> x618=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x618.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x618.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[2];
j5eval[0]=((1.0)+(((-1.0)*(r22*r22))));
j5eval[1]=((r20*r20)+(r21*r21));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x619=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x619);
rxp1_0=(pz*r11);
rxp1_1=(r01*x619);
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x620=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x620);
rxp1_0=(pz*r11);
rxp1_1=(r01*x620);
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x621=IKPowWithIntegerCheck(r22,-1);
if(!x621.valid){
continue;
}
CheckValue<IkReal> x622=IKPowWithIntegerCheck(sj3,-1);
if(!x622.valid){
continue;
}
sj4array[0]=((x621.value)*(x622.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x623=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x623);
rxp1_0=(pz*r11);
rxp1_1=(r01*x623);
IkReal x624=(cj4*sj3);
IkReal x625=((4.0)*r10);
IkReal x626=((16.0)*r11);
IkReal x627=((4.0)*sj3);
IkReal x628=((8.0)*sj1);
IkReal x629=(cj3*cj4);
IkReal x630=((16.0)*cj1);
IkReal x631=((8.0)*r11);
IkReal x632=(r12*sj4);
IkReal x633=(cj1*sj2);
IkReal x634=(cj4*r02);
IkReal x635=(r10*sj3);
IkReal x636=((16.0)*sj1);
IkReal x637=(cj2*sj4);
IkReal x638=((4.0)*r00);
IkReal x639=((8.0)*cj1);
IkReal x640=(sj1*sj2);
IkReal x641=((4.0)*cj3);
IkReal x642=(cj3*r10);
IkReal x643=((12.0)*cj2);
IkReal x644=((4.0)*cj2);
IkReal x645=(r11*x641);
IkReal x646=(r11*x627);
IkReal x647=(r01*sj2*sj4);
IkReal x648=((12.0)*sj3*x632);
IkReal x649=(x624*x625);
IkReal x650=(x625*x629);
IkReal x651=((12.0)*cj3*x632);
IkReal x652=(sj4*x633*x638);
IkReal x653=(sj1*x634*x643);
IkReal x654=((12.0)*x633*x634);
IkReal x655=(sj1*x637*x638);
IkReal x656=(cj1*x637*x638);
IkReal x657=(sj4*x638*x640);
IkReal x658=((12.0)*x634*x640);
IkReal x659=(cj1*x634*x643);
IkReal x660=(x645+x649);
IkReal x661=(x646+x657);
IkReal x662=(x650+x656);
IkReal x663=(x651+x658);
IkReal x664=(x652+x655);
IkReal x665=(x648+x653+x654);
j5eval[0]=((((0.5)*(IKabs(((((4.0)*x634*x640))+(((-1.0)*cj1*x634*x644))+((x632*x641))+(((-1.0)*x662))+x661)))))+(((0.5)*(IKabs(((((-1.0)*x659))+(((-1.0)*x662))+x661+x663)))))+(((0.5)*(IKabs(((((-1.0)*x660))+x665+x664)))))+(IKabs(((((-1.0)*x629*x631))+((x628*x647))+(((-8.0)*x635))+(((-1.0)*r01*x637*x639)))))+(((0.5)*(IKabs(((((-1.0)*x664))+x660+x665)))))+(((0.5)*(IKabs((((x636*x647))+(((-1.0)*r01*x630*x637))+(((-1.0)*x626*x629))+(((-16.0)*x635)))))))+(IKabs(((((8.0)*r01*sj4*x633))+((r01*x628*x637))+(((-1.0)*x624*x631))+(((8.0)*x642)))))+(((0.5)*(IKabs(((((-1.0)*x660))+((sj1*x634*x644))+x664+((x627*x632))+(((4.0)*x633*x634)))))))+(((0.5)*(IKabs(((((-1.0)*x659))+(((-1.0)*x661))+x663+x662)))))+(((0.5)*(IKabs((((r01*x636*x637))+(((-1.0)*x624*x626))+((x630*x647))+(((16.0)*x642))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x666=(r10*sj3);
IkReal x667=(r01*sj4);
IkReal x668=(cj1*cj2);
IkReal x669=(cj3*cj4);
IkReal x670=(sj1*sj2);
IkReal x671=(cj4*r02);
IkReal x672=((4.0)*r11*sj3);
IkReal x673=(cj3*r12*sj4);
IkReal x674=((4.0)*r00*sj4);
IkReal x675=((4.0)*r10*x669);
IkReal x676=((12.0)*x673);
IkReal x677=((4.0)*x673);
IkReal x678=(x670*x674);
IkReal x679=(x668*x674);
IkReal x680=((12.0)*x670*x671);
IkReal x681=((12.0)*x668*x671);
IkReal x682=((4.0)*x670*x671);
IkReal x683=((4.0)*x668*x671);
IkReal x684=(x678+x672);
IkReal x685=(x679+x675);
IkReal x686=(x676+x680);
IkReal x687=(x677+x682);
IkReal x688=((((-8.0)*x667*x668))+(((-8.0)*x666))+(((-8.0)*r11*x669))+(((8.0)*x667*x670)));
op[0]=((((-1.0)*x683))+(((-1.0)*x685))+x687+x684);
op[1]=x688;
op[2]=((((-1.0)*x681))+(((-1.0)*x685))+x686+x684);
op[3]=((((-16.0)*x666))+(((16.0)*x667*x670))+(((-16.0)*r11*x669))+(((-16.0)*x667*x668)));
op[4]=((((-1.0)*x681))+(((-1.0)*x684))+x686+x685);
op[5]=x688;
op[6]=((((-1.0)*x683))+(((-1.0)*x684))+x687+x685);
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x689=(cj4*sj3);
IkReal x690=(cj1*sj2);
IkReal x691=(r01*sj4);
IkReal x692=((4.0)*sj4);
IkReal x693=(r12*sj3);
IkReal x694=(cj4*r02);
IkReal x695=(cj2*sj1);
IkReal x696=(cj3*r10);
IkReal x697=((4.0)*cj3*r11);
IkReal x698=((4.0)*r10*x689);
IkReal x699=(x692*x693);
IkReal x700=((12.0)*sj4*x693);
IkReal x701=(r00*x690*x692);
IkReal x702=(r00*x692*x695);
IkReal x703=((4.0)*x694*x695);
IkReal x704=((12.0)*x694*x695);
IkReal x705=((12.0)*x690*x694);
IkReal x706=((4.0)*x690*x694);
IkReal x707=(x697+x698);
IkReal x708=(x702+x701);
IkReal x709=(x700+x704+x705);
IkReal x710=(x699+x703+x706);
IkReal x711=((((8.0)*x696))+(((8.0)*x690*x691))+(((8.0)*x691*x695))+(((-8.0)*r11*x689)));
j5evalpoly[0]=((((htj5*htj5)*(((((-1.0)*x708))+x709+x707))))+((x711*(htj5*htj5*htj5*htj5*htj5)))+(((-1.0)*x708))+(((htj5*htj5*htj5*htj5)*(((((-1.0)*x707))+x708+x709))))+x710+x707+((htj5*x711))+(((htj5*htj5*htj5)*(((((16.0)*x690*x691))+(((-16.0)*r11*x689))+(((16.0)*x696))+(((16.0)*x691*x695))))))+(((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-1.0)*x707))+x710+x708)))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x712=(cj5*sj4);
IkReal x713=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x712))+((r01*x713))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x713))+((r10*x712))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x712))+((r01*x713))+((cj4*r02))))+IKsqr(((((-1.0)*r11*x713))+((r10*x712))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x712))+((r01*x713))+((cj4*r02))), ((((-1.0)*r11*x713))+((r10*x712))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x714=IKcos(j0);
IkReal x715=IKsin(j0);
IkReal x716=((0.125)*sj5);
IkReal x717=(r10*sj3);
IkReal x718=(cj3*r00);
IkReal x719=(cj5*sj4);
IkReal x720=((1.0)*sj2);
IkReal x721=((1.0)*sj4);
IkReal x722=(r01*sj5);
IkReal x723=(cj3*r10);
IkReal x724=(cj5*r01);
IkReal x725=((0.3)*sj2);
IkReal x726=((1.0)*cj3);
IkReal x727=(cj5*r11);
IkReal x728=(cj4*sj3);
IkReal x729=(r00*sj3);
IkReal x730=(cj3*cj4);
IkReal x731=(cj2*sj1);
IkReal x732=((1.0)*sj5);
IkReal x733=(r11*sj5);
IkReal x734=((1.0)*cj4);
IkReal x735=(cj5*x734);
IkReal x736=(sj1*x715);
IkReal x737=(cj1*x714);
IkReal x738=(cj1*x715);
IkReal x739=((1.0)*x714);
IkReal x740=(sj1*x714);
evalcond[0]=(((r00*x719))+(((-1.0)*r02*x734))+(((-1.0)*x721*x722))+x715);
evalcond[1]=((((-1.0)*x739))+(((-1.0)*x721*x733))+((r10*x719))+(((-1.0)*r12*x734)));
evalcond[2]=((((-0.35)*x740))+((r00*x716))+(((-1.0)*x725*x737))+(((-1.0)*px))+(((0.125)*x724))+(((-0.3)*x714*x731))+(((-0.125)*x715)));
evalcond[3]=((((-1.0)*x725*x738))+(((-0.35)*x736))+(((-1.0)*py))+(((0.125)*x727))+(((-0.3)*x715*x731))+((r10*x716))+(((0.125)*x714)));
evalcond[4]=((((-1.0)*cj3*r02*x721))+((sj3*x724))+((x722*x730))+((sj5*x729))+((cj2*x737))+(((-1.0)*x718*x735))+(((-1.0)*x720*x740)));
evalcond[5]=((((-1.0)*x723*x735))+((sj5*x717))+((sj3*x727))+(((-1.0)*x720*x736))+(((-1.0)*cj3*r12*x721))+((cj2*x738))+((x730*x733)));
evalcond[6]=((((-1.0)*x724*x726))+(((-1.0)*x731*x739))+((x722*x728))+(((-1.0)*r02*sj3*x721))+(((-1.0)*cj5*r00*x728))+(((-1.0)*x720*x737))+(((-1.0)*x718*x732)));
evalcond[7]=(((x728*x733))+(((-1.0)*x723*x732))+(((-1.0)*x717*x735))+(((-1.0)*x720*x738))+(((-1.0)*x715*x731))+(((-1.0)*x726*x727))+(((-1.0)*r12*sj3*x721)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x741=IKPowWithIntegerCheck(cj3,-1);
if(!x741.valid){
continue;
}
CheckValue<IkReal> x742=IKPowWithIntegerCheck(r22,-1);
if(!x742.valid){
continue;
}
sj4array[0]=((x741.value)*(x742.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4))))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x743=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x743);
rxp1_0=(pz*r11);
rxp1_1=(r01*x743);
IkReal x744=(cj4*sj3);
IkReal x745=((4.0)*r10);
IkReal x746=((16.0)*r11);
IkReal x747=((4.0)*sj3);
IkReal x748=((8.0)*sj1);
IkReal x749=(cj3*cj4);
IkReal x750=((16.0)*cj1);
IkReal x751=((8.0)*r11);
IkReal x752=(r12*sj4);
IkReal x753=(cj1*sj2);
IkReal x754=(cj4*r02);
IkReal x755=(r10*sj3);
IkReal x756=((16.0)*sj1);
IkReal x757=(cj2*sj4);
IkReal x758=((4.0)*r00);
IkReal x759=((8.0)*cj1);
IkReal x760=(sj1*sj2);
IkReal x761=((4.0)*cj3);
IkReal x762=(cj3*r10);
IkReal x763=((12.0)*cj2);
IkReal x764=((4.0)*cj2);
IkReal x765=(r11*x761);
IkReal x766=(r11*x747);
IkReal x767=(r01*sj2*sj4);
IkReal x768=((12.0)*sj3*x752);
IkReal x769=(x744*x745);
IkReal x770=(x745*x749);
IkReal x771=((12.0)*cj3*x752);
IkReal x772=(sj4*x753*x758);
IkReal x773=(sj1*x754*x763);
IkReal x774=((12.0)*x753*x754);
IkReal x775=(sj1*x757*x758);
IkReal x776=(cj1*x757*x758);
IkReal x777=(sj4*x758*x760);
IkReal x778=((12.0)*x754*x760);
IkReal x779=(cj1*x754*x763);
IkReal x780=(x769+x765);
IkReal x781=(x777+x766);
IkReal x782=(x770+x776);
IkReal x783=(x771+x778);
IkReal x784=(x772+x775);
IkReal x785=(x773+x774+x768);
j5eval[0]=((((0.5)*(IKabs(((((-1.0)*x782))+x783+x781+(((-1.0)*x779)))))))+(IKabs(((((-8.0)*x755))+(((-1.0)*r01*x757*x759))+(((-1.0)*x749*x751))+((x748*x767)))))+(((0.5)*(IKabs(((((-16.0)*x755))+(((-1.0)*r01*x750*x757))+(((-1.0)*x746*x749))+((x756*x767)))))))+(((0.5)*(IKabs(((((-1.0)*x781))+x782+x783+(((-1.0)*x779)))))))+(((0.5)*(IKabs(((((4.0)*x753*x754))+((x747*x752))+(((-1.0)*x780))+x784+((sj1*x754*x764)))))))+(((0.5)*(IKabs(((((-1.0)*x784))+x780+x785)))))+(((0.5)*(IKabs(((((-1.0)*x782))+(((4.0)*x754*x760))+((x752*x761))+(((-1.0)*cj1*x754*x764))+x781)))))+(((0.5)*(IKabs(((((16.0)*x762))+(((-1.0)*x744*x746))+((r01*x756*x757))+((x750*x767)))))))+(IKabs(((((8.0)*x762))+((r01*x748*x757))+(((-1.0)*x744*x751))+(((8.0)*r01*sj4*x753)))))+(((0.5)*(IKabs(((((-1.0)*x780))+x784+x785))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x786=(r10*sj3);
IkReal x787=(r01*sj4);
IkReal x788=(cj1*cj2);
IkReal x789=(cj3*cj4);
IkReal x790=(sj1*sj2);
IkReal x791=(cj4*r02);
IkReal x792=((4.0)*r11*sj3);
IkReal x793=(cj3*r12*sj4);
IkReal x794=((4.0)*r00*sj4);
IkReal x795=((4.0)*r10*x789);
IkReal x796=((12.0)*x793);
IkReal x797=((4.0)*x793);
IkReal x798=(x790*x794);
IkReal x799=(x788*x794);
IkReal x800=((12.0)*x790*x791);
IkReal x801=((12.0)*x788*x791);
IkReal x802=((4.0)*x790*x791);
IkReal x803=((4.0)*x788*x791);
IkReal x804=(x792+x798);
IkReal x805=(x795+x799);
IkReal x806=(x796+x800);
IkReal x807=(x797+x802);
IkReal x808=((((-8.0)*x787*x788))+(((-8.0)*x786))+(((-8.0)*r11*x789))+(((8.0)*x787*x790)));
op[0]=(x804+x807+(((-1.0)*x803))+(((-1.0)*x805)));
op[1]=x808;
op[2]=(x804+x806+(((-1.0)*x801))+(((-1.0)*x805)));
op[3]=((((16.0)*x787*x790))+(((-16.0)*x787*x788))+(((-16.0)*x786))+(((-16.0)*r11*x789)));
op[4]=(x805+x806+(((-1.0)*x801))+(((-1.0)*x804)));
op[5]=x808;
op[6]=(x805+x807+(((-1.0)*x803))+(((-1.0)*x804)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x809=(cj4*sj3);
IkReal x810=(cj1*sj2);
IkReal x811=(r01*sj4);
IkReal x812=((4.0)*sj4);
IkReal x813=(r12*sj3);
IkReal x814=(cj4*r02);
IkReal x815=(cj2*sj1);
IkReal x816=(cj3*r10);
IkReal x817=((4.0)*cj3*r11);
IkReal x818=((4.0)*r10*x809);
IkReal x819=(x812*x813);
IkReal x820=((12.0)*sj4*x813);
IkReal x821=(r00*x810*x812);
IkReal x822=(r00*x812*x815);
IkReal x823=((4.0)*x814*x815);
IkReal x824=((12.0)*x814*x815);
IkReal x825=((12.0)*x810*x814);
IkReal x826=((4.0)*x810*x814);
IkReal x827=(x818+x817);
IkReal x828=(x822+x821);
IkReal x829=(x820+x825+x824);
IkReal x830=(x819+x823+x826);
IkReal x831=((((8.0)*x816))+(((8.0)*x811*x815))+(((-8.0)*r11*x809))+(((8.0)*x810*x811)));
j5evalpoly[0]=(((htj5*x831))+(((htj5*htj5*htj5*htj5)*(((((-1.0)*x827))+x829+x828))))+(((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-1.0)*x827))+x828+x830))))+(((htj5*htj5)*(((((-1.0)*x828))+x829+x827))))+(((-1.0)*x828))+(((htj5*htj5*htj5)*(((((16.0)*x811*x815))+(((-16.0)*r11*x809))+(((16.0)*x810*x811))+(((16.0)*x816))))))+((x831*(htj5*htj5*htj5*htj5*htj5)))+x827+x830);
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x832=(cj5*sj4);
IkReal x833=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x832))+((r01*x833))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x832))+(((-1.0)*r11*x833))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x832))+((r01*x833))+((cj4*r02))))+IKsqr((((r10*x832))+(((-1.0)*r11*x833))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x832))+((r01*x833))+((cj4*r02))), (((r10*x832))+(((-1.0)*r11*x833))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x834=IKcos(j0);
IkReal x835=IKsin(j0);
IkReal x836=((0.125)*sj5);
IkReal x837=(r10*sj3);
IkReal x838=(cj3*r00);
IkReal x839=(cj5*sj4);
IkReal x840=((1.0)*sj2);
IkReal x841=((1.0)*sj4);
IkReal x842=(r01*sj5);
IkReal x843=(cj3*r10);
IkReal x844=(cj5*r01);
IkReal x845=((0.3)*sj2);
IkReal x846=((1.0)*cj3);
IkReal x847=(cj5*r11);
IkReal x848=(cj4*sj3);
IkReal x849=(r00*sj3);
IkReal x850=(cj3*cj4);
IkReal x851=(cj2*sj1);
IkReal x852=((1.0)*sj5);
IkReal x853=(r11*sj5);
IkReal x854=((1.0)*cj4);
IkReal x855=(cj5*x854);
IkReal x856=(sj1*x835);
IkReal x857=(cj1*x834);
IkReal x858=(cj1*x835);
IkReal x859=((1.0)*x834);
IkReal x860=(sj1*x834);
evalcond[0]=((((-1.0)*x841*x842))+((r00*x839))+(((-1.0)*r02*x854))+x835);
evalcond[1]=((((-1.0)*x859))+(((-1.0)*r12*x854))+((r10*x839))+(((-1.0)*x841*x853)));
evalcond[2]=((((-1.0)*x845*x857))+(((0.125)*x844))+(((-0.3)*x834*x851))+((r00*x836))+(((-1.0)*px))+(((-0.125)*x835))+(((-0.35)*x860)));
evalcond[3]=((((-1.0)*x845*x858))+(((0.125)*x847))+(((0.125)*x834))+((r10*x836))+(((-1.0)*py))+(((-0.35)*x856))+(((-0.3)*x835*x851)));
evalcond[4]=(((x842*x850))+((cj2*x857))+(((-1.0)*x838*x855))+(((-1.0)*cj3*r02*x841))+((sj5*x849))+(((-1.0)*x840*x860))+((sj3*x844)));
evalcond[5]=(((x850*x853))+((cj2*x858))+(((-1.0)*cj3*r12*x841))+((sj5*x837))+(((-1.0)*x840*x856))+((sj3*x847))+(((-1.0)*x843*x855)));
evalcond[6]=((((-1.0)*r02*sj3*x841))+(((-1.0)*x838*x852))+((x842*x848))+(((-1.0)*x844*x846))+(((-1.0)*x840*x857))+(((-1.0)*x851*x859))+(((-1.0)*cj5*r00*x848)));
evalcond[7]=(((x848*x853))+(((-1.0)*x835*x851))+(((-1.0)*x846*x847))+(((-1.0)*r12*sj3*x841))+(((-1.0)*x840*x858))+(((-1.0)*x837*x855))+(((-1.0)*x843*x852)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x861=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x861);
rxp1_0=(pz*r11);
rxp1_1=(r01*x861);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x862=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x862);
rxp1_0=(pz*r11);
rxp1_1=(r01*x862);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x863=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x863);
rxp1_0=(pz*r11);
rxp1_1=(r01*x863);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x864=IKPowWithIntegerCheck(r22,-1);
if(!x864.valid){
continue;
}
sj4array[0]=((x864.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x865=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x865);
rxp1_0=(pz*r11);
rxp1_1=(r01*x865);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x867 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x867.valid){
continue;
}
IkReal x866=x867.value;
j5array[0]=((-1.0)*x866);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x866)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x868=(cj5*sj4);
IkReal x869=(sj4*sj5);
if( IKabs((((r01*x869))+(((-1.0)*r00*x868)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x868))+(((-1.0)*r11*x869)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x869))+(((-1.0)*r00*x868))))+IKsqr((((r10*x868))+(((-1.0)*r11*x869))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x869))+(((-1.0)*r00*x868))), (((r10*x868))+(((-1.0)*r11*x869))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x870=IKcos(j0);
IkReal x871=IKsin(j0);
IkReal x872=((0.125)*sj5);
IkReal x873=(cj5*sj4);
IkReal x874=((1.0)*sj5);
IkReal x875=(cj5*r11);
IkReal x876=(cj2*sj1);
IkReal x877=(cj5*r01);
IkReal x878=((0.35)*sj1);
IkReal x879=((1.0)*x870);
IkReal x880=(cj1*sj2*x870);
IkReal x881=(cj1*sj2*x871);
evalcond[0]=(((r00*x873))+(((-1.0)*r01*sj4*x874))+x871);
evalcond[1]=((((-1.0)*r11*sj4*x874))+((r10*x873))+(((-1.0)*x879)));
evalcond[2]=((((-1.0)*x876*x879))+(((-1.0)*r00*x874))+(((-1.0)*x877))+(((-1.0)*cj1*sj2*x879)));
evalcond[3]=((((-1.0)*x875))+(((-1.0)*x881))+(((-1.0)*x871*x876))+(((-1.0)*r10*x874)));
evalcond[4]=((((-0.3)*x870*x876))+((r00*x872))+(((-1.0)*px))+(((-0.125)*x871))+(((0.125)*x877))+(((-1.0)*x870*x878))+(((-0.3)*x880)));
evalcond[5]=((((-1.0)*x871*x878))+((r10*x872))+(((-1.0)*py))+(((0.125)*x875))+(((0.125)*x870))+(((-0.3)*x881))+(((-0.3)*x871*x876)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x882=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x882);
rxp1_0=(pz*r11);
rxp1_1=(r01*x882);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x883=IKPowWithIntegerCheck(r22,-1);
if(!x883.valid){
continue;
}
sj4array[0]=((-1.0)*(x883.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x884=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x884);
rxp1_0=(pz*r11);
rxp1_1=(r01*x884);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x886 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x886.valid){
continue;
}
IkReal x885=x886.value;
j5array[0]=((-1.0)*x885);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x885)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x887=(cj5*sj4);
IkReal x888=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x887))+((r01*x888)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x888))+((r10*x887)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x887))+((r01*x888))))+IKsqr(((((-1.0)*r11*x888))+((r10*x887))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x887))+((r01*x888))), ((((-1.0)*r11*x888))+((r10*x887))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x889=IKcos(j0);
IkReal x890=IKsin(j0);
IkReal x891=((0.125)*sj5);
IkReal x892=(cj5*sj4);
IkReal x893=(cj5*r01);
IkReal x894=(cj5*r11);
IkReal x895=(cj2*sj1);
IkReal x896=((0.35)*sj1);
IkReal x897=((1.0)*sj4*sj5);
IkReal x898=((1.0)*x889);
IkReal x899=(cj1*sj2*x889);
IkReal x900=(cj1*sj2*x890);
evalcond[0]=(((r00*x892))+x890+(((-1.0)*r01*x897)));
evalcond[1]=(((r10*x892))+(((-1.0)*x898))+(((-1.0)*r11*x897)));
evalcond[2]=(((r00*sj5))+(((-1.0)*x895*x898))+(((-1.0)*cj1*sj2*x898))+x893);
evalcond[3]=(((r10*sj5))+(((-1.0)*x900))+x894+(((-1.0)*x890*x895)));
evalcond[4]=((((-0.125)*x890))+((r00*x891))+(((0.125)*x893))+(((-1.0)*px))+(((-1.0)*x889*x896))+(((-0.3)*x899))+(((-0.3)*x889*x895)));
evalcond[5]=(((r10*x891))+(((0.125)*x894))+(((0.125)*x889))+(((-1.0)*py))+(((-0.3)*x900))+(((-0.3)*x890*x895))+(((-1.0)*x890*x896)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x901=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x901);
rxp1_0=(pz*r11);
rxp1_1=(r01*x901);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x902=IKPowWithIntegerCheck(r22,-1);
if(!x902.valid){
continue;
}
sj4array[0]=((x902.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x903=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x903);
rxp1_0=(pz*r11);
rxp1_1=(r01*x903);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x905 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x905.valid){
continue;
}
IkReal x904=x905.value;
j5array[0]=((-1.0)*x904);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x904)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x906=(cj5*sj4);
IkReal x907=(sj4*sj5);
if( IKabs((((r01*x907))+(((-1.0)*r00*x906)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x907))+((r10*x906)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x907))+(((-1.0)*r00*x906))))+IKsqr(((((-1.0)*r11*x907))+((r10*x906))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x907))+(((-1.0)*r00*x906))), ((((-1.0)*r11*x907))+((r10*x906))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x908=IKcos(j0);
IkReal x909=IKsin(j0);
IkReal x910=((0.125)*sj5);
IkReal x911=(cj5*sj4);
IkReal x912=(cj5*r01);
IkReal x913=(cj1*cj2);
IkReal x914=(cj5*r11);
IkReal x915=((0.35)*sj1);
IkReal x916=((1.0)*sj1*sj2);
IkReal x917=((1.0)*sj4*sj5);
evalcond[0]=((((-1.0)*r01*x917))+x909+((r00*x911)));
evalcond[1]=(((r10*x911))+(((-1.0)*r11*x917))+(((-1.0)*x908)));
evalcond[2]=(((r00*sj5))+(((-1.0)*x908*x916))+((x908*x913))+x912);
evalcond[3]=(((x909*x913))+((r10*sj5))+x914+(((-1.0)*x909*x916)));
evalcond[4]=((((-1.0)*x908*x915))+(((0.125)*x912))+(((-1.0)*px))+(((-0.125)*x909))+((r00*x910)));
evalcond[5]=((((0.125)*x908))+(((0.125)*x914))+((r10*x910))+(((-1.0)*py))+(((-1.0)*x909*x915)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x918=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x918);
rxp1_0=(pz*r11);
rxp1_1=(r01*x918);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x919=IKPowWithIntegerCheck(r22,-1);
if(!x919.valid){
continue;
}
sj4array[0]=((-1.0)*(x919.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x920=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x920);
rxp1_0=(pz*r11);
rxp1_1=(r01*x920);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x922 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x922.valid){
continue;
}
IkReal x921=x922.value;
j5array[0]=((-1.0)*x921);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x921)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x923=(cj5*sj4);
IkReal x924=(sj4*sj5);
if( IKabs((((r01*x924))+(((-1.0)*r00*x923)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x923))+(((-1.0)*r11*x924)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x924))+(((-1.0)*r00*x923))))+IKsqr((((r10*x923))+(((-1.0)*r11*x924))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x924))+(((-1.0)*r00*x923))), (((r10*x923))+(((-1.0)*r11*x924))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x925=IKcos(j0);
IkReal x926=IKsin(j0);
IkReal x927=((0.125)*sj5);
IkReal x928=(cj5*sj4);
IkReal x929=((1.0)*sj5);
IkReal x930=(cj1*cj2);
IkReal x931=(cj5*r11);
IkReal x932=(cj5*r01);
IkReal x933=((0.35)*sj1);
IkReal x934=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*r01*sj4*x929))+((r00*x928))+x926);
evalcond[1]=(((r10*x928))+(((-1.0)*x925))+(((-1.0)*r11*sj4*x929)));
evalcond[2]=((((-1.0)*x925*x934))+(((-1.0)*x932))+((x925*x930))+(((-1.0)*r00*x929)));
evalcond[3]=((((-1.0)*r10*x929))+(((-1.0)*x931))+(((-1.0)*x926*x934))+((x926*x930)));
evalcond[4]=((((-0.125)*x926))+(((-1.0)*x925*x933))+(((-1.0)*px))+(((0.125)*x932))+((r00*x927)));
evalcond[5]=(((r10*x927))+(((-1.0)*py))+(((0.125)*x931))+(((-1.0)*x926*x933))+(((0.125)*x925)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x935=IKPowWithIntegerCheck(r22,-1);
if(!x935.valid){
continue;
}
CheckValue<IkReal> x936=IKPowWithIntegerCheck(sj3,-1);
if(!x936.valid){
continue;
}
sj4array[0]=((x935.value)*(x936.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x937=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x937);
rxp1_0=(pz*r11);
rxp1_1=(r01*x937);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))+(IKabs((((cj3*r10*sj1*sj2))+(((-1.0)*cj1*cj2*cj3*r10))+((cj1*cj3*cj4*r11*sj2))+((cj1*cj2*cj4*r11*sj3))+((cj2*r10*sj1*sj3))+((cj2*cj3*cj4*r11*sj1))+(((-1.0)*cj4*r11*sj1*sj2*sj3))+((cj1*r10*sj2*sj3)))))+(((0.5)*(IKabs(((((-16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj2*cj3*r00))+(((-16.0)*cj1*r00*sj2*sj3))+(((-16.0)*cj3*r00*sj1*sj2))+(((-16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj4*r01*sj1*sj2*sj3)))))))+(((0.5)*(IKabs(((((2.0)*cj1*r10*sj2*sj3))+(((-2.0)*cj1*cj2*cj3*r10))+(((2.0)*cj3*r10*sj1*sj2))+(((-2.0)*cj4*r11*sj1*sj2*sj3))+(((2.0)*cj1*cj2*cj4*r11*sj3))+(((2.0)*cj2*cj3*cj4*r11*sj1))+(((2.0)*cj1*cj3*cj4*r11*sj2))+(((2.0)*cj2*r10*sj1*sj3)))))))+(IKabs(((((-8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r01*sj1))+(((-8.0)*cj1*cj3*cj4*r01*sj2))+(((8.0)*cj4*r01*sj1*sj2*sj3))+(((-8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj1*cj2*cj3*r00))+(((-8.0)*cj1*cj2*cj4*r01*sj3))+(((-8.0)*cj1*r00*sj2*sj3)))))+(((0.5)*(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))))+(IKabs(((((-0.5)*cj2*r11*sj1*sj3))+(((0.5)*cj1*cj2*cj4*r10*sj3))+(((-0.5)*cj1*r11*sj2*sj3))+(((-0.5)*cj3*r11*sj1*sj2))+(((0.5)*cj2*cj3*cj4*r10*sj1))+(((-0.5)*cj4*r10*sj1*sj2*sj3))+(((0.5)*cj1*cj2*cj3*r11))+(((0.5)*cj1*cj3*cj4*r10*sj2)))))+(((0.5)*(IKabs(((((0.5)*cj3*r11*sj1*sj2))+(((-0.5)*cj2*cj3*cj4*r10*sj1))+(((0.5)*cj1*r11*sj2*sj3))+(((0.5)*cj2*r11*sj1*sj3))+(((0.5)*cj4*r10*sj1*sj2*sj3))+(((-0.5)*cj1*cj2*cj4*r10*sj3))+(((-0.5)*cj1*cj3*cj4*r10*sj2))+(((-0.5)*cj1*cj2*cj3*r11))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x938=((0.5)*sj2);
IkReal x939=(sj1*sj3);
IkReal x940=(cj2*cj4);
IkReal x941=(cj1*cj3);
IkReal x942=(cj4*r10);
IkReal x943=((2.0)*sj2);
IkReal x944=(cj4*r11);
IkReal x945=(cj2*r10);
IkReal x946=(cj1*r11*sj3);
IkReal x947=((2.0)*x945);
IkReal x948=(cj3*r10*sj1);
IkReal x949=((0.5)*cj2*r11);
IkReal x950=(cj3*r11*sj1);
IkReal x951=(cj1*r10*sj3);
IkReal x952=(((x938*x946))+((x939*x949))+((x938*x939*x942))+((x938*x950)));
IkReal x953=(((x938*x941*x942))+(((0.5)*x940*x951))+((x941*x949))+(((0.5)*x940*x948)));
IkReal x954=(((sj2*x948))+(((-1.0)*x941*x945))+((x940*x950))+((x939*x945))+((sj2*x941*x944))+((sj2*x951))+(((-1.0)*sj2*x939*x944))+((x940*x946)));
IkReal x955=((((-1.0)*x952))+x953);
IkReal x956=((((-1.0)*x953))+x952);
op[0]=x955;
op[1]=x954;
op[2]=x955;
op[3]=((((-1.0)*x939*x943*x944))+(((2.0)*x940*x950))+(((2.0)*x940*x946))+((x939*x947))+((x943*x951))+((x941*x943*x944))+((x943*x948))+(((-1.0)*x941*x947)));
op[4]=x956;
op[5]=x954;
op[6]=x956;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5)*(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1))))))+(((htj5*htj5)*(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3))))))+(((4.0)*cj2*cj3*cj4*r00*sj1))+((htj5*(((((-8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r01*sj1))+(((-8.0)*cj1*cj3*cj4*r01*sj2))+(((8.0)*cj4*r01*sj1*sj2*sj3))+(((-8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj1*cj2*cj3*r00))+(((-8.0)*cj1*cj2*cj4*r01*sj3))+(((-8.0)*cj1*r00*sj2*sj3))))))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1))))))+(((-4.0)*cj1*r01*sj2*sj3))+(((htj5*htj5*htj5)*(((((-16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj2*cj3*r00))+(((-16.0)*cj1*r00*sj2*sj3))+(((-16.0)*cj3*r00*sj1*sj2))+(((-16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj4*r01*sj1*sj2*sj3))))))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((htj5*htj5*htj5*htj5*htj5)*(((((-8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r01*sj1))+(((-8.0)*cj1*cj3*cj4*r01*sj2))+(((8.0)*cj4*r01*sj1*sj2*sj3))+(((-8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj1*cj2*cj3*r00))+(((-8.0)*cj1*cj2*cj4*r01*sj3))+(((-8.0)*cj1*r00*sj2*sj3))))))+(((4.0)*cj1*cj2*cj4*r00*sj3)));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x957=(cj5*sj4);
IkReal x958=(sj4*sj5);
if( IKabs((((r01*x958))+(((-1.0)*r00*x957)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x958))+((r10*x957)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x958))+(((-1.0)*r00*x957))))+IKsqr(((((-1.0)*r11*x958))+((r10*x957))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x958))+(((-1.0)*r00*x957))), ((((-1.0)*r11*x958))+((r10*x957))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x959=IKcos(j0);
IkReal x960=IKsin(j0);
IkReal x961=(r10*sj5);
IkReal x962=(cj3*r00);
IkReal x963=(cj5*sj4);
IkReal x964=((1.0)*sj2);
IkReal x965=((1.0)*cj3);
IkReal x966=(r01*sj5);
IkReal x967=((1.0)*sj4);
IkReal x968=(cj5*r01);
IkReal x969=((0.3)*sj2);
IkReal x970=(r00*sj5);
IkReal x971=(cj5*r11);
IkReal x972=(cj4*sj3);
IkReal x973=(cj3*cj4);
IkReal x974=(cj2*sj1);
IkReal x975=(r11*sj5);
IkReal x976=((1.0)*cj4*cj5);
IkReal x977=(sj1*x960);
IkReal x978=(cj1*x959);
IkReal x979=(cj1*x960);
IkReal x980=((1.0)*x959);
IkReal x981=(sj1*x959);
evalcond[0]=(((r00*x963))+(((-1.0)*x966*x967))+x960);
evalcond[1]=((((-1.0)*x980))+(((-1.0)*x967*x975))+((r10*x963)));
evalcond[2]=((((-1.0)*x962*x976))+(((-1.0)*x964*x981))+((x966*x973))+((sj3*x968))+((cj2*x978))+((sj3*x970)));
evalcond[3]=((((-1.0)*cj4*cj5*r10*x965))+(((-1.0)*x964*x977))+((x973*x975))+((sj3*x961))+((cj2*x979))+((sj3*x971)));
evalcond[4]=((((-1.0)*x965*x968))+(((-1.0)*x974*x980))+(((-1.0)*x964*x978))+((x966*x972))+(((-1.0)*sj5*x962))+(((-1.0)*cj5*r00*x972)));
evalcond[5]=((((-1.0)*x960*x974))+(((-1.0)*x965*x971))+(((-1.0)*x961*x965))+(((-1.0)*x964*x979))+((x972*x975))+(((-1.0)*cj5*r10*x972)));
evalcond[6]=((((0.125)*x968))+(((-0.35)*x981))+(((0.125)*x970))+(((-1.0)*x969*x978))+(((-0.125)*x960))+(((-0.3)*x959*x974))+(((-1.0)*px)));
evalcond[7]=((((0.125)*x961))+(((0.125)*x971))+(((-1.0)*x969*x979))+(((-1.0)*py))+(((-0.3)*x960*x974))+(((0.125)*x959))+(((-0.35)*x977)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x982=IKPowWithIntegerCheck(cj3,-1);
if(!x982.valid){
continue;
}
CheckValue<IkReal> x983=IKPowWithIntegerCheck(r22,-1);
if(!x983.valid){
continue;
}
sj4array[0]=((x982.value)*(x983.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4))))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x984=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x984);
rxp1_0=(pz*r11);
rxp1_1=(r01*x984);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))+(IKabs((((cj3*r10*sj1*sj2))+(((-1.0)*cj1*cj2*cj3*r10))+((cj1*cj3*cj4*r11*sj2))+((cj1*cj2*cj4*r11*sj3))+((cj2*r10*sj1*sj3))+((cj2*cj3*cj4*r11*sj1))+(((-1.0)*cj4*r11*sj1*sj2*sj3))+((cj1*r10*sj2*sj3)))))+(((0.5)*(IKabs(((((-16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj2*cj3*r00))+(((-16.0)*cj1*r00*sj2*sj3))+(((-16.0)*cj3*r00*sj1*sj2))+(((-16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj4*r01*sj1*sj2*sj3)))))))+(((0.5)*(IKabs(((((2.0)*cj1*r10*sj2*sj3))+(((-2.0)*cj1*cj2*cj3*r10))+(((2.0)*cj3*r10*sj1*sj2))+(((-2.0)*cj4*r11*sj1*sj2*sj3))+(((2.0)*cj1*cj2*cj4*r11*sj3))+(((2.0)*cj2*cj3*cj4*r11*sj1))+(((2.0)*cj1*cj3*cj4*r11*sj2))+(((2.0)*cj2*r10*sj1*sj3)))))))+(IKabs(((((-8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r01*sj1))+(((-8.0)*cj1*cj3*cj4*r01*sj2))+(((8.0)*cj4*r01*sj1*sj2*sj3))+(((-8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj1*cj2*cj3*r00))+(((-8.0)*cj1*cj2*cj4*r01*sj3))+(((-8.0)*cj1*r00*sj2*sj3)))))+(((0.5)*(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))))+(IKabs(((((-0.5)*cj2*r11*sj1*sj3))+(((0.5)*cj1*cj2*cj4*r10*sj3))+(((-0.5)*cj1*r11*sj2*sj3))+(((-0.5)*cj3*r11*sj1*sj2))+(((0.5)*cj2*cj3*cj4*r10*sj1))+(((-0.5)*cj4*r10*sj1*sj2*sj3))+(((0.5)*cj1*cj2*cj3*r11))+(((0.5)*cj1*cj3*cj4*r10*sj2)))))+(((0.5)*(IKabs(((((0.5)*cj3*r11*sj1*sj2))+(((-0.5)*cj2*cj3*cj4*r10*sj1))+(((0.5)*cj1*r11*sj2*sj3))+(((0.5)*cj2*r11*sj1*sj3))+(((0.5)*cj4*r10*sj1*sj2*sj3))+(((-0.5)*cj1*cj2*cj4*r10*sj3))+(((-0.5)*cj1*cj3*cj4*r10*sj2))+(((-0.5)*cj1*cj2*cj3*r11))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x985=((0.5)*sj2);
IkReal x986=(sj1*sj3);
IkReal x987=(cj2*cj4);
IkReal x988=(cj1*cj3);
IkReal x989=(cj4*r10);
IkReal x990=((2.0)*sj2);
IkReal x991=(cj4*r11);
IkReal x992=(cj2*r10);
IkReal x993=(cj1*r11*sj3);
IkReal x994=((2.0)*x992);
IkReal x995=(cj3*r10*sj1);
IkReal x996=((0.5)*cj2*r11);
IkReal x997=(cj3*r11*sj1);
IkReal x998=(cj1*r10*sj3);
IkReal x999=(((x986*x996))+((x985*x986*x989))+((x985*x993))+((x985*x997)));
IkReal x1000=(((x988*x996))+((x985*x988*x989))+(((0.5)*x987*x995))+(((0.5)*x987*x998)));
IkReal x1001=(((sj2*x988*x991))+((x986*x992))+(((-1.0)*x988*x992))+((sj2*x995))+((sj2*x998))+((x987*x993))+((x987*x997))+(((-1.0)*sj2*x986*x991)));
IkReal x1002=(x1000+(((-1.0)*x999)));
IkReal x1003=((((-1.0)*x1000))+x999);
op[0]=x1002;
op[1]=x1001;
op[2]=x1002;
op[3]=(((x986*x994))+((x990*x998))+((x990*x995))+((x988*x990*x991))+(((-1.0)*x986*x990*x991))+(((-1.0)*x988*x994))+(((2.0)*x987*x993))+(((2.0)*x987*x997)));
op[4]=x1003;
op[5]=x1001;
op[6]=x1003;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5)*(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1))))))+(((htj5*htj5)*(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3))))))+(((4.0)*cj2*cj3*cj4*r00*sj1))+((htj5*(((((-8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r01*sj1))+(((-8.0)*cj1*cj3*cj4*r01*sj2))+(((8.0)*cj4*r01*sj1*sj2*sj3))+(((-8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj1*cj2*cj3*r00))+(((-8.0)*cj1*cj2*cj4*r01*sj3))+(((-8.0)*cj1*r00*sj2*sj3))))))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1))))))+(((-4.0)*cj1*r01*sj2*sj3))+(((htj5*htj5*htj5)*(((((-16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj2*cj3*r00))+(((-16.0)*cj1*r00*sj2*sj3))+(((-16.0)*cj3*r00*sj1*sj2))+(((-16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj4*r01*sj1*sj2*sj3))))))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((htj5*htj5*htj5*htj5*htj5)*(((((-8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r01*sj1))+(((-8.0)*cj1*cj3*cj4*r01*sj2))+(((8.0)*cj4*r01*sj1*sj2*sj3))+(((-8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj1*cj2*cj3*r00))+(((-8.0)*cj1*cj2*cj4*r01*sj3))+(((-8.0)*cj1*r00*sj2*sj3))))))+(((4.0)*cj1*cj2*cj4*r00*sj3)));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1004=(cj5*sj4);
IkReal x1005=(sj4*sj5);
if( IKabs((((r01*x1005))+(((-1.0)*r00*x1004)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1005))+((r10*x1004)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1005))+(((-1.0)*r00*x1004))))+IKsqr(((((-1.0)*r11*x1005))+((r10*x1004))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1005))+(((-1.0)*r00*x1004))), ((((-1.0)*r11*x1005))+((r10*x1004))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1006=IKcos(j0);
IkReal x1007=IKsin(j0);
IkReal x1008=(r10*sj5);
IkReal x1009=(cj3*r00);
IkReal x1010=(cj5*sj4);
IkReal x1011=((1.0)*sj2);
IkReal x1012=((1.0)*cj3);
IkReal x1013=(r01*sj5);
IkReal x1014=((1.0)*sj4);
IkReal x1015=(cj5*r01);
IkReal x1016=((0.3)*sj2);
IkReal x1017=(r00*sj5);
IkReal x1018=(cj5*r11);
IkReal x1019=(cj4*sj3);
IkReal x1020=(cj3*cj4);
IkReal x1021=(cj2*sj1);
IkReal x1022=(r11*sj5);
IkReal x1023=((1.0)*cj4*cj5);
IkReal x1024=(sj1*x1007);
IkReal x1025=(cj1*x1006);
IkReal x1026=(cj1*x1007);
IkReal x1027=((1.0)*x1006);
IkReal x1028=(sj1*x1006);
evalcond[0]=(x1007+(((-1.0)*x1013*x1014))+((r00*x1010)));
evalcond[1]=((((-1.0)*x1027))+(((-1.0)*x1014*x1022))+((r10*x1010)));
evalcond[2]=(((cj2*x1025))+(((-1.0)*x1009*x1023))+((sj3*x1015))+((sj3*x1017))+((x1013*x1020))+(((-1.0)*x1011*x1028)));
evalcond[3]=(((cj2*x1026))+((sj3*x1008))+((x1020*x1022))+((sj3*x1018))+(((-1.0)*cj4*cj5*r10*x1012))+(((-1.0)*x1011*x1024)));
evalcond[4]=((((-1.0)*x1012*x1015))+(((-1.0)*cj5*r00*x1019))+(((-1.0)*x1021*x1027))+((x1013*x1019))+(((-1.0)*x1011*x1025))+(((-1.0)*sj5*x1009)));
evalcond[5]=((((-1.0)*x1012*x1018))+(((-1.0)*x1008*x1012))+(((-1.0)*cj5*r10*x1019))+((x1019*x1022))+(((-1.0)*x1007*x1021))+(((-1.0)*x1011*x1026)));
evalcond[6]=((((-0.125)*x1007))+(((0.125)*x1017))+(((0.125)*x1015))+(((-1.0)*px))+(((-1.0)*x1016*x1025))+(((-0.35)*x1028))+(((-0.3)*x1006*x1021)));
evalcond[7]=((((0.125)*x1006))+(((0.125)*x1008))+(((0.125)*x1018))+(((-1.0)*py))+(((-1.0)*x1016*x1026))+(((-0.3)*x1007*x1021))+(((-0.35)*x1024)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1031 = IKatan2WithCheck(IkReal(((0.125)*r21)),IkReal(((0.125)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1031.valid){
continue;
}
IkReal x1029=((1.0)*(x1031.value));
if((((((0.015625)*(r20*r20)))+(((0.015625)*(r21*r21))))) < -0.00001)
continue;
CheckValue<IkReal> x1032=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.015625)*(r20*r20)))+(((0.015625)*(r21*r21)))))),-1);
if(!x1032.valid){
continue;
}
if( (((x1032.value)*(((((-0.3)*sj1*sj2))+(((0.3)*cj1*cj2))+(((-1.0)*pz))+(((0.35)*cj1)))))) < -1-IKFAST_SINCOS_THRESH || (((x1032.value)*(((((-0.3)*sj1*sj2))+(((0.3)*cj1*cj2))+(((-1.0)*pz))+(((0.35)*cj1)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1030=IKasin(((x1032.value)*(((((-0.3)*sj1*sj2))+(((0.3)*cj1*cj2))+(((-1.0)*pz))+(((0.35)*cj1))))));
j5array[0]=((((-1.0)*x1030))+(((-1.0)*x1029)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+x1030+(((-1.0)*x1029)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x1033=cj5*cj5;
IkReal x1034=r21*r21;
IkReal x1035=(cj3*x1033);
IkReal x1036=((((-1.0)*x1034*x1035))+((cj3*x1034))+(((-2.0)*cj3*cj5*r20*r21*sj5))+((cj3*(r22*r22)))+((x1035*(r20*r20))));
j4eval[0]=x1036;
j4eval[1]=IKsign(x1036);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1037=cj5*cj5;
IkReal x1038=r21*r21;
IkReal x1039=(sj3*x1037);
IkReal x1040=(((sj3*(r22*r22)))+((x1039*(r20*r20)))+(((-2.0)*cj5*r20*r21*sj3*sj5))+((sj3*x1038))+(((-1.0)*x1038*x1039)));
j4eval[0]=x1040;
j4eval[1]=IKsign(x1040);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1041=cj2*cj2;
IkReal x1042=cj1*cj1;
IkReal x1043=((13.44)*cj2);
IkReal x1044=((6.46153846153846)*cj2);
IkReal x1045=(cj1*sj1*sj2);
IkReal x1046=(x1041*x1042);
j0eval[0]=((4.25)+x1044+(((2.76923076923077)*x1041))+(((5.53846153846154)*cj2*x1045))+(((-1.0)*x1042*x1044))+(((6.46153846153846)*x1045))+(((-1.0)*x1042))+(((-5.53846153846154)*x1046)));
j0eval[1]=IKsign(((8.84)+x1043+(((-2.08)*x1042))+(((5.76)*x1041))+(((11.52)*cj2*x1045))+(((-1.0)*x1042*x1043))+(((13.44)*x1045))+(((-11.52)*x1046))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1047=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x1047;
j0eval[1]=IKsign(x1047);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1048=cj5*cj5;
IkReal x1049=r21*r21;
IkReal x1050=(cj1*sj2);
IkReal x1051=(cj5*r20);
IkReal x1052=(r21*sj5);
IkReal x1053=(cj2*sj1);
IkReal x1054=(x1049+(r22*r22)+(((-2.0)*x1051*x1052))+(((-1.0)*x1048*x1049))+((x1048*(r20*r20))));
j4eval[0]=x1054;
j4eval[1]=IKsign(x1054);
j4eval[2]=((IKabs((((x1050*x1051))+((x1051*x1053))+(((-1.0)*x1052*x1053))+(((-1.0)*x1050*x1052)))))+(IKabs((((r22*x1050))+((r22*x1053))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1055=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x1055;
j0eval[1]=IKsign(x1055);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-8.0)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.0)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-8.0)*px))+IKsqr(((8.0)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-8.0)*px), ((8.0)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.125)*(IKsin(j0)))));
evalcond[1]=((((0.125)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1056=((1.0)*sj5);
IkReal x1057=((((-1.0)*cj5*r11))+(((-1.0)*r10*x1056)));
j4eval[0]=x1057;
j4eval[1]=IKsign(x1057);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1056))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1058=cj5*cj5;
IkReal x1059=((1.0)*r21);
IkReal x1060=(cj5*sj5);
IkReal x1061=(((r00*r20*x1058))+(((-1.0)*r00*x1059*x1060))+((r01*r21))+(((-1.0)*r01*r20*x1060))+(((-1.0)*r01*x1058*x1059))+((r02*r22)));
j4eval[0]=x1061;
j4eval[1]=IKsign(x1061);
j4eval[2]=((IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*sj5*x1059)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1062=cj5*cj5;
IkReal x1063=(cj5*r20);
IkReal x1064=((1.0)*sj5);
IkReal x1065=(r11*r21);
IkReal x1066=(x1065+((r12*r22))+(((-1.0)*x1062*x1065))+(((-1.0)*r11*x1063*x1064))+(((-1.0)*cj5*r10*r21*x1064))+((r10*r20*x1062)));
j4eval[0]=x1066;
j4eval[1]=IKsign(x1066);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x1064))+((sj0*x1063))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1067=cj5*cj5;
IkReal x1068=(cj5*r20);
IkReal x1069=((1.0)*sj5);
IkReal x1070=(r11*r21);
CheckValue<IkReal> x1071=IKPowWithIntegerCheck(IKsign((x1070+(((-1.0)*x1067*x1070))+((r12*r22))+(((-1.0)*r11*x1068*x1069))+(((-1.0)*cj5*r10*r21*x1069))+((r10*r20*x1067)))),-1);
if(!x1071.valid){
continue;
}
CheckValue<IkReal> x1072 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x1069))+((sj0*x1068)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1072.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1071.value)))+(x1072.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1073=IKsin(j4);
IkReal x1074=IKcos(j4);
IkReal x1075=(cj5*r00);
IkReal x1076=(r11*sj5);
IkReal x1077=(r01*sj5);
IkReal x1078=(cj5*r20);
IkReal x1079=(r21*sj5);
IkReal x1080=(cj5*r10);
IkReal x1081=((1.0)*x1074);
IkReal x1082=((1.0)*x1073);
evalcond[0]=((((-1.0)*x1079*x1082))+((x1073*x1078))+(((-1.0)*r22*x1081)));
evalcond[1]=(((x1074*x1079))+(((-1.0)*x1078*x1081))+(((-1.0)*r22*x1082)));
evalcond[2]=(sj0+((x1073*x1075))+(((-1.0)*r02*x1081))+(((-1.0)*x1077*x1082)));
evalcond[3]=(((x1074*x1077))+cj0+(((-1.0)*r02*x1082))+(((-1.0)*x1075*x1081)));
evalcond[4]=(((x1074*x1076))+sj0+(((-1.0)*x1080*x1081))+(((-1.0)*r12*x1082)));
evalcond[5]=(((x1073*x1080))+(((-1.0)*x1076*x1082))+(((-1.0)*cj0))+(((-1.0)*r12*x1081)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1083=cj5*cj5;
IkReal x1084=((1.0)*r21);
IkReal x1085=(cj5*sj5);
CheckValue<IkReal> x1086 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x1084))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1086.valid){
continue;
}
CheckValue<IkReal> x1087=IKPowWithIntegerCheck(IKsign((((r00*r20*x1083))+(((-1.0)*r01*r20*x1085))+((r01*r21))+(((-1.0)*r00*x1084*x1085))+((r02*r22))+(((-1.0)*r01*x1083*x1084)))),-1);
if(!x1087.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1086.value)+(((1.5707963267949)*(x1087.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1088=IKsin(j4);
IkReal x1089=IKcos(j4);
IkReal x1090=(cj5*r00);
IkReal x1091=(r11*sj5);
IkReal x1092=(r01*sj5);
IkReal x1093=(cj5*r20);
IkReal x1094=(r21*sj5);
IkReal x1095=(cj5*r10);
IkReal x1096=((1.0)*x1089);
IkReal x1097=((1.0)*x1088);
evalcond[0]=(((x1088*x1093))+(((-1.0)*x1094*x1097))+(((-1.0)*r22*x1096)));
evalcond[1]=(((x1089*x1094))+(((-1.0)*x1093*x1096))+(((-1.0)*r22*x1097)));
evalcond[2]=(sj0+(((-1.0)*r02*x1096))+((x1088*x1090))+(((-1.0)*x1092*x1097)));
evalcond[3]=(cj0+((x1089*x1092))+(((-1.0)*x1090*x1096))+(((-1.0)*r02*x1097)));
evalcond[4]=(sj0+((x1089*x1091))+(((-1.0)*x1095*x1096))+(((-1.0)*r12*x1097)));
evalcond[5]=((((-1.0)*x1091*x1097))+((x1088*x1095))+(((-1.0)*r12*x1096))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1098=((1.0)*sj5);
CheckValue<IkReal> x1099 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1098)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1099.valid){
continue;
}
CheckValue<IkReal> x1100=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x1098)))),-1);
if(!x1100.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1099.value)+(((1.5707963267949)*(x1100.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1101=IKsin(j4);
IkReal x1102=IKcos(j4);
IkReal x1103=(cj5*r00);
IkReal x1104=(r11*sj5);
IkReal x1105=(r01*sj5);
IkReal x1106=(cj5*r20);
IkReal x1107=(r21*sj5);
IkReal x1108=(cj5*r10);
IkReal x1109=((1.0)*x1102);
IkReal x1110=((1.0)*x1101);
evalcond[0]=((((-1.0)*r22*x1109))+((x1101*x1106))+(((-1.0)*x1107*x1110)));
evalcond[1]=(((x1102*x1107))+(((-1.0)*r22*x1110))+(((-1.0)*x1106*x1109)));
evalcond[2]=(sj0+((x1101*x1103))+(((-1.0)*r02*x1109))+(((-1.0)*x1105*x1110)));
evalcond[3]=((((-1.0)*x1103*x1109))+((x1102*x1105))+cj0+(((-1.0)*r02*x1110)));
evalcond[4]=((((-1.0)*r12*x1110))+sj0+((x1102*x1104))+(((-1.0)*x1108*x1109)));
evalcond[5]=((((-1.0)*r12*x1109))+((x1101*x1108))+(((-1.0)*x1104*x1110))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-8.0)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.0)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-8.0)*px))+IKsqr(((8.0)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-8.0)*px), ((8.0)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.125)*(IKsin(j0)))));
evalcond[1]=((((0.125)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1111=((1.0)*sj5);
IkReal x1112=((((-1.0)*cj5*r11))+(((-1.0)*r10*x1111)));
j4eval[0]=x1112;
j4eval[1]=IKsign(x1112);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x1111))+((cj5*r20*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1113=((1.0)*sj5);
IkReal x1114=((((-1.0)*r00*x1113))+(((-1.0)*cj5*r01)));
j4eval[0]=x1114;
j4eval[1]=IKsign(x1114);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x1113))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1115=cj5*cj5;
IkReal x1116=((1.0)*r21);
IkReal x1117=(cj5*sj5);
IkReal x1118=((1.0)*r20);
IkReal x1119=(((r00*r20*x1115))+(((-1.0)*r00*x1116*x1117))+((r01*r21))+(((-1.0)*r01*x1117*x1118))+(((-1.0)*r01*x1115*x1116))+((r02*r22)));
j4eval[0]=x1119;
j4eval[1]=IKsign(x1119);
j4eval[2]=((IKabs(((((-1.0)*cj5*sj0*x1118))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1120=cj5*cj5;
IkReal x1121=((1.0)*r21);
IkReal x1122=(cj5*sj5);
IkReal x1123=((1.0)*r20);
CheckValue<IkReal> x1124=IKPowWithIntegerCheck(IKsign((((r01*r21))+(((-1.0)*r00*x1121*x1122))+(((-1.0)*r01*x1120*x1121))+(((-1.0)*r01*x1122*x1123))+((r02*r22))+((r00*r20*x1120)))),-1);
if(!x1124.valid){
continue;
}
CheckValue<IkReal> x1125 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*sj0*x1123))+((r21*sj0*sj5)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1125.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1124.value)))+(x1125.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1126=IKsin(j4);
IkReal x1127=IKcos(j4);
IkReal x1128=((1.0)*cj0);
IkReal x1129=(cj5*r00);
IkReal x1130=(r11*sj5);
IkReal x1131=(r01*sj5);
IkReal x1132=(cj5*r20);
IkReal x1133=(r21*sj5);
IkReal x1134=(cj5*r10);
IkReal x1135=((1.0)*x1127);
IkReal x1136=((1.0)*x1126);
evalcond[0]=(((x1126*x1132))+(((-1.0)*r22*x1135))+(((-1.0)*x1133*x1136)));
evalcond[1]=((((-1.0)*r22*x1136))+(((-1.0)*x1132*x1135))+((x1127*x1133)));
evalcond[2]=(sj0+(((-1.0)*x1131*x1136))+(((-1.0)*r02*x1135))+((x1126*x1129)));
evalcond[3]=(((x1126*x1134))+(((-1.0)*r12*x1135))+(((-1.0)*x1130*x1136))+(((-1.0)*x1128)));
evalcond[4]=((((-1.0)*x1128))+(((-1.0)*r02*x1136))+(((-1.0)*x1129*x1135))+((x1127*x1131)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x1136))+(((-1.0)*x1134*x1135))+((x1127*x1130)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1137=((1.0)*sj5);
CheckValue<IkReal> x1138 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x1137))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1138.valid){
continue;
}
CheckValue<IkReal> x1139=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1137))+(((-1.0)*cj5*r01)))),-1);
if(!x1139.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1138.value)+(((1.5707963267949)*(x1139.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1140=IKsin(j4);
IkReal x1141=IKcos(j4);
IkReal x1142=((1.0)*cj0);
IkReal x1143=(cj5*r00);
IkReal x1144=(r11*sj5);
IkReal x1145=(r01*sj5);
IkReal x1146=(cj5*r20);
IkReal x1147=(r21*sj5);
IkReal x1148=(cj5*r10);
IkReal x1149=((1.0)*x1141);
IkReal x1150=((1.0)*x1140);
evalcond[0]=(((x1140*x1146))+(((-1.0)*x1147*x1150))+(((-1.0)*r22*x1149)));
evalcond[1]=(((x1141*x1147))+(((-1.0)*x1146*x1149))+(((-1.0)*r22*x1150)));
evalcond[2]=(((x1140*x1143))+sj0+(((-1.0)*r02*x1149))+(((-1.0)*x1145*x1150)));
evalcond[3]=((((-1.0)*x1144*x1150))+((x1140*x1148))+(((-1.0)*x1142))+(((-1.0)*r12*x1149)));
evalcond[4]=((((-1.0)*x1143*x1149))+((x1141*x1145))+(((-1.0)*x1142))+(((-1.0)*r02*x1150)));
evalcond[5]=((((-1.0)*sj0))+((x1141*x1144))+(((-1.0)*r12*x1150))+(((-1.0)*x1148*x1149)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1151=((1.0)*sj5);
CheckValue<IkReal> x1152=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x1151)))),-1);
if(!x1152.valid){
continue;
}
CheckValue<IkReal> x1153 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1151)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1153.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1152.value)))+(x1153.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1154=IKsin(j4);
IkReal x1155=IKcos(j4);
IkReal x1156=((1.0)*cj0);
IkReal x1157=(cj5*r00);
IkReal x1158=(r11*sj5);
IkReal x1159=(r01*sj5);
IkReal x1160=(cj5*r20);
IkReal x1161=(r21*sj5);
IkReal x1162=(cj5*r10);
IkReal x1163=((1.0)*x1155);
IkReal x1164=((1.0)*x1154);
evalcond[0]=(((x1154*x1160))+(((-1.0)*r22*x1163))+(((-1.0)*x1161*x1164)));
evalcond[1]=(((x1155*x1161))+(((-1.0)*r22*x1164))+(((-1.0)*x1160*x1163)));
evalcond[2]=(sj0+(((-1.0)*r02*x1163))+(((-1.0)*x1159*x1164))+((x1154*x1157)));
evalcond[3]=((((-1.0)*x1156))+(((-1.0)*x1158*x1164))+(((-1.0)*r12*x1163))+((x1154*x1162)));
evalcond[4]=((((-1.0)*r02*x1164))+(((-1.0)*x1156))+(((-1.0)*x1157*x1163))+((x1155*x1159)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1162*x1163))+(((-1.0)*r12*x1164))+((x1155*x1158)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.53393665158371)*py))+(((-0.904977375565611)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.904977375565611)*py))+(((-2.53393665158371)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.53393665158371)*py))+(((-0.904977375565611)*px))))+IKsqr(((((0.904977375565611)*py))+(((-2.53393665158371)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.53393665158371)*py))+(((-0.904977375565611)*px))), ((((0.904977375565611)*py))+(((-2.53393665158371)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1165=IKcos(j0);
IkReal x1166=IKsin(j0);
evalcond[0]=((((-0.125)*x1166))+(((-1.0)*px))+(((-0.35)*x1165)));
evalcond[1]=((((-1.0)*py))+(((0.125)*x1165))+(((-0.35)*x1166)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1167=((1.0)*sj5);
IkReal x1168=((((-1.0)*r10*x1167))+(((-1.0)*cj5*r11)));
j4eval[0]=x1168;
j4eval[1]=IKsign(x1168);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1167))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1169=((1.0)*sj5);
IkReal x1170=((((-1.0)*r00*x1169))+(((-1.0)*cj5*r01)));
j4eval[0]=x1170;
j4eval[1]=IKsign(x1170);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1169))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1171=cj5*cj5;
IkReal x1172=((1.0)*r21);
IkReal x1173=(cj5*sj5);
IkReal x1174=((1.0)*r20);
IkReal x1175=((((-1.0)*r00*x1172*x1173))+((r01*r21))+(((-1.0)*r01*x1173*x1174))+(((-1.0)*r01*x1171*x1172))+((r02*r22))+((r00*r20*x1171)));
j4eval[0]=x1175;
j4eval[1]=IKsign(x1175);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*cj5*sj0*x1174))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1176=cj5*cj5;
IkReal x1177=((1.0)*r21);
IkReal x1178=(cj5*sj5);
IkReal x1179=((1.0)*r20);
CheckValue<IkReal> x1180 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*sj0*x1179))+((r21*sj0*sj5)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1180.valid){
continue;
}
CheckValue<IkReal> x1181=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1178*x1179))+((r01*r21))+(((-1.0)*r00*x1177*x1178))+(((-1.0)*r01*x1176*x1177))+((r02*r22))+((r00*r20*x1176)))),-1);
if(!x1181.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1180.value)+(((1.5707963267949)*(x1181.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1182=IKsin(j4);
IkReal x1183=IKcos(j4);
IkReal x1184=((1.0)*cj0);
IkReal x1185=(cj5*r00);
IkReal x1186=(r11*sj5);
IkReal x1187=(r01*sj5);
IkReal x1188=(cj5*r20);
IkReal x1189=(r21*sj5);
IkReal x1190=(cj5*r10);
IkReal x1191=((1.0)*x1183);
IkReal x1192=((1.0)*x1182);
evalcond[0]=((((-1.0)*x1189*x1192))+((x1182*x1188))+(((-1.0)*r22*x1191)));
evalcond[1]=(((x1183*x1189))+(((-1.0)*x1188*x1191))+(((-1.0)*r22*x1192)));
evalcond[2]=(sj0+((x1182*x1185))+(((-1.0)*x1187*x1192))+(((-1.0)*r02*x1191)));
evalcond[3]=(((x1182*x1190))+(((-1.0)*x1186*x1192))+(((-1.0)*x1184))+(((-1.0)*r12*x1191)));
evalcond[4]=(((x1183*x1187))+(((-1.0)*x1184))+(((-1.0)*x1185*x1191))+(((-1.0)*r02*x1192)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1190*x1191))+((x1183*x1186))+(((-1.0)*r12*x1192)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1193=((1.0)*sj5);
CheckValue<IkReal> x1194 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x1193))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1194.valid){
continue;
}
CheckValue<IkReal> x1195=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1193))+(((-1.0)*cj5*r01)))),-1);
if(!x1195.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1194.value)+(((1.5707963267949)*(x1195.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1196=IKsin(j4);
IkReal x1197=IKcos(j4);
IkReal x1198=((1.0)*cj0);
IkReal x1199=(cj5*r00);
IkReal x1200=(r11*sj5);
IkReal x1201=(r01*sj5);
IkReal x1202=(cj5*r20);
IkReal x1203=(r21*sj5);
IkReal x1204=(cj5*r10);
IkReal x1205=((1.0)*x1197);
IkReal x1206=((1.0)*x1196);
evalcond[0]=((((-1.0)*r22*x1205))+(((-1.0)*x1203*x1206))+((x1196*x1202)));
evalcond[1]=((((-1.0)*r22*x1206))+(((-1.0)*x1202*x1205))+((x1197*x1203)));
evalcond[2]=(sj0+(((-1.0)*r02*x1205))+((x1196*x1199))+(((-1.0)*x1201*x1206)));
evalcond[3]=((((-1.0)*x1198))+(((-1.0)*x1200*x1206))+(((-1.0)*r12*x1205))+((x1196*x1204)));
evalcond[4]=((((-1.0)*x1199*x1205))+(((-1.0)*r02*x1206))+(((-1.0)*x1198))+((x1197*x1201)));
evalcond[5]=((((-1.0)*x1204*x1205))+(((-1.0)*sj0))+((x1197*x1200))+(((-1.0)*r12*x1206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1207=((1.0)*sj5);
CheckValue<IkReal> x1208=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x1207)))),-1);
if(!x1208.valid){
continue;
}
CheckValue<IkReal> x1209 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1207)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1209.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1208.value)))+(x1209.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1210=IKsin(j4);
IkReal x1211=IKcos(j4);
IkReal x1212=((1.0)*cj0);
IkReal x1213=(cj5*r00);
IkReal x1214=(r11*sj5);
IkReal x1215=(r01*sj5);
IkReal x1216=(cj5*r20);
IkReal x1217=(r21*sj5);
IkReal x1218=(cj5*r10);
IkReal x1219=((1.0)*x1211);
IkReal x1220=((1.0)*x1210);
evalcond[0]=(((x1210*x1216))+(((-1.0)*r22*x1219))+(((-1.0)*x1217*x1220)));
evalcond[1]=((((-1.0)*x1216*x1219))+((x1211*x1217))+(((-1.0)*r22*x1220)));
evalcond[2]=(sj0+(((-1.0)*r02*x1219))+((x1210*x1213))+(((-1.0)*x1215*x1220)));
evalcond[3]=(((x1210*x1218))+(((-1.0)*x1214*x1220))+(((-1.0)*r12*x1219))+(((-1.0)*x1212)));
evalcond[4]=((((-1.0)*x1213*x1219))+((x1211*x1215))+(((-1.0)*x1212))+(((-1.0)*r02*x1220)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1218*x1219))+(((-1.0)*r12*x1220))+((x1211*x1214)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.53393665158371)*py))+(((-0.904977375565611)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.904977375565611)*py))+(((-2.53393665158371)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.53393665158371)*py))+(((-0.904977375565611)*px))))+IKsqr(((((0.904977375565611)*py))+(((-2.53393665158371)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.53393665158371)*py))+(((-0.904977375565611)*px))), ((((0.904977375565611)*py))+(((-2.53393665158371)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1221=IKcos(j0);
IkReal x1222=IKsin(j0);
evalcond[0]=((((-0.125)*x1222))+(((-1.0)*px))+(((-0.35)*x1221)));
evalcond[1]=((((0.125)*x1221))+(((-1.0)*py))+(((-0.35)*x1222)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1223=((1.0)*sj5);
IkReal x1224=((((-1.0)*cj5*r11))+(((-1.0)*r10*x1223)));
j4eval[0]=x1224;
j4eval[1]=IKsign(x1224);
j4eval[2]=((IKabs(((((-1.0)*r21*sj0*x1223))+((cj5*r20*sj0)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1225=cj5*cj5;
IkReal x1226=((1.0)*r21);
IkReal x1227=(cj5*sj5);
IkReal x1228=((((-1.0)*r01*r20*x1227))+(((-1.0)*r00*x1226*x1227))+((r01*r21))+((r00*r20*x1225))+((r02*r22))+(((-1.0)*r01*x1225*x1226)));
j4eval[0]=x1228;
j4eval[1]=IKsign(x1228);
j4eval[2]=((IKabs(((((-1.0)*cj0*sj5*x1226))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1229=cj5*cj5;
IkReal x1230=(cj5*r20);
IkReal x1231=((1.0)*sj5);
IkReal x1232=(r11*r21);
IkReal x1233=(x1232+(((-1.0)*r11*x1230*x1231))+((r12*r22))+(((-1.0)*cj5*r10*r21*x1231))+(((-1.0)*x1229*x1232))+((r10*r20*x1229)));
j4eval[0]=x1233;
j4eval[1]=IKsign(x1233);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((sj0*x1230))+(((-1.0)*r21*sj0*x1231))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1234=cj5*cj5;
IkReal x1235=(cj5*r20);
IkReal x1236=((1.0)*sj5);
IkReal x1237=(r11*r21);
CheckValue<IkReal> x1238=IKPowWithIntegerCheck(IKsign((((r10*r20*x1234))+x1237+(((-1.0)*r11*x1235*x1236))+((r12*r22))+(((-1.0)*cj5*r10*r21*x1236))+(((-1.0)*x1234*x1237)))),-1);
if(!x1238.valid){
continue;
}
CheckValue<IkReal> x1239 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x1235))+(((-1.0)*r21*sj0*x1236)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1239.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1238.value)))+(x1239.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1240=IKsin(j4);
IkReal x1241=IKcos(j4);
IkReal x1242=(cj5*r00);
IkReal x1243=(r11*sj5);
IkReal x1244=(r01*sj5);
IkReal x1245=(cj5*r20);
IkReal x1246=(r21*sj5);
IkReal x1247=(cj5*r10);
IkReal x1248=((1.0)*x1241);
IkReal x1249=((1.0)*x1240);
evalcond[0]=(((x1240*x1245))+(((-1.0)*r22*x1248))+(((-1.0)*x1246*x1249)));
evalcond[1]=((((-1.0)*x1245*x1248))+(((-1.0)*r22*x1249))+((x1241*x1246)));
evalcond[2]=((((-1.0)*r02*x1248))+(((-1.0)*x1244*x1249))+sj0+((x1240*x1242)));
evalcond[3]=((((-1.0)*r02*x1249))+cj0+(((-1.0)*x1242*x1248))+((x1241*x1244)));
evalcond[4]=(sj0+(((-1.0)*r12*x1249))+((x1241*x1243))+(((-1.0)*x1247*x1248)));
evalcond[5]=(((x1240*x1247))+(((-1.0)*x1243*x1249))+(((-1.0)*r12*x1248))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1250=cj5*cj5;
IkReal x1251=((1.0)*r21);
IkReal x1252=(cj5*sj5);
CheckValue<IkReal> x1253=IKPowWithIntegerCheck(IKsign((((r00*r20*x1250))+((r01*r21))+(((-1.0)*r01*x1250*x1251))+((r02*r22))+(((-1.0)*r00*x1251*x1252))+(((-1.0)*r01*r20*x1252)))),-1);
if(!x1253.valid){
continue;
}
CheckValue<IkReal> x1254 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x1251))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1254.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1253.value)))+(x1254.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1255=IKsin(j4);
IkReal x1256=IKcos(j4);
IkReal x1257=(cj5*r00);
IkReal x1258=(r11*sj5);
IkReal x1259=(r01*sj5);
IkReal x1260=(cj5*r20);
IkReal x1261=(r21*sj5);
IkReal x1262=(cj5*r10);
IkReal x1263=((1.0)*x1256);
IkReal x1264=((1.0)*x1255);
evalcond[0]=((((-1.0)*x1261*x1264))+(((-1.0)*r22*x1263))+((x1255*x1260)));
evalcond[1]=((((-1.0)*x1260*x1263))+(((-1.0)*r22*x1264))+((x1256*x1261)));
evalcond[2]=(sj0+((x1255*x1257))+(((-1.0)*r02*x1263))+(((-1.0)*x1259*x1264)));
evalcond[3]=(cj0+((x1256*x1259))+(((-1.0)*x1257*x1263))+(((-1.0)*r02*x1264)));
evalcond[4]=((((-1.0)*r12*x1264))+sj0+((x1256*x1258))+(((-1.0)*x1262*x1263)));
evalcond[5]=((((-1.0)*x1258*x1264))+(((-1.0)*r12*x1263))+((x1255*x1262))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1265=((1.0)*sj5);
CheckValue<IkReal> x1266 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1265)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1266.valid){
continue;
}
CheckValue<IkReal> x1267=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x1265))+(((-1.0)*cj5*r11)))),-1);
if(!x1267.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1266.value)+(((1.5707963267949)*(x1267.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1268=IKsin(j4);
IkReal x1269=IKcos(j4);
IkReal x1270=(cj5*r00);
IkReal x1271=(r11*sj5);
IkReal x1272=(r01*sj5);
IkReal x1273=(cj5*r20);
IkReal x1274=(r21*sj5);
IkReal x1275=(cj5*r10);
IkReal x1276=((1.0)*x1269);
IkReal x1277=((1.0)*x1268);
evalcond[0]=((((-1.0)*r22*x1276))+(((-1.0)*x1274*x1277))+((x1268*x1273)));
evalcond[1]=(((x1269*x1274))+(((-1.0)*r22*x1277))+(((-1.0)*x1273*x1276)));
evalcond[2]=(sj0+(((-1.0)*x1272*x1277))+(((-1.0)*r02*x1276))+((x1268*x1270)));
evalcond[3]=(((x1269*x1272))+cj0+(((-1.0)*x1270*x1276))+(((-1.0)*r02*x1277)));
evalcond[4]=(((x1269*x1271))+sj0+(((-1.0)*r12*x1277))+(((-1.0)*x1275*x1276)));
evalcond[5]=((((-1.0)*r12*x1276))+(((-1.0)*x1271*x1277))+((x1268*x1275))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-8.0)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.0)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-8.0)*px))+IKsqr(((8.0)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-8.0)*px), ((8.0)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.125)*(IKsin(j0)))));
evalcond[1]=((((0.125)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1278=((1.0)*sj5);
IkReal x1279=((((-1.0)*cj5*r11))+(((-1.0)*r10*x1278)));
j4eval[0]=x1279;
j4eval[1]=IKsign(x1279);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1278))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1280=((1.0)*sj5);
IkReal x1281=((((-1.0)*r00*x1280))+(((-1.0)*cj5*r01)));
j4eval[0]=x1281;
j4eval[1]=IKsign(x1281);
j4eval[2]=((IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x1280)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1282=cj5*cj5;
IkReal x1283=((1.0)*r21);
IkReal x1284=(cj5*sj5);
IkReal x1285=((1.0)*r20);
IkReal x1286=(((r00*r20*x1282))+(((-1.0)*r01*x1282*x1283))+(((-1.0)*r00*x1283*x1284))+((r01*r21))+(((-1.0)*r01*x1284*x1285))+((r02*r22)));
j4eval[0]=x1286;
j4eval[1]=IKsign(x1286);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*cj5*sj0*x1285))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1287=cj5*cj5;
IkReal x1288=((1.0)*r21);
IkReal x1289=(cj5*sj5);
IkReal x1290=((1.0)*r20);
CheckValue<IkReal> x1291=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1288*x1289))+((r00*r20*x1287))+((r01*r21))+(((-1.0)*r01*x1289*x1290))+((r02*r22))+(((-1.0)*r01*x1287*x1288)))),-1);
if(!x1291.valid){
continue;
}
CheckValue<IkReal> x1292 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*sj0*x1290))+((r21*sj0*sj5)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1292.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1291.value)))+(x1292.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1293=IKsin(j4);
IkReal x1294=IKcos(j4);
IkReal x1295=((1.0)*cj0);
IkReal x1296=(cj5*r00);
IkReal x1297=(r11*sj5);
IkReal x1298=(r01*sj5);
IkReal x1299=(cj5*r20);
IkReal x1300=(r21*sj5);
IkReal x1301=(cj5*r10);
IkReal x1302=((1.0)*x1294);
IkReal x1303=((1.0)*x1293);
evalcond[0]=((((-1.0)*r22*x1302))+(((-1.0)*x1300*x1303))+((x1293*x1299)));
evalcond[1]=((((-1.0)*x1299*x1302))+(((-1.0)*r22*x1303))+((x1294*x1300)));
evalcond[2]=(sj0+(((-1.0)*r02*x1302))+((x1293*x1296))+(((-1.0)*x1298*x1303)));
evalcond[3]=((((-1.0)*x1295))+(((-1.0)*x1297*x1303))+((x1293*x1301))+(((-1.0)*r12*x1302)));
evalcond[4]=((((-1.0)*x1295))+((x1294*x1298))+(((-1.0)*r02*x1303))+(((-1.0)*x1296*x1302)));
evalcond[5]=((((-1.0)*sj0))+((x1294*x1297))+(((-1.0)*r12*x1303))+(((-1.0)*x1301*x1302)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1304=((1.0)*sj5);
CheckValue<IkReal> x1305 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x1304))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1305.valid){
continue;
}
CheckValue<IkReal> x1306=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1304))+(((-1.0)*cj5*r01)))),-1);
if(!x1306.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1305.value)+(((1.5707963267949)*(x1306.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1307=IKsin(j4);
IkReal x1308=IKcos(j4);
IkReal x1309=((1.0)*cj0);
IkReal x1310=(cj5*r00);
IkReal x1311=(r11*sj5);
IkReal x1312=(r01*sj5);
IkReal x1313=(cj5*r20);
IkReal x1314=(r21*sj5);
IkReal x1315=(cj5*r10);
IkReal x1316=((1.0)*x1308);
IkReal x1317=((1.0)*x1307);
evalcond[0]=(((x1307*x1313))+(((-1.0)*r22*x1316))+(((-1.0)*x1314*x1317)));
evalcond[1]=((((-1.0)*x1313*x1316))+(((-1.0)*r22*x1317))+((x1308*x1314)));
evalcond[2]=(sj0+((x1307*x1310))+(((-1.0)*r02*x1316))+(((-1.0)*x1312*x1317)));
evalcond[3]=((((-1.0)*x1311*x1317))+((x1307*x1315))+(((-1.0)*r12*x1316))+(((-1.0)*x1309)));
evalcond[4]=(((x1308*x1312))+(((-1.0)*x1309))+(((-1.0)*r02*x1317))+(((-1.0)*x1310*x1316)));
evalcond[5]=((((-1.0)*x1315*x1316))+(((-1.0)*sj0))+((x1308*x1311))+(((-1.0)*r12*x1317)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1318=((1.0)*sj5);
CheckValue<IkReal> x1319 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1318)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1319.valid){
continue;
}
CheckValue<IkReal> x1320=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x1318)))),-1);
if(!x1320.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1319.value)+(((1.5707963267949)*(x1320.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1321=IKsin(j4);
IkReal x1322=IKcos(j4);
IkReal x1323=((1.0)*cj0);
IkReal x1324=(cj5*r00);
IkReal x1325=(r11*sj5);
IkReal x1326=(r01*sj5);
IkReal x1327=(cj5*r20);
IkReal x1328=(r21*sj5);
IkReal x1329=(cj5*r10);
IkReal x1330=((1.0)*x1322);
IkReal x1331=((1.0)*x1321);
evalcond[0]=((((-1.0)*x1328*x1331))+(((-1.0)*r22*x1330))+((x1321*x1327)));
evalcond[1]=((((-1.0)*x1327*x1330))+(((-1.0)*r22*x1331))+((x1322*x1328)));
evalcond[2]=((((-1.0)*x1326*x1331))+sj0+(((-1.0)*r02*x1330))+((x1321*x1324)));
evalcond[3]=((((-1.0)*x1325*x1331))+(((-1.0)*x1323))+((x1321*x1329))+(((-1.0)*r12*x1330)));
evalcond[4]=((((-1.0)*x1324*x1330))+(((-1.0)*x1323))+((x1322*x1326))+(((-1.0)*r02*x1331)));
evalcond[5]=((((-1.0)*sj0))+((x1322*x1325))+(((-1.0)*x1329*x1330))+(((-1.0)*r12*x1331)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-8.0)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.0)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-8.0)*px))+IKsqr(((8.0)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-8.0)*px), ((8.0)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.125)*(IKsin(j0)))));
evalcond[1]=((((0.125)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1332=((1.0)*sj5);
IkReal x1333=((((-1.0)*cj5*r11))+(((-1.0)*r10*x1332)));
j4eval[0]=x1333;
j4eval[1]=IKsign(x1333);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1332))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1334=cj5*cj5;
IkReal x1335=((1.0)*r21);
IkReal x1336=(cj5*sj5);
IkReal x1337=((((-1.0)*r01*x1334*x1335))+((r01*r21))+(((-1.0)*r01*r20*x1336))+(((-1.0)*r00*x1335*x1336))+((r00*r20*x1334))+((r02*r22)));
j4eval[0]=x1337;
j4eval[1]=IKsign(x1337);
j4eval[2]=((IKabs(((((-1.0)*cj0*sj5*x1335))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1338=cj5*cj5;
IkReal x1339=(cj5*r20);
IkReal x1340=((1.0)*sj5);
IkReal x1341=(r11*r21);
IkReal x1342=(x1341+(((-1.0)*cj5*r10*r21*x1340))+((r10*r20*x1338))+((r12*r22))+(((-1.0)*r11*x1339*x1340))+(((-1.0)*x1338*x1341)));
j4eval[0]=x1342;
j4eval[1]=IKsign(x1342);
j4eval[2]=((IKabs((((sj0*x1339))+(((-1.0)*r21*sj0*x1340)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1343=cj5*cj5;
IkReal x1344=(cj5*r20);
IkReal x1345=((1.0)*sj5);
IkReal x1346=(r11*r21);
CheckValue<IkReal> x1347 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x1344))+(((-1.0)*r21*sj0*x1345)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1347.valid){
continue;
}
CheckValue<IkReal> x1348=IKPowWithIntegerCheck(IKsign((x1346+(((-1.0)*cj5*r10*r21*x1345))+((r12*r22))+(((-1.0)*r11*x1344*x1345))+((r10*r20*x1343))+(((-1.0)*x1343*x1346)))),-1);
if(!x1348.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1347.value)+(((1.5707963267949)*(x1348.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1349=IKsin(j4);
IkReal x1350=IKcos(j4);
IkReal x1351=(cj5*r00);
IkReal x1352=(r11*sj5);
IkReal x1353=(r01*sj5);
IkReal x1354=(cj5*r20);
IkReal x1355=(r21*sj5);
IkReal x1356=(cj5*r10);
IkReal x1357=((1.0)*x1350);
IkReal x1358=((1.0)*x1349);
evalcond[0]=((((-1.0)*x1355*x1358))+(((-1.0)*r22*x1357))+((x1349*x1354)));
evalcond[1]=((((-1.0)*x1354*x1357))+(((-1.0)*r22*x1358))+((x1350*x1355)));
evalcond[2]=(sj0+(((-1.0)*r02*x1357))+((x1349*x1351))+(((-1.0)*x1353*x1358)));
evalcond[3]=(cj0+(((-1.0)*r02*x1358))+((x1350*x1353))+(((-1.0)*x1351*x1357)));
evalcond[4]=((((-1.0)*r12*x1358))+sj0+(((-1.0)*x1356*x1357))+((x1350*x1352)));
evalcond[5]=((((-1.0)*r12*x1357))+(((-1.0)*x1352*x1358))+((x1349*x1356))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1359=cj5*cj5;
IkReal x1360=((1.0)*r21);
IkReal x1361=(cj5*sj5);
CheckValue<IkReal> x1362 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x1360))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1362.valid){
continue;
}
CheckValue<IkReal> x1363=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1360*x1361))+((r01*r21))+(((-1.0)*r01*x1359*x1360))+((r00*r20*x1359))+((r02*r22))+(((-1.0)*r01*r20*x1361)))),-1);
if(!x1363.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1362.value)+(((1.5707963267949)*(x1363.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1364=IKsin(j4);
IkReal x1365=IKcos(j4);
IkReal x1366=(cj5*r00);
IkReal x1367=(r11*sj5);
IkReal x1368=(r01*sj5);
IkReal x1369=(cj5*r20);
IkReal x1370=(r21*sj5);
IkReal x1371=(cj5*r10);
IkReal x1372=((1.0)*x1365);
IkReal x1373=((1.0)*x1364);
evalcond[0]=((((-1.0)*x1370*x1373))+(((-1.0)*r22*x1372))+((x1364*x1369)));
evalcond[1]=(((x1365*x1370))+(((-1.0)*r22*x1373))+(((-1.0)*x1369*x1372)));
evalcond[2]=(sj0+(((-1.0)*r02*x1372))+((x1364*x1366))+(((-1.0)*x1368*x1373)));
evalcond[3]=(cj0+(((-1.0)*r02*x1373))+((x1365*x1368))+(((-1.0)*x1366*x1372)));
evalcond[4]=(sj0+(((-1.0)*x1371*x1372))+((x1365*x1367))+(((-1.0)*r12*x1373)));
evalcond[5]=((((-1.0)*r12*x1372))+(((-1.0)*x1367*x1373))+((x1364*x1371))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1374=((1.0)*sj5);
CheckValue<IkReal> x1375=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x1374)))),-1);
if(!x1375.valid){
continue;
}
CheckValue<IkReal> x1376 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1374)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1376.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1375.value)))+(x1376.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1377=IKsin(j4);
IkReal x1378=IKcos(j4);
IkReal x1379=(cj5*r00);
IkReal x1380=(r11*sj5);
IkReal x1381=(r01*sj5);
IkReal x1382=(cj5*r20);
IkReal x1383=(r21*sj5);
IkReal x1384=(cj5*r10);
IkReal x1385=((1.0)*x1378);
IkReal x1386=((1.0)*x1377);
evalcond[0]=((((-1.0)*x1383*x1386))+((x1377*x1382))+(((-1.0)*r22*x1385)));
evalcond[1]=((((-1.0)*x1382*x1385))+(((-1.0)*r22*x1386))+((x1378*x1383)));
evalcond[2]=(sj0+(((-1.0)*r02*x1385))+((x1377*x1379))+(((-1.0)*x1381*x1386)));
evalcond[3]=(cj0+(((-1.0)*r02*x1386))+((x1378*x1381))+(((-1.0)*x1379*x1385)));
evalcond[4]=((((-1.0)*r12*x1386))+sj0+(((-1.0)*x1384*x1385))+((x1378*x1380)));
evalcond[5]=((((-1.0)*r12*x1385))+(((-1.0)*x1380*x1386))+((x1377*x1384))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.53393665158371)*py))+(((-0.904977375565611)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.904977375565611)*py))+(((2.53393665158371)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.53393665158371)*py))+(((-0.904977375565611)*px))))+IKsqr(((((0.904977375565611)*py))+(((2.53393665158371)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.53393665158371)*py))+(((-0.904977375565611)*px))), ((((0.904977375565611)*py))+(((2.53393665158371)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1387=IKcos(j0);
IkReal x1388=IKsin(j0);
evalcond[0]=((((-0.125)*x1388))+(((-1.0)*px))+(((0.35)*x1387)));
evalcond[1]=((((0.125)*x1387))+(((-1.0)*py))+(((0.35)*x1388)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1389=((1.0)*sj5);
IkReal x1390=((((-1.0)*cj5*r11))+(((-1.0)*r10*x1389)));
j4eval[0]=x1390;
j4eval[1]=IKsign(x1390);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x1389))+((cj5*r20*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1391=cj5*cj5;
IkReal x1392=((1.0)*r21);
IkReal x1393=(cj5*sj5);
IkReal x1394=((((-1.0)*r01*x1391*x1392))+((r01*r21))+(((-1.0)*r00*x1392*x1393))+(((-1.0)*r01*r20*x1393))+((r02*r22))+((r00*r20*x1391)));
j4eval[0]=x1394;
j4eval[1]=IKsign(x1394);
j4eval[2]=((IKabs(((((-1.0)*cj0*sj5*x1392))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1395=cj5*cj5;
IkReal x1396=(cj5*r20);
IkReal x1397=((1.0)*sj5);
IkReal x1398=(r11*r21);
IkReal x1399=(x1398+(((-1.0)*r11*x1396*x1397))+((r12*r22))+(((-1.0)*cj5*r10*r21*x1397))+((r10*r20*x1395))+(((-1.0)*x1395*x1398)));
j4eval[0]=x1399;
j4eval[1]=IKsign(x1399);
j4eval[2]=((IKabs(((((-1.0)*r21*sj0*x1397))+((sj0*x1396)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1400=cj5*cj5;
IkReal x1401=(cj5*r20);
IkReal x1402=((1.0)*sj5);
IkReal x1403=(r11*r21);
CheckValue<IkReal> x1404=IKPowWithIntegerCheck(IKsign((((r10*r20*x1400))+((r12*r22))+(((-1.0)*x1400*x1403))+(((-1.0)*r11*x1401*x1402))+(((-1.0)*cj5*r10*r21*x1402))+x1403)),-1);
if(!x1404.valid){
continue;
}
CheckValue<IkReal> x1405 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x1402))+((sj0*x1401)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1405.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1404.value)))+(x1405.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1406=IKsin(j4);
IkReal x1407=IKcos(j4);
IkReal x1408=(cj5*r00);
IkReal x1409=(r11*sj5);
IkReal x1410=(r01*sj5);
IkReal x1411=(cj5*r20);
IkReal x1412=(r21*sj5);
IkReal x1413=(cj5*r10);
IkReal x1414=((1.0)*x1407);
IkReal x1415=((1.0)*x1406);
evalcond[0]=((((-1.0)*x1412*x1415))+(((-1.0)*r22*x1414))+((x1406*x1411)));
evalcond[1]=(((x1407*x1412))+(((-1.0)*r22*x1415))+(((-1.0)*x1411*x1414)));
evalcond[2]=(sj0+(((-1.0)*r02*x1414))+((x1406*x1408))+(((-1.0)*x1410*x1415)));
evalcond[3]=(((x1407*x1410))+cj0+(((-1.0)*r02*x1415))+(((-1.0)*x1408*x1414)));
evalcond[4]=(sj0+(((-1.0)*x1413*x1414))+(((-1.0)*r12*x1415))+((x1407*x1409)));
evalcond[5]=(((x1406*x1413))+(((-1.0)*r12*x1414))+(((-1.0)*x1409*x1415))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1416=cj5*cj5;
IkReal x1417=((1.0)*r21);
IkReal x1418=(cj5*sj5);
CheckValue<IkReal> x1419 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x1417))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1419.valid){
continue;
}
CheckValue<IkReal> x1420=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1417*x1418))+((r01*r21))+(((-1.0)*r01*x1416*x1417))+((r00*r20*x1416))+(((-1.0)*r01*r20*x1418))+((r02*r22)))),-1);
if(!x1420.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1419.value)+(((1.5707963267949)*(x1420.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1421=IKsin(j4);
IkReal x1422=IKcos(j4);
IkReal x1423=(cj5*r00);
IkReal x1424=(r11*sj5);
IkReal x1425=(r01*sj5);
IkReal x1426=(cj5*r20);
IkReal x1427=(r21*sj5);
IkReal x1428=(cj5*r10);
IkReal x1429=((1.0)*x1422);
IkReal x1430=((1.0)*x1421);
evalcond[0]=((((-1.0)*r22*x1429))+(((-1.0)*x1427*x1430))+((x1421*x1426)));
evalcond[1]=((((-1.0)*x1426*x1429))+((x1422*x1427))+(((-1.0)*r22*x1430)));
evalcond[2]=(sj0+(((-1.0)*x1425*x1430))+(((-1.0)*r02*x1429))+((x1421*x1423)));
evalcond[3]=(((x1422*x1425))+cj0+(((-1.0)*x1423*x1429))+(((-1.0)*r02*x1430)));
evalcond[4]=((((-1.0)*r12*x1430))+sj0+((x1422*x1424))+(((-1.0)*x1428*x1429)));
evalcond[5]=((((-1.0)*r12*x1429))+(((-1.0)*x1424*x1430))+(((-1.0)*cj0))+((x1421*x1428)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1431=((1.0)*sj5);
CheckValue<IkReal> x1432 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x1431))+((cj5*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1432.valid){
continue;
}
CheckValue<IkReal> x1433=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x1431)))),-1);
if(!x1433.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1432.value)+(((1.5707963267949)*(x1433.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1434=IKsin(j4);
IkReal x1435=IKcos(j4);
IkReal x1436=(cj5*r00);
IkReal x1437=(r11*sj5);
IkReal x1438=(r01*sj5);
IkReal x1439=(cj5*r20);
IkReal x1440=(r21*sj5);
IkReal x1441=(cj5*r10);
IkReal x1442=((1.0)*x1435);
IkReal x1443=((1.0)*x1434);
evalcond[0]=((((-1.0)*r22*x1442))+((x1434*x1439))+(((-1.0)*x1440*x1443)));
evalcond[1]=((((-1.0)*r22*x1443))+((x1435*x1440))+(((-1.0)*x1439*x1442)));
evalcond[2]=(sj0+(((-1.0)*x1438*x1443))+((x1434*x1436))+(((-1.0)*r02*x1442)));
evalcond[3]=(cj0+((x1435*x1438))+(((-1.0)*r02*x1443))+(((-1.0)*x1436*x1442)));
evalcond[4]=(sj0+(((-1.0)*r12*x1443))+((x1435*x1437))+(((-1.0)*x1441*x1442)));
evalcond[5]=(((x1434*x1441))+(((-1.0)*r12*x1442))+(((-1.0)*x1437*x1443))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.53393665158371)*py))+(((-0.904977375565611)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.904977375565611)*py))+(((2.53393665158371)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.53393665158371)*py))+(((-0.904977375565611)*px))))+IKsqr(((((0.904977375565611)*py))+(((2.53393665158371)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.53393665158371)*py))+(((-0.904977375565611)*px))), ((((0.904977375565611)*py))+(((2.53393665158371)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1444=IKcos(j0);
IkReal x1445=IKsin(j0);
evalcond[0]=((((-0.125)*x1445))+(((0.35)*x1444))+(((-1.0)*px)));
evalcond[1]=((((0.35)*x1445))+(((0.125)*x1444))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1446=((1.0)*sj5);
IkReal x1447=((((-1.0)*cj5*r11))+(((-1.0)*r10*x1446)));
j4eval[0]=x1447;
j4eval[1]=IKsign(x1447);
j4eval[2]=((IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1446)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1448=((1.0)*sj5);
IkReal x1449=((((-1.0)*r00*x1448))+(((-1.0)*cj5*r01)));
j4eval[0]=x1449;
j4eval[1]=IKsign(x1449);
j4eval[2]=((IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x1448)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1450=cj5*cj5;
IkReal x1451=((1.0)*r21);
IkReal x1452=(cj5*sj5);
IkReal x1453=((1.0)*r20);
IkReal x1454=((((-1.0)*r01*x1452*x1453))+(((-1.0)*r00*x1451*x1452))+((r01*r21))+((r00*r20*x1450))+(((-1.0)*r01*x1450*x1451))+((r02*r22)));
j4eval[0]=x1454;
j4eval[1]=IKsign(x1454);
j4eval[2]=((IKabs(((((-1.0)*cj5*sj0*x1453))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1455=cj5*cj5;
IkReal x1456=((1.0)*r21);
IkReal x1457=(cj5*sj5);
IkReal x1458=((1.0)*r20);
CheckValue<IkReal> x1459=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1455*x1456))+((r01*r21))+(((-1.0)*r00*x1456*x1457))+((r00*r20*x1455))+(((-1.0)*r01*x1457*x1458))+((r02*r22)))),-1);
if(!x1459.valid){
continue;
}
CheckValue<IkReal> x1460 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*sj0*x1458))+((r21*sj0*sj5)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1460.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1459.value)))+(x1460.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1461=IKsin(j4);
IkReal x1462=IKcos(j4);
IkReal x1463=((1.0)*cj0);
IkReal x1464=(cj5*r00);
IkReal x1465=(r11*sj5);
IkReal x1466=(r01*sj5);
IkReal x1467=(cj5*r20);
IkReal x1468=(r21*sj5);
IkReal x1469=(cj5*r10);
IkReal x1470=((1.0)*x1462);
IkReal x1471=((1.0)*x1461);
evalcond[0]=((((-1.0)*r22*x1470))+((x1461*x1467))+(((-1.0)*x1468*x1471)));
evalcond[1]=((((-1.0)*r22*x1471))+(((-1.0)*x1467*x1470))+((x1462*x1468)));
evalcond[2]=(sj0+((x1461*x1464))+(((-1.0)*r02*x1470))+(((-1.0)*x1466*x1471)));
evalcond[3]=((((-1.0)*x1463))+((x1461*x1469))+(((-1.0)*r12*x1470))+(((-1.0)*x1465*x1471)));
evalcond[4]=((((-1.0)*x1463))+((x1462*x1466))+(((-1.0)*r02*x1471))+(((-1.0)*x1464*x1470)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x1471))+(((-1.0)*x1469*x1470))+((x1462*x1465)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1472=((1.0)*sj5);
CheckValue<IkReal> x1473=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1472))+(((-1.0)*cj5*r01)))),-1);
if(!x1473.valid){
continue;
}
CheckValue<IkReal> x1474 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x1472)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1474.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1473.value)))+(x1474.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1475=IKsin(j4);
IkReal x1476=IKcos(j4);
IkReal x1477=((1.0)*cj0);
IkReal x1478=(cj5*r00);
IkReal x1479=(r11*sj5);
IkReal x1480=(r01*sj5);
IkReal x1481=(cj5*r20);
IkReal x1482=(r21*sj5);
IkReal x1483=(cj5*r10);
IkReal x1484=((1.0)*x1476);
IkReal x1485=((1.0)*x1475);
evalcond[0]=((((-1.0)*x1482*x1485))+(((-1.0)*r22*x1484))+((x1475*x1481)));
evalcond[1]=(((x1476*x1482))+(((-1.0)*x1481*x1484))+(((-1.0)*r22*x1485)));
evalcond[2]=(sj0+(((-1.0)*x1480*x1485))+(((-1.0)*r02*x1484))+((x1475*x1478)));
evalcond[3]=((((-1.0)*x1479*x1485))+(((-1.0)*r12*x1484))+(((-1.0)*x1477))+((x1475*x1483)));
evalcond[4]=(((x1476*x1480))+(((-1.0)*r02*x1485))+(((-1.0)*x1477))+(((-1.0)*x1478*x1484)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x1485))+((x1476*x1479))+(((-1.0)*x1483*x1484)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1486=((1.0)*sj5);
CheckValue<IkReal> x1487=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x1486)))),-1);
if(!x1487.valid){
continue;
}
CheckValue<IkReal> x1488 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1486)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1488.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1487.value)))+(x1488.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1489=IKsin(j4);
IkReal x1490=IKcos(j4);
IkReal x1491=((1.0)*cj0);
IkReal x1492=(cj5*r00);
IkReal x1493=(r11*sj5);
IkReal x1494=(r01*sj5);
IkReal x1495=(cj5*r20);
IkReal x1496=(r21*sj5);
IkReal x1497=(cj5*r10);
IkReal x1498=((1.0)*x1490);
IkReal x1499=((1.0)*x1489);
evalcond[0]=(((x1489*x1495))+(((-1.0)*x1496*x1499))+(((-1.0)*r22*x1498)));
evalcond[1]=((((-1.0)*x1495*x1498))+(((-1.0)*r22*x1499))+((x1490*x1496)));
evalcond[2]=(sj0+(((-1.0)*x1494*x1499))+((x1489*x1492))+(((-1.0)*r02*x1498)));
evalcond[3]=((((-1.0)*r12*x1498))+((x1489*x1497))+(((-1.0)*x1491))+(((-1.0)*x1493*x1499)));
evalcond[4]=((((-1.0)*x1491))+(((-1.0)*x1492*x1498))+(((-1.0)*r02*x1499))+((x1490*x1494)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x1499))+(((-1.0)*x1497*x1498))+((x1490*x1493)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1500=(cj2*sj1);
IkReal x1501=(cj5*r01);
IkReal x1502=(cj1*sj2);
IkReal x1503=(r00*sj5);
IkReal x1504=((8.0)*px);
IkReal x1505=((2.8)*sj1);
CheckValue<IkReal> x1506 = IKatan2WithCheck(IkReal(((((-1.0)*x1501*x1505))+(((-3.4)*x1501*x1502))+(((-3.4)*x1502*x1503))+((x1500*x1504))+(((-1.0)*x1503*x1505))+((x1502*x1504))+(((-3.4)*x1500*x1503))+(((-3.4)*x1500*x1501)))),IkReal((x1503+x1501)),IKFAST_ATAN2_MAGTHRESH);
if(!x1506.valid){
continue;
}
CheckValue<IkReal> x1507=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1502))+(((-1.0)*x1500)))),-1);
if(!x1507.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1506.value)+(((1.5707963267949)*(x1507.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1508=IKcos(j0);
IkReal x1509=IKsin(j0);
IkReal x1510=(r10*sj5);
IkReal x1511=(cj2*sj1);
IkReal x1512=(r00*sj5);
IkReal x1513=(cj5*r11);
IkReal x1514=(cj5*r01);
IkReal x1515=(cj1*sj2);
IkReal x1516=((0.35)*sj1);
IkReal x1517=((0.3)*x1509);
IkReal x1518=((1.0)*x1509);
IkReal x1519=(x1508*x1515);
evalcond[0]=((((-1.0)*x1512))+(((-1.0)*x1514))+(((-1.0)*x1519))+(((-1.0)*x1508*x1511)));
evalcond[1]=((((-1.0)*x1515*x1518))+(((-1.0)*x1510))+(((-1.0)*x1513))+(((-1.0)*x1511*x1518)));
evalcond[2]=((((-0.125)*x1509))+(((-0.3)*x1508*x1511))+(((0.125)*x1514))+(((0.125)*x1512))+(((-1.0)*px))+(((-0.3)*x1519))+(((-1.0)*x1508*x1516)));
evalcond[3]=((((-1.0)*x1515*x1517))+(((0.125)*x1510))+(((0.125)*x1513))+(((0.125)*x1508))+(((-1.0)*py))+(((-1.0)*x1509*x1516))+(((-1.0)*x1511*x1517)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1520=((1.0)*sj5);
IkReal x1521=((((-1.0)*cj5*r11))+(((-1.0)*r10*x1520)));
j4eval[0]=x1521;
j4eval[1]=IKsign(x1521);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1520))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1522=((1.0)*sj5);
IkReal x1523=((((-1.0)*r00*x1522))+(((-1.0)*cj5*r01)));
j4eval[0]=x1523;
j4eval[1]=IKsign(x1523);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1522))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1524=((1.0)*sj5);
IkReal x1525=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x1525;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs(((((-1.0)*cj0*r01*x1524))+((cj0*cj5*r00))+(((-1.0)*r11*sj0*x1524))+((cj5*r10*sj0))))));
j4eval[2]=IKsign(x1525);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1527 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1527)==0){
continue;
}
IkReal x1526=pow(x1527,-0.5);
CheckValue<IkReal> x1528 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1528.valid){
continue;
}
IkReal gconst78=((-1.0)*(x1528.value));
IkReal gconst79=((-1.0)*r21*x1526);
IkReal gconst80=(r20*x1526);
CheckValue<IkReal> x1529 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1529.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1529.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x1532 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1532.valid){
continue;
}
IkReal x1530=((-1.0)*(x1532.value));
IkReal x1531=x1526;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x1530;
IkReal gconst78=x1530;
IkReal gconst79=((-1.0)*r21*x1531);
IkReal gconst80=(r20*x1531);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x1535 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1535.valid){
continue;
}
IkReal x1533=((-1.0)*(x1535.value));
IkReal x1534=x1526;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x1533;
IkReal gconst78=x1533;
IkReal gconst79=((-1.0)*r21*x1534);
IkReal gconst80=(r20*x1534);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x1538 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1538.valid){
continue;
}
IkReal x1536=((-1.0)*(x1538.value));
IkReal x1537=x1526;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x1536;
IkReal gconst78=x1536;
IkReal gconst79=((-1.0)*r21*x1537);
IkReal gconst80=(r20*x1537);
IkReal x1539=r22*r22;
CheckValue<IkReal> x1542=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x1539))),-1);
if(!x1542.valid){
continue;
}
IkReal x1540=x1542.value;
IkReal x1541=(((x1540*(r21*r21*r21*r21)))+(((2.0)*x1540*(r20*r20)*(r21*r21)))+x1539+((x1540*(r20*r20*r20*r20))));
j4eval[0]=x1541;
j4eval[1]=IKsign(x1541);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1543=(gconst80*r20);
IkReal x1544=(cj1*sj2);
IkReal x1545=(cj2*sj1);
IkReal x1546=((1.0)*gconst79*r21);
CheckValue<IkReal> x1547=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*gconst79*r21*x1543))+(x1543*x1543)+(((gconst79*gconst79)*(r21*r21))))),-1);
if(!x1547.valid){
continue;
}
CheckValue<IkReal> x1548 = IKatan2WithCheck(IkReal((((r22*x1544))+((r22*x1545)))),IkReal((((x1543*x1544))+((x1543*x1545))+(((-1.0)*x1545*x1546))+(((-1.0)*x1544*x1546)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1548.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1547.value)))+(x1548.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1549=IKsin(j4);
IkReal x1550=IKcos(j4);
IkReal x1551=(cj1*cj2);
IkReal x1552=(gconst80*r20);
IkReal x1553=(gconst79*r21);
IkReal x1554=(gconst80*r10);
IkReal x1555=(gconst79*r01);
IkReal x1556=(gconst79*r11);
IkReal x1557=(gconst80*r00);
IkReal x1558=((1.0)*cj0);
IkReal x1559=(sj1*sj2);
IkReal x1560=((1.0)*x1550);
IkReal x1561=((1.0)*x1549);
evalcond[0]=((((-1.0)*r22*x1560))+((x1549*x1552))+(((-1.0)*x1553*x1561)));
evalcond[1]=(sj0+(((-1.0)*r02*x1560))+(((-1.0)*x1555*x1561))+((x1549*x1557)));
evalcond[2]=((((-1.0)*x1556*x1561))+((x1549*x1554))+(((-1.0)*r12*x1560))+(((-1.0)*x1558)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x1552*x1560))+((cj1*sj2))+((x1550*x1553))+(((-1.0)*r22*x1561)));
evalcond[4]=((((-1.0)*x1558*x1559))+(((-1.0)*r02*x1561))+((x1550*x1555))+(((-1.0)*x1557*x1560))+((cj0*x1551)));
evalcond[5]=(((x1550*x1556))+((sj0*x1551))+(((-1.0)*r12*x1561))+(((-1.0)*x1554*x1560))+(((-1.0)*sj0*x1559)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1562=((1.0)*gconst79);
CheckValue<IkReal> x1563 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x1562))+((cj0*gconst80*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1563.valid){
continue;
}
CheckValue<IkReal> x1564=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst80*r01))+(((-1.0)*r00*x1562)))),-1);
if(!x1564.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1563.value)+(((1.5707963267949)*(x1564.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1565=IKsin(j4);
IkReal x1566=IKcos(j4);
IkReal x1567=(cj1*cj2);
IkReal x1568=(gconst80*r20);
IkReal x1569=(gconst79*r21);
IkReal x1570=(gconst80*r10);
IkReal x1571=(gconst79*r01);
IkReal x1572=(gconst79*r11);
IkReal x1573=(gconst80*r00);
IkReal x1574=((1.0)*cj0);
IkReal x1575=(sj1*sj2);
IkReal x1576=((1.0)*x1566);
IkReal x1577=((1.0)*x1565);
evalcond[0]=((((-1.0)*r22*x1576))+(((-1.0)*x1569*x1577))+((x1565*x1568)));
evalcond[1]=((((-1.0)*r02*x1576))+(((-1.0)*x1571*x1577))+sj0+((x1565*x1573)));
evalcond[2]=((((-1.0)*x1572*x1577))+(((-1.0)*r12*x1576))+(((-1.0)*x1574))+((x1565*x1570)));
evalcond[3]=(((x1566*x1569))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x1577))+(((-1.0)*x1568*x1576)));
evalcond[4]=((((-1.0)*r02*x1577))+((x1566*x1571))+(((-1.0)*x1573*x1576))+(((-1.0)*x1574*x1575))+((cj0*x1567)));
evalcond[5]=(((x1566*x1572))+(((-1.0)*x1570*x1576))+((sj0*x1567))+(((-1.0)*r12*x1577))+(((-1.0)*sj0*x1575)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1578=((1.0)*gconst79);
CheckValue<IkReal> x1579=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x1578))+(((-1.0)*gconst80*r11)))),-1);
if(!x1579.valid){
continue;
}
CheckValue<IkReal> x1580 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst80*r20*sj0))+(((-1.0)*r21*sj0*x1578)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1580.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1579.value)))+(x1580.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1581=IKsin(j4);
IkReal x1582=IKcos(j4);
IkReal x1583=(cj1*cj2);
IkReal x1584=(gconst80*r20);
IkReal x1585=(gconst79*r21);
IkReal x1586=(gconst80*r10);
IkReal x1587=(gconst79*r01);
IkReal x1588=(gconst79*r11);
IkReal x1589=(gconst80*r00);
IkReal x1590=((1.0)*cj0);
IkReal x1591=(sj1*sj2);
IkReal x1592=((1.0)*x1582);
IkReal x1593=((1.0)*x1581);
evalcond[0]=((((-1.0)*x1585*x1593))+(((-1.0)*r22*x1592))+((x1581*x1584)));
evalcond[1]=(sj0+(((-1.0)*r02*x1592))+((x1581*x1589))+(((-1.0)*x1587*x1593)));
evalcond[2]=((((-1.0)*x1590))+(((-1.0)*x1588*x1593))+((x1581*x1586))+(((-1.0)*r12*x1592)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x1582*x1585))+(((-1.0)*x1584*x1592))+(((-1.0)*r22*x1593)));
evalcond[4]=((((-1.0)*r02*x1593))+((x1582*x1587))+(((-1.0)*x1589*x1592))+(((-1.0)*x1590*x1591))+((cj0*x1583)));
evalcond[5]=(((x1582*x1588))+((sj0*x1583))+(((-1.0)*sj0*x1591))+(((-1.0)*x1586*x1592))+(((-1.0)*r12*x1593)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1595 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1595)==0){
continue;
}
IkReal x1594=pow(x1595,-0.5);
CheckValue<IkReal> x1596 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1596.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x1596.value))));
IkReal gconst82=((1.0)*r21*x1594);
IkReal gconst83=((-1.0)*r20*x1594);
CheckValue<IkReal> x1597 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1597.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1597.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x1600 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1600.valid){
continue;
}
IkReal x1598=((1.0)*(x1600.value));
IkReal x1599=x1594;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1598)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1598)));
IkReal gconst82=((1.0)*r21*x1599);
IkReal gconst83=((-1.0)*r20*x1599);
IkReal x1601=r22*r22;
IkReal x1602=((1.0)*x1601);
CheckValue<IkReal> x1606=IKPowWithIntegerCheck(((-1.0)+x1601),-1);
if(!x1606.valid){
continue;
}
IkReal x1603=x1606.value;
if((((1.0)+(((-1.0)*x1602)))) < -0.00001)
continue;
IkReal x1604=IKsqrt(((1.0)+(((-1.0)*x1602))));
IkReal x1605=(sj0*x1603*x1604);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x1605+(((-1.0)*x1602*x1605))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x1609 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1609.valid){
continue;
}
IkReal x1607=((1.0)*(x1609.value));
IkReal x1608=x1594;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1607)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1607)));
IkReal gconst82=((1.0)*r21*x1608);
IkReal gconst83=((-1.0)*r20*x1608);
IkReal x1610=r22*r22;
IkReal x1611=((1.0)*x1610);
CheckValue<IkReal> x1615=IKPowWithIntegerCheck(((-1.0)+x1610),-1);
if(!x1615.valid){
continue;
}
IkReal x1612=x1615.value;
if((((1.0)+(((-1.0)*x1611)))) < -0.00001)
continue;
IkReal x1613=IKsqrt(((1.0)+(((-1.0)*x1611))));
IkReal x1614=(cj0*x1612*x1613);
j4eval[0]=((IKabs(((((-1.0)*x1611*x1614))+x1614)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x1618 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1618.valid){
continue;
}
IkReal x1616=((1.0)*(x1618.value));
IkReal x1617=x1594;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1616)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1616)));
IkReal gconst82=((1.0)*r21*x1617);
IkReal gconst83=((-1.0)*r20*x1617);
IkReal x1619=r22*r22;
IkReal x1620=(cj0*r02);
IkReal x1621=(r12*sj0);
CheckValue<IkReal> x1625=IKPowWithIntegerCheck(((-1.0)+x1619),-1);
if(!x1625.valid){
continue;
}
IkReal x1622=x1625.value;
if((((1.0)+(((-1.0)*x1619)))) < -0.00001)
continue;
IkReal x1623=IKsqrt(((1.0)+(((-1.0)*x1619))));
IkReal x1624=((1.0)*r22*x1622*x1623);
j4eval[0]=0;
j4eval[1]=((IKabs((x1621+x1620)))+(IKabs(((((-1.0)*x1621*x1624))+(((-1.0)*x1620*x1624))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1626=((1.0)*gconst82);
CheckValue<IkReal> x1627 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x1626))+(((-1.0)*cj0*r01*x1626))+((gconst83*r10*sj0))+((cj0*gconst83*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1627.valid){
continue;
}
CheckValue<IkReal> x1628=IKPowWithIntegerCheck(IKsign((((gconst83*r21))+((gconst82*r20)))),-1);
if(!x1628.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1627.value)+(((1.5707963267949)*(x1628.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1629=IKsin(j4);
IkReal x1630=IKcos(j4);
IkReal x1631=(cj1*cj2);
IkReal x1632=(gconst82*r01);
IkReal x1633=(gconst82*r21);
IkReal x1634=(gconst82*r11);
IkReal x1635=((1.0)*cj0);
IkReal x1636=(sj1*sj2);
IkReal x1637=((1.0)*x1630);
IkReal x1638=(gconst83*x1629);
IkReal x1639=((1.0)*x1629);
evalcond[0]=((((-1.0)*r22*x1637))+((r20*x1638))+(((-1.0)*x1633*x1639)));
evalcond[1]=(sj0+((r00*x1638))+(((-1.0)*x1632*x1639))+(((-1.0)*r02*x1637)));
evalcond[2]=((((-1.0)*x1634*x1639))+(((-1.0)*r12*x1637))+((r10*x1638))+(((-1.0)*x1635)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst83*r20*x1637))+(((-1.0)*r22*x1639))+((cj1*sj2))+((x1630*x1633)));
evalcond[4]=((((-1.0)*x1635*x1636))+(((-1.0)*gconst83*r00*x1637))+((cj0*x1631))+((x1630*x1632))+(((-1.0)*r02*x1639)));
evalcond[5]=(((sj0*x1631))+(((-1.0)*r12*x1639))+(((-1.0)*gconst83*r10*x1637))+(((-1.0)*sj0*x1636))+((x1630*x1634)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1640=((1.0)*gconst82);
CheckValue<IkReal> x1641 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst83*r20))+(((-1.0)*cj0*r21*x1640)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1641.valid){
continue;
}
CheckValue<IkReal> x1642=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1640))+(((-1.0)*gconst83*r01)))),-1);
if(!x1642.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1641.value)+(((1.5707963267949)*(x1642.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1643=IKsin(j4);
IkReal x1644=IKcos(j4);
IkReal x1645=(cj1*cj2);
IkReal x1646=(gconst82*r01);
IkReal x1647=(gconst82*r21);
IkReal x1648=(gconst82*r11);
IkReal x1649=((1.0)*cj0);
IkReal x1650=(sj1*sj2);
IkReal x1651=((1.0)*x1644);
IkReal x1652=(gconst83*x1643);
IkReal x1653=((1.0)*x1643);
evalcond[0]=((((-1.0)*r22*x1651))+(((-1.0)*x1647*x1653))+((r20*x1652)));
evalcond[1]=(sj0+(((-1.0)*x1646*x1653))+((r00*x1652))+(((-1.0)*r02*x1651)));
evalcond[2]=(((r10*x1652))+(((-1.0)*r12*x1651))+(((-1.0)*x1649))+(((-1.0)*x1648*x1653)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x1653))+(((-1.0)*gconst83*r20*x1651))+((cj1*sj2))+((x1644*x1647)));
evalcond[4]=((((-1.0)*gconst83*r00*x1651))+((x1644*x1646))+(((-1.0)*x1649*x1650))+(((-1.0)*r02*x1653))+((cj0*x1645)));
evalcond[5]=(((sj0*x1645))+(((-1.0)*r12*x1653))+(((-1.0)*sj0*x1650))+((x1644*x1648))+(((-1.0)*gconst83*r10*x1651)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1654=((1.0)*gconst82);
CheckValue<IkReal> x1655 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x1654))+((gconst83*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1655.valid){
continue;
}
CheckValue<IkReal> x1656=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x1654))+(((-1.0)*gconst83*r11)))),-1);
if(!x1656.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1655.value)+(((1.5707963267949)*(x1656.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1657=IKsin(j4);
IkReal x1658=IKcos(j4);
IkReal x1659=(cj1*cj2);
IkReal x1660=(gconst82*r01);
IkReal x1661=(gconst82*r21);
IkReal x1662=(gconst82*r11);
IkReal x1663=((1.0)*cj0);
IkReal x1664=(sj1*sj2);
IkReal x1665=((1.0)*x1658);
IkReal x1666=(gconst83*x1657);
IkReal x1667=((1.0)*x1657);
evalcond[0]=((((-1.0)*x1661*x1667))+(((-1.0)*r22*x1665))+((r20*x1666)));
evalcond[1]=(sj0+((r00*x1666))+(((-1.0)*x1660*x1667))+(((-1.0)*r02*x1665)));
evalcond[2]=(((r10*x1666))+(((-1.0)*x1662*x1667))+(((-1.0)*r12*x1665))+(((-1.0)*x1663)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst83*r20*x1665))+((cj1*sj2))+(((-1.0)*r22*x1667))+((x1658*x1661)));
evalcond[4]=((((-1.0)*gconst83*r00*x1665))+(((-1.0)*x1663*x1664))+((cj0*x1659))+((x1658*x1660))+(((-1.0)*r02*x1667)));
evalcond[5]=(((sj0*x1659))+(((-1.0)*r12*x1667))+(((-1.0)*sj0*x1664))+(((-1.0)*gconst83*r10*x1665))+((x1658*x1662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1668=((-1.0)*r00);
IkReal x1670 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x1670)==0){
continue;
}
IkReal x1669=pow(x1670,-0.5);
CheckValue<IkReal> x1671 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x1668),IKFAST_ATAN2_MAGTHRESH);
if(!x1671.valid){
continue;
}
IkReal gconst84=((-1.0)*(x1671.value));
IkReal gconst85=(r01*x1669);
IkReal gconst86=(x1668*x1669);
CheckValue<IkReal> x1672 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x1672.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1672.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x1673=((-1.0)*r00);
IkReal x1674=x1669;
CheckValue<IkReal> x1676 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x1673),IKFAST_ATAN2_MAGTHRESH);
if(!x1676.valid){
continue;
}
IkReal x1675=((-1.0)*(x1676.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst85;
cj5=gconst86;
j5=x1675;
IkReal gconst84=x1675;
IkReal gconst85=(r01*x1674);
IkReal gconst86=(x1673*x1674);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1677=((1.0)*gconst85);
CheckValue<IkReal> x1678=IKPowWithIntegerCheck(IKsign((((gconst86*r21))+((gconst85*r20)))),-1);
if(!x1678.valid){
continue;
}
CheckValue<IkReal> x1679 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x1677))+((cj0*gconst86*r00))+(((-1.0)*cj0*r01*x1677))+((gconst86*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1679.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1678.value)))+(x1679.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1680=IKsin(j4);
IkReal x1681=IKcos(j4);
IkReal x1682=(cj1*cj2);
IkReal x1683=((1.0)*cj0);
IkReal x1684=(sj1*sj2);
IkReal x1685=((1.0)*x1681);
IkReal x1686=(gconst86*x1680);
IkReal x1687=(gconst85*x1681);
IkReal x1688=((1.0)*x1680);
IkReal x1689=(gconst85*x1688);
evalcond[0]=((((-1.0)*r21*x1689))+(((-1.0)*r22*x1685))+((r20*x1686)));
evalcond[1]=((((-1.0)*r01*x1689))+sj0+((r00*x1686))+(((-1.0)*r02*x1685)));
evalcond[2]=((((-1.0)*r12*x1685))+(((-1.0)*r11*x1689))+(((-1.0)*x1683))+((r10*x1686)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst86*r20*x1685))+((cj1*sj2))+((r21*x1687))+(((-1.0)*r22*x1688)));
evalcond[4]=(((r01*x1687))+(((-1.0)*x1683*x1684))+(((-1.0)*gconst86*r00*x1685))+((cj0*x1682))+(((-1.0)*r02*x1688)));
evalcond[5]=((((-1.0)*r12*x1688))+((r11*x1687))+(((-1.0)*gconst86*r10*x1685))+((sj0*x1682))+(((-1.0)*sj0*x1684)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1690=((1.0)*gconst85);
CheckValue<IkReal> x1691 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x1690))+((gconst86*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1691.valid){
continue;
}
CheckValue<IkReal> x1692=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst86*r11))+(((-1.0)*r10*x1690)))),-1);
if(!x1692.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1691.value)+(((1.5707963267949)*(x1692.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1693=IKsin(j4);
IkReal x1694=IKcos(j4);
IkReal x1695=(cj1*cj2);
IkReal x1696=((1.0)*cj0);
IkReal x1697=(sj1*sj2);
IkReal x1698=((1.0)*x1694);
IkReal x1699=(gconst86*x1693);
IkReal x1700=(gconst85*x1694);
IkReal x1701=((1.0)*x1693);
IkReal x1702=(gconst85*x1701);
evalcond[0]=(((r20*x1699))+(((-1.0)*r21*x1702))+(((-1.0)*r22*x1698)));
evalcond[1]=(((r00*x1699))+sj0+(((-1.0)*r02*x1698))+(((-1.0)*r01*x1702)));
evalcond[2]=(((r10*x1699))+(((-1.0)*x1696))+(((-1.0)*r12*x1698))+(((-1.0)*r11*x1702)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x1700))+(((-1.0)*r22*x1701))+(((-1.0)*gconst86*r20*x1698)));
evalcond[4]=((((-1.0)*x1696*x1697))+(((-1.0)*gconst86*r00*x1698))+((r01*x1700))+(((-1.0)*r02*x1701))+((cj0*x1695)));
evalcond[5]=(((sj0*x1695))+((r11*x1700))+(((-1.0)*gconst86*r10*x1698))+(((-1.0)*sj0*x1697))+(((-1.0)*r12*x1701)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1703=((-1.0)*r01);
IkReal x1705 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x1705)==0){
continue;
}
IkReal x1704=pow(x1705,-0.5);
CheckValue<IkReal> x1706 = IKatan2WithCheck(IkReal(x1703),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x1706.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x1706.value))));
IkReal gconst88=(x1703*x1704);
IkReal gconst89=((1.0)*r00*x1704);
CheckValue<IkReal> x1707 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x1707.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1707.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x1708=((-1.0)*r01);
CheckValue<IkReal> x1711 = IKatan2WithCheck(IkReal(x1708),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x1711.valid){
continue;
}
IkReal x1709=((1.0)*(x1711.value));
IkReal x1710=x1704;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x1709)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x1709)));
IkReal gconst88=(x1708*x1710);
IkReal gconst89=((1.0)*r00*x1710);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x1712=((-1.0)*r01);
CheckValue<IkReal> x1715 = IKatan2WithCheck(IkReal(x1712),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x1715.valid){
continue;
}
IkReal x1713=((1.0)*(x1715.value));
IkReal x1714=x1704;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x1713)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x1713)));
IkReal gconst88=(x1712*x1714);
IkReal gconst89=((1.0)*r00*x1714);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1716=((-1.0)*r01);
CheckValue<IkReal> x1719 = IKatan2WithCheck(IkReal(x1716),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x1719.valid){
continue;
}
IkReal x1717=((1.0)*(x1719.value));
IkReal x1718=x1704;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x1717)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x1717)));
IkReal gconst88=(x1716*x1718);
IkReal gconst89=((1.0)*r00*x1718);
IkReal x1720=r02*r02;
IkReal x1721=(r12*sj0);
IkReal x1722=x1704;
IkReal x1723=(cj0*x1722);
j4eval[0]=((IKabs((x1721+((cj0*r02)))))+(IKabs((((r02*x1721*x1722))+((x1720*x1723))+(((-1.0)*x1723))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1724=((1.0)*gconst88);
CheckValue<IkReal> x1725=IKPowWithIntegerCheck(IKsign((((gconst89*r21))+((gconst88*r20)))),-1);
if(!x1725.valid){
continue;
}
CheckValue<IkReal> x1726 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x1724))+(((-1.0)*cj0*r01*x1724))+((cj0*gconst89*r00))+((gconst89*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1726.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1725.value)))+(x1726.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1727=IKsin(j4);
IkReal x1728=IKcos(j4);
IkReal x1729=(cj1*cj2);
IkReal x1730=(gconst89*r10);
IkReal x1731=((1.0)*cj0);
IkReal x1732=(sj1*sj2);
IkReal x1733=((1.0)*x1728);
IkReal x1734=(gconst88*x1728);
IkReal x1735=(gconst89*x1727);
IkReal x1736=((1.0)*x1727);
evalcond[0]=((((-1.0)*gconst88*r21*x1736))+((r20*x1735))+(((-1.0)*r22*x1733)));
evalcond[1]=(sj0+((r00*x1735))+(((-1.0)*gconst88*r01*x1736))+(((-1.0)*r02*x1733)));
evalcond[2]=((((-1.0)*r12*x1733))+((x1727*x1730))+(((-1.0)*gconst88*r11*x1736))+(((-1.0)*x1731)));
evalcond[3]=(((cj2*sj1))+((r21*x1734))+((cj1*sj2))+(((-1.0)*gconst89*r20*x1733))+(((-1.0)*r22*x1736)));
evalcond[4]=((((-1.0)*x1731*x1732))+((r01*x1734))+((cj0*x1729))+(((-1.0)*gconst89*r00*x1733))+(((-1.0)*r02*x1736)));
evalcond[5]=((((-1.0)*sj0*x1732))+(((-1.0)*r12*x1736))+((sj0*x1729))+(((-1.0)*x1730*x1733))+((r11*x1734)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1737=((1.0)*gconst88);
CheckValue<IkReal> x1738=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst89*r01))+(((-1.0)*r00*x1737)))),-1);
if(!x1738.valid){
continue;
}
CheckValue<IkReal> x1739 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst89*r20))+(((-1.0)*cj0*r21*x1737)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1739.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1738.value)))+(x1739.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1740=IKsin(j4);
IkReal x1741=IKcos(j4);
IkReal x1742=(cj1*cj2);
IkReal x1743=(gconst89*r10);
IkReal x1744=((1.0)*cj0);
IkReal x1745=(sj1*sj2);
IkReal x1746=((1.0)*x1741);
IkReal x1747=(gconst88*x1741);
IkReal x1748=(gconst89*x1740);
IkReal x1749=((1.0)*x1740);
evalcond[0]=((((-1.0)*r22*x1746))+(((-1.0)*gconst88*r21*x1749))+((r20*x1748)));
evalcond[1]=(sj0+(((-1.0)*gconst88*r01*x1749))+((r00*x1748))+(((-1.0)*r02*x1746)));
evalcond[2]=((((-1.0)*gconst88*r11*x1749))+(((-1.0)*r12*x1746))+(((-1.0)*x1744))+((x1740*x1743)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x1749))+((r21*x1747))+(((-1.0)*gconst89*r20*x1746)));
evalcond[4]=((((-1.0)*x1744*x1745))+(((-1.0)*gconst89*r00*x1746))+((cj0*x1742))+((r01*x1747))+(((-1.0)*r02*x1749)));
evalcond[5]=((((-1.0)*r12*x1749))+(((-1.0)*sj0*x1745))+((sj0*x1742))+((r11*x1747))+(((-1.0)*x1743*x1746)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1750=((1.0)*gconst88);
CheckValue<IkReal> x1751 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst89*r20*sj0))+(((-1.0)*r21*sj0*x1750)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1751.valid){
continue;
}
CheckValue<IkReal> x1752=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst89*r11))+(((-1.0)*r10*x1750)))),-1);
if(!x1752.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1751.value)+(((1.5707963267949)*(x1752.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1753=IKsin(j4);
IkReal x1754=IKcos(j4);
IkReal x1755=(cj1*cj2);
IkReal x1756=(gconst89*r10);
IkReal x1757=((1.0)*cj0);
IkReal x1758=(sj1*sj2);
IkReal x1759=((1.0)*x1754);
IkReal x1760=(gconst88*x1754);
IkReal x1761=(gconst89*x1753);
IkReal x1762=((1.0)*x1753);
evalcond[0]=(((r20*x1761))+(((-1.0)*r22*x1759))+(((-1.0)*gconst88*r21*x1762)));
evalcond[1]=(sj0+((r00*x1761))+(((-1.0)*r02*x1759))+(((-1.0)*gconst88*r01*x1762)));
evalcond[2]=((((-1.0)*r12*x1759))+((x1753*x1756))+(((-1.0)*gconst88*r11*x1762))+(((-1.0)*x1757)));
evalcond[3]=(((r21*x1760))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst89*r20*x1759))+(((-1.0)*r22*x1762)));
evalcond[4]=((((-1.0)*x1757*x1758))+(((-1.0)*r02*x1762))+((r01*x1760))+((cj0*x1755))+(((-1.0)*gconst89*r00*x1759)));
evalcond[5]=((((-1.0)*x1756*x1759))+(((-1.0)*sj0*x1758))+((r11*x1760))+(((-1.0)*r12*x1762))+((sj0*x1755)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x1763=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x1763;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x1763);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x1764=((1.0)*sj5);
IkReal x1765=((((-1.0)*cj5*r11))+(((-1.0)*r10*x1764)));
j4eval[0]=x1765;
j4eval[1]=IKsign(x1765);
j4eval[2]=((IKabs((((cj5*r20))+(((-1.0)*r21*x1764)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x1766=cj5*cj5;
IkReal x1767=r01*r01;
IkReal x1768=(cj5*r00);
IkReal x1769=(r01*sj5);
IkReal x1770=((((-2.0)*x1768*x1769))+x1767+((x1766*(r00*r00)))+(r02*r02)+(((-1.0)*x1766*x1767)));
j4eval[0]=x1770;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x1768))+x1769))));
j4eval[2]=IKsign(x1770);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1771=cj5*cj5;
IkReal x1772=r01*r01;
IkReal x1773=(r01*sj5);
IkReal x1774=(cj5*r00);
CheckValue<IkReal> x1775 = IKatan2WithCheck(IkReal(((((-1.0)*x1774))+x1773)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x1775.valid){
continue;
}
CheckValue<IkReal> x1776=IKPowWithIntegerCheck(IKsign((x1772+(((-2.0)*x1773*x1774))+(r02*r02)+(((-1.0)*x1771*x1772))+((x1771*(r00*r00))))),-1);
if(!x1776.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1775.value)+(((1.5707963267949)*(x1776.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1777=IKsin(j4);
IkReal x1778=IKcos(j4);
IkReal x1779=(cj5*r00);
IkReal x1780=(r11*sj5);
IkReal x1781=((1.0)*x1778);
IkReal x1782=((1.0)*x1777);
IkReal x1783=(sj5*x1778);
IkReal x1784=(cj5*x1777);
evalcond[0]=(((r20*x1784))+(((-1.0)*r22*x1781))+(((-1.0)*r21*sj5*x1782)));
evalcond[1]=(((r10*x1784))+(((-1.0)*r12*x1781))+(((-1.0)*x1780*x1782)));
evalcond[2]=((((-1.0)*x1779*x1781))+(((-1.0)*r02*x1782))+((r01*x1783)));
evalcond[3]=((1.0)+(((-1.0)*r01*sj5*x1782))+((x1777*x1779))+(((-1.0)*r02*x1781)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x1782))+((r21*x1783))+((cj1*sj2))+(((-1.0)*cj5*r20*x1781)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r12*x1782))+((x1778*x1780))+(((-1.0)*cj5*r10*x1781))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1785=((1.0)*sj5);
CheckValue<IkReal> x1786 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x1785)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1786.valid){
continue;
}
CheckValue<IkReal> x1787=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x1785)))),-1);
if(!x1787.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1786.value)+(((1.5707963267949)*(x1787.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1788=IKsin(j4);
IkReal x1789=IKcos(j4);
IkReal x1790=(cj5*r00);
IkReal x1791=(r11*sj5);
IkReal x1792=((1.0)*x1789);
IkReal x1793=((1.0)*x1788);
IkReal x1794=(sj5*x1789);
IkReal x1795=(cj5*x1788);
evalcond[0]=((((-1.0)*r22*x1792))+(((-1.0)*r21*sj5*x1793))+((r20*x1795)));
evalcond[1]=(((r10*x1795))+(((-1.0)*r12*x1792))+(((-1.0)*x1791*x1793)));
evalcond[2]=((((-1.0)*x1790*x1792))+(((-1.0)*r02*x1793))+((r01*x1794)));
evalcond[3]=((1.0)+(((-1.0)*r01*sj5*x1793))+(((-1.0)*r02*x1792))+((x1788*x1790)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x1793))+((r21*x1794))+((cj1*sj2))+(((-1.0)*cj5*r20*x1792)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r12*x1793))+((x1789*x1791))+(((-1.0)*cj5*r10*x1792))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1796 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1796.valid){
continue;
}
CheckValue<IkReal> x1797=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x1797.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1796.value)+(((1.5707963267949)*(x1797.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1798=IKsin(j4);
IkReal x1799=IKcos(j4);
IkReal x1800=(cj5*r00);
IkReal x1801=(r11*sj5);
IkReal x1802=((1.0)*x1799);
IkReal x1803=((1.0)*x1798);
IkReal x1804=(sj5*x1799);
IkReal x1805=(cj5*x1798);
evalcond[0]=((((-1.0)*r21*sj5*x1803))+((r20*x1805))+(((-1.0)*r22*x1802)));
evalcond[1]=((((-1.0)*x1801*x1803))+(((-1.0)*r12*x1802))+((r10*x1805)));
evalcond[2]=((((-1.0)*x1800*x1802))+(((-1.0)*r02*x1803))+((r01*x1804)));
evalcond[3]=((1.0)+((x1798*x1800))+(((-1.0)*r01*sj5*x1803))+(((-1.0)*r02*x1802)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*cj5*r20*x1802))+((r21*x1804))+(((-1.0)*r22*x1803)));
evalcond[5]=(((x1799*x1801))+(((-1.0)*cj5*r10*x1802))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r12*x1803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x1806=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1806;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x1806);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x1807=((1.0)*sj5);
IkReal x1808=((((-1.0)*r20*x1807))+(((-1.0)*cj5*r21)));
j4eval[0]=x1808;
j4eval[1]=((IKabs((((cj5*r10))+(((-1.0)*r11*x1807)))))+(IKabs(r12)));
j4eval[2]=IKsign(x1808);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x1809=cj5*cj5;
IkReal x1810=r01*r01;
IkReal x1811=(r01*sj5);
IkReal x1812=(cj5*r00);
IkReal x1813=((((-1.0)*(r02*r02)))+((x1809*x1810))+(((2.0)*x1811*x1812))+(((-1.0)*x1809*(r00*r00)))+(((-1.0)*x1810)));
j4eval[0]=x1813;
j4eval[1]=IKsign(x1813);
j4eval[2]=((IKabs(r02))+(IKabs((x1811+(((-1.0)*x1812))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1814=cj5*cj5;
IkReal x1815=r01*r01;
IkReal x1816=(r01*sj5);
IkReal x1817=(cj5*r00);
CheckValue<IkReal> x1818 = IKatan2WithCheck(IkReal((x1816+(((-1.0)*x1817)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x1818.valid){
continue;
}
CheckValue<IkReal> x1819=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x1816*x1817))+((x1814*x1815))+(((-1.0)*x1815))+(((-1.0)*x1814*(r00*r00))))),-1);
if(!x1819.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1818.value)+(((1.5707963267949)*(x1819.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1820=IKsin(j4);
IkReal x1821=IKcos(j4);
IkReal x1822=(cj5*r00);
IkReal x1823=(cj5*r20);
IkReal x1824=(cj5*r10);
IkReal x1825=((1.0)*x1821);
IkReal x1826=(sj5*x1821);
IkReal x1827=((1.0)*x1820);
IkReal x1828=(sj5*x1827);
evalcond[0]=((((-1.0)*r22*x1825))+((x1820*x1823))+(((-1.0)*r21*x1828)));
evalcond[1]=((((-1.0)*r12*x1825))+(((-1.0)*r11*x1828))+((x1820*x1824)));
evalcond[2]=(((r01*x1826))+(((-1.0)*x1822*x1825))+(((-1.0)*r02*x1827)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x1828))+(((-1.0)*r02*x1825))+((x1820*x1822)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x1827))+(((-1.0)*x1823*x1825))+((r21*x1826)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x1827))+((r11*x1826))+(((-1.0)*x1824*x1825)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1829=((1.0)*sj5);
CheckValue<IkReal> x1830 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x1829)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1830.valid){
continue;
}
CheckValue<IkReal> x1831=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*x1829)))),-1);
if(!x1831.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1830.value)+(((1.5707963267949)*(x1831.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1832=IKsin(j4);
IkReal x1833=IKcos(j4);
IkReal x1834=(cj5*r00);
IkReal x1835=(cj5*r20);
IkReal x1836=(cj5*r10);
IkReal x1837=((1.0)*x1833);
IkReal x1838=(sj5*x1833);
IkReal x1839=((1.0)*x1832);
IkReal x1840=(sj5*x1839);
evalcond[0]=(((x1832*x1835))+(((-1.0)*r21*x1840))+(((-1.0)*r22*x1837)));
evalcond[1]=((((-1.0)*r11*x1840))+((x1832*x1836))+(((-1.0)*r12*x1837)));
evalcond[2]=(((r01*x1838))+(((-1.0)*x1834*x1837))+(((-1.0)*r02*x1839)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x1840))+((x1832*x1834))+(((-1.0)*r02*x1837)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x1835*x1837))+((r21*x1838))+(((-1.0)*r22*x1839)));
evalcond[5]=((((-1.0)*x1836*x1837))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x1838))+(((-1.0)*r12*x1839)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1841=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1841.valid){
continue;
}
CheckValue<IkReal> x1842 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1842.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1841.value)))+(x1842.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1843=IKsin(j4);
IkReal x1844=IKcos(j4);
IkReal x1845=(cj5*r00);
IkReal x1846=(cj5*r20);
IkReal x1847=(cj5*r10);
IkReal x1848=((1.0)*x1844);
IkReal x1849=(sj5*x1844);
IkReal x1850=((1.0)*x1843);
IkReal x1851=(sj5*x1850);
evalcond[0]=((((-1.0)*r22*x1848))+((x1843*x1846))+(((-1.0)*r21*x1851)));
evalcond[1]=((((-1.0)*r11*x1851))+(((-1.0)*r12*x1848))+((x1843*x1847)));
evalcond[2]=(((r01*x1849))+(((-1.0)*r02*x1850))+(((-1.0)*x1845*x1848)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x1848))+(((-1.0)*r01*x1851))+((x1843*x1845)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x1850))+((r21*x1849))+(((-1.0)*x1846*x1848)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x1850))+(((-1.0)*x1847*x1848))+((r11*x1849)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1852=((-1.0)*r10);
IkReal x1854 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x1854)==0){
continue;
}
IkReal x1853=pow(x1854,-0.5);
CheckValue<IkReal> x1855 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x1852),IKFAST_ATAN2_MAGTHRESH);
if(!x1855.valid){
continue;
}
IkReal gconst90=((-1.0)*(x1855.value));
IkReal gconst91=(r11*x1853);
IkReal gconst92=(x1852*x1853);
CheckValue<IkReal> x1856 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1856.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1856.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x1857=((-1.0)*r10);
IkReal x1858=x1853;
CheckValue<IkReal> x1860 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x1857),IKFAST_ATAN2_MAGTHRESH);
if(!x1860.valid){
continue;
}
IkReal x1859=((-1.0)*(x1860.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst91;
cj5=gconst92;
j5=x1859;
IkReal gconst90=x1859;
IkReal gconst91=(r11*x1858);
IkReal gconst92=(x1857*x1858);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1861=((1.0)*gconst91);
CheckValue<IkReal> x1862 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst92*r00))+((gconst92*r10*sj0))+(((-1.0)*r11*sj0*x1861))+(((-1.0)*cj0*r01*x1861)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1862.valid){
continue;
}
CheckValue<IkReal> x1863=IKPowWithIntegerCheck(IKsign((((gconst91*r20))+((gconst92*r21)))),-1);
if(!x1863.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1862.value)+(((1.5707963267949)*(x1863.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1864=IKsin(j4);
IkReal x1865=IKcos(j4);
IkReal x1866=(cj1*cj2);
IkReal x1867=(gconst92*r10);
IkReal x1868=(gconst92*r00);
IkReal x1869=(gconst92*r20);
IkReal x1870=((1.0)*cj0);
IkReal x1871=(sj1*sj2);
IkReal x1872=((1.0)*x1865);
IkReal x1873=(gconst91*x1865);
IkReal x1874=((1.0)*x1864);
IkReal x1875=(gconst91*x1874);
evalcond[0]=(((x1864*x1869))+(((-1.0)*r22*x1872))+(((-1.0)*r21*x1875)));
evalcond[1]=(sj0+((x1864*x1868))+(((-1.0)*r02*x1872))+(((-1.0)*r01*x1875)));
evalcond[2]=(((x1864*x1867))+(((-1.0)*x1870))+(((-1.0)*r11*x1875))+(((-1.0)*r12*x1872)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x1874))+(((-1.0)*x1869*x1872))+((cj1*sj2))+((r21*x1873)));
evalcond[4]=((((-1.0)*x1868*x1872))+(((-1.0)*r02*x1874))+(((-1.0)*x1870*x1871))+((r01*x1873))+((cj0*x1866)));
evalcond[5]=((((-1.0)*x1867*x1872))+(((-1.0)*r12*x1874))+(((-1.0)*sj0*x1871))+((sj0*x1866))+((r11*x1873)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1876=((1.0)*gconst91);
CheckValue<IkReal> x1877 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst92*r20))+(((-1.0)*cj0*r21*x1876)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1877.valid){
continue;
}
CheckValue<IkReal> x1878=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1876))+(((-1.0)*gconst92*r01)))),-1);
if(!x1878.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1877.value)+(((1.5707963267949)*(x1878.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1879=IKsin(j4);
IkReal x1880=IKcos(j4);
IkReal x1881=(cj1*cj2);
IkReal x1882=(gconst92*r10);
IkReal x1883=(gconst92*r00);
IkReal x1884=(gconst92*r20);
IkReal x1885=((1.0)*cj0);
IkReal x1886=(sj1*sj2);
IkReal x1887=((1.0)*x1880);
IkReal x1888=(gconst91*x1880);
IkReal x1889=((1.0)*x1879);
IkReal x1890=(gconst91*x1889);
evalcond[0]=(((x1879*x1884))+(((-1.0)*r22*x1887))+(((-1.0)*r21*x1890)));
evalcond[1]=(((x1879*x1883))+sj0+(((-1.0)*r02*x1887))+(((-1.0)*r01*x1890)));
evalcond[2]=(((x1879*x1882))+(((-1.0)*r12*x1887))+(((-1.0)*r11*x1890))+(((-1.0)*x1885)));
evalcond[3]=(((cj2*sj1))+((r21*x1888))+((cj1*sj2))+(((-1.0)*r22*x1889))+(((-1.0)*x1884*x1887)));
evalcond[4]=((((-1.0)*x1883*x1887))+(((-1.0)*r02*x1889))+((r01*x1888))+(((-1.0)*x1885*x1886))+((cj0*x1881)));
evalcond[5]=((((-1.0)*x1882*x1887))+(((-1.0)*sj0*x1886))+(((-1.0)*r12*x1889))+((r11*x1888))+((sj0*x1881)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1891=((-1.0)*r11);
IkReal x1893 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x1893)==0){
continue;
}
IkReal x1892=pow(x1893,-0.5);
CheckValue<IkReal> x1894 = IKatan2WithCheck(IkReal(x1891),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1894.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x1894.value))));
IkReal gconst94=(x1891*x1892);
IkReal gconst95=((1.0)*r10*x1892);
CheckValue<IkReal> x1895 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1895.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1895.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x1896=((-1.0)*r11);
CheckValue<IkReal> x1899 = IKatan2WithCheck(IkReal(x1896),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1899.valid){
continue;
}
IkReal x1897=((1.0)*(x1899.value));
IkReal x1898=x1892;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x1897)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x1897)));
IkReal gconst94=(x1896*x1898);
IkReal gconst95=((1.0)*r10*x1898);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1900=((-1.0)*r11);
CheckValue<IkReal> x1903 = IKatan2WithCheck(IkReal(x1900),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1903.valid){
continue;
}
IkReal x1901=((1.0)*(x1903.value));
IkReal x1902=x1892;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x1901)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x1901)));
IkReal gconst94=(x1900*x1902);
IkReal gconst95=((1.0)*r10*x1902);
IkReal x1904=r12*r12;
IkReal x1905=(cj0*r02);
IkReal x1906=x1892;
IkReal x1907=(sj0*x1906);
j4eval[0]=((IKabs((x1905+((r12*sj0)))))+(IKabs((((x1904*x1907))+(((-1.0)*x1907))+((r12*x1905*x1906))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1908=((-1.0)*r11);
CheckValue<IkReal> x1911 = IKatan2WithCheck(IkReal(x1908),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1911.valid){
continue;
}
IkReal x1909=((1.0)*(x1911.value));
IkReal x1910=x1892;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x1909)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x1909)));
IkReal gconst94=(x1908*x1910);
IkReal gconst95=((1.0)*r10*x1910);
IkReal x1912=(cj1*r22*sj2);
IkReal x1913=(cj2*r22*sj1);
IkReal x1914=x1892;
IkReal x1915=(r12*x1914);
j4eval[0]=((IKabs((x1913+x1912)))+(IKabs((((x1913*x1915))+((x1912*x1915))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1916=(cj2*sj1);
IkReal x1917=(gconst94*r21);
IkReal x1918=(gconst95*r20);
IkReal x1919=(cj1*sj2);
CheckValue<IkReal> x1920=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x1917*x1917)+(x1918*x1918)+(((-2.0)*x1917*x1918)))),-1);
if(!x1920.valid){
continue;
}
CheckValue<IkReal> x1921 = IKatan2WithCheck(IkReal((((r22*x1919))+((r22*x1916)))),IkReal((((x1916*x1918))+(((-1.0)*x1917*x1919))+((x1918*x1919))+(((-1.0)*x1916*x1917)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1921.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1920.value)))+(x1921.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1922=IKsin(j4);
IkReal x1923=IKcos(j4);
IkReal x1924=(cj1*cj2);
IkReal x1925=(gconst95*r10);
IkReal x1926=((1.0)*cj0);
IkReal x1927=(sj1*sj2);
IkReal x1928=((1.0)*x1923);
IkReal x1929=(gconst95*x1922);
IkReal x1930=(gconst94*x1923);
IkReal x1931=((1.0)*x1922);
IkReal x1932=(gconst94*x1931);
evalcond[0]=(((r20*x1929))+(((-1.0)*r22*x1928))+(((-1.0)*r21*x1932)));
evalcond[1]=((((-1.0)*r01*x1932))+((r00*x1929))+sj0+(((-1.0)*r02*x1928)));
evalcond[2]=((((-1.0)*r12*x1928))+(((-1.0)*x1926))+(((-1.0)*r11*x1932))+((x1922*x1925)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst95*r20*x1928))+(((-1.0)*r22*x1931))+((r21*x1930)));
evalcond[4]=((((-1.0)*gconst95*r00*x1928))+((r01*x1930))+((cj0*x1924))+(((-1.0)*x1926*x1927))+(((-1.0)*r02*x1931)));
evalcond[5]=((((-1.0)*r12*x1931))+((r11*x1930))+(((-1.0)*x1925*x1928))+(((-1.0)*sj0*x1927))+((sj0*x1924)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1933=((1.0)*gconst94);
CheckValue<IkReal> x1934=IKPowWithIntegerCheck(IKsign((((gconst95*r21))+((gconst94*r20)))),-1);
if(!x1934.valid){
continue;
}
CheckValue<IkReal> x1935 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst95*r10*sj0))+(((-1.0)*cj0*r01*x1933))+(((-1.0)*r11*sj0*x1933))+((cj0*gconst95*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1935.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1934.value)))+(x1935.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1936=IKsin(j4);
IkReal x1937=IKcos(j4);
IkReal x1938=(cj1*cj2);
IkReal x1939=(gconst95*r10);
IkReal x1940=((1.0)*cj0);
IkReal x1941=(sj1*sj2);
IkReal x1942=((1.0)*x1937);
IkReal x1943=(gconst95*x1936);
IkReal x1944=(gconst94*x1937);
IkReal x1945=((1.0)*x1936);
IkReal x1946=(gconst94*x1945);
evalcond[0]=((((-1.0)*r21*x1946))+(((-1.0)*r22*x1942))+((r20*x1943)));
evalcond[1]=(sj0+(((-1.0)*r02*x1942))+((r00*x1943))+(((-1.0)*r01*x1946)));
evalcond[2]=((((-1.0)*x1940))+((x1936*x1939))+(((-1.0)*r12*x1942))+(((-1.0)*r11*x1946)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x1945))+((cj1*sj2))+((r21*x1944))+(((-1.0)*gconst95*r20*x1942)));
evalcond[4]=((((-1.0)*gconst95*r00*x1942))+(((-1.0)*x1940*x1941))+(((-1.0)*r02*x1945))+((cj0*x1938))+((r01*x1944)));
evalcond[5]=((((-1.0)*sj0*x1941))+((r11*x1944))+((sj0*x1938))+(((-1.0)*r12*x1945))+(((-1.0)*x1939*x1942)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1947=((1.0)*gconst94);
CheckValue<IkReal> x1948 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x1947))+((cj0*gconst95*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1948.valid){
continue;
}
CheckValue<IkReal> x1949=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r01))+(((-1.0)*r00*x1947)))),-1);
if(!x1949.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1948.value)+(((1.5707963267949)*(x1949.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1950=IKsin(j4);
IkReal x1951=IKcos(j4);
IkReal x1952=(cj1*cj2);
IkReal x1953=(gconst95*r10);
IkReal x1954=((1.0)*cj0);
IkReal x1955=(sj1*sj2);
IkReal x1956=((1.0)*x1951);
IkReal x1957=(gconst95*x1950);
IkReal x1958=(gconst94*x1951);
IkReal x1959=((1.0)*x1950);
IkReal x1960=(gconst94*x1959);
evalcond[0]=((((-1.0)*r22*x1956))+((r20*x1957))+(((-1.0)*r21*x1960)));
evalcond[1]=(sj0+(((-1.0)*r02*x1956))+(((-1.0)*r01*x1960))+((r00*x1957)));
evalcond[2]=((((-1.0)*x1954))+((x1950*x1953))+(((-1.0)*r12*x1956))+(((-1.0)*r11*x1960)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x1959))+((cj1*sj2))+((r21*x1958))+(((-1.0)*gconst95*r20*x1956)));
evalcond[4]=(((cj0*x1952))+(((-1.0)*gconst95*r00*x1956))+(((-1.0)*x1954*x1955))+(((-1.0)*r02*x1959))+((r01*x1958)));
evalcond[5]=((((-1.0)*sj0*x1955))+((r11*x1958))+((sj0*x1952))+(((-1.0)*x1953*x1956))+(((-1.0)*r12*x1959)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x1961=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x1961;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x1961);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x1962=((1.0)*sj5);
IkReal x1963=((((-1.0)*r00*x1962))+(((-1.0)*cj5*r01)));
j4eval[0]=x1963;
j4eval[1]=((IKabs((((cj5*r20))+(((-1.0)*r21*x1962)))))+(IKabs(r22)));
j4eval[2]=IKsign(x1963);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x1964=cj5*cj5;
IkReal x1965=r11*r11;
IkReal x1966=(cj5*r10);
IkReal x1967=(r11*sj5);
IkReal x1968=(((x1964*x1965))+(((-1.0)*x1965))+(((-1.0)*(r12*r12)))+(((2.0)*x1966*x1967))+(((-1.0)*x1964*(r10*r10))));
j4eval[0]=x1968;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x1966))+x1967))));
j4eval[2]=IKsign(x1968);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1969=cj5*cj5;
IkReal x1970=r11*r11;
IkReal x1971=(cj5*r10);
IkReal x1972=(r11*sj5);
CheckValue<IkReal> x1973 = IKatan2WithCheck(IkReal(((((-1.0)*x1971))+x1972)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x1973.valid){
continue;
}
CheckValue<IkReal> x1974=IKPowWithIntegerCheck(IKsign((((x1969*x1970))+(((2.0)*x1971*x1972))+(((-1.0)*x1970))+(((-1.0)*(r12*r12)))+(((-1.0)*x1969*(r10*r10))))),-1);
if(!x1974.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1973.value)+(((1.5707963267949)*(x1974.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1975=IKsin(j4);
IkReal x1976=IKcos(j4);
IkReal x1977=(cj5*r00);
IkReal x1978=((1.0)*x1976);
IkReal x1979=(sj5*x1976);
IkReal x1980=(cj5*x1975);
IkReal x1981=((1.0)*x1975);
IkReal x1982=(sj5*x1981);
evalcond[0]=((((-1.0)*r22*x1978))+(((-1.0)*r21*x1982))+((r20*x1980)));
evalcond[1]=(((x1975*x1977))+(((-1.0)*r02*x1978))+(((-1.0)*r01*x1982)));
evalcond[2]=((((-1.0)*cj5*r10*x1978))+((r11*x1979))+(((-1.0)*r12*x1981)));
evalcond[3]=((-1.0)+((r10*x1980))+(((-1.0)*r11*x1982))+(((-1.0)*r12*x1978)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*cj5*r20*x1978))+((r21*x1979))+(((-1.0)*r22*x1981)));
evalcond[5]=((((-1.0)*r02*x1981))+(((-1.0)*sj1*sj2))+((r01*x1979))+(((-1.0)*x1977*x1978))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1983=((1.0)*sj5);
CheckValue<IkReal> x1984 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x1983)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1984.valid){
continue;
}
CheckValue<IkReal> x1985=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1983))+(((-1.0)*cj5*r01)))),-1);
if(!x1985.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1984.value)+(((1.5707963267949)*(x1985.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1986=IKsin(j4);
IkReal x1987=IKcos(j4);
IkReal x1988=(cj5*r00);
IkReal x1989=((1.0)*x1987);
IkReal x1990=(sj5*x1987);
IkReal x1991=(cj5*x1986);
IkReal x1992=((1.0)*x1986);
IkReal x1993=(sj5*x1992);
evalcond[0]=((((-1.0)*r21*x1993))+((r20*x1991))+(((-1.0)*r22*x1989)));
evalcond[1]=((((-1.0)*r02*x1989))+(((-1.0)*r01*x1993))+((x1986*x1988)));
evalcond[2]=(((r11*x1990))+(((-1.0)*r12*x1992))+(((-1.0)*cj5*r10*x1989)));
evalcond[3]=((-1.0)+((r10*x1991))+(((-1.0)*r12*x1989))+(((-1.0)*r11*x1993)));
evalcond[4]=(((cj2*sj1))+((r21*x1990))+((cj1*sj2))+(((-1.0)*cj5*r20*x1989))+(((-1.0)*r22*x1992)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x1992))+(((-1.0)*x1988*x1989))+((cj1*cj2))+((r01*x1990)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1994=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x1994.valid){
continue;
}
CheckValue<IkReal> x1995 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1995.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1994.value)))+(x1995.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1996=IKsin(j4);
IkReal x1997=IKcos(j4);
IkReal x1998=(cj5*r00);
IkReal x1999=((1.0)*x1997);
IkReal x2000=(sj5*x1997);
IkReal x2001=(cj5*x1996);
IkReal x2002=((1.0)*x1996);
IkReal x2003=(sj5*x2002);
evalcond[0]=(((r20*x2001))+(((-1.0)*r22*x1999))+(((-1.0)*r21*x2003)));
evalcond[1]=(((x1996*x1998))+(((-1.0)*r01*x2003))+(((-1.0)*r02*x1999)));
evalcond[2]=(((r11*x2000))+(((-1.0)*r12*x2002))+(((-1.0)*cj5*r10*x1999)));
evalcond[3]=((-1.0)+((r10*x2001))+(((-1.0)*r11*x2003))+(((-1.0)*r12*x1999)));
evalcond[4]=(((r21*x2000))+((cj2*sj1))+(((-1.0)*r22*x2002))+((cj1*sj2))+(((-1.0)*cj5*r20*x1999)));
evalcond[5]=((((-1.0)*x1998*x1999))+((r01*x2000))+(((-1.0)*sj1*sj2))+(((-1.0)*r02*x2002))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2004=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2004;
j4eval[1]=IKsign(x2004);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2005=((1.0)*sj5);
IkReal x2006=((((-1.0)*cj5*r21))+(((-1.0)*r20*x2005)));
j4eval[0]=x2006;
j4eval[1]=((IKabs(((((-1.0)*r01*x2005))+((cj5*r00)))))+(IKabs(r02)));
j4eval[2]=IKsign(x2006);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2007=cj5*cj5;
IkReal x2008=r11*r11;
IkReal x2009=(r11*sj5);
IkReal x2010=(cj5*r10);
IkReal x2011=((r12*r12)+(((-1.0)*x2007*x2008))+x2008+(((-2.0)*x2009*x2010))+((x2007*(r10*r10))));
j4eval[0]=x2011;
j4eval[1]=IKsign(x2011);
j4eval[2]=((IKabs(r12))+(IKabs((x2009+(((-1.0)*x2010))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2012=cj5*cj5;
IkReal x2013=r11*r11;
IkReal x2014=(cj5*r10);
IkReal x2015=(r11*sj5);
CheckValue<IkReal> x2016 = IKatan2WithCheck(IkReal((x2015+(((-1.0)*x2014)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2016.valid){
continue;
}
CheckValue<IkReal> x2017=IKPowWithIntegerCheck(IKsign(((r12*r12)+x2013+(((-2.0)*x2014*x2015))+(((-1.0)*x2012*x2013))+((x2012*(r10*r10))))),-1);
if(!x2017.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2016.value)+(((1.5707963267949)*(x2017.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2018=IKsin(j4);
IkReal x2019=IKcos(j4);
IkReal x2020=(cj5*r00);
IkReal x2021=((1.0)*x2019);
IkReal x2022=(sj5*x2019);
IkReal x2023=(cj5*x2018);
IkReal x2024=((1.0)*x2018);
IkReal x2025=(sj5*x2024);
evalcond[0]=((((-1.0)*r22*x2021))+(((-1.0)*r21*x2025))+((r20*x2023)));
evalcond[1]=((((-1.0)*r01*x2025))+((x2018*x2020))+(((-1.0)*r02*x2021)));
evalcond[2]=((((-1.0)*cj5*r10*x2021))+((r11*x2022))+(((-1.0)*r12*x2024)));
evalcond[3]=((1.0)+((r10*x2023))+(((-1.0)*r11*x2025))+(((-1.0)*r12*x2021)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x2024))+((cj1*sj2))+(((-1.0)*cj5*r20*x2021))+((r21*x2022)));
evalcond[5]=(((r01*x2022))+(((-1.0)*cj1*cj2))+(((-1.0)*r02*x2024))+((sj1*sj2))+(((-1.0)*x2020*x2021)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2026=((1.0)*sj5);
CheckValue<IkReal> x2027 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x2026))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2027.valid){
continue;
}
CheckValue<IkReal> x2028=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*x2026)))),-1);
if(!x2028.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2027.value)+(((1.5707963267949)*(x2028.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2029=IKsin(j4);
IkReal x2030=IKcos(j4);
IkReal x2031=(cj5*r00);
IkReal x2032=((1.0)*x2030);
IkReal x2033=(sj5*x2030);
IkReal x2034=(cj5*x2029);
IkReal x2035=((1.0)*x2029);
IkReal x2036=(sj5*x2035);
evalcond[0]=((((-1.0)*r22*x2032))+((r20*x2034))+(((-1.0)*r21*x2036)));
evalcond[1]=((((-1.0)*r01*x2036))+(((-1.0)*r02*x2032))+((x2029*x2031)));
evalcond[2]=((((-1.0)*r12*x2035))+(((-1.0)*cj5*r10*x2032))+((r11*x2033)));
evalcond[3]=((1.0)+((r10*x2034))+(((-1.0)*r12*x2032))+(((-1.0)*r11*x2036)));
evalcond[4]=(((cj2*sj1))+((r21*x2033))+(((-1.0)*r22*x2035))+((cj1*sj2))+(((-1.0)*cj5*r20*x2032)));
evalcond[5]=(((r01*x2033))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x2035))+(((-1.0)*x2031*x2032)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2037=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2037.valid){
continue;
}
CheckValue<IkReal> x2038 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2038.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2037.value)))+(x2038.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2039=IKsin(j4);
IkReal x2040=IKcos(j4);
IkReal x2041=(cj5*r00);
IkReal x2042=((1.0)*x2040);
IkReal x2043=(sj5*x2040);
IkReal x2044=(cj5*x2039);
IkReal x2045=((1.0)*x2039);
IkReal x2046=(sj5*x2045);
evalcond[0]=((((-1.0)*r22*x2042))+((r20*x2044))+(((-1.0)*r21*x2046)));
evalcond[1]=((((-1.0)*r02*x2042))+((x2039*x2041))+(((-1.0)*r01*x2046)));
evalcond[2]=((((-1.0)*cj5*r10*x2042))+((r11*x2043))+(((-1.0)*r12*x2045)));
evalcond[3]=((1.0)+((r10*x2044))+(((-1.0)*r11*x2046))+(((-1.0)*r12*x2042)));
evalcond[4]=(((cj2*sj1))+((r21*x2043))+(((-1.0)*r22*x2045))+((cj1*sj2))+(((-1.0)*cj5*r20*x2042)));
evalcond[5]=((((-1.0)*r02*x2045))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x2041*x2042))+((r01*x2043)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2047=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2047);
rxp0_2=(py*r00);
rxp1_0=(r21*x2047);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2048=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2048);
rxp0_2=(py*r00);
rxp1_0=(r21*x2048);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2049=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2049);
rxp0_2=(py*r00);
rxp1_0=(r21*x2049);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2052=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x2052.valid){
continue;
}
IkReal x2050=x2052.value;
IkReal x2051=(cj0*x2050);
cj4array[0]=((((-1.0)*cj1*cj2*x2051))+((sj1*sj2*x2051)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2053=IKsin(j4);
IkReal x2054=IKcos(j4);
IkReal x2055=(cj5*r20);
IkReal x2056=((1.0)*x2054);
IkReal x2057=((1.0)*sj5*x2053);
evalcond[0]=((-1.0)*r12*x2053);
evalcond[1]=((((-1.0)*r12*x2056))+(((-1.0)*cj0)));
evalcond[2]=(((x2053*x2055))+(((-1.0)*r21*x2057)));
evalcond[3]=((((-1.0)*r01*x2057))+((cj5*r00*x2053)));
evalcond[4]=(((cj2*sj1))+((r21*sj5*x2054))+((cj1*sj2))+(((-1.0)*x2055*x2056)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2060=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x2060.valid){
continue;
}
IkReal x2058=x2060.value;
IkReal x2059=((1.0)*x2058);
cj4array[0]=((((-1.0)*cj2*sj1*x2059))+(((-1.0)*cj1*sj2*x2059)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2061=IKsin(j4);
IkReal x2062=IKcos(j4);
IkReal x2063=(cj5*r00);
IkReal x2064=(r01*sj5);
IkReal x2065=((1.0)*cj0);
IkReal x2066=((1.0)*x2062);
IkReal x2067=((1.0)*x2061);
evalcond[0]=((-1.0)*r12*x2061);
evalcond[1]=((((-1.0)*r12*x2066))+(((-1.0)*x2065)));
evalcond[2]=(((cj5*r20*x2061))+(((-1.0)*r21*sj5*x2067)));
evalcond[3]=((((-1.0)*x2064*x2067))+((x2061*x2063)));
evalcond[4]=((((-1.0)*sj1*sj2*x2065))+(((-1.0)*x2063*x2066))+((cj0*cj1*cj2))+((x2062*x2064)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2068=IKPowWithIntegerCheck(r12,-1);
if(!x2068.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x2068.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2069=IKsin(j4);
IkReal x2070=IKcos(j4);
IkReal x2071=(r01*sj5);
IkReal x2072=(r21*sj5);
IkReal x2073=((1.0)*x2069);
IkReal x2074=(cj5*x2069);
IkReal x2075=((1.0)*cj5*x2070);
evalcond[0]=((-1.0)*r12*x2069);
evalcond[1]=(((r20*x2074))+(((-1.0)*x2072*x2073)));
evalcond[2]=((((-1.0)*x2071*x2073))+((r00*x2074)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x2070*x2072))+(((-1.0)*r20*x2075)));
evalcond[4]=((((-1.0)*cj0*sj1*sj2))+((x2070*x2071))+((cj0*cj1*cj2))+(((-1.0)*r00*x2075)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2076=((1.0)*sj5);
CheckValue<IkReal> x2077=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2077.valid){
continue;
}
CheckValue<IkReal> x2078 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj0*x2076))+(((-1.0)*cj0*r01*x2076)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2078.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2077.value)))+(x2078.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2079=IKsin(j4);
IkReal x2080=IKcos(j4);
IkReal x2081=(cj5*r00);
IkReal x2082=(cj1*cj2);
IkReal x2083=((1.0)*cj0);
IkReal x2084=(sj1*sj2);
IkReal x2085=((1.0)*x2080);
IkReal x2086=(sj5*x2080);
IkReal x2087=(cj5*x2079);
IkReal x2088=((1.0)*x2079);
IkReal x2089=(sj5*x2088);
evalcond[0]=((((-1.0)*r21*x2089))+(((-1.0)*r22*x2085))+((r20*x2087)));
evalcond[1]=((((-1.0)*r02*x2085))+sj0+((x2079*x2081))+(((-1.0)*r01*x2089)));
evalcond[2]=((((-1.0)*x2083))+((r10*x2087))+(((-1.0)*r11*x2089))+(((-1.0)*r12*x2085)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x2088))+(((-1.0)*cj5*r20*x2085))+((cj1*sj2))+((r21*x2086)));
evalcond[4]=((((-1.0)*r02*x2088))+(((-1.0)*x2081*x2085))+(((-1.0)*x2083*x2084))+((r01*x2086))+((cj0*x2082)));
evalcond[5]=((((-1.0)*cj5*r10*x2085))+((sj0*x2082))+(((-1.0)*sj0*x2084))+(((-1.0)*r12*x2088))+((r11*x2086)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2090=((1.0)*sj5);
CheckValue<IkReal> x2091 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x2090)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2091.valid){
continue;
}
CheckValue<IkReal> x2092=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r01))+(((-1.0)*r00*x2090)))),-1);
if(!x2092.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2091.value)+(((1.5707963267949)*(x2092.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2093=IKsin(j4);
IkReal x2094=IKcos(j4);
IkReal x2095=(cj5*r00);
IkReal x2096=(cj1*cj2);
IkReal x2097=((1.0)*cj0);
IkReal x2098=(sj1*sj2);
IkReal x2099=((1.0)*x2094);
IkReal x2100=(sj5*x2094);
IkReal x2101=(cj5*x2093);
IkReal x2102=((1.0)*x2093);
IkReal x2103=(sj5*x2102);
evalcond[0]=(((r20*x2101))+(((-1.0)*r21*x2103))+(((-1.0)*r22*x2099)));
evalcond[1]=(sj0+(((-1.0)*r01*x2103))+(((-1.0)*r02*x2099))+((x2093*x2095)));
evalcond[2]=((((-1.0)*x2097))+(((-1.0)*r11*x2103))+((r10*x2101))+(((-1.0)*r12*x2099)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x2102))+((r21*x2100))+((cj1*sj2))+(((-1.0)*cj5*r20*x2099)));
evalcond[4]=((((-1.0)*r02*x2102))+(((-1.0)*x2097*x2098))+(((-1.0)*x2095*x2099))+((r01*x2100))+((cj0*x2096)));
evalcond[5]=(((sj0*x2096))+(((-1.0)*sj0*x2098))+(((-1.0)*r12*x2102))+((r11*x2100))+(((-1.0)*cj5*r10*x2099)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2104=((1.0)*sj5);
CheckValue<IkReal> x2105 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x2104)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2105.valid){
continue;
}
CheckValue<IkReal> x2106=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x2104)))),-1);
if(!x2106.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2105.value)+(((1.5707963267949)*(x2106.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2107=IKsin(j4);
IkReal x2108=IKcos(j4);
IkReal x2109=(cj5*r00);
IkReal x2110=(cj1*cj2);
IkReal x2111=((1.0)*cj0);
IkReal x2112=(sj1*sj2);
IkReal x2113=((1.0)*x2108);
IkReal x2114=(sj5*x2108);
IkReal x2115=(cj5*x2107);
IkReal x2116=((1.0)*x2107);
IkReal x2117=(sj5*x2116);
evalcond[0]=((((-1.0)*r21*x2117))+((r20*x2115))+(((-1.0)*r22*x2113)));
evalcond[1]=((((-1.0)*r01*x2117))+sj0+((x2107*x2109))+(((-1.0)*r02*x2113)));
evalcond[2]=((((-1.0)*x2111))+((r10*x2115))+(((-1.0)*r11*x2117))+(((-1.0)*r12*x2113)));
evalcond[3]=(((cj2*sj1))+((r21*x2114))+((cj1*sj2))+(((-1.0)*cj5*r20*x2113))+(((-1.0)*r22*x2116)));
evalcond[4]=(((r01*x2114))+((cj0*x2110))+(((-1.0)*x2111*x2112))+(((-1.0)*x2109*x2113))+(((-1.0)*r02*x2116)));
evalcond[5]=((((-1.0)*sj0*x2112))+((sj0*x2110))+(((-1.0)*cj5*r10*x2113))+(((-1.0)*r12*x2116))+((r11*x2114)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2118=cj5*cj5;
IkReal x2119=r21*r21;
IkReal x2120=(cj1*sj2);
IkReal x2121=(cj5*r20);
IkReal x2122=(r21*sj5);
IkReal x2123=(cj2*sj1);
CheckValue<IkReal> x2124 = IKatan2WithCheck(IkReal((((r22*x2120))+((r22*x2123)))),IkReal(((((-1.0)*x2120*x2122))+((x2120*x2121))+((x2121*x2123))+(((-1.0)*x2122*x2123)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2124.valid){
continue;
}
CheckValue<IkReal> x2125=IKPowWithIntegerCheck(IKsign((((x2118*(r20*r20)))+(r22*r22)+x2119+(((-2.0)*x2121*x2122))+(((-1.0)*x2118*x2119)))),-1);
if(!x2125.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2124.value)+(((1.5707963267949)*(x2125.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2126=IKsin(j4);
IkReal x2127=IKcos(j4);
IkReal x2128=(cj5*r20);
IkReal x2129=(r21*sj5);
IkReal x2130=((1.0)*x2127);
IkReal x2131=((1.0)*x2126);
evalcond[0]=((((-1.0)*r22*x2130))+(((-1.0)*x2129*x2131))+((x2126*x2128)));
evalcond[1]=((((-1.0)*r22*x2131))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x2128*x2130))+((x2127*x2129)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2132=(cj5*sj4);
IkReal x2133=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x2132))+((r01*x2133))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x2133))+((r10*x2132))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x2132))+((r01*x2133))+((cj4*r02))))+IKsqr(((((-1.0)*r11*x2133))+((r10*x2132))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x2132))+((r01*x2133))+((cj4*r02))), ((((-1.0)*r11*x2133))+((r10*x2132))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2134=IKcos(j0);
IkReal x2135=IKsin(j0);
IkReal x2136=((0.125)*sj5);
IkReal x2137=(cj5*r00);
IkReal x2138=((1.0)*sj2);
IkReal x2139=((1.0)*sj5);
IkReal x2140=((0.3)*sj2);
IkReal x2141=((1.0)*cj4);
IkReal x2142=(cj5*r11);
IkReal x2143=((1.0)*sj4);
IkReal x2144=(cj2*sj1);
IkReal x2145=(cj5*r10);
IkReal x2146=(cj5*r01);
IkReal x2147=(cj4*sj5);
IkReal x2148=(sj1*x2135);
IkReal x2149=(cj1*x2134);
IkReal x2150=(cj1*x2135);
IkReal x2151=((1.0)*x2134);
IkReal x2152=(sj1*x2134);
evalcond[0]=((((-1.0)*r02*x2141))+((sj4*x2137))+x2135+(((-1.0)*r01*sj4*x2139)));
evalcond[1]=((((-1.0)*r12*x2141))+(((-1.0)*x2151))+((sj4*x2145))+(((-1.0)*r11*sj4*x2139)));
evalcond[2]=((((-1.0)*x2138*x2149))+(((-1.0)*x2146))+(((-1.0)*x2144*x2151))+(((-1.0)*r00*x2139)));
evalcond[3]=((((-1.0)*x2142))+(((-1.0)*x2135*x2144))+(((-1.0)*r10*x2139))+(((-1.0)*x2138*x2150)));
evalcond[4]=(((cj2*x2149))+(((-1.0)*r02*x2143))+((r01*x2147))+(((-1.0)*x2138*x2152))+(((-1.0)*x2137*x2141)));
evalcond[5]=((((-1.0)*x2138*x2148))+((r11*x2147))+((cj2*x2150))+(((-1.0)*r12*x2143))+(((-1.0)*x2141*x2145)));
evalcond[6]=((((0.125)*x2146))+((r00*x2136))+(((-1.0)*px))+(((-1.0)*x2140*x2149))+(((-0.3)*x2134*x2144))+(((-0.35)*x2152))+(((-0.125)*x2135)));
evalcond[7]=((((-0.3)*x2135*x2144))+(((0.125)*x2142))+(((0.125)*x2134))+(((-1.0)*x2140*x2150))+(((-1.0)*py))+((r10*x2136))+(((-0.35)*x2148)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x2153 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2153.valid){
continue;
}
CheckValue<IkReal> x2154=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x2154.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2153.value)+(((1.5707963267949)*(x2154.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2155=IKcos(j0);
IkReal x2156=IKsin(j0);
IkReal x2157=(r10*sj5);
IkReal x2158=(cj2*sj1);
IkReal x2159=(r00*sj5);
IkReal x2160=(cj5*r11);
IkReal x2161=(cj5*r01);
IkReal x2162=(cj1*sj2);
IkReal x2163=((0.35)*sj1);
IkReal x2164=((0.3)*x2156);
IkReal x2165=((1.0)*x2156);
IkReal x2166=(x2155*x2162);
evalcond[0]=((((-1.0)*x2155*x2158))+(((-1.0)*x2166))+(((-1.0)*x2161))+(((-1.0)*x2159)));
evalcond[1]=((((-1.0)*x2158*x2165))+(((-1.0)*x2160))+(((-1.0)*x2162*x2165))+(((-1.0)*x2157)));
evalcond[2]=((((-1.0)*x2155*x2163))+(((0.125)*x2159))+(((-0.3)*x2166))+(((-0.125)*x2156))+(((-1.0)*px))+(((-0.3)*x2155*x2158))+(((0.125)*x2161)));
evalcond[3]=((((0.125)*x2157))+(((0.125)*x2155))+(((-1.0)*x2158*x2164))+(((-1.0)*py))+(((0.125)*x2160))+(((-1.0)*x2156*x2163))+(((-1.0)*x2162*x2164)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x2167=((1.0)*sj5);
IkReal x2168=((((-1.0)*cj5*r11))+(((-1.0)*r10*x2167)));
j4eval[0]=x2168;
j4eval[1]=IKsign(x2168);
j4eval[2]=((IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x2167)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x2169=((1.0)*sj5);
IkReal x2170=((((-1.0)*cj5*r01))+(((-1.0)*r00*x2169)));
j4eval[0]=x2170;
j4eval[1]=IKsign(x2170);
j4eval[2]=((IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x2169)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x2171=((1.0)*sj5);
IkReal x2172=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2172;
j4eval[1]=((IKabs(((((-1.0)*r11*sj0*x2171))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*cj0*r01*x2171)))))+(IKabs((((r12*sj0))+((cj0*r02))))));
j4eval[2]=IKsign(x2172);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2174 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2174)==0){
continue;
}
IkReal x2173=pow(x2174,-0.5);
CheckValue<IkReal> x2175 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2175.valid){
continue;
}
IkReal gconst78=((-1.0)*(x2175.value));
IkReal gconst79=((-1.0)*r21*x2173);
IkReal gconst80=(r20*x2173);
CheckValue<IkReal> x2176 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2176.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2176.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x2179 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2179.valid){
continue;
}
IkReal x2177=((-1.0)*(x2179.value));
IkReal x2178=x2173;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x2177;
IkReal gconst78=x2177;
IkReal gconst79=((-1.0)*r21*x2178);
IkReal gconst80=(r20*x2178);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2182 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2182.valid){
continue;
}
IkReal x2180=((-1.0)*(x2182.value));
IkReal x2181=x2173;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x2180;
IkReal gconst78=x2180;
IkReal gconst79=((-1.0)*r21*x2181);
IkReal gconst80=(r20*x2181);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x2185 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2185.valid){
continue;
}
IkReal x2183=((-1.0)*(x2185.value));
IkReal x2184=x2173;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x2183;
IkReal gconst78=x2183;
IkReal gconst79=((-1.0)*r21*x2184);
IkReal gconst80=(r20*x2184);
IkReal x2186=r22*r22;
CheckValue<IkReal> x2189=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x2186))),-1);
if(!x2189.valid){
continue;
}
IkReal x2187=x2189.value;
IkReal x2188=(((x2187*(r21*r21*r21*r21)))+x2186+(((2.0)*x2187*(r20*r20)*(r21*r21)))+((x2187*(r20*r20*r20*r20))));
j4eval[0]=x2188;
j4eval[1]=IKsign(x2188);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2190=(gconst80*r20);
IkReal x2191=(cj1*sj2);
IkReal x2192=(cj2*sj1);
IkReal x2193=((1.0)*gconst79*r21);
CheckValue<IkReal> x2194=IKPowWithIntegerCheck(IKsign(((x2190*x2190)+(r22*r22)+(((-2.0)*gconst79*r21*x2190))+(((gconst79*gconst79)*(r21*r21))))),-1);
if(!x2194.valid){
continue;
}
CheckValue<IkReal> x2195 = IKatan2WithCheck(IkReal((((r22*x2191))+((r22*x2192)))),IkReal(((((-1.0)*x2192*x2193))+(((-1.0)*x2191*x2193))+((x2190*x2191))+((x2190*x2192)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2195.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2194.value)))+(x2195.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2196=IKsin(j4);
IkReal x2197=IKcos(j4);
IkReal x2198=(cj1*cj2);
IkReal x2199=(gconst80*r20);
IkReal x2200=(gconst79*r21);
IkReal x2201=(gconst80*r10);
IkReal x2202=(gconst79*r01);
IkReal x2203=(gconst79*r11);
IkReal x2204=(gconst80*r00);
IkReal x2205=((1.0)*cj0);
IkReal x2206=(sj1*sj2);
IkReal x2207=((1.0)*x2197);
IkReal x2208=((1.0)*x2196);
evalcond[0]=(((x2196*x2199))+(((-1.0)*r22*x2207))+(((-1.0)*x2200*x2208)));
evalcond[1]=(sj0+(((-1.0)*x2202*x2208))+((x2196*x2204))+(((-1.0)*r02*x2207)));
evalcond[2]=((((-1.0)*x2203*x2208))+(((-1.0)*x2205))+(((-1.0)*r12*x2207))+((x2196*x2201)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x2208))+(((-1.0)*x2199*x2207))+((x2197*x2200)));
evalcond[4]=((((-1.0)*x2204*x2207))+(((-1.0)*x2205*x2206))+((cj0*x2198))+((x2197*x2202))+(((-1.0)*r02*x2208)));
evalcond[5]=((((-1.0)*r12*x2208))+((sj0*x2198))+((x2197*x2203))+(((-1.0)*x2201*x2207))+(((-1.0)*sj0*x2206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2209=((1.0)*gconst79);
CheckValue<IkReal> x2210=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst80*r01))+(((-1.0)*r00*x2209)))),-1);
if(!x2210.valid){
continue;
}
CheckValue<IkReal> x2211 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst80*r20))+(((-1.0)*cj0*r21*x2209)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2211.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2210.value)))+(x2211.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2212=IKsin(j4);
IkReal x2213=IKcos(j4);
IkReal x2214=(cj1*cj2);
IkReal x2215=(gconst80*r20);
IkReal x2216=(gconst79*r21);
IkReal x2217=(gconst80*r10);
IkReal x2218=(gconst79*r01);
IkReal x2219=(gconst79*r11);
IkReal x2220=(gconst80*r00);
IkReal x2221=((1.0)*cj0);
IkReal x2222=(sj1*sj2);
IkReal x2223=((1.0)*x2213);
IkReal x2224=((1.0)*x2212);
evalcond[0]=(((x2212*x2215))+(((-1.0)*r22*x2223))+(((-1.0)*x2216*x2224)));
evalcond[1]=(sj0+(((-1.0)*r02*x2223))+(((-1.0)*x2218*x2224))+((x2212*x2220)));
evalcond[2]=((((-1.0)*x2219*x2224))+(((-1.0)*r12*x2223))+((x2212*x2217))+(((-1.0)*x2221)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x2215*x2223))+(((-1.0)*r22*x2224))+((x2213*x2216)));
evalcond[4]=((((-1.0)*x2220*x2223))+(((-1.0)*x2221*x2222))+(((-1.0)*r02*x2224))+((cj0*x2214))+((x2213*x2218)));
evalcond[5]=((((-1.0)*x2217*x2223))+(((-1.0)*r12*x2224))+(((-1.0)*sj0*x2222))+((sj0*x2214))+((x2213*x2219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2225=((1.0)*gconst79);
CheckValue<IkReal> x2226=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x2225))+(((-1.0)*gconst80*r11)))),-1);
if(!x2226.valid){
continue;
}
CheckValue<IkReal> x2227 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst80*r20*sj0))+(((-1.0)*r21*sj0*x2225)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2227.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2226.value)))+(x2227.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2228=IKsin(j4);
IkReal x2229=IKcos(j4);
IkReal x2230=(cj1*cj2);
IkReal x2231=(gconst80*r20);
IkReal x2232=(gconst79*r21);
IkReal x2233=(gconst80*r10);
IkReal x2234=(gconst79*r01);
IkReal x2235=(gconst79*r11);
IkReal x2236=(gconst80*r00);
IkReal x2237=((1.0)*cj0);
IkReal x2238=(sj1*sj2);
IkReal x2239=((1.0)*x2229);
IkReal x2240=((1.0)*x2228);
evalcond[0]=(((x2228*x2231))+(((-1.0)*r22*x2239))+(((-1.0)*x2232*x2240)));
evalcond[1]=(((x2228*x2236))+(((-1.0)*x2234*x2240))+sj0+(((-1.0)*r02*x2239)));
evalcond[2]=(((x2228*x2233))+(((-1.0)*x2237))+(((-1.0)*r12*x2239))+(((-1.0)*x2235*x2240)));
evalcond[3]=(((cj2*sj1))+((x2229*x2232))+(((-1.0)*r22*x2240))+((cj1*sj2))+(((-1.0)*x2231*x2239)));
evalcond[4]=((((-1.0)*x2237*x2238))+(((-1.0)*r02*x2240))+((x2229*x2234))+((cj0*x2230))+(((-1.0)*x2236*x2239)));
evalcond[5]=(((x2229*x2235))+((sj0*x2230))+(((-1.0)*r12*x2240))+(((-1.0)*sj0*x2238))+(((-1.0)*x2233*x2239)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2242 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2242)==0){
continue;
}
IkReal x2241=pow(x2242,-0.5);
CheckValue<IkReal> x2243 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2243.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x2243.value))));
IkReal gconst82=((1.0)*r21*x2241);
IkReal gconst83=((-1.0)*r20*x2241);
CheckValue<IkReal> x2244 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2244.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2244.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x2247 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2247.valid){
continue;
}
IkReal x2245=((1.0)*(x2247.value));
IkReal x2246=x2241;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2245)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2245)));
IkReal gconst82=((1.0)*r21*x2246);
IkReal gconst83=((-1.0)*r20*x2246);
IkReal x2248=r22*r22;
IkReal x2249=((1.0)*x2248);
CheckValue<IkReal> x2253=IKPowWithIntegerCheck(((-1.0)+x2248),-1);
if(!x2253.valid){
continue;
}
IkReal x2250=x2253.value;
if((((1.0)+(((-1.0)*x2249)))) < -0.00001)
continue;
IkReal x2251=IKsqrt(((1.0)+(((-1.0)*x2249))));
IkReal x2252=(sj0*x2250*x2251);
j4eval[0]=((IKabs(((((-1.0)*x2249*x2252))+x2252)))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2256 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2256.valid){
continue;
}
IkReal x2254=((1.0)*(x2256.value));
IkReal x2255=x2241;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2254)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2254)));
IkReal gconst82=((1.0)*r21*x2255);
IkReal gconst83=((-1.0)*r20*x2255);
IkReal x2257=r22*r22;
IkReal x2258=((1.0)*x2257);
CheckValue<IkReal> x2262=IKPowWithIntegerCheck(((-1.0)+x2257),-1);
if(!x2262.valid){
continue;
}
IkReal x2259=x2262.value;
if((((1.0)+(((-1.0)*x2258)))) < -0.00001)
continue;
IkReal x2260=IKsqrt(((1.0)+(((-1.0)*x2258))));
IkReal x2261=(cj0*x2259*x2260);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x2261+(((-1.0)*x2258*x2261))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x2265 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2265.valid){
continue;
}
IkReal x2263=((1.0)*(x2265.value));
IkReal x2264=x2241;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2263)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2263)));
IkReal gconst82=((1.0)*r21*x2264);
IkReal gconst83=((-1.0)*r20*x2264);
IkReal x2266=r22*r22;
IkReal x2267=(cj0*r02);
IkReal x2268=(r12*sj0);
CheckValue<IkReal> x2272=IKPowWithIntegerCheck(((-1.0)+x2266),-1);
if(!x2272.valid){
continue;
}
IkReal x2269=x2272.value;
if((((1.0)+(((-1.0)*x2266)))) < -0.00001)
continue;
IkReal x2270=IKsqrt(((1.0)+(((-1.0)*x2266))));
IkReal x2271=((1.0)*r22*x2269*x2270);
j4eval[0]=0;
j4eval[1]=((IKabs((x2268+x2267)))+(IKabs(((((-1.0)*x2268*x2271))+(((-1.0)*x2267*x2271))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2273=((1.0)*gconst82);
CheckValue<IkReal> x2274=IKPowWithIntegerCheck(IKsign((((gconst83*r21))+((gconst82*r20)))),-1);
if(!x2274.valid){
continue;
}
CheckValue<IkReal> x2275 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x2273))+(((-1.0)*r11*sj0*x2273))+((gconst83*r10*sj0))+((cj0*gconst83*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2275.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2274.value)))+(x2275.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2276=IKsin(j4);
IkReal x2277=IKcos(j4);
IkReal x2278=(cj1*cj2);
IkReal x2279=(gconst82*r01);
IkReal x2280=(gconst82*r21);
IkReal x2281=(gconst82*r11);
IkReal x2282=((1.0)*cj0);
IkReal x2283=(sj1*sj2);
IkReal x2284=((1.0)*x2277);
IkReal x2285=(gconst83*x2276);
IkReal x2286=((1.0)*x2276);
evalcond[0]=((((-1.0)*x2280*x2286))+((r20*x2285))+(((-1.0)*r22*x2284)));
evalcond[1]=((((-1.0)*r02*x2284))+sj0+(((-1.0)*x2279*x2286))+((r00*x2285)));
evalcond[2]=(((r10*x2285))+(((-1.0)*x2282))+(((-1.0)*r12*x2284))+(((-1.0)*x2281*x2286)));
evalcond[3]=((((-1.0)*gconst83*r20*x2284))+((cj2*sj1))+((cj1*sj2))+((x2277*x2280))+(((-1.0)*r22*x2286)));
evalcond[4]=((((-1.0)*r02*x2286))+(((-1.0)*x2282*x2283))+((cj0*x2278))+((x2277*x2279))+(((-1.0)*gconst83*r00*x2284)));
evalcond[5]=(((sj0*x2278))+(((-1.0)*r12*x2286))+((x2277*x2281))+(((-1.0)*gconst83*r10*x2284))+(((-1.0)*sj0*x2283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2287=((1.0)*gconst82);
CheckValue<IkReal> x2288=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst83*r01))+(((-1.0)*r00*x2287)))),-1);
if(!x2288.valid){
continue;
}
CheckValue<IkReal> x2289 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst83*r20))+(((-1.0)*cj0*r21*x2287)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2289.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2288.value)))+(x2289.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2290=IKsin(j4);
IkReal x2291=IKcos(j4);
IkReal x2292=(cj1*cj2);
IkReal x2293=(gconst82*r01);
IkReal x2294=(gconst82*r21);
IkReal x2295=(gconst82*r11);
IkReal x2296=((1.0)*cj0);
IkReal x2297=(sj1*sj2);
IkReal x2298=((1.0)*x2291);
IkReal x2299=(gconst83*x2290);
IkReal x2300=((1.0)*x2290);
evalcond[0]=((((-1.0)*x2294*x2300))+((r20*x2299))+(((-1.0)*r22*x2298)));
evalcond[1]=((((-1.0)*x2293*x2300))+sj0+(((-1.0)*r02*x2298))+((r00*x2299)));
evalcond[2]=(((r10*x2299))+(((-1.0)*x2295*x2300))+(((-1.0)*r12*x2298))+(((-1.0)*x2296)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x2300))+((cj1*sj2))+((x2291*x2294))+(((-1.0)*gconst83*r20*x2298)));
evalcond[4]=(((cj0*x2292))+((x2291*x2293))+(((-1.0)*gconst83*r00*x2298))+(((-1.0)*x2296*x2297))+(((-1.0)*r02*x2300)));
evalcond[5]=((((-1.0)*gconst83*r10*x2298))+((sj0*x2292))+((x2291*x2295))+(((-1.0)*sj0*x2297))+(((-1.0)*r12*x2300)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2301=((1.0)*gconst82);
CheckValue<IkReal> x2302 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x2301))+((gconst83*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2302.valid){
continue;
}
CheckValue<IkReal> x2303=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x2301))+(((-1.0)*gconst83*r11)))),-1);
if(!x2303.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2302.value)+(((1.5707963267949)*(x2303.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2304=IKsin(j4);
IkReal x2305=IKcos(j4);
IkReal x2306=(cj1*cj2);
IkReal x2307=(gconst82*r01);
IkReal x2308=(gconst82*r21);
IkReal x2309=(gconst82*r11);
IkReal x2310=((1.0)*cj0);
IkReal x2311=(sj1*sj2);
IkReal x2312=((1.0)*x2305);
IkReal x2313=(gconst83*x2304);
IkReal x2314=((1.0)*x2304);
evalcond[0]=((((-1.0)*r22*x2312))+(((-1.0)*x2308*x2314))+((r20*x2313)));
evalcond[1]=(sj0+((r00*x2313))+(((-1.0)*r02*x2312))+(((-1.0)*x2307*x2314)));
evalcond[2]=(((r10*x2313))+(((-1.0)*x2309*x2314))+(((-1.0)*r12*x2312))+(((-1.0)*x2310)));
evalcond[3]=(((cj2*sj1))+((x2305*x2308))+(((-1.0)*r22*x2314))+((cj1*sj2))+(((-1.0)*gconst83*r20*x2312)));
evalcond[4]=(((x2305*x2307))+((cj0*x2306))+(((-1.0)*x2310*x2311))+(((-1.0)*r02*x2314))+(((-1.0)*gconst83*r00*x2312)));
evalcond[5]=(((sj0*x2306))+((x2305*x2309))+(((-1.0)*sj0*x2311))+(((-1.0)*r12*x2314))+(((-1.0)*gconst83*r10*x2312)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2315=((-1.0)*r00);
IkReal x2317 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2317)==0){
continue;
}
IkReal x2316=pow(x2317,-0.5);
CheckValue<IkReal> x2318 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2315),IKFAST_ATAN2_MAGTHRESH);
if(!x2318.valid){
continue;
}
IkReal gconst84=((-1.0)*(x2318.value));
IkReal gconst85=(r01*x2316);
IkReal gconst86=(x2315*x2316);
CheckValue<IkReal> x2319 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2319.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2319.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2320=((-1.0)*r00);
IkReal x2321=x2316;
CheckValue<IkReal> x2323 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2320),IKFAST_ATAN2_MAGTHRESH);
if(!x2323.valid){
continue;
}
IkReal x2322=((-1.0)*(x2323.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst85;
cj5=gconst86;
j5=x2322;
IkReal gconst84=x2322;
IkReal gconst85=(r01*x2321);
IkReal gconst86=(x2320*x2321);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2324=((1.0)*gconst85);
CheckValue<IkReal> x2325 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst86*r00))+(((-1.0)*r11*sj0*x2324))+((gconst86*r10*sj0))+(((-1.0)*cj0*r01*x2324)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2325.valid){
continue;
}
CheckValue<IkReal> x2326=IKPowWithIntegerCheck(IKsign((((gconst86*r21))+((gconst85*r20)))),-1);
if(!x2326.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2325.value)+(((1.5707963267949)*(x2326.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2327=IKsin(j4);
IkReal x2328=IKcos(j4);
IkReal x2329=(cj1*cj2);
IkReal x2330=((1.0)*cj0);
IkReal x2331=(sj1*sj2);
IkReal x2332=((1.0)*x2328);
IkReal x2333=(gconst86*x2327);
IkReal x2334=(gconst85*x2328);
IkReal x2335=((1.0)*x2327);
IkReal x2336=(gconst85*x2335);
evalcond[0]=((((-1.0)*r22*x2332))+(((-1.0)*r21*x2336))+((r20*x2333)));
evalcond[1]=(sj0+(((-1.0)*r01*x2336))+((r00*x2333))+(((-1.0)*r02*x2332)));
evalcond[2]=((((-1.0)*x2330))+(((-1.0)*r11*x2336))+(((-1.0)*r12*x2332))+((r10*x2333)));
evalcond[3]=(((cj2*sj1))+((r21*x2334))+(((-1.0)*r22*x2335))+((cj1*sj2))+(((-1.0)*gconst86*r20*x2332)));
evalcond[4]=(((cj0*x2329))+(((-1.0)*gconst86*r00*x2332))+((r01*x2334))+(((-1.0)*r02*x2335))+(((-1.0)*x2330*x2331)));
evalcond[5]=((((-1.0)*sj0*x2331))+(((-1.0)*gconst86*r10*x2332))+((r11*x2334))+((sj0*x2329))+(((-1.0)*r12*x2335)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2337=((1.0)*gconst85);
CheckValue<IkReal> x2338 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x2337))+((gconst86*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2338.valid){
continue;
}
CheckValue<IkReal> x2339=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x2337))+(((-1.0)*gconst86*r11)))),-1);
if(!x2339.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2338.value)+(((1.5707963267949)*(x2339.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2340=IKsin(j4);
IkReal x2341=IKcos(j4);
IkReal x2342=(cj1*cj2);
IkReal x2343=((1.0)*cj0);
IkReal x2344=(sj1*sj2);
IkReal x2345=((1.0)*x2341);
IkReal x2346=(gconst86*x2340);
IkReal x2347=(gconst85*x2341);
IkReal x2348=((1.0)*x2340);
IkReal x2349=(gconst85*x2348);
evalcond[0]=((((-1.0)*r21*x2349))+(((-1.0)*r22*x2345))+((r20*x2346)));
evalcond[1]=(sj0+(((-1.0)*r01*x2349))+((r00*x2346))+(((-1.0)*r02*x2345)));
evalcond[2]=(((r10*x2346))+(((-1.0)*r11*x2349))+(((-1.0)*x2343))+(((-1.0)*r12*x2345)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst86*r20*x2345))+(((-1.0)*r22*x2348))+((r21*x2347)));
evalcond[4]=(((r01*x2347))+(((-1.0)*r02*x2348))+(((-1.0)*x2343*x2344))+(((-1.0)*gconst86*r00*x2345))+((cj0*x2342)));
evalcond[5]=(((sj0*x2342))+(((-1.0)*gconst86*r10*x2345))+((r11*x2347))+(((-1.0)*sj0*x2344))+(((-1.0)*r12*x2348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2350=((-1.0)*r01);
IkReal x2352 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2352)==0){
continue;
}
IkReal x2351=pow(x2352,-0.5);
CheckValue<IkReal> x2353 = IKatan2WithCheck(IkReal(x2350),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2353.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2353.value))));
IkReal gconst88=(x2350*x2351);
IkReal gconst89=((1.0)*r00*x2351);
CheckValue<IkReal> x2354 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2354.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2354.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2355=((-1.0)*r01);
CheckValue<IkReal> x2358 = IKatan2WithCheck(IkReal(x2355),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2358.valid){
continue;
}
IkReal x2356=((1.0)*(x2358.value));
IkReal x2357=x2351;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2356)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2356)));
IkReal gconst88=(x2355*x2357);
IkReal gconst89=((1.0)*r00*x2357);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x2359=((-1.0)*r01);
CheckValue<IkReal> x2362 = IKatan2WithCheck(IkReal(x2359),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2362.valid){
continue;
}
IkReal x2360=((1.0)*(x2362.value));
IkReal x2361=x2351;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2360)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2360)));
IkReal gconst88=(x2359*x2361);
IkReal gconst89=((1.0)*r00*x2361);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2363=((-1.0)*r01);
CheckValue<IkReal> x2366 = IKatan2WithCheck(IkReal(x2363),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2366.valid){
continue;
}
IkReal x2364=((1.0)*(x2366.value));
IkReal x2365=x2351;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2364)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2364)));
IkReal gconst88=(x2363*x2365);
IkReal gconst89=((1.0)*r00*x2365);
IkReal x2367=r02*r02;
IkReal x2368=(r12*sj0);
IkReal x2369=x2351;
IkReal x2370=(cj0*x2369);
j4eval[0]=((IKabs((x2368+((cj0*r02)))))+(IKabs((((r02*x2368*x2369))+(((-1.0)*x2370))+((x2367*x2370))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2371=((1.0)*gconst88);
CheckValue<IkReal> x2372=IKPowWithIntegerCheck(IKsign((((gconst89*r21))+((gconst88*r20)))),-1);
if(!x2372.valid){
continue;
}
CheckValue<IkReal> x2373 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst89*r00))+(((-1.0)*cj0*r01*x2371))+(((-1.0)*r11*sj0*x2371))+((gconst89*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2373.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2372.value)))+(x2373.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2374=IKsin(j4);
IkReal x2375=IKcos(j4);
IkReal x2376=(cj1*cj2);
IkReal x2377=(gconst89*r10);
IkReal x2378=((1.0)*cj0);
IkReal x2379=(sj1*sj2);
IkReal x2380=((1.0)*x2375);
IkReal x2381=(gconst88*x2375);
IkReal x2382=(gconst89*x2374);
IkReal x2383=((1.0)*x2374);
evalcond[0]=(((r20*x2382))+(((-1.0)*r22*x2380))+(((-1.0)*gconst88*r21*x2383)));
evalcond[1]=((((-1.0)*r02*x2380))+sj0+((r00*x2382))+(((-1.0)*gconst88*r01*x2383)));
evalcond[2]=((((-1.0)*r12*x2380))+(((-1.0)*x2378))+(((-1.0)*gconst88*r11*x2383))+((x2374*x2377)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x2383))+((r21*x2381))+(((-1.0)*gconst89*r20*x2380)));
evalcond[4]=((((-1.0)*r02*x2383))+((r01*x2381))+((cj0*x2376))+(((-1.0)*x2378*x2379))+(((-1.0)*gconst89*r00*x2380)));
evalcond[5]=((((-1.0)*r12*x2383))+((sj0*x2376))+(((-1.0)*x2377*x2380))+(((-1.0)*sj0*x2379))+((r11*x2381)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2384=((1.0)*gconst88);
CheckValue<IkReal> x2385=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x2384))+(((-1.0)*gconst89*r01)))),-1);
if(!x2385.valid){
continue;
}
CheckValue<IkReal> x2386 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst89*r20))+(((-1.0)*cj0*r21*x2384)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2386.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2385.value)))+(x2386.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2387=IKsin(j4);
IkReal x2388=IKcos(j4);
IkReal x2389=(cj1*cj2);
IkReal x2390=(gconst89*r10);
IkReal x2391=((1.0)*cj0);
IkReal x2392=(sj1*sj2);
IkReal x2393=((1.0)*x2388);
IkReal x2394=(gconst88*x2388);
IkReal x2395=(gconst89*x2387);
IkReal x2396=((1.0)*x2387);
evalcond[0]=(((r20*x2395))+(((-1.0)*gconst88*r21*x2396))+(((-1.0)*r22*x2393)));
evalcond[1]=(sj0+(((-1.0)*r02*x2393))+((r00*x2395))+(((-1.0)*gconst88*r01*x2396)));
evalcond[2]=(((x2387*x2390))+(((-1.0)*gconst88*r11*x2396))+(((-1.0)*x2391))+(((-1.0)*r12*x2393)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x2396))+((r21*x2394))+(((-1.0)*gconst89*r20*x2393)));
evalcond[4]=((((-1.0)*r02*x2396))+((r01*x2394))+(((-1.0)*gconst89*r00*x2393))+((cj0*x2389))+(((-1.0)*x2391*x2392)));
evalcond[5]=((((-1.0)*x2390*x2393))+(((-1.0)*sj0*x2392))+((r11*x2394))+((sj0*x2389))+(((-1.0)*r12*x2396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2397=((1.0)*gconst88);
CheckValue<IkReal> x2398=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x2397))+(((-1.0)*gconst89*r11)))),-1);
if(!x2398.valid){
continue;
}
CheckValue<IkReal> x2399 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst89*r20*sj0))+(((-1.0)*r21*sj0*x2397)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2399.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2398.value)))+(x2399.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2400=IKsin(j4);
IkReal x2401=IKcos(j4);
IkReal x2402=(cj1*cj2);
IkReal x2403=(gconst89*r10);
IkReal x2404=((1.0)*cj0);
IkReal x2405=(sj1*sj2);
IkReal x2406=((1.0)*x2401);
IkReal x2407=(gconst88*x2401);
IkReal x2408=(gconst89*x2400);
IkReal x2409=((1.0)*x2400);
evalcond[0]=(((r20*x2408))+(((-1.0)*gconst88*r21*x2409))+(((-1.0)*r22*x2406)));
evalcond[1]=(sj0+((r00*x2408))+(((-1.0)*r02*x2406))+(((-1.0)*gconst88*r01*x2409)));
evalcond[2]=((((-1.0)*x2404))+(((-1.0)*gconst88*r11*x2409))+((x2400*x2403))+(((-1.0)*r12*x2406)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst89*r20*x2406))+((r21*x2407))+(((-1.0)*r22*x2409)));
evalcond[4]=((((-1.0)*x2404*x2405))+((r01*x2407))+((cj0*x2402))+(((-1.0)*r02*x2409))+(((-1.0)*gconst89*r00*x2406)));
evalcond[5]=(((r11*x2407))+(((-1.0)*x2403*x2406))+(((-1.0)*sj0*x2405))+((sj0*x2402))+(((-1.0)*r12*x2409)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2410=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2410;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x2410);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2411=((1.0)*sj5);
IkReal x2412=((((-1.0)*cj5*r11))+(((-1.0)*r10*x2411)));
j4eval[0]=x2412;
j4eval[1]=IKsign(x2412);
j4eval[2]=((IKabs((((cj5*r20))+(((-1.0)*r21*x2411)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2413=cj5*cj5;
IkReal x2414=r01*r01;
IkReal x2415=(cj5*r00);
IkReal x2416=(r01*sj5);
IkReal x2417=(x2414+(((-1.0)*x2413*x2414))+((x2413*(r00*r00)))+(((-2.0)*x2415*x2416))+(r02*r02));
j4eval[0]=x2417;
j4eval[1]=((IKabs(r02))+(IKabs((x2416+(((-1.0)*x2415))))));
j4eval[2]=IKsign(x2417);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2418=cj5*cj5;
IkReal x2419=r01*r01;
IkReal x2420=(r01*sj5);
IkReal x2421=(cj5*r00);
CheckValue<IkReal> x2422=IKPowWithIntegerCheck(IKsign((x2419+((x2418*(r00*r00)))+(((-1.0)*x2418*x2419))+(r02*r02)+(((-2.0)*x2420*x2421)))),-1);
if(!x2422.valid){
continue;
}
CheckValue<IkReal> x2423 = IKatan2WithCheck(IkReal((x2420+(((-1.0)*x2421)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2423.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2422.value)))+(x2423.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2424=IKsin(j4);
IkReal x2425=IKcos(j4);
IkReal x2426=(cj5*r00);
IkReal x2427=(r11*sj5);
IkReal x2428=((1.0)*x2425);
IkReal x2429=((1.0)*x2424);
IkReal x2430=(sj5*x2425);
IkReal x2431=(cj5*x2424);
evalcond[0]=(((r20*x2431))+(((-1.0)*r22*x2428))+(((-1.0)*r21*sj5*x2429)));
evalcond[1]=((((-1.0)*r12*x2428))+((r10*x2431))+(((-1.0)*x2427*x2429)));
evalcond[2]=((((-1.0)*r02*x2429))+((r01*x2430))+(((-1.0)*x2426*x2428)));
evalcond[3]=((1.0)+(((-1.0)*r02*x2428))+(((-1.0)*r01*sj5*x2429))+((x2424*x2426)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x2429))+((r21*x2430))+(((-1.0)*cj5*r20*x2428)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r12*x2429))+((x2425*x2427))+((cj1*cj2))+(((-1.0)*cj5*r10*x2428)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2432=((1.0)*sj5);
CheckValue<IkReal> x2433=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x2432)))),-1);
if(!x2433.valid){
continue;
}
CheckValue<IkReal> x2434 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x2432)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2434.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2433.value)))+(x2434.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2435=IKsin(j4);
IkReal x2436=IKcos(j4);
IkReal x2437=(cj5*r00);
IkReal x2438=(r11*sj5);
IkReal x2439=((1.0)*x2436);
IkReal x2440=((1.0)*x2435);
IkReal x2441=(sj5*x2436);
IkReal x2442=(cj5*x2435);
evalcond[0]=((((-1.0)*r22*x2439))+(((-1.0)*r21*sj5*x2440))+((r20*x2442)));
evalcond[1]=(((r10*x2442))+(((-1.0)*x2438*x2440))+(((-1.0)*r12*x2439)));
evalcond[2]=(((r01*x2441))+(((-1.0)*x2437*x2439))+(((-1.0)*r02*x2440)));
evalcond[3]=((1.0)+((x2435*x2437))+(((-1.0)*r01*sj5*x2440))+(((-1.0)*r02*x2439)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*cj5*r20*x2439))+(((-1.0)*r22*x2440))+((r21*x2441)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*cj5*r10*x2439))+((x2436*x2438))+(((-1.0)*r12*x2440))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2443 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2443.valid){
continue;
}
CheckValue<IkReal> x2444=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2444.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2443.value)+(((1.5707963267949)*(x2444.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2445=IKsin(j4);
IkReal x2446=IKcos(j4);
IkReal x2447=(cj5*r00);
IkReal x2448=(r11*sj5);
IkReal x2449=((1.0)*x2446);
IkReal x2450=((1.0)*x2445);
IkReal x2451=(sj5*x2446);
IkReal x2452=(cj5*x2445);
evalcond[0]=(((r20*x2452))+(((-1.0)*r22*x2449))+(((-1.0)*r21*sj5*x2450)));
evalcond[1]=(((r10*x2452))+(((-1.0)*x2448*x2450))+(((-1.0)*r12*x2449)));
evalcond[2]=(((r01*x2451))+(((-1.0)*x2447*x2449))+(((-1.0)*r02*x2450)));
evalcond[3]=((1.0)+(((-1.0)*r01*sj5*x2450))+((x2445*x2447))+(((-1.0)*r02*x2449)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x2450))+(((-1.0)*cj5*r20*x2449))+((r21*x2451)));
evalcond[5]=(((x2446*x2448))+(((-1.0)*cj5*r10*x2449))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x2450))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2453=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2453;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x2453);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2454=((1.0)*sj5);
IkReal x2455=((((-1.0)*r20*x2454))+(((-1.0)*cj5*r21)));
j4eval[0]=x2455;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x2454))))));
j4eval[2]=IKsign(x2455);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2456=cj5*cj5;
IkReal x2457=r01*r01;
IkReal x2458=(r01*sj5);
IkReal x2459=(cj5*r00);
IkReal x2460=((((2.0)*x2458*x2459))+(((-1.0)*x2456*(r00*r00)))+(((-1.0)*(r02*r02)))+((x2456*x2457))+(((-1.0)*x2457)));
j4eval[0]=x2460;
j4eval[1]=IKsign(x2460);
j4eval[2]=((IKabs(r02))+(IKabs((x2458+(((-1.0)*x2459))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2461=cj5*cj5;
IkReal x2462=r01*r01;
IkReal x2463=(r01*sj5);
IkReal x2464=(cj5*r00);
CheckValue<IkReal> x2465=IKPowWithIntegerCheck(IKsign((((x2461*x2462))+(((-1.0)*(r02*r02)))+(((-1.0)*x2462))+(((2.0)*x2463*x2464))+(((-1.0)*x2461*(r00*r00))))),-1);
if(!x2465.valid){
continue;
}
CheckValue<IkReal> x2466 = IKatan2WithCheck(IkReal((x2463+(((-1.0)*x2464)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2466.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2465.value)))+(x2466.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2467=IKsin(j4);
IkReal x2468=IKcos(j4);
IkReal x2469=(cj5*r00);
IkReal x2470=(cj5*r20);
IkReal x2471=(cj5*r10);
IkReal x2472=((1.0)*x2468);
IkReal x2473=(sj5*x2468);
IkReal x2474=((1.0)*x2467);
IkReal x2475=(sj5*x2474);
evalcond[0]=((((-1.0)*r21*x2475))+((x2467*x2470))+(((-1.0)*r22*x2472)));
evalcond[1]=((((-1.0)*r11*x2475))+(((-1.0)*r12*x2472))+((x2467*x2471)));
evalcond[2]=(((r01*x2473))+(((-1.0)*x2469*x2472))+(((-1.0)*r02*x2474)));
evalcond[3]=((-1.0)+((x2467*x2469))+(((-1.0)*r01*x2475))+(((-1.0)*r02*x2472)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x2473))+(((-1.0)*x2470*x2472))+(((-1.0)*r22*x2474)));
evalcond[5]=((((-1.0)*r12*x2474))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x2471*x2472))+((r11*x2473)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2476=((1.0)*sj5);
CheckValue<IkReal> x2477 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x2476)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2477.valid){
continue;
}
CheckValue<IkReal> x2478=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x2476))+(((-1.0)*cj5*r21)))),-1);
if(!x2478.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2477.value)+(((1.5707963267949)*(x2478.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2479=IKsin(j4);
IkReal x2480=IKcos(j4);
IkReal x2481=(cj5*r00);
IkReal x2482=(cj5*r20);
IkReal x2483=(cj5*r10);
IkReal x2484=((1.0)*x2480);
IkReal x2485=(sj5*x2480);
IkReal x2486=((1.0)*x2479);
IkReal x2487=(sj5*x2486);
evalcond[0]=((((-1.0)*r22*x2484))+(((-1.0)*r21*x2487))+((x2479*x2482)));
evalcond[1]=((((-1.0)*r12*x2484))+(((-1.0)*r11*x2487))+((x2479*x2483)));
evalcond[2]=(((r01*x2485))+(((-1.0)*r02*x2486))+(((-1.0)*x2481*x2484)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x2487))+(((-1.0)*r02*x2484))+((x2479*x2481)));
evalcond[4]=((((-1.0)*r22*x2486))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x2482*x2484))+((r21*x2485)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x2485))+(((-1.0)*r12*x2486))+(((-1.0)*x2483*x2484)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2488=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2488.valid){
continue;
}
CheckValue<IkReal> x2489 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2489.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2488.value)))+(x2489.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2490=IKsin(j4);
IkReal x2491=IKcos(j4);
IkReal x2492=(cj5*r00);
IkReal x2493=(cj5*r20);
IkReal x2494=(cj5*r10);
IkReal x2495=((1.0)*x2491);
IkReal x2496=(sj5*x2491);
IkReal x2497=((1.0)*x2490);
IkReal x2498=(sj5*x2497);
evalcond[0]=(((x2490*x2493))+(((-1.0)*r21*x2498))+(((-1.0)*r22*x2495)));
evalcond[1]=(((x2490*x2494))+(((-1.0)*r11*x2498))+(((-1.0)*r12*x2495)));
evalcond[2]=((((-1.0)*r02*x2497))+((r01*x2496))+(((-1.0)*x2492*x2495)));
evalcond[3]=((-1.0)+((x2490*x2492))+(((-1.0)*r01*x2498))+(((-1.0)*r02*x2495)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x2493*x2495))+((cj1*sj2))+((r21*x2496))+(((-1.0)*r22*x2497)));
evalcond[5]=((((-1.0)*x2494*x2495))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x2496))+(((-1.0)*r12*x2497)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2499=((-1.0)*r10);
IkReal x2501 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2501)==0){
continue;
}
IkReal x2500=pow(x2501,-0.5);
CheckValue<IkReal> x2502 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2499),IKFAST_ATAN2_MAGTHRESH);
if(!x2502.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2502.value));
IkReal gconst91=(r11*x2500);
IkReal gconst92=(x2499*x2500);
CheckValue<IkReal> x2503 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2503.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2503.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2504=((-1.0)*r10);
IkReal x2505=x2500;
CheckValue<IkReal> x2507 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2504),IKFAST_ATAN2_MAGTHRESH);
if(!x2507.valid){
continue;
}
IkReal x2506=((-1.0)*(x2507.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst91;
cj5=gconst92;
j5=x2506;
IkReal gconst90=x2506;
IkReal gconst91=(r11*x2505);
IkReal gconst92=(x2504*x2505);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2508=((1.0)*gconst91);
CheckValue<IkReal> x2509=IKPowWithIntegerCheck(IKsign((((gconst91*r20))+((gconst92*r21)))),-1);
if(!x2509.valid){
continue;
}
CheckValue<IkReal> x2510 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst92*r00))+((gconst92*r10*sj0))+(((-1.0)*cj0*r01*x2508))+(((-1.0)*r11*sj0*x2508)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2510.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2509.value)))+(x2510.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2511=IKsin(j4);
IkReal x2512=IKcos(j4);
IkReal x2513=(cj1*cj2);
IkReal x2514=(gconst92*r10);
IkReal x2515=(gconst92*r00);
IkReal x2516=(gconst92*r20);
IkReal x2517=((1.0)*cj0);
IkReal x2518=(sj1*sj2);
IkReal x2519=((1.0)*x2512);
IkReal x2520=(gconst91*x2512);
IkReal x2521=((1.0)*x2511);
IkReal x2522=(gconst91*x2521);
evalcond[0]=(((x2511*x2516))+(((-1.0)*r21*x2522))+(((-1.0)*r22*x2519)));
evalcond[1]=(sj0+((x2511*x2515))+(((-1.0)*r01*x2522))+(((-1.0)*r02*x2519)));
evalcond[2]=((((-1.0)*x2517))+((x2511*x2514))+(((-1.0)*r11*x2522))+(((-1.0)*r12*x2519)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x2516*x2519))+((r21*x2520))+(((-1.0)*r22*x2521)));
evalcond[4]=(((cj0*x2513))+(((-1.0)*x2517*x2518))+((r01*x2520))+(((-1.0)*x2515*x2519))+(((-1.0)*r02*x2521)));
evalcond[5]=((((-1.0)*r12*x2521))+((sj0*x2513))+((r11*x2520))+(((-1.0)*x2514*x2519))+(((-1.0)*sj0*x2518)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2523=((1.0)*gconst91);
CheckValue<IkReal> x2524 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x2523))+((cj0*gconst92*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2524.valid){
continue;
}
CheckValue<IkReal> x2525=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x2523))+(((-1.0)*gconst92*r01)))),-1);
if(!x2525.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2524.value)+(((1.5707963267949)*(x2525.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2526=IKsin(j4);
IkReal x2527=IKcos(j4);
IkReal x2528=(cj1*cj2);
IkReal x2529=(gconst92*r10);
IkReal x2530=(gconst92*r00);
IkReal x2531=(gconst92*r20);
IkReal x2532=((1.0)*cj0);
IkReal x2533=(sj1*sj2);
IkReal x2534=((1.0)*x2527);
IkReal x2535=(gconst91*x2527);
IkReal x2536=((1.0)*x2526);
IkReal x2537=(gconst91*x2536);
evalcond[0]=((((-1.0)*r21*x2537))+((x2526*x2531))+(((-1.0)*r22*x2534)));
evalcond[1]=(sj0+((x2526*x2530))+(((-1.0)*r01*x2537))+(((-1.0)*r02*x2534)));
evalcond[2]=((((-1.0)*x2532))+((x2526*x2529))+(((-1.0)*r12*x2534))+(((-1.0)*r11*x2537)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x2535))+(((-1.0)*x2531*x2534))+(((-1.0)*r22*x2536)));
evalcond[4]=(((r01*x2535))+(((-1.0)*r02*x2536))+(((-1.0)*x2530*x2534))+((cj0*x2528))+(((-1.0)*x2532*x2533)));
evalcond[5]=(((sj0*x2528))+(((-1.0)*r12*x2536))+(((-1.0)*sj0*x2533))+((r11*x2535))+(((-1.0)*x2529*x2534)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2538=((-1.0)*r11);
IkReal x2540 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2540)==0){
continue;
}
IkReal x2539=pow(x2540,-0.5);
CheckValue<IkReal> x2541 = IKatan2WithCheck(IkReal(x2538),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2541.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2541.value))));
IkReal gconst94=(x2538*x2539);
IkReal gconst95=((1.0)*r10*x2539);
CheckValue<IkReal> x2542 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2542.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2542.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2543=((-1.0)*r11);
CheckValue<IkReal> x2546 = IKatan2WithCheck(IkReal(x2543),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2546.valid){
continue;
}
IkReal x2544=((1.0)*(x2546.value));
IkReal x2545=x2539;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2544)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2544)));
IkReal gconst94=(x2543*x2545);
IkReal gconst95=((1.0)*r10*x2545);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2547=((-1.0)*r11);
CheckValue<IkReal> x2550 = IKatan2WithCheck(IkReal(x2547),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2550.valid){
continue;
}
IkReal x2548=((1.0)*(x2550.value));
IkReal x2549=x2539;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2548)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2548)));
IkReal gconst94=(x2547*x2549);
IkReal gconst95=((1.0)*r10*x2549);
IkReal x2551=r12*r12;
IkReal x2552=(cj0*r02);
IkReal x2553=x2539;
IkReal x2554=(sj0*x2553);
j4eval[0]=((IKabs((((x2551*x2554))+(((-1.0)*x2554))+((r12*x2552*x2553)))))+(IKabs((x2552+((r12*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2555=((-1.0)*r11);
CheckValue<IkReal> x2558 = IKatan2WithCheck(IkReal(x2555),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2558.valid){
continue;
}
IkReal x2556=((1.0)*(x2558.value));
IkReal x2557=x2539;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2556)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2556)));
IkReal gconst94=(x2555*x2557);
IkReal gconst95=((1.0)*r10*x2557);
IkReal x2559=(cj1*r22*sj2);
IkReal x2560=(cj2*r22*sj1);
IkReal x2561=x2539;
IkReal x2562=(r12*x2561);
j4eval[0]=((IKabs((((x2560*x2562))+((x2559*x2562)))))+(IKabs((x2560+x2559))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2563=(cj2*sj1);
IkReal x2564=(gconst94*r21);
IkReal x2565=(gconst95*r20);
IkReal x2566=(cj1*sj2);
CheckValue<IkReal> x2567 = IKatan2WithCheck(IkReal((((r22*x2563))+((r22*x2566)))),IkReal(((((-1.0)*x2563*x2564))+(((-1.0)*x2564*x2566))+((x2565*x2566))+((x2563*x2565)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2567.valid){
continue;
}
CheckValue<IkReal> x2568=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x2564*x2564)+(x2565*x2565)+(((-2.0)*x2564*x2565)))),-1);
if(!x2568.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2567.value)+(((1.5707963267949)*(x2568.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2569=IKsin(j4);
IkReal x2570=IKcos(j4);
IkReal x2571=(cj1*cj2);
IkReal x2572=(gconst95*r10);
IkReal x2573=((1.0)*cj0);
IkReal x2574=(sj1*sj2);
IkReal x2575=((1.0)*x2570);
IkReal x2576=(gconst95*x2569);
IkReal x2577=(gconst94*x2570);
IkReal x2578=((1.0)*x2569);
IkReal x2579=(gconst94*x2578);
evalcond[0]=(((r20*x2576))+(((-1.0)*r21*x2579))+(((-1.0)*r22*x2575)));
evalcond[1]=(sj0+(((-1.0)*r01*x2579))+((r00*x2576))+(((-1.0)*r02*x2575)));
evalcond[2]=((((-1.0)*r12*x2575))+(((-1.0)*x2573))+((x2569*x2572))+(((-1.0)*r11*x2579)));
evalcond[3]=(((r21*x2577))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst95*r20*x2575))+(((-1.0)*r22*x2578)));
evalcond[4]=((((-1.0)*gconst95*r00*x2575))+((r01*x2577))+(((-1.0)*x2573*x2574))+(((-1.0)*r02*x2578))+((cj0*x2571)));
evalcond[5]=((((-1.0)*r12*x2578))+((r11*x2577))+(((-1.0)*sj0*x2574))+((sj0*x2571))+(((-1.0)*x2572*x2575)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2580=((1.0)*gconst94);
CheckValue<IkReal> x2581=IKPowWithIntegerCheck(IKsign((((gconst95*r21))+((gconst94*r20)))),-1);
if(!x2581.valid){
continue;
}
CheckValue<IkReal> x2582 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x2580))+((gconst95*r10*sj0))+(((-1.0)*r11*sj0*x2580))+((cj0*gconst95*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2582.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2581.value)))+(x2582.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2583=IKsin(j4);
IkReal x2584=IKcos(j4);
IkReal x2585=(cj1*cj2);
IkReal x2586=(gconst95*r10);
IkReal x2587=((1.0)*cj0);
IkReal x2588=(sj1*sj2);
IkReal x2589=((1.0)*x2584);
IkReal x2590=(gconst95*x2583);
IkReal x2591=(gconst94*x2584);
IkReal x2592=((1.0)*x2583);
IkReal x2593=(gconst94*x2592);
evalcond[0]=((((-1.0)*r21*x2593))+((r20*x2590))+(((-1.0)*r22*x2589)));
evalcond[1]=(((r00*x2590))+(((-1.0)*r01*x2593))+sj0+(((-1.0)*r02*x2589)));
evalcond[2]=((((-1.0)*x2587))+((x2583*x2586))+(((-1.0)*r11*x2593))+(((-1.0)*r12*x2589)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x2592))+((cj1*sj2))+(((-1.0)*gconst95*r20*x2589))+((r21*x2591)));
evalcond[4]=((((-1.0)*gconst95*r00*x2589))+((r01*x2591))+((cj0*x2585))+(((-1.0)*r02*x2592))+(((-1.0)*x2587*x2588)));
evalcond[5]=((((-1.0)*x2586*x2589))+(((-1.0)*sj0*x2588))+((r11*x2591))+((sj0*x2585))+(((-1.0)*r12*x2592)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2594=((1.0)*gconst94);
CheckValue<IkReal> x2595=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x2594))+(((-1.0)*gconst95*r01)))),-1);
if(!x2595.valid){
continue;
}
CheckValue<IkReal> x2596 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x2594))+((cj0*gconst95*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2596.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2595.value)))+(x2596.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2597=IKsin(j4);
IkReal x2598=IKcos(j4);
IkReal x2599=(cj1*cj2);
IkReal x2600=(gconst95*r10);
IkReal x2601=((1.0)*cj0);
IkReal x2602=(sj1*sj2);
IkReal x2603=((1.0)*x2598);
IkReal x2604=(gconst95*x2597);
IkReal x2605=(gconst94*x2598);
IkReal x2606=((1.0)*x2597);
IkReal x2607=(gconst94*x2606);
evalcond[0]=(((r20*x2604))+(((-1.0)*r22*x2603))+(((-1.0)*r21*x2607)));
evalcond[1]=(sj0+(((-1.0)*r02*x2603))+(((-1.0)*r01*x2607))+((r00*x2604)));
evalcond[2]=(((x2597*x2600))+(((-1.0)*r11*x2607))+(((-1.0)*r12*x2603))+(((-1.0)*x2601)));
evalcond[3]=((((-1.0)*gconst95*r20*x2603))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x2606))+((r21*x2605)));
evalcond[4]=((((-1.0)*x2601*x2602))+((cj0*x2599))+(((-1.0)*gconst95*r00*x2603))+(((-1.0)*r02*x2606))+((r01*x2605)));
evalcond[5]=((((-1.0)*x2600*x2603))+(((-1.0)*r12*x2606))+((sj0*x2599))+(((-1.0)*sj0*x2602))+((r11*x2605)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2608=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2608;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x2608);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2609=((1.0)*sj5);
IkReal x2610=((((-1.0)*cj5*r01))+(((-1.0)*r00*x2609)));
j4eval[0]=x2610;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x2609))))));
j4eval[2]=IKsign(x2610);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2611=cj5*cj5;
IkReal x2612=r11*r11;
IkReal x2613=(cj5*r10);
IkReal x2614=(r11*sj5);
IkReal x2615=((((-1.0)*x2612))+(((2.0)*x2613*x2614))+(((-1.0)*(r12*r12)))+((x2611*x2612))+(((-1.0)*x2611*(r10*r10))));
j4eval[0]=x2615;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x2613))+x2614))));
j4eval[2]=IKsign(x2615);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2616=cj5*cj5;
IkReal x2617=r11*r11;
IkReal x2618=(cj5*r10);
IkReal x2619=(r11*sj5);
CheckValue<IkReal> x2620=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2617))+((x2616*x2617))+(((-1.0)*(r12*r12)))+(((-1.0)*x2616*(r10*r10)))+(((2.0)*x2618*x2619)))),-1);
if(!x2620.valid){
continue;
}
CheckValue<IkReal> x2621 = IKatan2WithCheck(IkReal(((((-1.0)*x2618))+x2619)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2621.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2620.value)))+(x2621.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2622=IKsin(j4);
IkReal x2623=IKcos(j4);
IkReal x2624=(cj5*r00);
IkReal x2625=((1.0)*x2623);
IkReal x2626=(sj5*x2623);
IkReal x2627=(cj5*x2622);
IkReal x2628=((1.0)*x2622);
IkReal x2629=(sj5*x2628);
evalcond[0]=(((r20*x2627))+(((-1.0)*r22*x2625))+(((-1.0)*r21*x2629)));
evalcond[1]=((((-1.0)*r01*x2629))+(((-1.0)*r02*x2625))+((x2622*x2624)));
evalcond[2]=((((-1.0)*cj5*r10*x2625))+(((-1.0)*r12*x2628))+((r11*x2626)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x2629))+(((-1.0)*r12*x2625))+((r10*x2627)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x2628))+(((-1.0)*cj5*r20*x2625))+((r21*x2626)));
evalcond[5]=(((r01*x2626))+(((-1.0)*sj1*sj2))+(((-1.0)*x2624*x2625))+(((-1.0)*r02*x2628))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2630=((1.0)*sj5);
CheckValue<IkReal> x2631 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x2630)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2631.valid){
continue;
}
CheckValue<IkReal> x2632=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x2630))+(((-1.0)*cj5*r01)))),-1);
if(!x2632.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2631.value)+(((1.5707963267949)*(x2632.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2633=IKsin(j4);
IkReal x2634=IKcos(j4);
IkReal x2635=(cj5*r00);
IkReal x2636=((1.0)*x2634);
IkReal x2637=(sj5*x2634);
IkReal x2638=(cj5*x2633);
IkReal x2639=((1.0)*x2633);
IkReal x2640=(sj5*x2639);
evalcond[0]=((((-1.0)*r21*x2640))+((r20*x2638))+(((-1.0)*r22*x2636)));
evalcond[1]=((((-1.0)*r02*x2636))+(((-1.0)*r01*x2640))+((x2633*x2635)));
evalcond[2]=(((r11*x2637))+(((-1.0)*cj5*r10*x2636))+(((-1.0)*r12*x2639)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x2640))+((r10*x2638))+(((-1.0)*r12*x2636)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*cj5*r20*x2636))+((cj1*sj2))+((r21*x2637))+(((-1.0)*r22*x2639)));
evalcond[5]=((((-1.0)*r02*x2639))+(((-1.0)*sj1*sj2))+((r01*x2637))+(((-1.0)*x2635*x2636))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2641=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2641.valid){
continue;
}
CheckValue<IkReal> x2642 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2642.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2641.value)))+(x2642.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2643=IKsin(j4);
IkReal x2644=IKcos(j4);
IkReal x2645=(cj5*r00);
IkReal x2646=((1.0)*x2644);
IkReal x2647=(sj5*x2644);
IkReal x2648=(cj5*x2643);
IkReal x2649=((1.0)*x2643);
IkReal x2650=(sj5*x2649);
evalcond[0]=((((-1.0)*r22*x2646))+(((-1.0)*r21*x2650))+((r20*x2648)));
evalcond[1]=((((-1.0)*r01*x2650))+(((-1.0)*r02*x2646))+((x2643*x2645)));
evalcond[2]=(((r11*x2647))+(((-1.0)*r12*x2649))+(((-1.0)*cj5*r10*x2646)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2646))+(((-1.0)*r11*x2650))+((r10*x2648)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x2649))+((r21*x2647))+(((-1.0)*cj5*r20*x2646))+((cj1*sj2)));
evalcond[5]=((((-1.0)*x2645*x2646))+(((-1.0)*sj1*sj2))+(((-1.0)*r02*x2649))+((r01*x2647))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2651=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2651;
j4eval[1]=IKsign(x2651);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2652=((1.0)*sj5);
IkReal x2653=((((-1.0)*r20*x2652))+(((-1.0)*cj5*r21)));
j4eval[0]=x2653;
j4eval[1]=((IKabs(((((-1.0)*r01*x2652))+((cj5*r00)))))+(IKabs(r02)));
j4eval[2]=IKsign(x2653);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2654=cj5*cj5;
IkReal x2655=r11*r11;
IkReal x2656=(r11*sj5);
IkReal x2657=(cj5*r10);
IkReal x2658=((r12*r12)+((x2654*(r10*r10)))+(((-2.0)*x2656*x2657))+(((-1.0)*x2654*x2655))+x2655);
j4eval[0]=x2658;
j4eval[1]=IKsign(x2658);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x2657))+x2656))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2659=cj5*cj5;
IkReal x2660=r11*r11;
IkReal x2661=(cj5*r10);
IkReal x2662=(r11*sj5);
CheckValue<IkReal> x2663 = IKatan2WithCheck(IkReal(((((-1.0)*x2661))+x2662)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2663.valid){
continue;
}
CheckValue<IkReal> x2664=IKPowWithIntegerCheck(IKsign((((x2659*(r10*r10)))+(r12*r12)+(((-1.0)*x2659*x2660))+(((-2.0)*x2661*x2662))+x2660)),-1);
if(!x2664.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2663.value)+(((1.5707963267949)*(x2664.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2665=IKsin(j4);
IkReal x2666=IKcos(j4);
IkReal x2667=(cj5*r00);
IkReal x2668=((1.0)*x2666);
IkReal x2669=(sj5*x2666);
IkReal x2670=(cj5*x2665);
IkReal x2671=((1.0)*x2665);
IkReal x2672=(sj5*x2671);
evalcond[0]=((((-1.0)*r21*x2672))+((r20*x2670))+(((-1.0)*r22*x2668)));
evalcond[1]=((((-1.0)*r01*x2672))+(((-1.0)*r02*x2668))+((x2665*x2667)));
evalcond[2]=((((-1.0)*r12*x2671))+(((-1.0)*cj5*r10*x2668))+((r11*x2669)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2668))+(((-1.0)*r11*x2672))+((r10*x2670)));
evalcond[4]=(((cj2*sj1))+((r21*x2669))+((cj1*sj2))+(((-1.0)*cj5*r20*x2668))+(((-1.0)*r22*x2671)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x2671))+(((-1.0)*x2667*x2668))+((r01*x2669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2673=((1.0)*sj5);
CheckValue<IkReal> x2674=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x2673))+(((-1.0)*cj5*r21)))),-1);
if(!x2674.valid){
continue;
}
CheckValue<IkReal> x2675 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x2673))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2675.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2674.value)))+(x2675.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2676=IKsin(j4);
IkReal x2677=IKcos(j4);
IkReal x2678=(cj5*r00);
IkReal x2679=((1.0)*x2677);
IkReal x2680=(sj5*x2677);
IkReal x2681=(cj5*x2676);
IkReal x2682=((1.0)*x2676);
IkReal x2683=(sj5*x2682);
evalcond[0]=((((-1.0)*r21*x2683))+((r20*x2681))+(((-1.0)*r22*x2679)));
evalcond[1]=((((-1.0)*r01*x2683))+(((-1.0)*r02*x2679))+((x2676*x2678)));
evalcond[2]=((((-1.0)*r12*x2682))+((r11*x2680))+(((-1.0)*cj5*r10*x2679)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2679))+((r10*x2681))+(((-1.0)*r11*x2683)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*cj5*r20*x2679))+((r21*x2680))+(((-1.0)*r22*x2682)));
evalcond[5]=((((-1.0)*r02*x2682))+(((-1.0)*x2678*x2679))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x2680)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2684=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2684.valid){
continue;
}
CheckValue<IkReal> x2685 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2685.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2684.value)))+(x2685.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2686=IKsin(j4);
IkReal x2687=IKcos(j4);
IkReal x2688=(cj5*r00);
IkReal x2689=((1.0)*x2687);
IkReal x2690=(sj5*x2687);
IkReal x2691=(cj5*x2686);
IkReal x2692=((1.0)*x2686);
IkReal x2693=(sj5*x2692);
evalcond[0]=((((-1.0)*r22*x2689))+((r20*x2691))+(((-1.0)*r21*x2693)));
evalcond[1]=((((-1.0)*r02*x2689))+(((-1.0)*r01*x2693))+((x2686*x2688)));
evalcond[2]=((((-1.0)*cj5*r10*x2689))+(((-1.0)*r12*x2692))+((r11*x2690)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2689))+((r10*x2691))+(((-1.0)*r11*x2693)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*cj5*r20*x2689))+(((-1.0)*r22*x2692))+((r21*x2690)));
evalcond[5]=((((-1.0)*x2688*x2689))+(((-1.0)*r02*x2692))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x2690)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2694=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2694);
rxp0_2=(py*r00);
rxp1_0=(r21*x2694);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2695=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2695);
rxp0_2=(py*r00);
rxp1_0=(r21*x2695);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2696=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2696);
rxp0_2=(py*r00);
rxp1_0=(r21*x2696);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2699=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x2699.valid){
continue;
}
IkReal x2697=x2699.value;
IkReal x2698=(cj0*x2697);
cj4array[0]=(((sj1*sj2*x2698))+(((-1.0)*cj1*cj2*x2698)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2700=IKsin(j4);
IkReal x2701=IKcos(j4);
IkReal x2702=(cj5*r20);
IkReal x2703=((1.0)*x2701);
IkReal x2704=((1.0)*sj5*x2700);
evalcond[0]=((-1.0)*r12*x2700);
evalcond[1]=((((-1.0)*r12*x2703))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r21*x2704))+((x2700*x2702)));
evalcond[3]=(((cj5*r00*x2700))+(((-1.0)*r01*x2704)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x2702*x2703))+((cj1*sj2))+((r21*sj5*x2701)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2707=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x2707.valid){
continue;
}
IkReal x2705=x2707.value;
IkReal x2706=((1.0)*x2705);
cj4array[0]=((((-1.0)*cj2*sj1*x2706))+(((-1.0)*cj1*sj2*x2706)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2708=IKsin(j4);
IkReal x2709=IKcos(j4);
IkReal x2710=(cj5*r00);
IkReal x2711=(r01*sj5);
IkReal x2712=((1.0)*cj0);
IkReal x2713=((1.0)*x2709);
IkReal x2714=((1.0)*x2708);
evalcond[0]=((-1.0)*r12*x2708);
evalcond[1]=((((-1.0)*x2712))+(((-1.0)*r12*x2713)));
evalcond[2]=((((-1.0)*r21*sj5*x2714))+((cj5*r20*x2708)));
evalcond[3]=(((x2708*x2710))+(((-1.0)*x2711*x2714)));
evalcond[4]=((((-1.0)*sj1*sj2*x2712))+((x2709*x2711))+((cj0*cj1*cj2))+(((-1.0)*x2710*x2713)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2715=IKPowWithIntegerCheck(r12,-1);
if(!x2715.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x2715.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2716=IKsin(j4);
IkReal x2717=IKcos(j4);
IkReal x2718=(r01*sj5);
IkReal x2719=(r21*sj5);
IkReal x2720=((1.0)*x2716);
IkReal x2721=(cj5*x2716);
IkReal x2722=((1.0)*cj5*x2717);
evalcond[0]=((-1.0)*r12*x2716);
evalcond[1]=((((-1.0)*x2719*x2720))+((r20*x2721)));
evalcond[2]=((((-1.0)*x2718*x2720))+((r00*x2721)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x2717*x2719))+(((-1.0)*r20*x2722)));
evalcond[4]=((((-1.0)*r00*x2722))+(((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))+((x2717*x2718)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2723=((1.0)*sj5);
CheckValue<IkReal> x2724=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2724.valid){
continue;
}
CheckValue<IkReal> x2725 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj0*x2723))+(((-1.0)*cj0*r01*x2723)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2725.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2724.value)))+(x2725.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2726=IKsin(j4);
IkReal x2727=IKcos(j4);
IkReal x2728=(cj5*r00);
IkReal x2729=(cj1*cj2);
IkReal x2730=((1.0)*cj0);
IkReal x2731=(sj1*sj2);
IkReal x2732=((1.0)*x2727);
IkReal x2733=(sj5*x2727);
IkReal x2734=(cj5*x2726);
IkReal x2735=((1.0)*x2726);
IkReal x2736=(sj5*x2735);
evalcond[0]=((((-1.0)*r22*x2732))+((r20*x2734))+(((-1.0)*r21*x2736)));
evalcond[1]=(sj0+((x2726*x2728))+(((-1.0)*r02*x2732))+(((-1.0)*r01*x2736)));
evalcond[2]=((((-1.0)*r11*x2736))+(((-1.0)*r12*x2732))+((r10*x2734))+(((-1.0)*x2730)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x2733))+(((-1.0)*cj5*r20*x2732))+(((-1.0)*r22*x2735)));
evalcond[4]=((((-1.0)*x2730*x2731))+(((-1.0)*x2728*x2732))+((r01*x2733))+(((-1.0)*r02*x2735))+((cj0*x2729)));
evalcond[5]=((((-1.0)*sj0*x2731))+(((-1.0)*cj5*r10*x2732))+(((-1.0)*r12*x2735))+((r11*x2733))+((sj0*x2729)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2737=((1.0)*sj5);
CheckValue<IkReal> x2738 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x2737))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2738.valid){
continue;
}
CheckValue<IkReal> x2739=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r01))+(((-1.0)*r00*x2737)))),-1);
if(!x2739.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2738.value)+(((1.5707963267949)*(x2739.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2740=IKsin(j4);
IkReal x2741=IKcos(j4);
IkReal x2742=(cj5*r00);
IkReal x2743=(cj1*cj2);
IkReal x2744=((1.0)*cj0);
IkReal x2745=(sj1*sj2);
IkReal x2746=((1.0)*x2741);
IkReal x2747=(sj5*x2741);
IkReal x2748=(cj5*x2740);
IkReal x2749=((1.0)*x2740);
IkReal x2750=(sj5*x2749);
evalcond[0]=(((r20*x2748))+(((-1.0)*r21*x2750))+(((-1.0)*r22*x2746)));
evalcond[1]=(sj0+(((-1.0)*r01*x2750))+((x2740*x2742))+(((-1.0)*r02*x2746)));
evalcond[2]=(((r10*x2748))+(((-1.0)*r11*x2750))+(((-1.0)*r12*x2746))+(((-1.0)*x2744)));
evalcond[3]=(((cj2*sj1))+((r21*x2747))+((cj1*sj2))+(((-1.0)*cj5*r20*x2746))+(((-1.0)*r22*x2749)));
evalcond[4]=((((-1.0)*x2744*x2745))+((cj0*x2743))+((r01*x2747))+(((-1.0)*r02*x2749))+(((-1.0)*x2742*x2746)));
evalcond[5]=((((-1.0)*cj5*r10*x2746))+((r11*x2747))+((sj0*x2743))+(((-1.0)*r12*x2749))+(((-1.0)*sj0*x2745)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2751=((1.0)*sj5);
CheckValue<IkReal> x2752 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x2751)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2752.valid){
continue;
}
CheckValue<IkReal> x2753=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x2751)))),-1);
if(!x2753.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2752.value)+(((1.5707963267949)*(x2753.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2754=IKsin(j4);
IkReal x2755=IKcos(j4);
IkReal x2756=(cj5*r00);
IkReal x2757=(cj1*cj2);
IkReal x2758=((1.0)*cj0);
IkReal x2759=(sj1*sj2);
IkReal x2760=((1.0)*x2755);
IkReal x2761=(sj5*x2755);
IkReal x2762=(cj5*x2754);
IkReal x2763=((1.0)*x2754);
IkReal x2764=(sj5*x2763);
evalcond[0]=(((r20*x2762))+(((-1.0)*r21*x2764))+(((-1.0)*r22*x2760)));
evalcond[1]=(sj0+((x2754*x2756))+(((-1.0)*r01*x2764))+(((-1.0)*r02*x2760)));
evalcond[2]=((((-1.0)*r12*x2760))+(((-1.0)*r11*x2764))+((r10*x2762))+(((-1.0)*x2758)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*cj5*r20*x2760))+((r21*x2761))+(((-1.0)*r22*x2763)));
evalcond[4]=(((cj0*x2757))+((r01*x2761))+(((-1.0)*r02*x2763))+(((-1.0)*x2756*x2760))+(((-1.0)*x2758*x2759)));
evalcond[5]=((((-1.0)*r12*x2763))+(((-1.0)*cj5*r10*x2760))+((sj0*x2757))+(((-1.0)*sj0*x2759))+((r11*x2761)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x2765=((1.0)*cj5);
IkReal x2766=((1.0)*sj5);
IkReal x2767=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x2767;
j0eval[1]=((IKabs(((((-1.0)*r11*x2765))+(((-1.0)*r10*x2766)))))+(IKabs(((((-1.0)*r00*x2766))+(((-1.0)*r01*x2765))))));
j0eval[2]=IKsign(x2767);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x2768=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x2768;
j0eval[1]=IKsign(x2768);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x2769=r21*r21;
IkReal x2770=cj5*cj5;
IkReal x2771=(cj1*sj2);
IkReal x2772=(cj5*r20);
IkReal x2773=(r21*sj5);
IkReal x2774=(cj2*sj1);
IkReal x2775=(((x2769*x2770))+(((-1.0)*x2769))+(((-1.0)*x2770*(r20*r20)))+(((2.0)*x2772*x2773))+(((-1.0)*(r22*r22))));
j4eval[0]=x2775;
j4eval[1]=((IKabs(((((-1.0)*x2773*x2774))+((x2771*x2772))+(((-1.0)*x2771*x2773))+((x2772*x2774)))))+(IKabs((((r22*x2774))+((r22*x2771))))));
j4eval[2]=IKsign(x2775);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-8.0)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.0)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-8.0)*px))+IKsqr(((8.0)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-8.0)*px), ((8.0)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.125)*(IKsin(j0)))));
evalcond[1]=((((0.125)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x2776=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2776;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
j4eval[2]=IKsign(x2776);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x2777=((1.0)*sj5);
IkReal x2778=((((-1.0)*r00*x2777))+(((-1.0)*cj5*r01)));
j4eval[0]=x2778;
j4eval[1]=IKsign(x2778);
j4eval[2]=((IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x2777)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x2779=cj5*cj5;
IkReal x2780=((1.0)*r21);
IkReal x2781=(cj5*r20);
IkReal x2782=((((-1.0)*r02*r22))+((r01*sj5*x2781))+(((-1.0)*r00*r20*x2779))+((cj5*r00*r21*sj5))+(((-1.0)*r01*x2780))+((r01*r21*x2779)));
j4eval[0]=x2782;
j4eval[1]=IKsign(x2782);
j4eval[2]=((IKabs(((((-1.0)*cj0*sj5*x2780))+((cj0*x2781)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2783=cj5*cj5;
IkReal x2784=((1.0)*r21);
IkReal x2785=(cj5*r20);
CheckValue<IkReal> x2786=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+((r01*sj5*x2785))+((r01*r21*x2783))+((cj5*r00*r21*sj5))+(((-1.0)*r00*r20*x2783))+(((-1.0)*r01*x2784)))),-1);
if(!x2786.valid){
continue;
}
CheckValue<IkReal> x2787 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x2784))+((cj0*x2785)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2787.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2786.value)))+(x2787.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2788=IKcos(j4);
IkReal x2789=IKsin(j4);
IkReal x2790=(r11*sj5);
IkReal x2791=(r21*sj5);
IkReal x2792=(r01*sj5);
IkReal x2793=((1.0)*x2788);
IkReal x2794=((1.0)*x2789);
IkReal x2795=(cj5*x2788);
IkReal x2796=(cj5*x2789);
evalcond[0]=((((-1.0)*x2791*x2793))+((r22*x2789))+((r20*x2795)));
evalcond[1]=((((-1.0)*x2791*x2794))+(((-1.0)*r22*x2793))+((r20*x2796)));
evalcond[2]=(cj0+((r02*x2789))+((r00*x2795))+(((-1.0)*x2792*x2793)));
evalcond[3]=(sj0+(((-1.0)*x2790*x2793))+((r12*x2789))+((r10*x2795)));
evalcond[4]=(sj0+((r00*x2796))+(((-1.0)*x2792*x2794))+(((-1.0)*r02*x2793)));
evalcond[5]=((((-1.0)*x2790*x2794))+((r10*x2796))+(((-1.0)*cj0))+(((-1.0)*r12*x2793)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2797=((1.0)*sj5);
CheckValue<IkReal> x2798 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x2797)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x2798.valid){
continue;
}
CheckValue<IkReal> x2799=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x2797))+(((-1.0)*cj5*r01)))),-1);
if(!x2799.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2798.value)+(((1.5707963267949)*(x2799.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2800=IKcos(j4);
IkReal x2801=IKsin(j4);
IkReal x2802=(r11*sj5);
IkReal x2803=(r21*sj5);
IkReal x2804=(r01*sj5);
IkReal x2805=((1.0)*x2800);
IkReal x2806=((1.0)*x2801);
IkReal x2807=(cj5*x2800);
IkReal x2808=(cj5*x2801);
evalcond[0]=((((-1.0)*x2803*x2805))+((r20*x2807))+((r22*x2801)));
evalcond[1]=((((-1.0)*x2803*x2806))+((r20*x2808))+(((-1.0)*r22*x2805)));
evalcond[2]=(cj0+((r02*x2801))+(((-1.0)*x2804*x2805))+((r00*x2807)));
evalcond[3]=(((r12*x2801))+((r10*x2807))+sj0+(((-1.0)*x2802*x2805)));
evalcond[4]=(sj0+(((-1.0)*x2804*x2806))+(((-1.0)*r02*x2805))+((r00*x2808)));
evalcond[5]=(((r10*x2808))+(((-1.0)*x2802*x2806))+(((-1.0)*r12*x2805))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2809 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2809.valid){
continue;
}
CheckValue<IkReal> x2810=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2810.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2809.value)+(((1.5707963267949)*(x2810.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2811=IKcos(j4);
IkReal x2812=IKsin(j4);
IkReal x2813=(r11*sj5);
IkReal x2814=(r21*sj5);
IkReal x2815=(r01*sj5);
IkReal x2816=((1.0)*x2811);
IkReal x2817=((1.0)*x2812);
IkReal x2818=(cj5*x2811);
IkReal x2819=(cj5*x2812);
evalcond[0]=(((r22*x2812))+(((-1.0)*x2814*x2816))+((r20*x2818)));
evalcond[1]=((((-1.0)*r22*x2816))+(((-1.0)*x2814*x2817))+((r20*x2819)));
evalcond[2]=(((r00*x2818))+cj0+(((-1.0)*x2815*x2816))+((r02*x2812)));
evalcond[3]=(sj0+((r10*x2818))+(((-1.0)*x2813*x2816))+((r12*x2812)));
evalcond[4]=(((r00*x2819))+(((-1.0)*r02*x2816))+sj0+(((-1.0)*x2815*x2817)));
evalcond[5]=((((-1.0)*r12*x2816))+((r10*x2819))+(((-1.0)*x2813*x2817))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-8.0)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.0)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-8.0)*px))+IKsqr(((8.0)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-8.0)*px), ((8.0)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.125)*(IKsin(j0)))));
evalcond[1]=((((0.125)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x2820=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2820;
j4eval[1]=IKsign(x2820);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x2821=((1.0)*sj5);
IkReal x2822=((((-1.0)*cj5*r11))+(((-1.0)*r10*x2821)));
j4eval[0]=x2822;
j4eval[1]=IKsign(x2822);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x2821))+((cj5*r20*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x2823=((1.0)*sj5);
IkReal x2824=((((-1.0)*cj5*r11))+(((-1.0)*r10*x2823)));
j4eval[0]=x2824;
j4eval[1]=IKsign(x2824);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x2823))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2825=((1.0)*sj5);
CheckValue<IkReal> x2826=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x2825)))),-1);
if(!x2826.valid){
continue;
}
CheckValue<IkReal> x2827 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x2825))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2827.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2826.value)))+(x2827.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2828=IKcos(j4);
IkReal x2829=IKsin(j4);
IkReal x2830=((1.0)*cj0);
IkReal x2831=(r11*sj5);
IkReal x2832=(r21*sj5);
IkReal x2833=(r01*sj5);
IkReal x2834=((1.0)*x2828);
IkReal x2835=(cj5*x2828);
IkReal x2836=((1.0)*x2829);
IkReal x2837=(cj5*x2829);
evalcond[0]=(((r20*x2835))+((r22*x2829))+(((-1.0)*x2832*x2834)));
evalcond[1]=(((r20*x2837))+(((-1.0)*r22*x2834))+(((-1.0)*x2832*x2836)));
evalcond[2]=(sj0+(((-1.0)*x2833*x2836))+((r00*x2837))+(((-1.0)*r02*x2834)));
evalcond[3]=(((r02*x2829))+(((-1.0)*x2830))+(((-1.0)*x2833*x2834))+((r00*x2835)));
evalcond[4]=(((r10*x2835))+(((-1.0)*sj0))+(((-1.0)*x2831*x2834))+((r12*x2829)));
evalcond[5]=(((r10*x2837))+(((-1.0)*x2830))+(((-1.0)*r12*x2834))+(((-1.0)*x2831*x2836)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2838=((1.0)*sj5);
CheckValue<IkReal> x2839=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x2838)))),-1);
if(!x2839.valid){
continue;
}
CheckValue<IkReal> x2840 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x2838)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2840.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2839.value)))+(x2840.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2841=IKcos(j4);
IkReal x2842=IKsin(j4);
IkReal x2843=((1.0)*cj0);
IkReal x2844=(r11*sj5);
IkReal x2845=(r21*sj5);
IkReal x2846=(r01*sj5);
IkReal x2847=((1.0)*x2841);
IkReal x2848=(cj5*x2841);
IkReal x2849=((1.0)*x2842);
IkReal x2850=(cj5*x2842);
evalcond[0]=(((r20*x2848))+(((-1.0)*x2845*x2847))+((r22*x2842)));
evalcond[1]=(((r20*x2850))+(((-1.0)*x2845*x2849))+(((-1.0)*r22*x2847)));
evalcond[2]=((((-1.0)*x2846*x2849))+sj0+(((-1.0)*r02*x2847))+((r00*x2850)));
evalcond[3]=((((-1.0)*x2846*x2847))+((r00*x2848))+((r02*x2842))+(((-1.0)*x2843)));
evalcond[4]=((((-1.0)*sj0))+((r12*x2842))+(((-1.0)*x2844*x2847))+((r10*x2848)));
evalcond[5]=((((-1.0)*r12*x2847))+(((-1.0)*x2844*x2849))+((r10*x2850))+(((-1.0)*x2843)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2851 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x2851.valid){
continue;
}
CheckValue<IkReal> x2852=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2852.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2851.value)+(((1.5707963267949)*(x2852.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2853=IKcos(j4);
IkReal x2854=IKsin(j4);
IkReal x2855=((1.0)*cj0);
IkReal x2856=(r11*sj5);
IkReal x2857=(r21*sj5);
IkReal x2858=(r01*sj5);
IkReal x2859=((1.0)*x2853);
IkReal x2860=(cj5*x2853);
IkReal x2861=((1.0)*x2854);
IkReal x2862=(cj5*x2854);
evalcond[0]=(((r22*x2854))+(((-1.0)*x2857*x2859))+((r20*x2860)));
evalcond[1]=((((-1.0)*x2857*x2861))+(((-1.0)*r22*x2859))+((r20*x2862)));
evalcond[2]=(((r00*x2862))+sj0+(((-1.0)*x2858*x2861))+(((-1.0)*r02*x2859)));
evalcond[3]=(((r00*x2860))+((r02*x2854))+(((-1.0)*x2855))+(((-1.0)*x2858*x2859)));
evalcond[4]=((((-1.0)*sj0))+((r10*x2860))+((r12*x2854))+(((-1.0)*x2856*x2859)));
evalcond[5]=((((-1.0)*r12*x2859))+((r10*x2862))+(((-1.0)*x2856*x2861))+(((-1.0)*x2855)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.53393665158371)*py))+(((-0.904977375565611)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.904977375565611)*py))+(((-2.53393665158371)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.53393665158371)*py))+(((-0.904977375565611)*px))))+IKsqr(((((0.904977375565611)*py))+(((-2.53393665158371)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.53393665158371)*py))+(((-0.904977375565611)*px))), ((((0.904977375565611)*py))+(((-2.53393665158371)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x2863=IKcos(j0);
IkReal x2864=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.35)*x2863))+(((-0.125)*x2864)));
evalcond[1]=((((-1.0)*py))+(((-0.35)*x2864))+(((0.125)*x2863)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x2865=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2865;
j4eval[1]=IKsign(x2865);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x2866=((1.0)*sj5);
IkReal x2867=((((-1.0)*cj5*r11))+(((-1.0)*r10*x2866)));
j4eval[0]=x2867;
j4eval[1]=IKsign(x2867);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x2866))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x2868=((1.0)*sj5);
IkReal x2869=((((-1.0)*cj5*r11))+(((-1.0)*r10*x2868)));
j4eval[0]=x2869;
j4eval[1]=IKsign(x2869);
j4eval[2]=((IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x2868)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2870=((1.0)*sj5);
CheckValue<IkReal> x2871 = IKatan2WithCheck(IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x2870)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2871.valid){
continue;
}
CheckValue<IkReal> x2872=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x2870)))),-1);
if(!x2872.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2871.value)+(((1.5707963267949)*(x2872.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2873=IKcos(j4);
IkReal x2874=IKsin(j4);
IkReal x2875=((1.0)*cj0);
IkReal x2876=(r11*sj5);
IkReal x2877=(r21*sj5);
IkReal x2878=(r01*sj5);
IkReal x2879=((1.0)*x2873);
IkReal x2880=(cj5*x2873);
IkReal x2881=((1.0)*x2874);
IkReal x2882=(cj5*x2874);
evalcond[0]=(((r20*x2880))+((r22*x2874))+(((-1.0)*x2877*x2879)));
evalcond[1]=(((r20*x2882))+(((-1.0)*r22*x2879))+(((-1.0)*x2877*x2881)));
evalcond[2]=(sj0+(((-1.0)*r02*x2879))+((r00*x2882))+(((-1.0)*x2878*x2881)));
evalcond[3]=((((-1.0)*x2875))+((r00*x2880))+(((-1.0)*x2878*x2879))+((r02*x2874)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x2876*x2879))+((r10*x2880))+((r12*x2874)));
evalcond[5]=((((-1.0)*x2875))+(((-1.0)*x2876*x2881))+((r10*x2882))+(((-1.0)*r12*x2879)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2883=((1.0)*sj5);
CheckValue<IkReal> x2884=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x2883)))),-1);
if(!x2884.valid){
continue;
}
CheckValue<IkReal> x2885 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x2883)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2885.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2884.value)))+(x2885.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2886=IKcos(j4);
IkReal x2887=IKsin(j4);
IkReal x2888=((1.0)*cj0);
IkReal x2889=(r11*sj5);
IkReal x2890=(r21*sj5);
IkReal x2891=(r01*sj5);
IkReal x2892=((1.0)*x2886);
IkReal x2893=(cj5*x2886);
IkReal x2894=((1.0)*x2887);
IkReal x2895=(cj5*x2887);
evalcond[0]=((((-1.0)*x2890*x2892))+((r22*x2887))+((r20*x2893)));
evalcond[1]=((((-1.0)*r22*x2892))+(((-1.0)*x2890*x2894))+((r20*x2895)));
evalcond[2]=((((-1.0)*x2891*x2894))+sj0+(((-1.0)*r02*x2892))+((r00*x2895)));
evalcond[3]=((((-1.0)*x2891*x2892))+((r00*x2893))+(((-1.0)*x2888))+((r02*x2887)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x2889*x2892))+((r12*x2887))+((r10*x2893)));
evalcond[5]=((((-1.0)*x2889*x2894))+((r10*x2895))+(((-1.0)*x2888))+(((-1.0)*r12*x2892)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2896 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x2896.valid){
continue;
}
CheckValue<IkReal> x2897=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2897.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2896.value)+(((1.5707963267949)*(x2897.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2898=IKcos(j4);
IkReal x2899=IKsin(j4);
IkReal x2900=((1.0)*cj0);
IkReal x2901=(r11*sj5);
IkReal x2902=(r21*sj5);
IkReal x2903=(r01*sj5);
IkReal x2904=((1.0)*x2898);
IkReal x2905=(cj5*x2898);
IkReal x2906=((1.0)*x2899);
IkReal x2907=(cj5*x2899);
evalcond[0]=((((-1.0)*x2902*x2904))+((r22*x2899))+((r20*x2905)));
evalcond[1]=((((-1.0)*x2902*x2906))+((r20*x2907))+(((-1.0)*r22*x2904)));
evalcond[2]=((((-1.0)*r02*x2904))+sj0+((r00*x2907))+(((-1.0)*x2903*x2906)));
evalcond[3]=(((r00*x2905))+(((-1.0)*x2900))+(((-1.0)*x2903*x2904))+((r02*x2899)));
evalcond[4]=(((r10*x2905))+(((-1.0)*sj0))+(((-1.0)*x2901*x2904))+((r12*x2899)));
evalcond[5]=(((r10*x2907))+(((-1.0)*x2901*x2906))+(((-1.0)*x2900))+(((-1.0)*r12*x2904)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.53393665158371)*py))+(((-0.904977375565611)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.904977375565611)*py))+(((-2.53393665158371)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.53393665158371)*py))+(((-0.904977375565611)*px))))+IKsqr(((((0.904977375565611)*py))+(((-2.53393665158371)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.53393665158371)*py))+(((-0.904977375565611)*px))), ((((0.904977375565611)*py))+(((-2.53393665158371)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x2908=IKcos(j0);
IkReal x2909=IKsin(j0);
evalcond[0]=((((-0.125)*x2909))+(((-1.0)*px))+(((-0.35)*x2908)));
evalcond[1]=((((0.125)*x2908))+(((-1.0)*py))+(((-0.35)*x2909)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x2910=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2910;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
j4eval[2]=IKsign(x2910);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x2911=((1.0)*sj5);
IkReal x2912=((((-1.0)*cj5*r01))+(((-1.0)*r00*x2911)));
j4eval[0]=x2912;
j4eval[1]=IKsign(x2912);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x2911))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x2913=cj5*cj5;
IkReal x2914=((1.0)*r21);
IkReal x2915=(cj5*r20);
IkReal x2916=((((-1.0)*r02*r22))+(((-1.0)*r00*r20*x2913))+((r01*r21*x2913))+((cj5*r00*r21*sj5))+(((-1.0)*r01*x2914))+((r01*sj5*x2915)));
j4eval[0]=x2916;
j4eval[1]=IKsign(x2916);
j4eval[2]=((IKabs((((cj0*x2915))+(((-1.0)*cj0*sj5*x2914)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2917=cj5*cj5;
IkReal x2918=((1.0)*r21);
IkReal x2919=(cj5*r20);
CheckValue<IkReal> x2920 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x2919))+(((-1.0)*cj0*sj5*x2918)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2920.valid){
continue;
}
CheckValue<IkReal> x2921=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+(((-1.0)*r00*r20*x2917))+((r01*r21*x2917))+((cj5*r00*r21*sj5))+(((-1.0)*r01*x2918))+((r01*sj5*x2919)))),-1);
if(!x2921.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2920.value)+(((1.5707963267949)*(x2921.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2922=IKcos(j4);
IkReal x2923=IKsin(j4);
IkReal x2924=(r11*sj5);
IkReal x2925=(r21*sj5);
IkReal x2926=(r01*sj5);
IkReal x2927=((1.0)*x2922);
IkReal x2928=((1.0)*x2923);
IkReal x2929=(cj5*x2922);
IkReal x2930=(cj5*x2923);
evalcond[0]=(((r22*x2923))+(((-1.0)*x2925*x2927))+((r20*x2929)));
evalcond[1]=((((-1.0)*x2925*x2928))+((r20*x2930))+(((-1.0)*r22*x2927)));
evalcond[2]=(cj0+((r00*x2929))+(((-1.0)*x2926*x2927))+((r02*x2923)));
evalcond[3]=(sj0+((r10*x2929))+(((-1.0)*x2924*x2927))+((r12*x2923)));
evalcond[4]=(sj0+(((-1.0)*r02*x2927))+((r00*x2930))+(((-1.0)*x2926*x2928)));
evalcond[5]=(((r10*x2930))+(((-1.0)*x2924*x2928))+(((-1.0)*r12*x2927))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2931=((1.0)*sj5);
CheckValue<IkReal> x2932=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x2931))+(((-1.0)*cj5*r01)))),-1);
if(!x2932.valid){
continue;
}
CheckValue<IkReal> x2933 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x2931)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x2933.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2932.value)))+(x2933.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2934=IKcos(j4);
IkReal x2935=IKsin(j4);
IkReal x2936=(r11*sj5);
IkReal x2937=(r21*sj5);
IkReal x2938=(r01*sj5);
IkReal x2939=((1.0)*x2934);
IkReal x2940=((1.0)*x2935);
IkReal x2941=(cj5*x2934);
IkReal x2942=(cj5*x2935);
evalcond[0]=(((r22*x2935))+((r20*x2941))+(((-1.0)*x2937*x2939)));
evalcond[1]=((((-1.0)*r22*x2939))+((r20*x2942))+(((-1.0)*x2937*x2940)));
evalcond[2]=(((r02*x2935))+cj0+(((-1.0)*x2938*x2939))+((r00*x2941)));
evalcond[3]=(sj0+((r10*x2941))+(((-1.0)*x2936*x2939))+((r12*x2935)));
evalcond[4]=(sj0+((r00*x2942))+(((-1.0)*r02*x2939))+(((-1.0)*x2938*x2940)));
evalcond[5]=((((-1.0)*x2936*x2940))+((r10*x2942))+(((-1.0)*r12*x2939))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2943 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2943.valid){
continue;
}
CheckValue<IkReal> x2944=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2944.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2943.value)+(((1.5707963267949)*(x2944.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2945=IKcos(j4);
IkReal x2946=IKsin(j4);
IkReal x2947=(r11*sj5);
IkReal x2948=(r21*sj5);
IkReal x2949=(r01*sj5);
IkReal x2950=((1.0)*x2945);
IkReal x2951=((1.0)*x2946);
IkReal x2952=(cj5*x2945);
IkReal x2953=(cj5*x2946);
evalcond[0]=((((-1.0)*x2948*x2950))+((r22*x2946))+((r20*x2952)));
evalcond[1]=((((-1.0)*x2948*x2951))+((r20*x2953))+(((-1.0)*r22*x2950)));
evalcond[2]=(cj0+((r02*x2946))+((r00*x2952))+(((-1.0)*x2949*x2950)));
evalcond[3]=((((-1.0)*x2947*x2950))+sj0+((r10*x2952))+((r12*x2946)));
evalcond[4]=((((-1.0)*r02*x2950))+sj0+((r00*x2953))+(((-1.0)*x2949*x2951)));
evalcond[5]=((((-1.0)*x2947*x2951))+((r10*x2953))+(((-1.0)*r12*x2950))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-8.0)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.0)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-8.0)*px))+IKsqr(((8.0)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-8.0)*px), ((8.0)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.125)*(IKsin(j0)))));
evalcond[1]=((((0.125)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x2954=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2954;
j4eval[1]=IKsign(x2954);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x2955=((1.0)*sj5);
IkReal x2956=((((-1.0)*cj5*r11))+(((-1.0)*r10*x2955)));
j4eval[0]=x2956;
j4eval[1]=IKsign(x2956);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x2955))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x2957=((1.0)*sj5);
IkReal x2958=((((-1.0)*cj5*r11))+(((-1.0)*r10*x2957)));
j4eval[0]=x2958;
j4eval[1]=IKsign(x2958);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x2957))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2959=((1.0)*sj5);
CheckValue<IkReal> x2960=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x2959)))),-1);
if(!x2960.valid){
continue;
}
CheckValue<IkReal> x2961 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x2959))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2961.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2960.value)))+(x2961.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2962=IKcos(j4);
IkReal x2963=IKsin(j4);
IkReal x2964=((1.0)*cj0);
IkReal x2965=(r11*sj5);
IkReal x2966=(r21*sj5);
IkReal x2967=(r01*sj5);
IkReal x2968=((1.0)*x2962);
IkReal x2969=(cj5*x2962);
IkReal x2970=((1.0)*x2963);
IkReal x2971=(cj5*x2963);
evalcond[0]=(((r22*x2963))+(((-1.0)*x2966*x2968))+((r20*x2969)));
evalcond[1]=((((-1.0)*r22*x2968))+((r20*x2971))+(((-1.0)*x2966*x2970)));
evalcond[2]=(sj0+(((-1.0)*r02*x2968))+((r00*x2971))+(((-1.0)*x2967*x2970)));
evalcond[3]=(((r02*x2963))+(((-1.0)*x2967*x2968))+(((-1.0)*x2964))+((r00*x2969)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x2965*x2968))+((r10*x2969))+((r12*x2963)));
evalcond[5]=((((-1.0)*x2965*x2970))+((r10*x2971))+(((-1.0)*x2964))+(((-1.0)*r12*x2968)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2972=((1.0)*sj5);
CheckValue<IkReal> x2973 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x2972)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2973.valid){
continue;
}
CheckValue<IkReal> x2974=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x2972)))),-1);
if(!x2974.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2973.value)+(((1.5707963267949)*(x2974.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2975=IKcos(j4);
IkReal x2976=IKsin(j4);
IkReal x2977=((1.0)*cj0);
IkReal x2978=(r11*sj5);
IkReal x2979=(r21*sj5);
IkReal x2980=(r01*sj5);
IkReal x2981=((1.0)*x2975);
IkReal x2982=(cj5*x2975);
IkReal x2983=((1.0)*x2976);
IkReal x2984=(cj5*x2976);
evalcond[0]=((((-1.0)*x2979*x2981))+((r20*x2982))+((r22*x2976)));
evalcond[1]=((((-1.0)*x2979*x2983))+((r20*x2984))+(((-1.0)*r22*x2981)));
evalcond[2]=(sj0+((r00*x2984))+(((-1.0)*x2980*x2983))+(((-1.0)*r02*x2981)));
evalcond[3]=(((r02*x2976))+((r00*x2982))+(((-1.0)*x2977))+(((-1.0)*x2980*x2981)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x2978*x2981))+((r12*x2976))+((r10*x2982)));
evalcond[5]=((((-1.0)*x2978*x2983))+(((-1.0)*r12*x2981))+(((-1.0)*x2977))+((r10*x2984)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2985 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x2985.valid){
continue;
}
CheckValue<IkReal> x2986=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2986.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2985.value)+(((1.5707963267949)*(x2986.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2987=IKcos(j4);
IkReal x2988=IKsin(j4);
IkReal x2989=((1.0)*cj0);
IkReal x2990=(r11*sj5);
IkReal x2991=(r21*sj5);
IkReal x2992=(r01*sj5);
IkReal x2993=((1.0)*x2987);
IkReal x2994=(cj5*x2987);
IkReal x2995=((1.0)*x2988);
IkReal x2996=(cj5*x2988);
evalcond[0]=(((r20*x2994))+(((-1.0)*x2991*x2993))+((r22*x2988)));
evalcond[1]=((((-1.0)*r22*x2993))+((r20*x2996))+(((-1.0)*x2991*x2995)));
evalcond[2]=(sj0+(((-1.0)*x2992*x2995))+((r00*x2996))+(((-1.0)*r02*x2993)));
evalcond[3]=((((-1.0)*x2992*x2993))+((r00*x2994))+(((-1.0)*x2989))+((r02*x2988)));
evalcond[4]=((((-1.0)*sj0))+((r12*x2988))+(((-1.0)*x2990*x2993))+((r10*x2994)));
evalcond[5]=((((-1.0)*x2989))+(((-1.0)*r12*x2993))+(((-1.0)*x2990*x2995))+((r10*x2996)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-8.0)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.0)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-8.0)*px))+IKsqr(((8.0)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-8.0)*px), ((8.0)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.125)*(IKsin(j0)))));
evalcond[1]=((((0.125)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x2997=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2997;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
j4eval[2]=IKsign(x2997);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x2998=((1.0)*sj5);
IkReal x2999=((((-1.0)*r00*x2998))+(((-1.0)*cj5*r01)));
j4eval[0]=x2999;
j4eval[1]=IKsign(x2999);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x2998))+((cj5*r20*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3000=cj5*cj5;
IkReal x3001=((1.0)*r21);
IkReal x3002=(cj5*r20);
IkReal x3003=((((-1.0)*r02*r22))+(((-1.0)*r01*x3001))+(((-1.0)*r00*r20*x3000))+((cj5*r00*r21*sj5))+((r01*r21*x3000))+((r01*sj5*x3002)));
j4eval[0]=x3003;
j4eval[1]=IKsign(x3003);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*sj5*x3001))+((cj0*x3002))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3004=cj5*cj5;
IkReal x3005=((1.0)*r21);
IkReal x3006=(cj5*r20);
CheckValue<IkReal> x3007=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+(((-1.0)*r01*x3005))+(((-1.0)*r00*r20*x3004))+((cj5*r00*r21*sj5))+((r01*r21*x3004))+((r01*sj5*x3006)))),-1);
if(!x3007.valid){
continue;
}
CheckValue<IkReal> x3008 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x3005))+((cj0*x3006)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3008.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3007.value)))+(x3008.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3009=IKcos(j4);
IkReal x3010=IKsin(j4);
IkReal x3011=(r11*sj5);
IkReal x3012=(r21*sj5);
IkReal x3013=(r01*sj5);
IkReal x3014=((1.0)*x3009);
IkReal x3015=((1.0)*x3010);
IkReal x3016=(cj5*x3009);
IkReal x3017=(cj5*x3010);
evalcond[0]=(((r22*x3010))+((r20*x3016))+(((-1.0)*x3012*x3014)));
evalcond[1]=((((-1.0)*r22*x3014))+((r20*x3017))+(((-1.0)*x3012*x3015)));
evalcond[2]=(((r00*x3016))+cj0+((r02*x3010))+(((-1.0)*x3013*x3014)));
evalcond[3]=(sj0+((r10*x3016))+((r12*x3010))+(((-1.0)*x3011*x3014)));
evalcond[4]=(((r00*x3017))+sj0+(((-1.0)*r02*x3014))+(((-1.0)*x3013*x3015)));
evalcond[5]=(((r10*x3017))+(((-1.0)*r12*x3014))+(((-1.0)*x3011*x3015))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3018=((1.0)*sj5);
CheckValue<IkReal> x3019=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3018))+(((-1.0)*cj5*r01)))),-1);
if(!x3019.valid){
continue;
}
CheckValue<IkReal> x3020 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3018)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3020.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3019.value)))+(x3020.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3021=IKcos(j4);
IkReal x3022=IKsin(j4);
IkReal x3023=(r11*sj5);
IkReal x3024=(r21*sj5);
IkReal x3025=(r01*sj5);
IkReal x3026=((1.0)*x3021);
IkReal x3027=((1.0)*x3022);
IkReal x3028=(cj5*x3021);
IkReal x3029=(cj5*x3022);
evalcond[0]=(((r20*x3028))+((r22*x3022))+(((-1.0)*x3024*x3026)));
evalcond[1]=(((r20*x3029))+(((-1.0)*x3024*x3027))+(((-1.0)*r22*x3026)));
evalcond[2]=(cj0+((r02*x3022))+(((-1.0)*x3025*x3026))+((r00*x3028)));
evalcond[3]=(((r10*x3028))+((r12*x3022))+sj0+(((-1.0)*x3023*x3026)));
evalcond[4]=(sj0+(((-1.0)*x3025*x3027))+((r00*x3029))+(((-1.0)*r02*x3026)));
evalcond[5]=(((r10*x3029))+(((-1.0)*r12*x3026))+(((-1.0)*x3023*x3027))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3030 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3030.valid){
continue;
}
CheckValue<IkReal> x3031=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3031.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3030.value)+(((1.5707963267949)*(x3031.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3032=IKcos(j4);
IkReal x3033=IKsin(j4);
IkReal x3034=(r11*sj5);
IkReal x3035=(r21*sj5);
IkReal x3036=(r01*sj5);
IkReal x3037=((1.0)*x3032);
IkReal x3038=((1.0)*x3033);
IkReal x3039=(cj5*x3032);
IkReal x3040=(cj5*x3033);
evalcond[0]=((((-1.0)*x3035*x3037))+((r22*x3033))+((r20*x3039)));
evalcond[1]=((((-1.0)*x3035*x3038))+((r20*x3040))+(((-1.0)*r22*x3037)));
evalcond[2]=(((r02*x3033))+cj0+(((-1.0)*x3036*x3037))+((r00*x3039)));
evalcond[3]=(sj0+((r12*x3033))+(((-1.0)*x3034*x3037))+((r10*x3039)));
evalcond[4]=(sj0+(((-1.0)*x3036*x3038))+(((-1.0)*r02*x3037))+((r00*x3040)));
evalcond[5]=(((r10*x3040))+(((-1.0)*r12*x3037))+(((-1.0)*x3034*x3038))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.53393665158371)*py))+(((-0.904977375565611)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.904977375565611)*py))+(((2.53393665158371)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.53393665158371)*py))+(((-0.904977375565611)*px))))+IKsqr(((((0.904977375565611)*py))+(((2.53393665158371)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.53393665158371)*py))+(((-0.904977375565611)*px))), ((((0.904977375565611)*py))+(((2.53393665158371)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3041=IKcos(j0);
IkReal x3042=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.125)*x3042))+(((0.35)*x3041)));
evalcond[1]=((((-1.0)*py))+(((0.125)*x3041))+(((0.35)*x3042)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3043=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3043;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
j4eval[2]=IKsign(x3043);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3044=((1.0)*sj5);
IkReal x3045=((((-1.0)*r00*x3044))+(((-1.0)*cj5*r01)));
j4eval[0]=x3045;
j4eval[1]=IKsign(x3045);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3044))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3046=cj5*cj5;
IkReal x3047=((1.0)*r21);
IkReal x3048=(cj5*r20);
IkReal x3049=((((-1.0)*r02*r22))+((r01*r21*x3046))+(((-1.0)*r00*r20*x3046))+(((-1.0)*r01*x3047))+((cj5*r00*r21*sj5))+((r01*sj5*x3048)));
j4eval[0]=x3049;
j4eval[1]=IKsign(x3049);
j4eval[2]=((IKabs(((((-1.0)*cj0*sj5*x3047))+((cj0*x3048)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3050=cj5*cj5;
IkReal x3051=((1.0)*r21);
IkReal x3052=(cj5*r20);
CheckValue<IkReal> x3053=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3051))+(((-1.0)*r02*r22))+((r01*sj5*x3052))+(((-1.0)*r00*r20*x3050))+((r01*r21*x3050))+((cj5*r00*r21*sj5)))),-1);
if(!x3053.valid){
continue;
}
CheckValue<IkReal> x3054 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x3051))+((cj0*x3052)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3054.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3053.value)))+(x3054.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3055=IKcos(j4);
IkReal x3056=IKsin(j4);
IkReal x3057=(r11*sj5);
IkReal x3058=(r21*sj5);
IkReal x3059=(r01*sj5);
IkReal x3060=((1.0)*x3055);
IkReal x3061=((1.0)*x3056);
IkReal x3062=(cj5*x3055);
IkReal x3063=(cj5*x3056);
evalcond[0]=((((-1.0)*x3058*x3060))+((r20*x3062))+((r22*x3056)));
evalcond[1]=((((-1.0)*r22*x3060))+(((-1.0)*x3058*x3061))+((r20*x3063)));
evalcond[2]=(cj0+((r00*x3062))+((r02*x3056))+(((-1.0)*x3059*x3060)));
evalcond[3]=(sj0+((r12*x3056))+((r10*x3062))+(((-1.0)*x3057*x3060)));
evalcond[4]=(sj0+((r00*x3063))+(((-1.0)*r02*x3060))+(((-1.0)*x3059*x3061)));
evalcond[5]=((((-1.0)*r12*x3060))+((r10*x3063))+(((-1.0)*x3057*x3061))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3064=((1.0)*sj5);
CheckValue<IkReal> x3065=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3064))+(((-1.0)*cj5*r01)))),-1);
if(!x3065.valid){
continue;
}
CheckValue<IkReal> x3066 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3064)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3066.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3065.value)))+(x3066.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3067=IKcos(j4);
IkReal x3068=IKsin(j4);
IkReal x3069=(r11*sj5);
IkReal x3070=(r21*sj5);
IkReal x3071=(r01*sj5);
IkReal x3072=((1.0)*x3067);
IkReal x3073=((1.0)*x3068);
IkReal x3074=(cj5*x3067);
IkReal x3075=(cj5*x3068);
evalcond[0]=(((r22*x3068))+((r20*x3074))+(((-1.0)*x3070*x3072)));
evalcond[1]=((((-1.0)*r22*x3072))+((r20*x3075))+(((-1.0)*x3070*x3073)));
evalcond[2]=(((r00*x3074))+cj0+(((-1.0)*x3071*x3072))+((r02*x3068)));
evalcond[3]=(sj0+((r10*x3074))+(((-1.0)*x3069*x3072))+((r12*x3068)));
evalcond[4]=(sj0+((r00*x3075))+(((-1.0)*r02*x3072))+(((-1.0)*x3071*x3073)));
evalcond[5]=(((r10*x3075))+(((-1.0)*r12*x3072))+(((-1.0)*x3069*x3073))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3076 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3076.valid){
continue;
}
CheckValue<IkReal> x3077=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3077.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3076.value)+(((1.5707963267949)*(x3077.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3078=IKcos(j4);
IkReal x3079=IKsin(j4);
IkReal x3080=(r11*sj5);
IkReal x3081=(r21*sj5);
IkReal x3082=(r01*sj5);
IkReal x3083=((1.0)*x3078);
IkReal x3084=((1.0)*x3079);
IkReal x3085=(cj5*x3078);
IkReal x3086=(cj5*x3079);
evalcond[0]=(((r20*x3085))+((r22*x3079))+(((-1.0)*x3081*x3083)));
evalcond[1]=(((r20*x3086))+(((-1.0)*r22*x3083))+(((-1.0)*x3081*x3084)));
evalcond[2]=(cj0+(((-1.0)*x3082*x3083))+((r00*x3085))+((r02*x3079)));
evalcond[3]=((((-1.0)*x3080*x3083))+sj0+((r12*x3079))+((r10*x3085)));
evalcond[4]=(sj0+(((-1.0)*x3082*x3084))+((r00*x3086))+(((-1.0)*r02*x3083)));
evalcond[5]=((((-1.0)*x3080*x3084))+(((-1.0)*r12*x3083))+((r10*x3086))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.53393665158371)*py))+(((-0.904977375565611)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.904977375565611)*py))+(((2.53393665158371)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.53393665158371)*py))+(((-0.904977375565611)*px))))+IKsqr(((((0.904977375565611)*py))+(((2.53393665158371)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.53393665158371)*py))+(((-0.904977375565611)*px))), ((((0.904977375565611)*py))+(((2.53393665158371)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3087=IKcos(j0);
IkReal x3088=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((0.35)*x3087))+(((-0.125)*x3088)));
evalcond[1]=((((0.125)*x3087))+(((-1.0)*py))+(((0.35)*x3088)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3089=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3089;
j4eval[1]=IKsign(x3089);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3090=((1.0)*sj5);
IkReal x3091=((((-1.0)*cj5*r11))+(((-1.0)*r10*x3090)));
j4eval[0]=x3091;
j4eval[1]=IKsign(x3091);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3090))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3092=((1.0)*sj5);
IkReal x3093=((((-1.0)*cj5*r11))+(((-1.0)*r10*x3092)));
j4eval[0]=x3093;
j4eval[1]=IKsign(x3093);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x3092))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3094=((1.0)*sj5);
CheckValue<IkReal> x3095 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x3094))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3095.valid){
continue;
}
CheckValue<IkReal> x3096=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x3094)))),-1);
if(!x3096.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3095.value)+(((1.5707963267949)*(x3096.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3097=IKcos(j4);
IkReal x3098=IKsin(j4);
IkReal x3099=((1.0)*cj0);
IkReal x3100=(r11*sj5);
IkReal x3101=(r21*sj5);
IkReal x3102=(r01*sj5);
IkReal x3103=((1.0)*x3097);
IkReal x3104=(cj5*x3097);
IkReal x3105=((1.0)*x3098);
IkReal x3106=(cj5*x3098);
evalcond[0]=(((r20*x3104))+(((-1.0)*x3101*x3103))+((r22*x3098)));
evalcond[1]=((((-1.0)*r22*x3103))+((r20*x3106))+(((-1.0)*x3101*x3105)));
evalcond[2]=(sj0+(((-1.0)*x3102*x3105))+((r00*x3106))+(((-1.0)*r02*x3103)));
evalcond[3]=((((-1.0)*x3099))+((r02*x3098))+(((-1.0)*x3102*x3103))+((r00*x3104)));
evalcond[4]=((((-1.0)*sj0))+((r10*x3104))+(((-1.0)*x3100*x3103))+((r12*x3098)));
evalcond[5]=((((-1.0)*x3099))+((r10*x3106))+(((-1.0)*r12*x3103))+(((-1.0)*x3100*x3105)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3107=((1.0)*sj5);
CheckValue<IkReal> x3108=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x3107)))),-1);
if(!x3108.valid){
continue;
}
CheckValue<IkReal> x3109 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3107)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3109.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3108.value)))+(x3109.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3110=IKcos(j4);
IkReal x3111=IKsin(j4);
IkReal x3112=((1.0)*cj0);
IkReal x3113=(r11*sj5);
IkReal x3114=(r21*sj5);
IkReal x3115=(r01*sj5);
IkReal x3116=((1.0)*x3110);
IkReal x3117=(cj5*x3110);
IkReal x3118=((1.0)*x3111);
IkReal x3119=(cj5*x3111);
evalcond[0]=((((-1.0)*x3114*x3116))+((r22*x3111))+((r20*x3117)));
evalcond[1]=((((-1.0)*x3114*x3118))+(((-1.0)*r22*x3116))+((r20*x3119)));
evalcond[2]=((((-1.0)*x3115*x3118))+(((-1.0)*r02*x3116))+sj0+((r00*x3119)));
evalcond[3]=((((-1.0)*x3115*x3116))+(((-1.0)*x3112))+((r02*x3111))+((r00*x3117)));
evalcond[4]=((((-1.0)*x3113*x3116))+((r12*x3111))+(((-1.0)*sj0))+((r10*x3117)));
evalcond[5]=((((-1.0)*x3113*x3118))+(((-1.0)*r12*x3116))+(((-1.0)*x3112))+((r10*x3119)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3120 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3120.valid){
continue;
}
CheckValue<IkReal> x3121=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3121.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3120.value)+(((1.5707963267949)*(x3121.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3122=IKcos(j4);
IkReal x3123=IKsin(j4);
IkReal x3124=((1.0)*cj0);
IkReal x3125=(r11*sj5);
IkReal x3126=(r21*sj5);
IkReal x3127=(r01*sj5);
IkReal x3128=((1.0)*x3122);
IkReal x3129=(cj5*x3122);
IkReal x3130=((1.0)*x3123);
IkReal x3131=(cj5*x3123);
evalcond[0]=(((r20*x3129))+((r22*x3123))+(((-1.0)*x3126*x3128)));
evalcond[1]=(((r20*x3131))+(((-1.0)*r22*x3128))+(((-1.0)*x3126*x3130)));
evalcond[2]=(((r00*x3131))+sj0+(((-1.0)*r02*x3128))+(((-1.0)*x3127*x3130)));
evalcond[3]=(((r00*x3129))+((r02*x3123))+(((-1.0)*x3124))+(((-1.0)*x3127*x3128)));
evalcond[4]=((((-1.0)*x3125*x3128))+(((-1.0)*sj0))+((r10*x3129))+((r12*x3123)));
evalcond[5]=((((-1.0)*x3125*x3130))+(((-1.0)*r12*x3128))+((r10*x3131))+(((-1.0)*x3124)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3132=r21*r21;
IkReal x3133=cj5*cj5;
IkReal x3134=(cj1*sj2);
IkReal x3135=(cj5*r20);
IkReal x3136=(r21*sj5);
IkReal x3137=(cj2*sj1);
CheckValue<IkReal> x3138=IKPowWithIntegerCheck(IKsign((((x3132*x3133))+(((-1.0)*x3132))+(((-1.0)*(r22*r22)))+(((2.0)*x3135*x3136))+(((-1.0)*x3133*(r20*r20))))),-1);
if(!x3138.valid){
continue;
}
CheckValue<IkReal> x3139 = IKatan2WithCheck(IkReal((((r22*x3134))+((r22*x3137)))),IkReal(((((-1.0)*x3134*x3136))+(((-1.0)*x3136*x3137))+((x3134*x3135))+((x3135*x3137)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3139.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3138.value)))+(x3139.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x3140=IKsin(j4);
IkReal x3141=IKcos(j4);
IkReal x3142=(r21*sj5);
IkReal x3143=(cj5*r20);
IkReal x3144=((1.0)*x3141);
evalcond[0]=((((-1.0)*r22*x3144))+(((-1.0)*x3140*x3142))+((x3140*x3143)));
evalcond[1]=(((cj2*sj1))+(((-1.0)*x3142*x3144))+((cj1*sj2))+((r22*x3140))+((x3141*x3143)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3145=(cj5*sj4);
IkReal x3146=(sj4*sj5);
if( IKabs((((r01*x3146))+(((-1.0)*r00*x3145))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x3145))+(((-1.0)*r11*x3146))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x3146))+(((-1.0)*r00*x3145))+((cj4*r02))))+IKsqr((((r10*x3145))+(((-1.0)*r11*x3146))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x3146))+(((-1.0)*r00*x3145))+((cj4*r02))), (((r10*x3145))+(((-1.0)*r11*x3146))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x3147=IKcos(j0);
IkReal x3148=IKsin(j0);
IkReal x3149=(cj5*r10);
IkReal x3150=((0.125)*sj5);
IkReal x3151=(cj5*r00);
IkReal x3152=(cj5*r01);
IkReal x3153=((1.0)*sj2);
IkReal x3154=((0.3)*sj2);
IkReal x3155=(cj5*r11);
IkReal x3156=(cj2*sj1);
IkReal x3157=((1.0)*cj4);
IkReal x3158=(sj1*x3148);
IkReal x3159=(cj1*x3147);
IkReal x3160=((1.0)*sj4*sj5);
IkReal x3161=(cj1*x3148);
IkReal x3162=((1.0)*x3147);
IkReal x3163=(sj1*x3147);
evalcond[0]=(x3148+((sj4*x3151))+(((-1.0)*r02*x3157))+(((-1.0)*r01*x3160)));
evalcond[1]=(((sj4*x3149))+(((-1.0)*r12*x3157))+(((-1.0)*r11*x3160))+(((-1.0)*x3162)));
evalcond[2]=(((r00*sj5))+x3152+(((-1.0)*x3153*x3159))+(((-1.0)*x3156*x3162)));
evalcond[3]=(x3155+(((-1.0)*x3153*x3161))+((r10*sj5))+(((-1.0)*x3148*x3156)));
evalcond[4]=((((-1.0)*x3153*x3163))+(((-1.0)*r01*sj5*x3157))+((cj4*x3151))+((r02*sj4))+((cj2*x3159)));
evalcond[5]=((((-1.0)*x3153*x3158))+((cj4*x3149))+((cj2*x3161))+((r12*sj4))+(((-1.0)*r11*sj5*x3157)));
evalcond[6]=((((-0.35)*x3163))+(((-0.125)*x3148))+(((0.125)*x3152))+((r00*x3150))+(((-1.0)*px))+(((-0.3)*x3147*x3156))+(((-1.0)*x3154*x3159)));
evalcond[7]=((((-0.3)*x3148*x3156))+((r10*x3150))+(((-0.35)*x3158))+(((0.125)*x3155))+(((-1.0)*py))+(((0.125)*x3147))+(((-1.0)*x3154*x3161)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3164=((1.4)*cj2);
IkReal x3165=(cj2*sj1);
IkReal x3166=(cj1*sj2);
IkReal x3167=((8.0)*px);
IkReal x3168=(cj5*r01);
IkReal x3169=(r00*sj5);
IkReal x3170=(sj1*x3168);
CheckValue<IkReal> x3171=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3165))+(((-1.0)*x3166)))),-1);
if(!x3171.valid){
continue;
}
CheckValue<IkReal> x3172 = IKatan2WithCheck(IkReal((((x3166*x3167))+(((2.8)*sj1*x3169))+((x3164*x3170))+(((1.4)*x3166*x3168))+(((1.4)*x3166*x3169))+(((2.8)*x3170))+((sj1*x3164*x3169))+((x3165*x3167)))),IkReal(((((-1.0)*x3169))+(((-1.0)*x3168)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3172.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3171.value)))+(x3172.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3173=IKcos(j0);
IkReal x3174=IKsin(j0);
IkReal x3175=((0.125)*sj5);
IkReal x3176=(cj5*r01);
IkReal x3177=(cj2*sj1);
IkReal x3178=(cj5*r11);
IkReal x3179=(cj1*sj2);
IkReal x3180=((0.35)*sj1);
IkReal x3181=((0.3)*x3174);
IkReal x3182=((1.0)*x3174);
IkReal x3183=(x3173*x3179);
evalcond[0]=(((r00*sj5))+x3176+(((-1.0)*x3173*x3177))+(((-1.0)*x3183)));
evalcond[1]=(x3178+((r10*sj5))+(((-1.0)*x3177*x3182))+(((-1.0)*x3179*x3182)));
evalcond[2]=((((-0.125)*x3174))+(((-0.3)*x3183))+(((0.125)*x3176))+(((-1.0)*px))+((r00*x3175))+(((-0.3)*x3173*x3177))+(((-1.0)*x3173*x3180)));
evalcond[3]=((((-1.0)*x3177*x3181))+((r10*x3175))+(((-1.0)*x3179*x3181))+(((0.125)*x3178))+(((0.125)*x3173))+(((-1.0)*py))+(((-1.0)*x3174*x3180)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3184=((1.0)*sj5);
IkReal x3185=((((-1.0)*cj5*r11))+(((-1.0)*r10*x3184)));
j4eval[0]=x3185;
j4eval[1]=IKsign(x3185);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x3184))+((cj5*r20*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3186=((1.0)*sj5);
IkReal x3187=((((-1.0)*r00*x3186))+(((-1.0)*cj5*r01)));
j4eval[0]=x3187;
j4eval[1]=IKsign(x3187);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x3186))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3188=((1.0)*sj5);
IkReal x3189=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3189;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((cj0*cj5*r00))+(((-1.0)*r11*sj0*x3188))+((cj5*r10*sj0))+(((-1.0)*cj0*r01*x3188))))));
j4eval[2]=IKsign(x3189);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x3191 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3191)==0){
continue;
}
IkReal x3190=pow(x3191,-0.5);
CheckValue<IkReal> x3192 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3192.valid){
continue;
}
IkReal gconst96=((-1.0)*(x3192.value));
IkReal gconst97=((-1.0)*r21*x3190);
IkReal gconst98=(r20*x3190);
CheckValue<IkReal> x3193 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3193.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3193.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x3196 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3196.valid){
continue;
}
IkReal x3194=((-1.0)*(x3196.value));
IkReal x3195=x3190;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x3194;
IkReal gconst96=x3194;
IkReal gconst97=((-1.0)*r21*x3195);
IkReal gconst98=(r20*x3195);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x3199 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3199.valid){
continue;
}
IkReal x3197=((-1.0)*(x3199.value));
IkReal x3198=x3190;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x3197;
IkReal gconst96=x3197;
IkReal gconst97=((-1.0)*r21*x3198);
IkReal gconst98=(r20*x3198);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x3202 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3202.valid){
continue;
}
IkReal x3200=((-1.0)*(x3202.value));
IkReal x3201=x3190;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x3200;
IkReal gconst96=x3200;
IkReal gconst97=((-1.0)*r21*x3201);
IkReal gconst98=(r20*x3201);
IkReal x3203=((1.0)*(r22*r22));
CheckValue<IkReal> x3207=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x3203))),-1);
if(!x3207.valid){
continue;
}
IkReal x3204=x3207.value;
IkReal x3205=((1.0)*x3204);
IkReal x3206=((((-1.0)*x3205*(r20*r20*r20*r20)))+(((-1.0)*x3203))+(((-1.0)*x3205*(r21*r21*r21*r21)))+(((-2.0)*x3204*(r20*r20)*(r21*r21))));
j4eval[0]=x3206;
j4eval[1]=IKsign(x3206);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3208=(cj2*sj1);
IkReal x3209=(gconst98*r20);
IkReal x3210=(cj1*sj2);
IkReal x3211=((1.0)*gconst97*r21);
CheckValue<IkReal> x3212 = IKatan2WithCheck(IkReal((((r22*x3208))+((r22*x3210)))),IkReal((((x3208*x3209))+((x3209*x3210))+(((-1.0)*x3210*x3211))+(((-1.0)*x3208*x3211)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3212.valid){
continue;
}
CheckValue<IkReal> x3213=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst97*r21*x3211))+(((-1.0)*(r22*r22)))+(((2.0)*gconst97*r21*x3209))+(((-1.0)*(x3209*x3209))))),-1);
if(!x3213.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3212.value)+(((1.5707963267949)*(x3213.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3214=IKsin(j4);
IkReal x3215=IKcos(j4);
IkReal x3216=(gconst98*r00);
IkReal x3217=(cj1*cj2);
IkReal x3218=((1.0)*x3215);
IkReal x3219=(gconst98*x3214);
IkReal x3220=((1.0)*sj1*sj2);
IkReal x3221=(gconst98*x3215);
IkReal x3222=((1.0)*gconst97*x3214);
evalcond[0]=(((r20*x3219))+(((-1.0)*r21*x3222))+(((-1.0)*r22*x3218)));
evalcond[1]=(sj0+((x3214*x3216))+(((-1.0)*r02*x3218))+(((-1.0)*r01*x3222)));
evalcond[2]=((((-1.0)*r12*x3218))+((r10*x3219))+(((-1.0)*r11*x3222))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x3214))+(((-1.0)*gconst97*r21*x3218))+((r20*x3221)));
evalcond[4]=(((x3215*x3216))+(((-1.0)*cj0*x3220))+(((-1.0)*gconst97*r01*x3218))+((cj0*x3217))+((r02*x3214)));
evalcond[5]=(((r10*x3221))+(((-1.0)*gconst97*r11*x3218))+((r12*x3214))+(((-1.0)*sj0*x3220))+((sj0*x3217)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3223=((1.0)*gconst97);
CheckValue<IkReal> x3224=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst98*r01))+(((-1.0)*r00*x3223)))),-1);
if(!x3224.valid){
continue;
}
CheckValue<IkReal> x3225 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst98*r20))+(((-1.0)*cj0*r21*x3223)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3225.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3224.value)))+(x3225.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3226=IKsin(j4);
IkReal x3227=IKcos(j4);
IkReal x3228=(gconst98*r00);
IkReal x3229=(cj1*cj2);
IkReal x3230=((1.0)*x3227);
IkReal x3231=(gconst98*x3226);
IkReal x3232=((1.0)*sj1*sj2);
IkReal x3233=(gconst98*x3227);
IkReal x3234=((1.0)*gconst97*x3226);
evalcond[0]=(((r20*x3231))+(((-1.0)*r21*x3234))+(((-1.0)*r22*x3230)));
evalcond[1]=((((-1.0)*r02*x3230))+sj0+(((-1.0)*r01*x3234))+((x3226*x3228)));
evalcond[2]=((((-1.0)*r11*x3234))+(((-1.0)*r12*x3230))+((r10*x3231))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x3233))+(((-1.0)*gconst97*r21*x3230))+((r22*x3226)));
evalcond[4]=((((-1.0)*cj0*x3232))+((cj0*x3229))+((x3227*x3228))+((r02*x3226))+(((-1.0)*gconst97*r01*x3230)));
evalcond[5]=((((-1.0)*sj0*x3232))+((r12*x3226))+((sj0*x3229))+((r10*x3233))+(((-1.0)*gconst97*r11*x3230)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3235=((1.0)*gconst97);
CheckValue<IkReal> x3236 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst98*r20*sj0))+(((-1.0)*r21*sj0*x3235)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3236.valid){
continue;
}
CheckValue<IkReal> x3237=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x3235))+(((-1.0)*gconst98*r11)))),-1);
if(!x3237.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3236.value)+(((1.5707963267949)*(x3237.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3238=IKsin(j4);
IkReal x3239=IKcos(j4);
IkReal x3240=(gconst98*r00);
IkReal x3241=(cj1*cj2);
IkReal x3242=((1.0)*x3239);
IkReal x3243=(gconst98*x3238);
IkReal x3244=((1.0)*sj1*sj2);
IkReal x3245=(gconst98*x3239);
IkReal x3246=((1.0)*gconst97*x3238);
evalcond[0]=((((-1.0)*r21*x3246))+((r20*x3243))+(((-1.0)*r22*x3242)));
evalcond[1]=(sj0+(((-1.0)*r01*x3246))+((x3238*x3240))+(((-1.0)*r02*x3242)));
evalcond[2]=((((-1.0)*r11*x3246))+(((-1.0)*r12*x3242))+((r10*x3243))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((r22*x3238))+((cj1*sj2))+(((-1.0)*gconst97*r21*x3242))+((r20*x3245)));
evalcond[4]=((((-1.0)*gconst97*r01*x3242))+((x3239*x3240))+(((-1.0)*cj0*x3244))+((cj0*x3241))+((r02*x3238)));
evalcond[5]=((((-1.0)*gconst97*r11*x3242))+(((-1.0)*sj0*x3244))+((r12*x3238))+((r10*x3245))+((sj0*x3241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3248 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3248)==0){
continue;
}
IkReal x3247=pow(x3248,-0.5);
CheckValue<IkReal> x3249 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3249.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x3249.value))));
IkReal gconst100=((1.0)*r21*x3247);
IkReal gconst101=((-1.0)*r20*x3247);
CheckValue<IkReal> x3250 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3250.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3250.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x3253 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3253.valid){
continue;
}
IkReal x3251=((1.0)*(x3253.value));
IkReal x3252=x3247;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3251)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3251)));
IkReal gconst100=((1.0)*r21*x3252);
IkReal gconst101=((-1.0)*r20*x3252);
IkReal x3254=r22*r22;
IkReal x3255=((1.0)*x3254);
CheckValue<IkReal> x3259=IKPowWithIntegerCheck(((-1.0)+x3254),-1);
if(!x3259.valid){
continue;
}
IkReal x3256=x3259.value;
if((((1.0)+(((-1.0)*x3255)))) < -0.00001)
continue;
IkReal x3257=IKsqrt(((1.0)+(((-1.0)*x3255))));
IkReal x3258=(sj0*x3256*x3257);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x3258+(((-1.0)*x3255*x3258))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x3262 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3262.valid){
continue;
}
IkReal x3260=((1.0)*(x3262.value));
IkReal x3261=x3247;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3260)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3260)));
IkReal gconst100=((1.0)*r21*x3261);
IkReal gconst101=((-1.0)*r20*x3261);
IkReal x3263=r22*r22;
IkReal x3264=((1.0)*x3263);
CheckValue<IkReal> x3268=IKPowWithIntegerCheck(((-1.0)+x3263),-1);
if(!x3268.valid){
continue;
}
IkReal x3265=x3268.value;
if((((1.0)+(((-1.0)*x3264)))) < -0.00001)
continue;
IkReal x3266=IKsqrt(((1.0)+(((-1.0)*x3264))));
IkReal x3267=(cj0*x3265*x3266);
j4eval[0]=((IKabs((x3267+(((-1.0)*x3264*x3267)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x3271 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3271.valid){
continue;
}
IkReal x3269=((1.0)*(x3271.value));
IkReal x3270=x3247;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3269)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3269)));
IkReal gconst100=((1.0)*r21*x3270);
IkReal gconst101=((-1.0)*r20*x3270);
IkReal x3272=r22*r22;
IkReal x3273=(cj0*r02);
IkReal x3274=(r12*sj0);
CheckValue<IkReal> x3278=IKPowWithIntegerCheck(((-1.0)+x3272),-1);
if(!x3278.valid){
continue;
}
IkReal x3275=x3278.value;
if((((1.0)+(((-1.0)*x3272)))) < -0.00001)
continue;
IkReal x3276=IKsqrt(((1.0)+(((-1.0)*x3272))));
IkReal x3277=((1.0)*r22*x3275*x3276);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((x3274+x3273)))+(IKabs(((((-1.0)*x3273*x3277))+(((-1.0)*x3274*x3277))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3279=((1.0)*gconst100);
CheckValue<IkReal> x3280 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x3279))+((gconst101*r10*sj0))+(((-1.0)*cj0*r01*x3279))+((cj0*gconst101*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3280.valid){
continue;
}
CheckValue<IkReal> x3281=IKPowWithIntegerCheck(IKsign((((gconst100*r20))+((gconst101*r21)))),-1);
if(!x3281.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3280.value)+(((1.5707963267949)*(x3281.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3282=IKsin(j4);
IkReal x3283=IKcos(j4);
IkReal x3284=(cj1*cj2);
IkReal x3285=(gconst101*r10);
IkReal x3286=((1.0)*cj0);
IkReal x3287=(sj1*sj2);
IkReal x3288=((1.0)*x3283);
IkReal x3289=(gconst101*x3283);
IkReal x3290=(gconst101*x3282);
IkReal x3291=((1.0)*gconst100*x3282);
evalcond[0]=((((-1.0)*r21*x3291))+((r20*x3290))+(((-1.0)*r22*x3288)));
evalcond[1]=(((r00*x3290))+sj0+(((-1.0)*r01*x3291))+(((-1.0)*r02*x3288)));
evalcond[2]=((((-1.0)*r11*x3291))+(((-1.0)*r12*x3288))+(((-1.0)*x3286))+((x3282*x3285)));
evalcond[3]=(((cj2*sj1))+((r20*x3289))+((cj1*sj2))+((r22*x3282))+(((-1.0)*gconst100*r21*x3288)));
evalcond[4]=(((r00*x3289))+((r02*x3282))+((cj0*x3284))+(((-1.0)*x3286*x3287))+(((-1.0)*gconst100*r01*x3288)));
evalcond[5]=((((-1.0)*gconst100*r11*x3288))+((x3283*x3285))+((sj0*x3284))+(((-1.0)*sj0*x3287))+((r12*x3282)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3292=((1.0)*gconst100);
CheckValue<IkReal> x3293 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x3292))+((cj0*gconst101*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3293.valid){
continue;
}
CheckValue<IkReal> x3294=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3292))+(((-1.0)*gconst101*r01)))),-1);
if(!x3294.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3293.value)+(((1.5707963267949)*(x3294.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3295=IKsin(j4);
IkReal x3296=IKcos(j4);
IkReal x3297=(cj1*cj2);
IkReal x3298=(gconst101*r10);
IkReal x3299=((1.0)*cj0);
IkReal x3300=(sj1*sj2);
IkReal x3301=((1.0)*x3296);
IkReal x3302=(gconst101*x3296);
IkReal x3303=(gconst101*x3295);
IkReal x3304=((1.0)*gconst100*x3295);
evalcond[0]=((((-1.0)*r21*x3304))+(((-1.0)*r22*x3301))+((r20*x3303)));
evalcond[1]=(sj0+(((-1.0)*r02*x3301))+((r00*x3303))+(((-1.0)*r01*x3304)));
evalcond[2]=((((-1.0)*x3299))+((x3295*x3298))+(((-1.0)*r12*x3301))+(((-1.0)*r11*x3304)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x3295))+(((-1.0)*gconst100*r21*x3301))+((r20*x3302)));
evalcond[4]=(((r02*x3295))+(((-1.0)*gconst100*r01*x3301))+((r00*x3302))+((cj0*x3297))+(((-1.0)*x3299*x3300)));
evalcond[5]=(((x3296*x3298))+((sj0*x3297))+(((-1.0)*gconst100*r11*x3301))+(((-1.0)*sj0*x3300))+((r12*x3295)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3305=((1.0)*gconst100);
CheckValue<IkReal> x3306=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x3305))+(((-1.0)*gconst101*r11)))),-1);
if(!x3306.valid){
continue;
}
CheckValue<IkReal> x3307 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst101*r20*sj0))+(((-1.0)*r21*sj0*x3305)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3307.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3306.value)))+(x3307.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3308=IKsin(j4);
IkReal x3309=IKcos(j4);
IkReal x3310=(cj1*cj2);
IkReal x3311=(gconst101*r10);
IkReal x3312=((1.0)*cj0);
IkReal x3313=(sj1*sj2);
IkReal x3314=((1.0)*x3309);
IkReal x3315=(gconst101*x3309);
IkReal x3316=(gconst101*x3308);
IkReal x3317=((1.0)*gconst100*x3308);
evalcond[0]=((((-1.0)*r21*x3317))+(((-1.0)*r22*x3314))+((r20*x3316)));
evalcond[1]=(sj0+(((-1.0)*r02*x3314))+(((-1.0)*r01*x3317))+((r00*x3316)));
evalcond[2]=((((-1.0)*x3312))+(((-1.0)*r11*x3317))+(((-1.0)*r12*x3314))+((x3308*x3311)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x3308))+(((-1.0)*gconst100*r21*x3314))+((r20*x3315)));
evalcond[4]=(((r02*x3308))+((cj0*x3310))+(((-1.0)*gconst100*r01*x3314))+(((-1.0)*x3312*x3313))+((r00*x3315)));
evalcond[5]=(((r12*x3308))+(((-1.0)*gconst100*r11*x3314))+((sj0*x3310))+((x3309*x3311))+(((-1.0)*sj0*x3313)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3318=((-1.0)*r00);
IkReal x3320 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3320)==0){
continue;
}
IkReal x3319=pow(x3320,-0.5);
CheckValue<IkReal> x3321 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3318),IKFAST_ATAN2_MAGTHRESH);
if(!x3321.valid){
continue;
}
IkReal gconst102=((-1.0)*(x3321.value));
IkReal gconst103=(r01*x3319);
IkReal gconst104=(x3318*x3319);
CheckValue<IkReal> x3322 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3322.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3322.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3323=((-1.0)*r00);
IkReal x3324=x3319;
CheckValue<IkReal> x3326 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3323),IKFAST_ATAN2_MAGTHRESH);
if(!x3326.valid){
continue;
}
IkReal x3325=((-1.0)*(x3326.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst103;
cj5=gconst104;
j5=x3325;
IkReal gconst102=x3325;
IkReal gconst103=(r01*x3324);
IkReal gconst104=(x3323*x3324);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3327=((1.0)*gconst103);
CheckValue<IkReal> x3328 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x3327))+(((-1.0)*cj0*r01*x3327))+((gconst104*r10*sj0))+((cj0*gconst104*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3328.valid){
continue;
}
CheckValue<IkReal> x3329=IKPowWithIntegerCheck(IKsign((((gconst104*r21))+((gconst103*r20)))),-1);
if(!x3329.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3328.value)+(((1.5707963267949)*(x3329.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3330=IKsin(j4);
IkReal x3331=IKcos(j4);
IkReal x3332=(cj1*cj2);
IkReal x3333=((1.0)*x3331);
IkReal x3334=(gconst104*x3331);
IkReal x3335=(gconst104*x3330);
IkReal x3336=((1.0)*sj1*sj2);
IkReal x3337=((1.0)*gconst103*x3330);
evalcond[0]=((((-1.0)*r21*x3337))+(((-1.0)*r22*x3333))+((r20*x3335)));
evalcond[1]=(sj0+(((-1.0)*r02*x3333))+(((-1.0)*r01*x3337))+((r00*x3335)));
evalcond[2]=(((r10*x3335))+(((-1.0)*cj0))+(((-1.0)*r11*x3337))+(((-1.0)*r12*x3333)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst103*r21*x3333))+((r22*x3330))+((r20*x3334)));
evalcond[4]=(((cj0*x3332))+(((-1.0)*cj0*x3336))+((r02*x3330))+(((-1.0)*gconst103*r01*x3333))+((r00*x3334)));
evalcond[5]=((((-1.0)*gconst103*r11*x3333))+((r10*x3334))+((r12*x3330))+((sj0*x3332))+(((-1.0)*sj0*x3336)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3338=((1.0)*gconst103);
CheckValue<IkReal> x3339 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst104*r20*sj0))+(((-1.0)*r21*sj0*x3338)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3339.valid){
continue;
}
CheckValue<IkReal> x3340=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst104*r11))+(((-1.0)*r10*x3338)))),-1);
if(!x3340.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3339.value)+(((1.5707963267949)*(x3340.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3341=IKsin(j4);
IkReal x3342=IKcos(j4);
IkReal x3343=(cj1*cj2);
IkReal x3344=((1.0)*x3342);
IkReal x3345=(gconst104*x3342);
IkReal x3346=(gconst104*x3341);
IkReal x3347=((1.0)*sj1*sj2);
IkReal x3348=((1.0)*gconst103*x3341);
evalcond[0]=((((-1.0)*r21*x3348))+((r20*x3346))+(((-1.0)*r22*x3344)));
evalcond[1]=(((r00*x3346))+sj0+(((-1.0)*r02*x3344))+(((-1.0)*r01*x3348)));
evalcond[2]=(((r10*x3346))+(((-1.0)*r11*x3348))+(((-1.0)*r12*x3344))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst103*r21*x3344))+((cj1*sj2))+((r22*x3341))+((r20*x3345)));
evalcond[4]=(((r00*x3345))+((cj0*x3343))+((r02*x3341))+(((-1.0)*cj0*x3347))+(((-1.0)*gconst103*r01*x3344)));
evalcond[5]=(((r10*x3345))+((sj0*x3343))+(((-1.0)*gconst103*r11*x3344))+(((-1.0)*sj0*x3347))+((r12*x3341)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3349=((-1.0)*r01);
IkReal x3351 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3351)==0){
continue;
}
IkReal x3350=pow(x3351,-0.5);
CheckValue<IkReal> x3352 = IKatan2WithCheck(IkReal(x3349),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3352.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x3352.value))));
IkReal gconst106=(x3349*x3350);
IkReal gconst107=((1.0)*r00*x3350);
CheckValue<IkReal> x3353 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3353.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3353.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3354=((-1.0)*r01);
CheckValue<IkReal> x3357 = IKatan2WithCheck(IkReal(x3354),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3357.valid){
continue;
}
IkReal x3355=((1.0)*(x3357.value));
IkReal x3356=x3350;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3355)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3355)));
IkReal gconst106=(x3354*x3356);
IkReal gconst107=((1.0)*r00*x3356);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x3358=((-1.0)*r01);
CheckValue<IkReal> x3361 = IKatan2WithCheck(IkReal(x3358),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3361.valid){
continue;
}
IkReal x3359=((1.0)*(x3361.value));
IkReal x3360=x3350;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3359)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3359)));
IkReal gconst106=(x3358*x3360);
IkReal gconst107=((1.0)*r00*x3360);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3362=((-1.0)*r01);
CheckValue<IkReal> x3365 = IKatan2WithCheck(IkReal(x3362),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3365.valid){
continue;
}
IkReal x3363=((1.0)*(x3365.value));
IkReal x3364=x3350;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3363)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3363)));
IkReal gconst106=(x3362*x3364);
IkReal gconst107=((1.0)*r00*x3364);
IkReal x3366=r02*r02;
IkReal x3367=(r12*sj0);
IkReal x3368=x3350;
IkReal x3369=(cj0*x3368);
j4eval[0]=((IKabs((x3367+((cj0*r02)))))+(IKabs(((((-1.0)*x3369))+((r02*x3367*x3368))+((x3366*x3369))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3370=((1.0)*gconst106);
CheckValue<IkReal> x3371=IKPowWithIntegerCheck(IKsign((((gconst107*r21))+((gconst106*r20)))),-1);
if(!x3371.valid){
continue;
}
CheckValue<IkReal> x3372 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x3370))+(((-1.0)*cj0*r01*x3370))+((gconst107*r10*sj0))+((cj0*gconst107*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3372.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3371.value)))+(x3372.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3373=IKsin(j4);
IkReal x3374=IKcos(j4);
IkReal x3375=(gconst106*r01);
IkReal x3376=(cj1*cj2);
IkReal x3377=(gconst106*r21);
IkReal x3378=(gconst106*r11);
IkReal x3379=((1.0)*cj0);
IkReal x3380=(sj1*sj2);
IkReal x3381=((1.0)*x3374);
IkReal x3382=((1.0)*x3373);
IkReal x3383=(gconst107*x3373);
IkReal x3384=(gconst107*x3374);
evalcond[0]=((((-1.0)*x3377*x3382))+(((-1.0)*r22*x3381))+((r20*x3383)));
evalcond[1]=(sj0+(((-1.0)*r02*x3381))+(((-1.0)*x3375*x3382))+((r00*x3383)));
evalcond[2]=((((-1.0)*x3378*x3382))+((r10*x3383))+(((-1.0)*x3379))+(((-1.0)*r12*x3381)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x3377*x3381))+((r20*x3384))+((r22*x3373))+((cj1*sj2)));
evalcond[4]=(((cj0*x3376))+((r02*x3373))+(((-1.0)*x3375*x3381))+(((-1.0)*x3379*x3380))+((r00*x3384)));
evalcond[5]=(((r12*x3373))+(((-1.0)*x3378*x3381))+(((-1.0)*sj0*x3380))+((r10*x3384))+((sj0*x3376)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3385=((1.0)*gconst106);
CheckValue<IkReal> x3386 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst107*r20))+(((-1.0)*cj0*r21*x3385)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3386.valid){
continue;
}
CheckValue<IkReal> x3387=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst107*r01))+(((-1.0)*r00*x3385)))),-1);
if(!x3387.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3386.value)+(((1.5707963267949)*(x3387.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3388=IKsin(j4);
IkReal x3389=IKcos(j4);
IkReal x3390=(gconst106*r01);
IkReal x3391=(cj1*cj2);
IkReal x3392=(gconst106*r21);
IkReal x3393=(gconst106*r11);
IkReal x3394=((1.0)*cj0);
IkReal x3395=(sj1*sj2);
IkReal x3396=((1.0)*x3389);
IkReal x3397=((1.0)*x3388);
IkReal x3398=(gconst107*x3388);
IkReal x3399=(gconst107*x3389);
evalcond[0]=((((-1.0)*r22*x3396))+(((-1.0)*x3392*x3397))+((r20*x3398)));
evalcond[1]=(((r00*x3398))+sj0+(((-1.0)*r02*x3396))+(((-1.0)*x3390*x3397)));
evalcond[2]=(((r10*x3398))+(((-1.0)*x3394))+(((-1.0)*r12*x3396))+(((-1.0)*x3393*x3397)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x3392*x3396))+((r20*x3399))+((cj1*sj2))+((r22*x3388)));
evalcond[4]=(((r00*x3399))+(((-1.0)*x3394*x3395))+((cj0*x3391))+((r02*x3388))+(((-1.0)*x3390*x3396)));
evalcond[5]=(((sj0*x3391))+((r10*x3399))+(((-1.0)*sj0*x3395))+((r12*x3388))+(((-1.0)*x3393*x3396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3400=((1.0)*gconst106);
CheckValue<IkReal> x3401=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst107*r11))+(((-1.0)*r10*x3400)))),-1);
if(!x3401.valid){
continue;
}
CheckValue<IkReal> x3402 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst107*r20*sj0))+(((-1.0)*r21*sj0*x3400)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3402.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3401.value)))+(x3402.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3403=IKsin(j4);
IkReal x3404=IKcos(j4);
IkReal x3405=(gconst106*r01);
IkReal x3406=(cj1*cj2);
IkReal x3407=(gconst106*r21);
IkReal x3408=(gconst106*r11);
IkReal x3409=((1.0)*cj0);
IkReal x3410=(sj1*sj2);
IkReal x3411=((1.0)*x3404);
IkReal x3412=((1.0)*x3403);
IkReal x3413=(gconst107*x3403);
IkReal x3414=(gconst107*x3404);
evalcond[0]=((((-1.0)*r22*x3411))+(((-1.0)*x3407*x3412))+((r20*x3413)));
evalcond[1]=(sj0+(((-1.0)*x3405*x3412))+(((-1.0)*r02*x3411))+((r00*x3413)));
evalcond[2]=((((-1.0)*x3408*x3412))+(((-1.0)*r12*x3411))+((r10*x3413))+(((-1.0)*x3409)));
evalcond[3]=((((-1.0)*x3407*x3411))+((cj2*sj1))+((r22*x3403))+((cj1*sj2))+((r20*x3414)));
evalcond[4]=(((r02*x3403))+(((-1.0)*x3405*x3411))+((r00*x3414))+((cj0*x3406))+(((-1.0)*x3409*x3410)));
evalcond[5]=(((sj0*x3406))+(((-1.0)*x3408*x3411))+((r12*x3403))+(((-1.0)*sj0*x3410))+((r10*x3414)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3415=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3415;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x3415);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3416=((1.0)*sj5);
IkReal x3417=((((-1.0)*cj5*r11))+(((-1.0)*r10*x3416)));
j4eval[0]=x3417;
j4eval[1]=IKsign(x3417);
j4eval[2]=((IKabs((((cj5*r20))+(((-1.0)*r21*x3416)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3418=cj5*cj5;
IkReal x3419=r01*r01;
IkReal x3420=(r01*sj5);
IkReal x3421=(cj5*r00);
IkReal x3422=((((-1.0)*x3418*(r00*r00)))+(((2.0)*x3420*x3421))+(((-1.0)*x3419))+(((-1.0)*(r02*r02)))+((x3418*x3419)));
j4eval[0]=x3422;
j4eval[1]=IKsign(x3422);
j4eval[2]=((IKabs(r02))+(IKabs((x3421+(((-1.0)*x3420))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3423=cj5*cj5;
IkReal x3424=r01*r01;
IkReal x3425=(r01*sj5);
IkReal x3426=(cj5*r00);
CheckValue<IkReal> x3427 = IKatan2WithCheck(IkReal((x3426+(((-1.0)*x3425)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x3427.valid){
continue;
}
CheckValue<IkReal> x3428=IKPowWithIntegerCheck(IKsign(((((2.0)*x3425*x3426))+(((-1.0)*(r02*r02)))+(((-1.0)*x3424))+(((-1.0)*x3423*(r00*r00)))+((x3423*x3424)))),-1);
if(!x3428.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3427.value)+(((1.5707963267949)*(x3428.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3429=IKcos(j4);
IkReal x3430=IKsin(j4);
IkReal x3431=(cj5*r10);
IkReal x3432=((1.0)*x3429);
IkReal x3433=(cj5*x3430);
IkReal x3434=(cj5*x3429);
IkReal x3435=((1.0)*sj5*x3430);
evalcond[0]=((((-1.0)*r01*sj5*x3432))+((r02*x3430))+((r00*x3434)));
evalcond[1]=(((r20*x3433))+(((-1.0)*r22*x3432))+(((-1.0)*r21*x3435)));
evalcond[2]=((((-1.0)*r12*x3432))+(((-1.0)*r11*x3435))+((x3430*x3431)));
evalcond[3]=((1.0)+(((-1.0)*r01*x3435))+((r00*x3433))+(((-1.0)*r02*x3432)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x3432))+((r20*x3434))+((cj1*sj2))+((r22*x3430)));
evalcond[5]=((((-1.0)*r11*sj5*x3432))+((x3429*x3431))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r12*x3430)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3436=((1.0)*sj5);
CheckValue<IkReal> x3437=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x3436)))),-1);
if(!x3437.valid){
continue;
}
CheckValue<IkReal> x3438 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x3436)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3438.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3437.value)))+(x3438.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3439=IKcos(j4);
IkReal x3440=IKsin(j4);
IkReal x3441=(cj5*r10);
IkReal x3442=((1.0)*x3439);
IkReal x3443=(cj5*x3440);
IkReal x3444=(cj5*x3439);
IkReal x3445=((1.0)*sj5*x3440);
evalcond[0]=((((-1.0)*r01*sj5*x3442))+((r02*x3440))+((r00*x3444)));
evalcond[1]=((((-1.0)*r21*x3445))+((r20*x3443))+(((-1.0)*r22*x3442)));
evalcond[2]=((((-1.0)*r11*x3445))+(((-1.0)*r12*x3442))+((x3440*x3441)));
evalcond[3]=((1.0)+(((-1.0)*r02*x3442))+((r00*x3443))+(((-1.0)*r01*x3445)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x3440))+(((-1.0)*r21*sj5*x3442))+((r20*x3444)));
evalcond[5]=(((r12*x3440))+(((-1.0)*r11*sj5*x3442))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((x3439*x3441)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3446 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3446.valid){
continue;
}
CheckValue<IkReal> x3447=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3447.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3446.value)+(((1.5707963267949)*(x3447.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3448=IKcos(j4);
IkReal x3449=IKsin(j4);
IkReal x3450=(cj5*r10);
IkReal x3451=((1.0)*x3448);
IkReal x3452=(cj5*x3449);
IkReal x3453=(cj5*x3448);
IkReal x3454=((1.0)*sj5*x3449);
evalcond[0]=(((r02*x3449))+((r00*x3453))+(((-1.0)*r01*sj5*x3451)));
evalcond[1]=((((-1.0)*r21*x3454))+((r20*x3452))+(((-1.0)*r22*x3451)));
evalcond[2]=((((-1.0)*r12*x3451))+(((-1.0)*r11*x3454))+((x3449*x3450)));
evalcond[3]=((1.0)+(((-1.0)*r01*x3454))+((r00*x3452))+(((-1.0)*r02*x3451)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x3449))+(((-1.0)*r21*sj5*x3451))+((r20*x3453)));
evalcond[5]=(((r12*x3449))+(((-1.0)*r11*sj5*x3451))+(((-1.0)*sj1*sj2))+((x3448*x3450))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3455=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3455;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x3455);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3456=((1.0)*sj5);
IkReal x3457=((((-1.0)*r20*x3456))+(((-1.0)*cj5*r21)));
j4eval[0]=x3457;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x3456))))));
j4eval[2]=IKsign(x3457);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3458=cj5*cj5;
IkReal x3459=r01*r01;
IkReal x3460=(cj5*r00);
IkReal x3461=(r01*sj5);
IkReal x3462=(x3459+((x3458*(r00*r00)))+(((-1.0)*x3458*x3459))+(r02*r02)+(((-2.0)*x3460*x3461)));
j4eval[0]=x3462;
j4eval[1]=((IKabs((x3460+(((-1.0)*x3461)))))+(IKabs(r02)));
j4eval[2]=IKsign(x3462);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3463=cj5*cj5;
IkReal x3464=r01*r01;
IkReal x3465=(r01*sj5);
IkReal x3466=(cj5*r00);
CheckValue<IkReal> x3467 = IKatan2WithCheck(IkReal((x3466+(((-1.0)*x3465)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x3467.valid){
continue;
}
CheckValue<IkReal> x3468=IKPowWithIntegerCheck(IKsign(((((-2.0)*x3465*x3466))+((x3463*(r00*r00)))+(((-1.0)*x3463*x3464))+x3464+(r02*r02))),-1);
if(!x3468.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3467.value)+(((1.5707963267949)*(x3468.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3469=IKcos(j4);
IkReal x3470=IKsin(j4);
IkReal x3471=((1.0)*x3469);
IkReal x3472=(cj5*x3469);
IkReal x3473=(cj5*x3470);
IkReal x3474=((1.0)*sj5*x3470);
evalcond[0]=(((r00*x3472))+(((-1.0)*r01*sj5*x3471))+((r02*x3470)));
evalcond[1]=((((-1.0)*r21*x3474))+((r20*x3473))+(((-1.0)*r22*x3471)));
evalcond[2]=((((-1.0)*r11*x3474))+(((-1.0)*r12*x3471))+((r10*x3473)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x3471))+((r00*x3473))+(((-1.0)*r01*x3474)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x3471))+((r20*x3472))+((r22*x3470)));
evalcond[5]=((((-1.0)*r11*sj5*x3471))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x3470))+((r10*x3472)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3475=((1.0)*sj5);
CheckValue<IkReal> x3476 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x3475)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3476.valid){
continue;
}
CheckValue<IkReal> x3477=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3475))+(((-1.0)*cj5*r21)))),-1);
if(!x3477.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3476.value)+(((1.5707963267949)*(x3477.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3478=IKcos(j4);
IkReal x3479=IKsin(j4);
IkReal x3480=((1.0)*x3478);
IkReal x3481=(cj5*x3478);
IkReal x3482=(cj5*x3479);
IkReal x3483=((1.0)*sj5*x3479);
evalcond[0]=(((r00*x3481))+(((-1.0)*r01*sj5*x3480))+((r02*x3479)));
evalcond[1]=((((-1.0)*r21*x3483))+((r20*x3482))+(((-1.0)*r22*x3480)));
evalcond[2]=((((-1.0)*r12*x3480))+((r10*x3482))+(((-1.0)*r11*x3483)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x3483))+(((-1.0)*r02*x3480))+((r00*x3482)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x3480))+((r20*x3481))+((r22*x3479)));
evalcond[5]=((((-1.0)*r11*sj5*x3480))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x3479))+((r10*x3481)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3484=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3484.valid){
continue;
}
CheckValue<IkReal> x3485 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3485.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3484.value)))+(x3485.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3486=IKcos(j4);
IkReal x3487=IKsin(j4);
IkReal x3488=((1.0)*x3486);
IkReal x3489=(cj5*x3486);
IkReal x3490=(cj5*x3487);
IkReal x3491=((1.0)*sj5*x3487);
evalcond[0]=(((r00*x3489))+(((-1.0)*r01*sj5*x3488))+((r02*x3487)));
evalcond[1]=(((r20*x3490))+(((-1.0)*r22*x3488))+(((-1.0)*r21*x3491)));
evalcond[2]=(((r10*x3490))+(((-1.0)*r12*x3488))+(((-1.0)*r11*x3491)));
evalcond[3]=((-1.0)+((r00*x3490))+(((-1.0)*r02*x3488))+(((-1.0)*r01*x3491)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x3488))+((r20*x3489))+((r22*x3487)));
evalcond[5]=((((-1.0)*r11*sj5*x3488))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r10*x3489))+((r12*x3487)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3492=((-1.0)*r10);
IkReal x3494 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3494)==0){
continue;
}
IkReal x3493=pow(x3494,-0.5);
CheckValue<IkReal> x3495 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3492),IKFAST_ATAN2_MAGTHRESH);
if(!x3495.valid){
continue;
}
IkReal gconst108=((-1.0)*(x3495.value));
IkReal gconst109=(r11*x3493);
IkReal gconst110=(x3492*x3493);
CheckValue<IkReal> x3496 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3496.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3496.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3497=((-1.0)*r10);
IkReal x3498=x3493;
CheckValue<IkReal> x3500 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3497),IKFAST_ATAN2_MAGTHRESH);
if(!x3500.valid){
continue;
}
IkReal x3499=((-1.0)*(x3500.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst109;
cj5=gconst110;
j5=x3499;
IkReal gconst108=x3499;
IkReal gconst109=(r11*x3498);
IkReal gconst110=(x3497*x3498);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3501=((1.0)*gconst109);
CheckValue<IkReal> x3502=IKPowWithIntegerCheck(IKsign((((gconst109*r20))+((gconst110*r21)))),-1);
if(!x3502.valid){
continue;
}
CheckValue<IkReal> x3503 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst110*r00))+(((-1.0)*cj0*r01*x3501))+((gconst110*r10*sj0))+(((-1.0)*r11*sj0*x3501)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3503.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3502.value)))+(x3503.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3504=IKsin(j4);
IkReal x3505=IKcos(j4);
IkReal x3506=(cj1*cj2);
IkReal x3507=(gconst110*r20);
IkReal x3508=(gconst109*r01);
IkReal x3509=(gconst109*r11);
IkReal x3510=(gconst109*r21);
IkReal x3511=((1.0)*x3505);
IkReal x3512=((1.0)*x3504);
IkReal x3513=(gconst110*x3505);
IkReal x3514=(gconst110*x3504);
IkReal x3515=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*x3510*x3512))+(((-1.0)*r22*x3511))+((x3504*x3507)));
evalcond[1]=((((-1.0)*r02*x3511))+sj0+((r00*x3514))+(((-1.0)*x3508*x3512)));
evalcond[2]=(((r10*x3514))+(((-1.0)*x3509*x3512))+(((-1.0)*r12*x3511))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x3510*x3511))+((r22*x3504))+((x3505*x3507)));
evalcond[4]=(((cj0*x3506))+((r00*x3513))+(((-1.0)*x3508*x3511))+(((-1.0)*cj0*x3515))+((r02*x3504)));
evalcond[5]=(((r10*x3513))+(((-1.0)*x3509*x3511))+(((-1.0)*sj0*x3515))+((r12*x3504))+((sj0*x3506)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3516=((1.0)*gconst109);
CheckValue<IkReal> x3517=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3516))+(((-1.0)*gconst110*r01)))),-1);
if(!x3517.valid){
continue;
}
CheckValue<IkReal> x3518 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x3516))+((cj0*gconst110*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3518.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3517.value)))+(x3518.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3519=IKsin(j4);
IkReal x3520=IKcos(j4);
IkReal x3521=(cj1*cj2);
IkReal x3522=(gconst110*r20);
IkReal x3523=(gconst109*r01);
IkReal x3524=(gconst109*r11);
IkReal x3525=(gconst109*r21);
IkReal x3526=((1.0)*x3520);
IkReal x3527=((1.0)*x3519);
IkReal x3528=(gconst110*x3520);
IkReal x3529=(gconst110*x3519);
IkReal x3530=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*x3525*x3527))+(((-1.0)*r22*x3526))+((x3519*x3522)));
evalcond[1]=((((-1.0)*r02*x3526))+sj0+((r00*x3529))+(((-1.0)*x3523*x3527)));
evalcond[2]=((((-1.0)*x3524*x3527))+((r10*x3529))+(((-1.0)*r12*x3526))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x3525*x3526))+((cj2*sj1))+((cj1*sj2))+((r22*x3519))+((x3520*x3522)));
evalcond[4]=(((cj0*x3521))+((r00*x3528))+((r02*x3519))+(((-1.0)*x3523*x3526))+(((-1.0)*cj0*x3530)));
evalcond[5]=((((-1.0)*x3524*x3526))+((r10*x3528))+((r12*x3519))+((sj0*x3521))+(((-1.0)*sj0*x3530)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3531=((-1.0)*r11);
IkReal x3533 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3533)==0){
continue;
}
IkReal x3532=pow(x3533,-0.5);
CheckValue<IkReal> x3534 = IKatan2WithCheck(IkReal(x3531),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3534.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x3534.value))));
IkReal gconst112=(x3531*x3532);
IkReal gconst113=((1.0)*r10*x3532);
CheckValue<IkReal> x3535 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3535.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3535.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3536=((-1.0)*r11);
CheckValue<IkReal> x3539 = IKatan2WithCheck(IkReal(x3536),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3539.valid){
continue;
}
IkReal x3537=((1.0)*(x3539.value));
IkReal x3538=x3532;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3537)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3537)));
IkReal gconst112=(x3536*x3538);
IkReal gconst113=((1.0)*r10*x3538);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3540=((-1.0)*r11);
CheckValue<IkReal> x3543 = IKatan2WithCheck(IkReal(x3540),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3543.valid){
continue;
}
IkReal x3541=((1.0)*(x3543.value));
IkReal x3542=x3532;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3541)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3541)));
IkReal gconst112=(x3540*x3542);
IkReal gconst113=((1.0)*r10*x3542);
IkReal x3544=r12*r12;
IkReal x3545=(cj0*r02);
IkReal x3546=x3532;
IkReal x3547=(sj0*x3546);
j4eval[0]=((IKabs((x3545+((r12*sj0)))))+(IKabs((((r12*x3545*x3546))+(((-1.0)*x3547))+((x3544*x3547))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3548=((-1.0)*r11);
CheckValue<IkReal> x3551 = IKatan2WithCheck(IkReal(x3548),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3551.valid){
continue;
}
IkReal x3549=((1.0)*(x3551.value));
IkReal x3550=x3532;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3549)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3549)));
IkReal gconst112=(x3548*x3550);
IkReal gconst113=((1.0)*r10*x3550);
IkReal x3552=(cj1*sj2);
IkReal x3553=(cj2*sj1);
IkReal x3554=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x3560=IKPowWithIntegerCheck(x3554,-1);
if(!x3560.valid){
continue;
}
IkReal x3555=x3560.value;
IkReal x3556=((1.0)*x3555);
IkReal x3557=x3532;
IkReal x3558=(r12*r22*x3557);
IkReal x3559=((((-1.0)*x3556*(r11*r11)*(r21*r21)))+(((-1.0)*x3556*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-2.0)*r10*r11*r20*r21*x3555)));
j4eval[0]=x3559;
j4eval[1]=((IKabs((((x3552*x3558))+((x3553*x3558)))))+(IKabs((((r22*x3553))+((r22*x3552))))));
j4eval[2]=IKsign(x3559);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3561=(cj2*sj1);
IkReal x3562=(cj1*sj2);
IkReal x3563=(gconst113*r20);
IkReal x3564=((1.0)*gconst112*r21);
CheckValue<IkReal> x3565=IKPowWithIntegerCheck(IKsign(((((2.0)*gconst112*r21*x3563))+(((-1.0)*(x3563*x3563)))+(((-1.0)*(r22*r22)))+(((-1.0)*gconst112*r21*x3564)))),-1);
if(!x3565.valid){
continue;
}
CheckValue<IkReal> x3566 = IKatan2WithCheck(IkReal((((r22*x3562))+((r22*x3561)))),IkReal((((x3562*x3563))+(((-1.0)*x3561*x3564))+((x3561*x3563))+(((-1.0)*x3562*x3564)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3566.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3565.value)))+(x3566.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3567=IKsin(j4);
IkReal x3568=IKcos(j4);
IkReal x3569=(gconst113*r10);
IkReal x3570=(cj1*cj2);
IkReal x3571=(gconst112*r01);
IkReal x3572=(gconst112*r11);
IkReal x3573=(gconst113*r20);
IkReal x3574=(gconst113*r00);
IkReal x3575=(gconst112*r21);
IkReal x3576=((1.0)*cj0);
IkReal x3577=(sj1*sj2);
IkReal x3578=((1.0)*x3568);
IkReal x3579=((1.0)*x3567);
evalcond[0]=((((-1.0)*x3575*x3579))+((x3567*x3573))+(((-1.0)*r22*x3578)));
evalcond[1]=(sj0+((x3567*x3574))+(((-1.0)*x3571*x3579))+(((-1.0)*r02*x3578)));
evalcond[2]=((((-1.0)*x3576))+(((-1.0)*x3572*x3579))+((x3567*x3569))+(((-1.0)*r12*x3578)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x3575*x3578))+((r22*x3567))+((x3568*x3573)));
evalcond[4]=(((cj0*x3570))+(((-1.0)*x3576*x3577))+(((-1.0)*x3571*x3578))+((x3568*x3574))+((r02*x3567)));
evalcond[5]=(((x3568*x3569))+((sj0*x3570))+(((-1.0)*x3572*x3578))+((r12*x3567))+(((-1.0)*sj0*x3577)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3580=((1.0)*gconst112);
CheckValue<IkReal> x3581 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst113*r10*sj0))+((cj0*gconst113*r00))+(((-1.0)*r11*sj0*x3580))+(((-1.0)*cj0*r01*x3580)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3581.valid){
continue;
}
CheckValue<IkReal> x3582=IKPowWithIntegerCheck(IKsign((((gconst112*r20))+((gconst113*r21)))),-1);
if(!x3582.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3581.value)+(((1.5707963267949)*(x3582.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3583=IKsin(j4);
IkReal x3584=IKcos(j4);
IkReal x3585=(gconst113*r10);
IkReal x3586=(cj1*cj2);
IkReal x3587=(gconst112*r01);
IkReal x3588=(gconst112*r11);
IkReal x3589=(gconst113*r20);
IkReal x3590=(gconst113*r00);
IkReal x3591=(gconst112*r21);
IkReal x3592=((1.0)*cj0);
IkReal x3593=(sj1*sj2);
IkReal x3594=((1.0)*x3584);
IkReal x3595=((1.0)*x3583);
evalcond[0]=(((x3583*x3589))+(((-1.0)*r22*x3594))+(((-1.0)*x3591*x3595)));
evalcond[1]=((((-1.0)*x3587*x3595))+sj0+((x3583*x3590))+(((-1.0)*r02*x3594)));
evalcond[2]=(((x3583*x3585))+(((-1.0)*r12*x3594))+(((-1.0)*x3592))+(((-1.0)*x3588*x3595)));
evalcond[3]=(((cj2*sj1))+((x3584*x3589))+((cj1*sj2))+(((-1.0)*x3591*x3594))+((r22*x3583)));
evalcond[4]=((((-1.0)*x3587*x3594))+((r02*x3583))+((cj0*x3586))+(((-1.0)*x3592*x3593))+((x3584*x3590)));
evalcond[5]=(((r12*x3583))+((x3584*x3585))+(((-1.0)*sj0*x3593))+((sj0*x3586))+(((-1.0)*x3588*x3594)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3596=((1.0)*gconst112);
CheckValue<IkReal> x3597=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3596))+(((-1.0)*gconst113*r01)))),-1);
if(!x3597.valid){
continue;
}
CheckValue<IkReal> x3598 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst113*r20))+(((-1.0)*cj0*r21*x3596)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3598.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3597.value)))+(x3598.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3599=IKsin(j4);
IkReal x3600=IKcos(j4);
IkReal x3601=(gconst113*r10);
IkReal x3602=(cj1*cj2);
IkReal x3603=(gconst112*r01);
IkReal x3604=(gconst112*r11);
IkReal x3605=(gconst113*r20);
IkReal x3606=(gconst113*r00);
IkReal x3607=(gconst112*r21);
IkReal x3608=((1.0)*cj0);
IkReal x3609=(sj1*sj2);
IkReal x3610=((1.0)*x3600);
IkReal x3611=((1.0)*x3599);
evalcond[0]=(((x3599*x3605))+(((-1.0)*x3607*x3611))+(((-1.0)*r22*x3610)));
evalcond[1]=(sj0+((x3599*x3606))+(((-1.0)*x3603*x3611))+(((-1.0)*r02*x3610)));
evalcond[2]=((((-1.0)*r12*x3610))+((x3599*x3601))+(((-1.0)*x3608))+(((-1.0)*x3604*x3611)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x3600*x3605))+(((-1.0)*x3607*x3610))+((r22*x3599)));
evalcond[4]=(((r02*x3599))+(((-1.0)*x3603*x3610))+((x3600*x3606))+(((-1.0)*x3608*x3609))+((cj0*x3602)));
evalcond[5]=(((r12*x3599))+((x3600*x3601))+((sj0*x3602))+(((-1.0)*x3604*x3610))+(((-1.0)*sj0*x3609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3612=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3612;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x3612);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3613=((1.0)*sj5);
IkReal x3614=((((-1.0)*r00*x3613))+(((-1.0)*cj5*r01)));
j4eval[0]=x3614;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x3613))))));
j4eval[2]=IKsign(x3614);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3615=cj5*cj5;
IkReal x3616=r11*r11;
IkReal x3617=(r11*sj5);
IkReal x3618=(cj5*r10);
IkReal x3619=((r12*r12)+(((-2.0)*x3617*x3618))+((x3615*(r10*r10)))+x3616+(((-1.0)*x3615*x3616)));
j4eval[0]=x3619;
j4eval[1]=IKsign(x3619);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x3617))+x3618))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3620=cj5*cj5;
IkReal x3621=r11*r11;
IkReal x3622=(cj5*r10);
IkReal x3623=(r11*sj5);
CheckValue<IkReal> x3624 = IKatan2WithCheck(IkReal((x3622+(((-1.0)*x3623)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3624.valid){
continue;
}
CheckValue<IkReal> x3625=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x3622*x3623))+x3621+((x3620*(r10*r10)))+(((-1.0)*x3620*x3621)))),-1);
if(!x3625.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3624.value)+(((1.5707963267949)*(x3625.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3626=IKcos(j4);
IkReal x3627=IKsin(j4);
IkReal x3628=(cj5*r10);
IkReal x3629=((1.0)*x3626);
IkReal x3630=(cj5*x3627);
IkReal x3631=(cj5*x3626);
IkReal x3632=((1.0)*sj5*x3627);
evalcond[0]=(((x3626*x3628))+(((-1.0)*r11*sj5*x3629))+((r12*x3627)));
evalcond[1]=(((r20*x3630))+(((-1.0)*r22*x3629))+(((-1.0)*r21*x3632)));
evalcond[2]=((((-1.0)*r01*x3632))+((r00*x3630))+(((-1.0)*r02*x3629)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x3632))+((x3627*x3628))+(((-1.0)*r12*x3629)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x3629))+((r22*x3627))+((r20*x3631)));
evalcond[5]=((((-1.0)*r01*sj5*x3629))+(((-1.0)*sj1*sj2))+((r02*x3627))+((cj1*cj2))+((r00*x3631)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3633=((1.0)*sj5);
CheckValue<IkReal> x3634 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x3633)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3634.valid){
continue;
}
CheckValue<IkReal> x3635=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3633))+(((-1.0)*cj5*r01)))),-1);
if(!x3635.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3634.value)+(((1.5707963267949)*(x3635.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3636=IKcos(j4);
IkReal x3637=IKsin(j4);
IkReal x3638=(cj5*r10);
IkReal x3639=((1.0)*x3636);
IkReal x3640=(cj5*x3637);
IkReal x3641=(cj5*x3636);
IkReal x3642=((1.0)*sj5*x3637);
evalcond[0]=(((r12*x3637))+((x3636*x3638))+(((-1.0)*r11*sj5*x3639)));
evalcond[1]=(((r20*x3640))+(((-1.0)*r22*x3639))+(((-1.0)*r21*x3642)));
evalcond[2]=(((r00*x3640))+(((-1.0)*r02*x3639))+(((-1.0)*r01*x3642)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x3639))+(((-1.0)*r11*x3642))+((x3637*x3638)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x3639))+((r20*x3641))+((cj1*sj2))+((r22*x3637)));
evalcond[5]=(((r02*x3637))+((r00*x3641))+(((-1.0)*sj1*sj2))+(((-1.0)*r01*sj5*x3639))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3643=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3643.valid){
continue;
}
CheckValue<IkReal> x3644 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3644.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3643.value)))+(x3644.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3645=IKcos(j4);
IkReal x3646=IKsin(j4);
IkReal x3647=(cj5*r10);
IkReal x3648=((1.0)*x3645);
IkReal x3649=(cj5*x3646);
IkReal x3650=(cj5*x3645);
IkReal x3651=((1.0)*sj5*x3646);
evalcond[0]=(((r12*x3646))+(((-1.0)*r11*sj5*x3648))+((x3645*x3647)));
evalcond[1]=((((-1.0)*r21*x3651))+((r20*x3649))+(((-1.0)*r22*x3648)));
evalcond[2]=(((r00*x3649))+(((-1.0)*r01*x3651))+(((-1.0)*r02*x3648)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x3648))+(((-1.0)*r11*x3651))+((x3646*x3647)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r20*x3650))+(((-1.0)*r21*sj5*x3648))+((r22*x3646)));
evalcond[5]=(((r00*x3650))+(((-1.0)*sj1*sj2))+(((-1.0)*r01*sj5*x3648))+((r02*x3646))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3652=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3652;
j4eval[1]=IKsign(x3652);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3653=((1.0)*sj5);
IkReal x3654=((((-1.0)*r20*x3653))+(((-1.0)*cj5*r21)));
j4eval[0]=x3654;
j4eval[1]=((IKabs(((((-1.0)*r01*x3653))+((cj5*r00)))))+(IKabs(r02)));
j4eval[2]=IKsign(x3654);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3655=(cj5*r10);
IkReal x3656=(cj2*sj1);
IkReal x3657=(cj1*sj2);
IkReal x3658=((1.0)*r12);
IkReal x3659=((1.0)*r11*sj5);
IkReal x3660=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3660;
j4eval[1]=((IKabs(((((-1.0)*x3657*x3658))+(((-1.0)*x3656*x3658)))))+(IKabs(((((-1.0)*x3657*x3659))+((x3655*x3656))+((x3655*x3657))+(((-1.0)*x3656*x3659))))));
j4eval[2]=IKsign(x3660);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3661=(cj5*r10);
IkReal x3662=(cj2*sj1);
IkReal x3663=(cj1*sj2);
IkReal x3664=((1.0)*r12);
IkReal x3665=((1.0)*r11*sj5);
CheckValue<IkReal> x3666 = IKatan2WithCheck(IkReal(((((-1.0)*x3662*x3665))+(((-1.0)*x3663*x3665))+((x3661*x3662))+((x3661*x3663)))),IkReal(((((-1.0)*x3662*x3664))+(((-1.0)*x3663*x3664)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3666.valid){
continue;
}
CheckValue<IkReal> x3667=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3667.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3666.value)+(((1.5707963267949)*(x3667.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3668=IKcos(j4);
IkReal x3669=IKsin(j4);
IkReal x3670=(cj5*r10);
IkReal x3671=((1.0)*x3668);
IkReal x3672=(cj5*x3669);
IkReal x3673=(cj5*x3668);
IkReal x3674=((1.0)*sj5*x3669);
evalcond[0]=(((r12*x3669))+((x3668*x3670))+(((-1.0)*r11*sj5*x3671)));
evalcond[1]=(((r20*x3672))+(((-1.0)*r21*x3674))+(((-1.0)*r22*x3671)));
evalcond[2]=(((r00*x3672))+(((-1.0)*r01*x3674))+(((-1.0)*r02*x3671)));
evalcond[3]=((1.0)+(((-1.0)*r11*x3674))+(((-1.0)*r12*x3671))+((x3669*x3670)));
evalcond[4]=(((r22*x3669))+((cj2*sj1))+((r20*x3673))+((cj1*sj2))+(((-1.0)*r21*sj5*x3671)));
evalcond[5]=(((r00*x3673))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r01*sj5*x3671))+((r02*x3669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3675=((1.0)*sj5);
CheckValue<IkReal> x3676 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x3675))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3676.valid){
continue;
}
CheckValue<IkReal> x3677=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3675))+(((-1.0)*cj5*r21)))),-1);
if(!x3677.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3676.value)+(((1.5707963267949)*(x3677.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3678=IKcos(j4);
IkReal x3679=IKsin(j4);
IkReal x3680=(cj5*r10);
IkReal x3681=((1.0)*x3678);
IkReal x3682=(cj5*x3679);
IkReal x3683=(cj5*x3678);
IkReal x3684=((1.0)*sj5*x3679);
evalcond[0]=(((r12*x3679))+(((-1.0)*r11*sj5*x3681))+((x3678*x3680)));
evalcond[1]=((((-1.0)*r22*x3681))+(((-1.0)*r21*x3684))+((r20*x3682)));
evalcond[2]=(((r00*x3682))+(((-1.0)*r01*x3684))+(((-1.0)*r02*x3681)));
evalcond[3]=((1.0)+(((-1.0)*r12*x3681))+(((-1.0)*r11*x3684))+((x3679*x3680)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r20*x3683))+((r22*x3679))+(((-1.0)*r21*sj5*x3681)));
evalcond[5]=((((-1.0)*r01*sj5*x3681))+((r00*x3683))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x3679)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3685=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3685.valid){
continue;
}
CheckValue<IkReal> x3686 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3686.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3685.value)))+(x3686.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3687=IKcos(j4);
IkReal x3688=IKsin(j4);
IkReal x3689=(cj5*r10);
IkReal x3690=((1.0)*x3687);
IkReal x3691=(cj5*x3688);
IkReal x3692=(cj5*x3687);
IkReal x3693=((1.0)*sj5*x3688);
evalcond[0]=((((-1.0)*r11*sj5*x3690))+((r12*x3688))+((x3687*x3689)));
evalcond[1]=(((r20*x3691))+(((-1.0)*r22*x3690))+(((-1.0)*r21*x3693)));
evalcond[2]=(((r00*x3691))+(((-1.0)*r02*x3690))+(((-1.0)*r01*x3693)));
evalcond[3]=((1.0)+(((-1.0)*r11*x3693))+(((-1.0)*r12*x3690))+((x3688*x3689)));
evalcond[4]=(((cj2*sj1))+((r20*x3692))+(((-1.0)*r21*sj5*x3690))+((cj1*sj2))+((r22*x3688)));
evalcond[5]=(((r00*x3692))+(((-1.0)*r01*sj5*x3690))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x3688)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3694=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x3694);
rxp0_2=(py*r00);
rxp1_0=(r21*x3694);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3695=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x3695);
rxp0_2=(py*r00);
rxp1_0=(r21*x3695);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3696=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x3696);
rxp0_2=(py*r00);
rxp1_0=(r21*x3696);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3699=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x3699.valid){
continue;
}
IkReal x3697=x3699.value;
IkReal x3698=(cj0*x3697);
cj4array[0]=((((-1.0)*cj1*cj2*x3698))+((sj1*sj2*x3698)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3700=IKsin(j4);
IkReal x3701=IKcos(j4);
IkReal x3702=(cj5*r20);
IkReal x3703=((1.0)*sj5);
evalcond[0]=(r12*x3700);
evalcond[1]=((((-1.0)*r12*x3701))+(((-1.0)*cj0)));
evalcond[2]=(((x3700*x3702))+(((-1.0)*r21*x3700*x3703)));
evalcond[3]=((((-1.0)*r01*x3700*x3703))+((cj5*r00*x3700)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*x3701*x3703))+((x3701*x3702)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3706=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x3706.valid){
continue;
}
IkReal x3704=x3706.value;
IkReal x3705=((1.0)*x3704);
cj4array[0]=((((-1.0)*cj1*sj2*x3705))+(((-1.0)*cj2*sj1*x3705)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3707=IKsin(j4);
IkReal x3708=IKcos(j4);
IkReal x3709=(cj5*r00);
IkReal x3710=((1.0)*cj0);
IkReal x3711=((1.0)*r01*sj5);
evalcond[0]=(r12*x3707);
evalcond[1]=((((-1.0)*x3710))+(((-1.0)*r12*x3708)));
evalcond[2]=((((-1.0)*r21*sj5*x3707))+((cj5*r20*x3707)));
evalcond[3]=((((-1.0)*x3707*x3711))+((x3707*x3709)));
evalcond[4]=((((-1.0)*sj1*sj2*x3710))+((x3708*x3709))+((cj0*cj1*cj2))+(((-1.0)*x3708*x3711)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3712=IKPowWithIntegerCheck(r12,-1);
if(!x3712.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x3712.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3713=IKsin(j4);
IkReal x3714=IKcos(j4);
IkReal x3715=((1.0)*sj5);
IkReal x3716=(cj5*x3714);
IkReal x3717=(cj5*x3713);
evalcond[0]=(r12*x3713);
evalcond[1]=(((r20*x3717))+(((-1.0)*r21*x3713*x3715)));
evalcond[2]=((((-1.0)*r01*x3713*x3715))+((r00*x3717)));
evalcond[3]=((((-1.0)*r21*x3714*x3715))+((cj2*sj1))+((r20*x3716))+((cj1*sj2)));
evalcond[4]=((((-1.0)*r01*x3714*x3715))+(((-1.0)*cj0*sj1*sj2))+((r00*x3716))+((cj0*cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3718=((1.0)*sj5);
CheckValue<IkReal> x3719=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3719.valid){
continue;
}
CheckValue<IkReal> x3720 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x3718))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj0*x3718)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3720.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3719.value)))+(x3720.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3721=IKsin(j4);
IkReal x3722=IKcos(j4);
IkReal x3723=(cj1*cj2);
IkReal x3724=(cj5*r10);
IkReal x3725=((1.0)*cj0);
IkReal x3726=(sj1*sj2);
IkReal x3727=((1.0)*x3722);
IkReal x3728=(cj5*x3721);
IkReal x3729=(cj5*x3722);
IkReal x3730=((1.0)*sj5*x3721);
evalcond[0]=((((-1.0)*r22*x3727))+((r20*x3728))+(((-1.0)*r21*x3730)));
evalcond[1]=(sj0+((r00*x3728))+(((-1.0)*r01*x3730))+(((-1.0)*r02*x3727)));
evalcond[2]=((((-1.0)*x3725))+(((-1.0)*r12*x3727))+(((-1.0)*r11*x3730))+((x3721*x3724)));
evalcond[3]=(((cj2*sj1))+((r20*x3729))+(((-1.0)*r21*sj5*x3727))+((cj1*sj2))+((r22*x3721)));
evalcond[4]=(((r00*x3729))+(((-1.0)*x3725*x3726))+(((-1.0)*r01*sj5*x3727))+((r02*x3721))+((cj0*x3723)));
evalcond[5]=((((-1.0)*sj0*x3726))+((sj0*x3723))+((r12*x3721))+((x3722*x3724))+(((-1.0)*r11*sj5*x3727)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3731=((1.0)*sj5);
CheckValue<IkReal> x3732=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3731))+(((-1.0)*cj5*r01)))),-1);
if(!x3732.valid){
continue;
}
CheckValue<IkReal> x3733 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x3731))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3733.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3732.value)))+(x3733.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3734=IKsin(j4);
IkReal x3735=IKcos(j4);
IkReal x3736=(cj1*cj2);
IkReal x3737=(cj5*r10);
IkReal x3738=((1.0)*cj0);
IkReal x3739=(sj1*sj2);
IkReal x3740=((1.0)*x3735);
IkReal x3741=(cj5*x3734);
IkReal x3742=(cj5*x3735);
IkReal x3743=((1.0)*sj5*x3734);
evalcond[0]=((((-1.0)*r22*x3740))+((r20*x3741))+(((-1.0)*r21*x3743)));
evalcond[1]=(((r00*x3741))+sj0+(((-1.0)*r01*x3743))+(((-1.0)*r02*x3740)));
evalcond[2]=((((-1.0)*x3738))+((x3734*x3737))+(((-1.0)*r12*x3740))+(((-1.0)*r11*x3743)));
evalcond[3]=(((cj2*sj1))+((r20*x3742))+((cj1*sj2))+(((-1.0)*r21*sj5*x3740))+((r22*x3734)));
evalcond[4]=(((r00*x3742))+((r02*x3734))+((cj0*x3736))+(((-1.0)*x3738*x3739))+(((-1.0)*r01*sj5*x3740)));
evalcond[5]=((((-1.0)*r11*sj5*x3740))+(((-1.0)*sj0*x3739))+((x3735*x3737))+((sj0*x3736))+((r12*x3734)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3744=((1.0)*sj5);
CheckValue<IkReal> x3745=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x3744)))),-1);
if(!x3745.valid){
continue;
}
CheckValue<IkReal> x3746 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x3744))+((cj5*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3746.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3745.value)))+(x3746.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3747=IKsin(j4);
IkReal x3748=IKcos(j4);
IkReal x3749=(cj1*cj2);
IkReal x3750=(cj5*r10);
IkReal x3751=((1.0)*cj0);
IkReal x3752=(sj1*sj2);
IkReal x3753=((1.0)*x3748);
IkReal x3754=(cj5*x3747);
IkReal x3755=(cj5*x3748);
IkReal x3756=((1.0)*sj5*x3747);
evalcond[0]=((((-1.0)*r22*x3753))+((r20*x3754))+(((-1.0)*r21*x3756)));
evalcond[1]=(((r00*x3754))+sj0+(((-1.0)*r01*x3756))+(((-1.0)*r02*x3753)));
evalcond[2]=((((-1.0)*x3751))+(((-1.0)*r12*x3753))+(((-1.0)*r11*x3756))+((x3747*x3750)));
evalcond[3]=(((cj2*sj1))+((r20*x3755))+(((-1.0)*r21*sj5*x3753))+((cj1*sj2))+((r22*x3747)));
evalcond[4]=(((r00*x3755))+((cj0*x3749))+(((-1.0)*x3751*x3752))+((r02*x3747))+(((-1.0)*r01*sj5*x3753)));
evalcond[5]=((((-1.0)*sj0*x3752))+(((-1.0)*r11*sj5*x3753))+((sj0*x3749))+((r12*x3747))+((x3748*x3750)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3757=((1.0)*cj5);
IkReal x3758=((1.0)*sj5);
CheckValue<IkReal> x3759 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x3757))+(((-1.0)*r10*x3758)))),IkReal(((((-1.0)*r00*x3758))+(((-1.0)*r01*x3757)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3759.valid){
continue;
}
CheckValue<IkReal> x3760=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x3760.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x3759.value)+(((1.5707963267949)*(x3760.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3761=IKcos(j0);
IkReal x3762=IKsin(j0);
IkReal x3763=((0.125)*sj5);
IkReal x3764=(cj5*r01);
IkReal x3765=(cj2*sj1);
IkReal x3766=(cj5*r11);
IkReal x3767=(cj1*sj2);
IkReal x3768=((0.35)*sj1);
IkReal x3769=((0.3)*x3762);
IkReal x3770=((1.0)*x3762);
IkReal x3771=(x3761*x3767);
evalcond[0]=(((r00*sj5))+(((-1.0)*x3771))+x3764+(((-1.0)*x3761*x3765)));
evalcond[1]=(((r10*sj5))+(((-1.0)*x3767*x3770))+(((-1.0)*x3765*x3770))+x3766);
evalcond[2]=((((-0.125)*x3762))+(((0.125)*x3764))+(((-1.0)*x3761*x3768))+(((-1.0)*px))+(((-0.3)*x3761*x3765))+(((-0.3)*x3771))+((r00*x3763)));
evalcond[3]=((((0.125)*x3766))+(((0.125)*x3761))+(((-1.0)*x3762*x3768))+(((-1.0)*x3767*x3769))+((r10*x3763))+(((-1.0)*x3765*x3769))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3772=((1.0)*sj5);
IkReal x3773=((((-1.0)*cj5*r11))+(((-1.0)*r10*x3772)));
j4eval[0]=x3773;
j4eval[1]=IKsign(x3773);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x3772))+((cj5*r20*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3774=((1.0)*sj5);
IkReal x3775=((((-1.0)*r00*x3774))+(((-1.0)*cj5*r01)));
j4eval[0]=x3775;
j4eval[1]=IKsign(x3775);
j4eval[2]=((IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x3774)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3776=((1.0)*sj5);
IkReal x3777=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3777;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*cj0*r01*x3776))+(((-1.0)*r11*sj0*x3776))))));
j4eval[2]=IKsign(x3777);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x3779 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3779)==0){
continue;
}
IkReal x3778=pow(x3779,-0.5);
CheckValue<IkReal> x3780 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3780.valid){
continue;
}
IkReal gconst96=((-1.0)*(x3780.value));
IkReal gconst97=((-1.0)*r21*x3778);
IkReal gconst98=(r20*x3778);
CheckValue<IkReal> x3781 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3781.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3781.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x3784 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3784.valid){
continue;
}
IkReal x3782=((-1.0)*(x3784.value));
IkReal x3783=x3778;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x3782;
IkReal gconst96=x3782;
IkReal gconst97=((-1.0)*r21*x3783);
IkReal gconst98=(r20*x3783);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x3787 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3787.valid){
continue;
}
IkReal x3785=((-1.0)*(x3787.value));
IkReal x3786=x3778;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x3785;
IkReal gconst96=x3785;
IkReal gconst97=((-1.0)*r21*x3786);
IkReal gconst98=(r20*x3786);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x3790 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3790.valid){
continue;
}
IkReal x3788=((-1.0)*(x3790.value));
IkReal x3789=x3778;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x3788;
IkReal gconst96=x3788;
IkReal gconst97=((-1.0)*r21*x3789);
IkReal gconst98=(r20*x3789);
IkReal x3791=((1.0)*(r22*r22));
CheckValue<IkReal> x3795=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x3791))),-1);
if(!x3795.valid){
continue;
}
IkReal x3792=x3795.value;
IkReal x3793=((1.0)*x3792);
IkReal x3794=((((-1.0)*x3791))+(((-1.0)*x3793*(r21*r21*r21*r21)))+(((-2.0)*x3792*(r20*r20)*(r21*r21)))+(((-1.0)*x3793*(r20*r20*r20*r20))));
j4eval[0]=x3794;
j4eval[1]=IKsign(x3794);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3796=(cj2*sj1);
IkReal x3797=(gconst98*r20);
IkReal x3798=(cj1*sj2);
IkReal x3799=((1.0)*gconst97*r21);
CheckValue<IkReal> x3800=IKPowWithIntegerCheck(IKsign(((((2.0)*gconst97*r21*x3797))+(((-1.0)*gconst97*r21*x3799))+(((-1.0)*(r22*r22)))+(((-1.0)*(x3797*x3797))))),-1);
if(!x3800.valid){
continue;
}
CheckValue<IkReal> x3801 = IKatan2WithCheck(IkReal((((r22*x3798))+((r22*x3796)))),IkReal((((x3796*x3797))+(((-1.0)*x3796*x3799))+(((-1.0)*x3798*x3799))+((x3797*x3798)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3801.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3800.value)))+(x3801.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3802=IKsin(j4);
IkReal x3803=IKcos(j4);
IkReal x3804=(gconst98*r00);
IkReal x3805=(cj1*cj2);
IkReal x3806=((1.0)*x3803);
IkReal x3807=(gconst98*x3802);
IkReal x3808=((1.0)*sj1*sj2);
IkReal x3809=(gconst98*x3803);
IkReal x3810=((1.0)*gconst97*x3802);
evalcond[0]=((((-1.0)*r21*x3810))+((r20*x3807))+(((-1.0)*r22*x3806)));
evalcond[1]=((((-1.0)*r01*x3810))+sj0+((x3802*x3804))+(((-1.0)*r02*x3806)));
evalcond[2]=(((r10*x3807))+(((-1.0)*r12*x3806))+(((-1.0)*r11*x3810))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst97*r21*x3806))+((r22*x3802))+((cj1*sj2))+((r20*x3809)));
evalcond[4]=(((r02*x3802))+(((-1.0)*gconst97*r01*x3806))+((x3803*x3804))+((cj0*x3805))+(((-1.0)*cj0*x3808)));
evalcond[5]=(((r12*x3802))+(((-1.0)*gconst97*r11*x3806))+((r10*x3809))+(((-1.0)*sj0*x3808))+((sj0*x3805)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3811=((1.0)*gconst97);
CheckValue<IkReal> x3812 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst98*r20))+(((-1.0)*cj0*r21*x3811)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3812.valid){
continue;
}
CheckValue<IkReal> x3813=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3811))+(((-1.0)*gconst98*r01)))),-1);
if(!x3813.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3812.value)+(((1.5707963267949)*(x3813.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3814=IKsin(j4);
IkReal x3815=IKcos(j4);
IkReal x3816=(gconst98*r00);
IkReal x3817=(cj1*cj2);
IkReal x3818=((1.0)*x3815);
IkReal x3819=(gconst98*x3814);
IkReal x3820=((1.0)*sj1*sj2);
IkReal x3821=(gconst98*x3815);
IkReal x3822=((1.0)*gconst97*x3814);
evalcond[0]=((((-1.0)*r22*x3818))+(((-1.0)*r21*x3822))+((r20*x3819)));
evalcond[1]=(sj0+(((-1.0)*r01*x3822))+(((-1.0)*r02*x3818))+((x3814*x3816)));
evalcond[2]=((((-1.0)*r12*x3818))+((r10*x3819))+(((-1.0)*cj0))+(((-1.0)*r11*x3822)));
evalcond[3]=((((-1.0)*gconst97*r21*x3818))+((cj2*sj1))+((cj1*sj2))+((r22*x3814))+((r20*x3821)));
evalcond[4]=(((x3815*x3816))+((r02*x3814))+(((-1.0)*gconst97*r01*x3818))+((cj0*x3817))+(((-1.0)*cj0*x3820)));
evalcond[5]=(((r12*x3814))+(((-1.0)*sj0*x3820))+((r10*x3821))+(((-1.0)*gconst97*r11*x3818))+((sj0*x3817)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3823=((1.0)*gconst97);
CheckValue<IkReal> x3824=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x3823))+(((-1.0)*gconst98*r11)))),-1);
if(!x3824.valid){
continue;
}
CheckValue<IkReal> x3825 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst98*r20*sj0))+(((-1.0)*r21*sj0*x3823)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3825.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3824.value)))+(x3825.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3826=IKsin(j4);
IkReal x3827=IKcos(j4);
IkReal x3828=(gconst98*r00);
IkReal x3829=(cj1*cj2);
IkReal x3830=((1.0)*x3827);
IkReal x3831=(gconst98*x3826);
IkReal x3832=((1.0)*sj1*sj2);
IkReal x3833=(gconst98*x3827);
IkReal x3834=((1.0)*gconst97*x3826);
evalcond[0]=((((-1.0)*r21*x3834))+((r20*x3831))+(((-1.0)*r22*x3830)));
evalcond[1]=(((x3826*x3828))+sj0+(((-1.0)*r01*x3834))+(((-1.0)*r02*x3830)));
evalcond[2]=((((-1.0)*r12*x3830))+(((-1.0)*r11*x3834))+((r10*x3831))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst97*r21*x3830))+((r20*x3833))+((r22*x3826)));
evalcond[4]=((((-1.0)*gconst97*r01*x3830))+(((-1.0)*cj0*x3832))+((r02*x3826))+((cj0*x3829))+((x3827*x3828)));
evalcond[5]=(((r12*x3826))+(((-1.0)*gconst97*r11*x3830))+((sj0*x3829))+((r10*x3833))+(((-1.0)*sj0*x3832)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3836 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3836)==0){
continue;
}
IkReal x3835=pow(x3836,-0.5);
CheckValue<IkReal> x3837 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3837.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x3837.value))));
IkReal gconst100=((1.0)*r21*x3835);
IkReal gconst101=((-1.0)*r20*x3835);
CheckValue<IkReal> x3838 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3838.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3838.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x3841 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3841.valid){
continue;
}
IkReal x3839=((1.0)*(x3841.value));
IkReal x3840=x3835;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3839)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3839)));
IkReal gconst100=((1.0)*r21*x3840);
IkReal gconst101=((-1.0)*r20*x3840);
IkReal x3842=r22*r22;
IkReal x3843=((1.0)*x3842);
CheckValue<IkReal> x3847=IKPowWithIntegerCheck(((-1.0)+x3842),-1);
if(!x3847.valid){
continue;
}
IkReal x3844=x3847.value;
if((((1.0)+(((-1.0)*x3843)))) < -0.00001)
continue;
IkReal x3845=IKsqrt(((1.0)+(((-1.0)*x3843))));
IkReal x3846=(sj0*x3844*x3845);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x3843*x3846))+x3846))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x3850 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3850.valid){
continue;
}
IkReal x3848=((1.0)*(x3850.value));
IkReal x3849=x3835;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3848)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3848)));
IkReal gconst100=((1.0)*r21*x3849);
IkReal gconst101=((-1.0)*r20*x3849);
IkReal x3851=r22*r22;
IkReal x3852=((1.0)*x3851);
CheckValue<IkReal> x3856=IKPowWithIntegerCheck(((-1.0)+x3851),-1);
if(!x3856.valid){
continue;
}
IkReal x3853=x3856.value;
if((((1.0)+(((-1.0)*x3852)))) < -0.00001)
continue;
IkReal x3854=IKsqrt(((1.0)+(((-1.0)*x3852))));
IkReal x3855=(cj0*x3853*x3854);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x3855+(((-1.0)*x3852*x3855))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x3859 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3859.valid){
continue;
}
IkReal x3857=((1.0)*(x3859.value));
IkReal x3858=x3835;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3857)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3857)));
IkReal gconst100=((1.0)*r21*x3858);
IkReal gconst101=((-1.0)*r20*x3858);
IkReal x3860=r22*r22;
IkReal x3861=(cj0*r02);
IkReal x3862=(r12*sj0);
CheckValue<IkReal> x3866=IKPowWithIntegerCheck(((-1.0)+x3860),-1);
if(!x3866.valid){
continue;
}
IkReal x3863=x3866.value;
if((((1.0)+(((-1.0)*x3860)))) < -0.00001)
continue;
IkReal x3864=IKsqrt(((1.0)+(((-1.0)*x3860))));
IkReal x3865=((1.0)*r22*x3863*x3864);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x3861*x3865))+(((-1.0)*x3862*x3865)))))+(IKabs((x3862+x3861))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3867=((1.0)*gconst100);
CheckValue<IkReal> x3868 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x3867))+((gconst101*r10*sj0))+((cj0*gconst101*r00))+(((-1.0)*r11*sj0*x3867)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3868.valid){
continue;
}
CheckValue<IkReal> x3869=IKPowWithIntegerCheck(IKsign((((gconst100*r20))+((gconst101*r21)))),-1);
if(!x3869.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3868.value)+(((1.5707963267949)*(x3869.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3870=IKsin(j4);
IkReal x3871=IKcos(j4);
IkReal x3872=(cj1*cj2);
IkReal x3873=(gconst101*r10);
IkReal x3874=((1.0)*cj0);
IkReal x3875=(sj1*sj2);
IkReal x3876=((1.0)*x3871);
IkReal x3877=(gconst101*x3871);
IkReal x3878=(gconst101*x3870);
IkReal x3879=((1.0)*gconst100*x3870);
evalcond[0]=(((r20*x3878))+(((-1.0)*r22*x3876))+(((-1.0)*r21*x3879)));
evalcond[1]=(sj0+((r00*x3878))+(((-1.0)*r02*x3876))+(((-1.0)*r01*x3879)));
evalcond[2]=((((-1.0)*r12*x3876))+(((-1.0)*r11*x3879))+((x3870*x3873))+(((-1.0)*x3874)));
evalcond[3]=(((cj2*sj1))+((r20*x3877))+((cj1*sj2))+(((-1.0)*gconst100*r21*x3876))+((r22*x3870)));
evalcond[4]=(((r00*x3877))+(((-1.0)*gconst100*r01*x3876))+(((-1.0)*x3874*x3875))+((r02*x3870))+((cj0*x3872)));
evalcond[5]=((((-1.0)*gconst100*r11*x3876))+((x3871*x3873))+((sj0*x3872))+(((-1.0)*sj0*x3875))+((r12*x3870)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3880=((1.0)*gconst100);
CheckValue<IkReal> x3881=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3880))+(((-1.0)*gconst101*r01)))),-1);
if(!x3881.valid){
continue;
}
CheckValue<IkReal> x3882 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x3880))+((cj0*gconst101*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3882.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3881.value)))+(x3882.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3883=IKsin(j4);
IkReal x3884=IKcos(j4);
IkReal x3885=(cj1*cj2);
IkReal x3886=(gconst101*r10);
IkReal x3887=((1.0)*cj0);
IkReal x3888=(sj1*sj2);
IkReal x3889=((1.0)*x3884);
IkReal x3890=(gconst101*x3884);
IkReal x3891=(gconst101*x3883);
IkReal x3892=((1.0)*gconst100*x3883);
evalcond[0]=(((r20*x3891))+(((-1.0)*r21*x3892))+(((-1.0)*r22*x3889)));
evalcond[1]=(sj0+(((-1.0)*r02*x3889))+((r00*x3891))+(((-1.0)*r01*x3892)));
evalcond[2]=((((-1.0)*x3887))+((x3883*x3886))+(((-1.0)*r11*x3892))+(((-1.0)*r12*x3889)));
evalcond[3]=(((cj2*sj1))+((r20*x3890))+((r22*x3883))+((cj1*sj2))+(((-1.0)*gconst100*r21*x3889)));
evalcond[4]=(((cj0*x3885))+((r02*x3883))+((r00*x3890))+(((-1.0)*gconst100*r01*x3889))+(((-1.0)*x3887*x3888)));
evalcond[5]=(((sj0*x3885))+(((-1.0)*sj0*x3888))+((r12*x3883))+(((-1.0)*gconst100*r11*x3889))+((x3884*x3886)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3893=((1.0)*gconst100);
CheckValue<IkReal> x3894=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x3893))+(((-1.0)*gconst101*r11)))),-1);
if(!x3894.valid){
continue;
}
CheckValue<IkReal> x3895 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x3893))+((gconst101*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3895.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3894.value)))+(x3895.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3896=IKsin(j4);
IkReal x3897=IKcos(j4);
IkReal x3898=(cj1*cj2);
IkReal x3899=(gconst101*r10);
IkReal x3900=((1.0)*cj0);
IkReal x3901=(sj1*sj2);
IkReal x3902=((1.0)*x3897);
IkReal x3903=(gconst101*x3897);
IkReal x3904=(gconst101*x3896);
IkReal x3905=((1.0)*gconst100*x3896);
evalcond[0]=((((-1.0)*r22*x3902))+((r20*x3904))+(((-1.0)*r21*x3905)));
evalcond[1]=(sj0+((r00*x3904))+(((-1.0)*r01*x3905))+(((-1.0)*r02*x3902)));
evalcond[2]=((((-1.0)*x3900))+(((-1.0)*r12*x3902))+((x3896*x3899))+(((-1.0)*r11*x3905)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst100*r21*x3902))+((r20*x3903))+((r22*x3896)));
evalcond[4]=((((-1.0)*x3900*x3901))+(((-1.0)*gconst100*r01*x3902))+((cj0*x3898))+((r00*x3903))+((r02*x3896)));
evalcond[5]=((((-1.0)*gconst100*r11*x3902))+((sj0*x3898))+((r12*x3896))+((x3897*x3899))+(((-1.0)*sj0*x3901)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3906=((-1.0)*r00);
IkReal x3908 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3908)==0){
continue;
}
IkReal x3907=pow(x3908,-0.5);
CheckValue<IkReal> x3909 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3906),IKFAST_ATAN2_MAGTHRESH);
if(!x3909.valid){
continue;
}
IkReal gconst102=((-1.0)*(x3909.value));
IkReal gconst103=(r01*x3907);
IkReal gconst104=(x3906*x3907);
CheckValue<IkReal> x3910 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3910.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3910.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3911=((-1.0)*r00);
IkReal x3912=x3907;
CheckValue<IkReal> x3914 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3911),IKFAST_ATAN2_MAGTHRESH);
if(!x3914.valid){
continue;
}
IkReal x3913=((-1.0)*(x3914.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst103;
cj5=gconst104;
j5=x3913;
IkReal gconst102=x3913;
IkReal gconst103=(r01*x3912);
IkReal gconst104=(x3911*x3912);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3915=((1.0)*gconst103);
CheckValue<IkReal> x3916 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x3915))+((gconst104*r10*sj0))+(((-1.0)*r11*sj0*x3915))+((cj0*gconst104*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3916.valid){
continue;
}
CheckValue<IkReal> x3917=IKPowWithIntegerCheck(IKsign((((gconst104*r21))+((gconst103*r20)))),-1);
if(!x3917.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3916.value)+(((1.5707963267949)*(x3917.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3918=IKsin(j4);
IkReal x3919=IKcos(j4);
IkReal x3920=(cj1*cj2);
IkReal x3921=((1.0)*x3919);
IkReal x3922=(gconst104*x3919);
IkReal x3923=(gconst104*x3918);
IkReal x3924=((1.0)*sj1*sj2);
IkReal x3925=((1.0)*gconst103*x3918);
evalcond[0]=((((-1.0)*r21*x3925))+(((-1.0)*r22*x3921))+((r20*x3923)));
evalcond[1]=(sj0+(((-1.0)*r02*x3921))+(((-1.0)*r01*x3925))+((r00*x3923)));
evalcond[2]=((((-1.0)*r11*x3925))+(((-1.0)*r12*x3921))+((r10*x3923))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst103*r21*x3921))+((r22*x3918))+((r20*x3922)));
evalcond[4]=(((cj0*x3920))+(((-1.0)*gconst103*r01*x3921))+(((-1.0)*cj0*x3924))+((r02*x3918))+((r00*x3922)));
evalcond[5]=((((-1.0)*sj0*x3924))+((r10*x3922))+((r12*x3918))+(((-1.0)*gconst103*r11*x3921))+((sj0*x3920)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3926=((1.0)*gconst103);
CheckValue<IkReal> x3927 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst104*r20*sj0))+(((-1.0)*r21*sj0*x3926)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3927.valid){
continue;
}
CheckValue<IkReal> x3928=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x3926))+(((-1.0)*gconst104*r11)))),-1);
if(!x3928.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3927.value)+(((1.5707963267949)*(x3928.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3929=IKsin(j4);
IkReal x3930=IKcos(j4);
IkReal x3931=(cj1*cj2);
IkReal x3932=((1.0)*x3930);
IkReal x3933=(gconst104*x3930);
IkReal x3934=(gconst104*x3929);
IkReal x3935=((1.0)*sj1*sj2);
IkReal x3936=((1.0)*gconst103*x3929);
evalcond[0]=(((r20*x3934))+(((-1.0)*r22*x3932))+(((-1.0)*r21*x3936)));
evalcond[1]=(((r00*x3934))+sj0+(((-1.0)*r01*x3936))+(((-1.0)*r02*x3932)));
evalcond[2]=((((-1.0)*r12*x3932))+((r10*x3934))+(((-1.0)*r11*x3936))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst103*r21*x3932))+((cj1*sj2))+((r20*x3933))+((r22*x3929)));
evalcond[4]=(((r00*x3933))+((cj0*x3931))+(((-1.0)*gconst103*r01*x3932))+((r02*x3929))+(((-1.0)*cj0*x3935)));
evalcond[5]=(((r12*x3929))+(((-1.0)*gconst103*r11*x3932))+((sj0*x3931))+((r10*x3933))+(((-1.0)*sj0*x3935)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3937=((-1.0)*r01);
IkReal x3939 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3939)==0){
continue;
}
IkReal x3938=pow(x3939,-0.5);
CheckValue<IkReal> x3940 = IKatan2WithCheck(IkReal(x3937),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3940.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x3940.value))));
IkReal gconst106=(x3937*x3938);
IkReal gconst107=((1.0)*r00*x3938);
CheckValue<IkReal> x3941 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3941.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3941.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3942=((-1.0)*r01);
CheckValue<IkReal> x3945 = IKatan2WithCheck(IkReal(x3942),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3945.valid){
continue;
}
IkReal x3943=((1.0)*(x3945.value));
IkReal x3944=x3938;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3943)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3943)));
IkReal gconst106=(x3942*x3944);
IkReal gconst107=((1.0)*r00*x3944);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x3946=((-1.0)*r01);
CheckValue<IkReal> x3949 = IKatan2WithCheck(IkReal(x3946),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3949.valid){
continue;
}
IkReal x3947=((1.0)*(x3949.value));
IkReal x3948=x3938;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3947)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3947)));
IkReal gconst106=(x3946*x3948);
IkReal gconst107=((1.0)*r00*x3948);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3950=((-1.0)*r01);
CheckValue<IkReal> x3953 = IKatan2WithCheck(IkReal(x3950),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3953.valid){
continue;
}
IkReal x3951=((1.0)*(x3953.value));
IkReal x3952=x3938;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3951)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3951)));
IkReal gconst106=(x3950*x3952);
IkReal gconst107=((1.0)*r00*x3952);
IkReal x3954=r02*r02;
IkReal x3955=(r12*sj0);
IkReal x3956=x3938;
IkReal x3957=(cj0*x3956);
j4eval[0]=((IKabs(((((-1.0)*x3957))+((r02*x3955*x3956))+((x3954*x3957)))))+(IKabs((x3955+((cj0*r02))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3958=((1.0)*gconst106);
CheckValue<IkReal> x3959 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x3958))+((gconst107*r10*sj0))+((cj0*gconst107*r00))+(((-1.0)*r11*sj0*x3958)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3959.valid){
continue;
}
CheckValue<IkReal> x3960=IKPowWithIntegerCheck(IKsign((((gconst107*r21))+((gconst106*r20)))),-1);
if(!x3960.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3959.value)+(((1.5707963267949)*(x3960.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3961=IKsin(j4);
IkReal x3962=IKcos(j4);
IkReal x3963=(gconst106*r01);
IkReal x3964=(cj1*cj2);
IkReal x3965=(gconst106*r21);
IkReal x3966=(gconst106*r11);
IkReal x3967=((1.0)*cj0);
IkReal x3968=(sj1*sj2);
IkReal x3969=((1.0)*x3962);
IkReal x3970=((1.0)*x3961);
IkReal x3971=(gconst107*x3961);
IkReal x3972=(gconst107*x3962);
evalcond[0]=((((-1.0)*x3965*x3970))+(((-1.0)*r22*x3969))+((r20*x3971)));
evalcond[1]=(sj0+(((-1.0)*r02*x3969))+((r00*x3971))+(((-1.0)*x3963*x3970)));
evalcond[2]=((((-1.0)*x3967))+((r10*x3971))+(((-1.0)*x3966*x3970))+(((-1.0)*r12*x3969)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x3965*x3969))+((r22*x3961))+((r20*x3972)));
evalcond[4]=((((-1.0)*x3963*x3969))+((r02*x3961))+((r00*x3972))+(((-1.0)*x3967*x3968))+((cj0*x3964)));
evalcond[5]=(((r10*x3972))+((r12*x3961))+(((-1.0)*x3966*x3969))+(((-1.0)*sj0*x3968))+((sj0*x3964)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3973=((1.0)*gconst106);
CheckValue<IkReal> x3974 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst107*r20))+(((-1.0)*cj0*r21*x3973)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3974.valid){
continue;
}
CheckValue<IkReal> x3975=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst107*r01))+(((-1.0)*r00*x3973)))),-1);
if(!x3975.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3974.value)+(((1.5707963267949)*(x3975.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3976=IKsin(j4);
IkReal x3977=IKcos(j4);
IkReal x3978=(gconst106*r01);
IkReal x3979=(cj1*cj2);
IkReal x3980=(gconst106*r21);
IkReal x3981=(gconst106*r11);
IkReal x3982=((1.0)*cj0);
IkReal x3983=(sj1*sj2);
IkReal x3984=((1.0)*x3977);
IkReal x3985=((1.0)*x3976);
IkReal x3986=(gconst107*x3976);
IkReal x3987=(gconst107*x3977);
evalcond[0]=((((-1.0)*r22*x3984))+((r20*x3986))+(((-1.0)*x3980*x3985)));
evalcond[1]=(sj0+((r00*x3986))+(((-1.0)*x3978*x3985))+(((-1.0)*r02*x3984)));
evalcond[2]=(((r10*x3986))+(((-1.0)*r12*x3984))+(((-1.0)*x3981*x3985))+(((-1.0)*x3982)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x3976))+((r20*x3987))+(((-1.0)*x3980*x3984)));
evalcond[4]=(((r02*x3976))+((r00*x3987))+(((-1.0)*x3982*x3983))+(((-1.0)*x3978*x3984))+((cj0*x3979)));
evalcond[5]=(((r10*x3987))+(((-1.0)*x3981*x3984))+(((-1.0)*sj0*x3983))+((r12*x3976))+((sj0*x3979)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3988=((1.0)*gconst106);
CheckValue<IkReal> x3989=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x3988))+(((-1.0)*gconst107*r11)))),-1);
if(!x3989.valid){
continue;
}
CheckValue<IkReal> x3990 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst107*r20*sj0))+(((-1.0)*r21*sj0*x3988)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3990.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3989.value)))+(x3990.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3991=IKsin(j4);
IkReal x3992=IKcos(j4);
IkReal x3993=(gconst106*r01);
IkReal x3994=(cj1*cj2);
IkReal x3995=(gconst106*r21);
IkReal x3996=(gconst106*r11);
IkReal x3997=((1.0)*cj0);
IkReal x3998=(sj1*sj2);
IkReal x3999=((1.0)*x3992);
IkReal x4000=((1.0)*x3991);
IkReal x4001=(gconst107*x3991);
IkReal x4002=(gconst107*x3992);
evalcond[0]=((((-1.0)*x3995*x4000))+(((-1.0)*r22*x3999))+((r20*x4001)));
evalcond[1]=(sj0+(((-1.0)*r02*x3999))+(((-1.0)*x3993*x4000))+((r00*x4001)));
evalcond[2]=((((-1.0)*x3997))+((r10*x4001))+(((-1.0)*r12*x3999))+(((-1.0)*x3996*x4000)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x3995*x3999))+((cj1*sj2))+((r22*x3991))+((r20*x4002)));
evalcond[4]=((((-1.0)*x3993*x3999))+(((-1.0)*x3997*x3998))+((r00*x4002))+((r02*x3991))+((cj0*x3994)));
evalcond[5]=((((-1.0)*sj0*x3998))+(((-1.0)*x3996*x3999))+((r10*x4002))+((r12*x3991))+((sj0*x3994)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4003=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4003;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x4003);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4004=((1.0)*sj5);
IkReal x4005=((((-1.0)*cj5*r11))+(((-1.0)*r10*x4004)));
j4eval[0]=x4005;
j4eval[1]=IKsign(x4005);
j4eval[2]=((IKabs((((cj5*r20))+(((-1.0)*r21*x4004)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4006=cj5*cj5;
IkReal x4007=r01*r01;
IkReal x4008=(r01*sj5);
IkReal x4009=(cj5*r00);
IkReal x4010=((((-1.0)*x4007))+(((-1.0)*(r02*r02)))+(((2.0)*x4008*x4009))+((x4006*x4007))+(((-1.0)*x4006*(r00*r00))));
j4eval[0]=x4010;
j4eval[1]=IKsign(x4010);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x4008))+x4009))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4011=cj5*cj5;
IkReal x4012=r01*r01;
IkReal x4013=(r01*sj5);
IkReal x4014=(cj5*r00);
CheckValue<IkReal> x4015 = IKatan2WithCheck(IkReal(((((-1.0)*x4013))+x4014)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4015.valid){
continue;
}
CheckValue<IkReal> x4016=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4012))+(((-1.0)*(r02*r02)))+(((-1.0)*x4011*(r00*r00)))+(((2.0)*x4013*x4014))+((x4011*x4012)))),-1);
if(!x4016.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4015.value)+(((1.5707963267949)*(x4016.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4017=IKcos(j4);
IkReal x4018=IKsin(j4);
IkReal x4019=(cj5*r10);
IkReal x4020=((1.0)*x4017);
IkReal x4021=(cj5*x4018);
IkReal x4022=(cj5*x4017);
IkReal x4023=((1.0)*sj5*x4018);
evalcond[0]=(((r02*x4018))+(((-1.0)*r01*sj5*x4020))+((r00*x4022)));
evalcond[1]=((((-1.0)*r22*x4020))+((r20*x4021))+(((-1.0)*r21*x4023)));
evalcond[2]=((((-1.0)*r11*x4023))+(((-1.0)*r12*x4020))+((x4018*x4019)));
evalcond[3]=((1.0)+(((-1.0)*r02*x4020))+((r00*x4021))+(((-1.0)*r01*x4023)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r20*x4022))+(((-1.0)*r21*sj5*x4020))+((r22*x4018)));
evalcond[5]=(((x4017*x4019))+(((-1.0)*sj1*sj2))+(((-1.0)*r11*sj5*x4020))+((r12*x4018))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4024=((1.0)*sj5);
CheckValue<IkReal> x4025 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x4024)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4025.valid){
continue;
}
CheckValue<IkReal> x4026=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x4024)))),-1);
if(!x4026.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4025.value)+(((1.5707963267949)*(x4026.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4027=IKcos(j4);
IkReal x4028=IKsin(j4);
IkReal x4029=(cj5*r10);
IkReal x4030=((1.0)*x4027);
IkReal x4031=(cj5*x4028);
IkReal x4032=(cj5*x4027);
IkReal x4033=((1.0)*sj5*x4028);
evalcond[0]=((((-1.0)*r01*sj5*x4030))+((r00*x4032))+((r02*x4028)));
evalcond[1]=((((-1.0)*r22*x4030))+(((-1.0)*r21*x4033))+((r20*x4031)));
evalcond[2]=((((-1.0)*r12*x4030))+((x4028*x4029))+(((-1.0)*r11*x4033)));
evalcond[3]=((1.0)+(((-1.0)*r01*x4033))+((r00*x4031))+(((-1.0)*r02*x4030)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r20*x4032))+(((-1.0)*r21*sj5*x4030))+((r22*x4028)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r11*sj5*x4030))+((r12*x4028))+((cj1*cj2))+((x4027*x4029)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4034 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4034.valid){
continue;
}
CheckValue<IkReal> x4035=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4035.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4034.value)+(((1.5707963267949)*(x4035.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4036=IKcos(j4);
IkReal x4037=IKsin(j4);
IkReal x4038=(cj5*r10);
IkReal x4039=((1.0)*x4036);
IkReal x4040=(cj5*x4037);
IkReal x4041=(cj5*x4036);
IkReal x4042=((1.0)*sj5*x4037);
evalcond[0]=((((-1.0)*r01*sj5*x4039))+((r02*x4037))+((r00*x4041)));
evalcond[1]=((((-1.0)*r21*x4042))+(((-1.0)*r22*x4039))+((r20*x4040)));
evalcond[2]=(((x4037*x4038))+(((-1.0)*r11*x4042))+(((-1.0)*r12*x4039)));
evalcond[3]=((1.0)+(((-1.0)*r01*x4042))+((r00*x4040))+(((-1.0)*r02*x4039)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x4039))+((r20*x4041))+((r22*x4037)));
evalcond[5]=((((-1.0)*sj1*sj2))+((x4036*x4038))+(((-1.0)*r11*sj5*x4039))+((cj1*cj2))+((r12*x4037)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4043=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4043;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x4043);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4044=((1.0)*sj5);
IkReal x4045=((((-1.0)*r20*x4044))+(((-1.0)*cj5*r21)));
j4eval[0]=x4045;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x4044))))));
j4eval[2]=IKsign(x4045);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4046=cj5*cj5;
IkReal x4047=r01*r01;
IkReal x4048=(cj5*r00);
IkReal x4049=(r01*sj5);
IkReal x4050=((((-2.0)*x4048*x4049))+x4047+(((-1.0)*x4046*x4047))+((x4046*(r00*r00)))+(r02*r02));
j4eval[0]=x4050;
j4eval[1]=((IKabs((x4048+(((-1.0)*x4049)))))+(IKabs(r02)));
j4eval[2]=IKsign(x4050);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4051=cj5*cj5;
IkReal x4052=r01*r01;
IkReal x4053=(r01*sj5);
IkReal x4054=(cj5*r00);
CheckValue<IkReal> x4055=IKPowWithIntegerCheck(IKsign(((((-2.0)*x4053*x4054))+(((-1.0)*x4051*x4052))+x4052+((x4051*(r00*r00)))+(r02*r02))),-1);
if(!x4055.valid){
continue;
}
CheckValue<IkReal> x4056 = IKatan2WithCheck(IkReal((x4054+(((-1.0)*x4053)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4056.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4055.value)))+(x4056.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4057=IKcos(j4);
IkReal x4058=IKsin(j4);
IkReal x4059=((1.0)*x4057);
IkReal x4060=(cj5*x4057);
IkReal x4061=(cj5*x4058);
IkReal x4062=((1.0)*sj5*x4058);
evalcond[0]=(((r02*x4058))+(((-1.0)*r01*sj5*x4059))+((r00*x4060)));
evalcond[1]=((((-1.0)*r21*x4062))+((r20*x4061))+(((-1.0)*r22*x4059)));
evalcond[2]=((((-1.0)*r12*x4059))+(((-1.0)*r11*x4062))+((r10*x4061)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x4062))+((r00*x4061))+(((-1.0)*r02*x4059)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r20*x4060))+(((-1.0)*r21*sj5*x4059))+((r22*x4058)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x4058))+((r10*x4060))+(((-1.0)*r11*sj5*x4059)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4063=((1.0)*sj5);
CheckValue<IkReal> x4064 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x4063)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4064.valid){
continue;
}
CheckValue<IkReal> x4065=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4063))+(((-1.0)*cj5*r21)))),-1);
if(!x4065.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4064.value)+(((1.5707963267949)*(x4065.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4066=IKcos(j4);
IkReal x4067=IKsin(j4);
IkReal x4068=((1.0)*x4066);
IkReal x4069=(cj5*x4066);
IkReal x4070=(cj5*x4067);
IkReal x4071=((1.0)*sj5*x4067);
evalcond[0]=(((r02*x4067))+(((-1.0)*r01*sj5*x4068))+((r00*x4069)));
evalcond[1]=(((r20*x4070))+(((-1.0)*r21*x4071))+(((-1.0)*r22*x4068)));
evalcond[2]=((((-1.0)*r12*x4068))+((r10*x4070))+(((-1.0)*r11*x4071)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x4071))+((r00*x4070))+(((-1.0)*r02*x4068)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r20*x4069))+(((-1.0)*r21*sj5*x4068))+((r22*x4067)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x4067))+((r10*x4069))+(((-1.0)*r11*sj5*x4068)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4072=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4072.valid){
continue;
}
CheckValue<IkReal> x4073 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4073.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4072.value)))+(x4073.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4074=IKcos(j4);
IkReal x4075=IKsin(j4);
IkReal x4076=((1.0)*x4074);
IkReal x4077=(cj5*x4074);
IkReal x4078=(cj5*x4075);
IkReal x4079=((1.0)*sj5*x4075);
evalcond[0]=(((r00*x4077))+((r02*x4075))+(((-1.0)*r01*sj5*x4076)));
evalcond[1]=(((r20*x4078))+(((-1.0)*r22*x4076))+(((-1.0)*r21*x4079)));
evalcond[2]=(((r10*x4078))+(((-1.0)*r12*x4076))+(((-1.0)*r11*x4079)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x4079))+(((-1.0)*r02*x4076))+((r00*x4078)));
evalcond[4]=(((cj2*sj1))+((r20*x4077))+(((-1.0)*r21*sj5*x4076))+((cj1*sj2))+((r22*x4075)));
evalcond[5]=(((r12*x4075))+((r10*x4077))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*sj5*x4076)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4080=((-1.0)*r10);
IkReal x4082 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4082)==0){
continue;
}
IkReal x4081=pow(x4082,-0.5);
CheckValue<IkReal> x4083 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4080),IKFAST_ATAN2_MAGTHRESH);
if(!x4083.valid){
continue;
}
IkReal gconst108=((-1.0)*(x4083.value));
IkReal gconst109=(r11*x4081);
IkReal gconst110=(x4080*x4081);
CheckValue<IkReal> x4084 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4084.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4084.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4085=((-1.0)*r10);
IkReal x4086=x4081;
CheckValue<IkReal> x4088 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4085),IKFAST_ATAN2_MAGTHRESH);
if(!x4088.valid){
continue;
}
IkReal x4087=((-1.0)*(x4088.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst109;
cj5=gconst110;
j5=x4087;
IkReal gconst108=x4087;
IkReal gconst109=(r11*x4086);
IkReal gconst110=(x4085*x4086);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4089=((1.0)*gconst109);
CheckValue<IkReal> x4090 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x4089))+((cj0*gconst110*r00))+((gconst110*r10*sj0))+(((-1.0)*r11*sj0*x4089)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4090.valid){
continue;
}
CheckValue<IkReal> x4091=IKPowWithIntegerCheck(IKsign((((gconst109*r20))+((gconst110*r21)))),-1);
if(!x4091.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4090.value)+(((1.5707963267949)*(x4091.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4092=IKsin(j4);
IkReal x4093=IKcos(j4);
IkReal x4094=(cj1*cj2);
IkReal x4095=(gconst110*r20);
IkReal x4096=(gconst109*r01);
IkReal x4097=(gconst109*r11);
IkReal x4098=(gconst109*r21);
IkReal x4099=((1.0)*x4093);
IkReal x4100=((1.0)*x4092);
IkReal x4101=(gconst110*x4093);
IkReal x4102=(gconst110*x4092);
IkReal x4103=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*x4098*x4100))+(((-1.0)*r22*x4099))+((x4092*x4095)));
evalcond[1]=((((-1.0)*x4096*x4100))+sj0+(((-1.0)*r02*x4099))+((r00*x4102)));
evalcond[2]=((((-1.0)*r12*x4099))+((r10*x4102))+(((-1.0)*cj0))+(((-1.0)*x4097*x4100)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x4098*x4099))+((r22*x4092))+((x4093*x4095)));
evalcond[4]=(((cj0*x4094))+((r02*x4092))+(((-1.0)*x4096*x4099))+(((-1.0)*cj0*x4103))+((r00*x4101)));
evalcond[5]=((((-1.0)*x4097*x4099))+((r12*x4092))+(((-1.0)*sj0*x4103))+((r10*x4101))+((sj0*x4094)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4104=((1.0)*gconst109);
CheckValue<IkReal> x4105 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst110*r20))+(((-1.0)*cj0*r21*x4104)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4105.valid){
continue;
}
CheckValue<IkReal> x4106=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4104))+(((-1.0)*gconst110*r01)))),-1);
if(!x4106.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4105.value)+(((1.5707963267949)*(x4106.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4107=IKsin(j4);
IkReal x4108=IKcos(j4);
IkReal x4109=(cj1*cj2);
IkReal x4110=(gconst110*r20);
IkReal x4111=(gconst109*r01);
IkReal x4112=(gconst109*r11);
IkReal x4113=(gconst109*r21);
IkReal x4114=((1.0)*x4108);
IkReal x4115=((1.0)*x4107);
IkReal x4116=(gconst110*x4108);
IkReal x4117=(gconst110*x4107);
IkReal x4118=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*r22*x4114))+(((-1.0)*x4113*x4115))+((x4107*x4110)));
evalcond[1]=(sj0+(((-1.0)*x4111*x4115))+(((-1.0)*r02*x4114))+((r00*x4117)));
evalcond[2]=((((-1.0)*r12*x4114))+(((-1.0)*x4112*x4115))+(((-1.0)*cj0))+((r10*x4117)));
evalcond[3]=(((cj2*sj1))+((x4108*x4110))+((r22*x4107))+((cj1*sj2))+(((-1.0)*x4113*x4114)));
evalcond[4]=((((-1.0)*x4111*x4114))+((cj0*x4109))+(((-1.0)*cj0*x4118))+((r02*x4107))+((r00*x4116)));
evalcond[5]=((((-1.0)*sj0*x4118))+(((-1.0)*x4112*x4114))+((r12*x4107))+((sj0*x4109))+((r10*x4116)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4119=((-1.0)*r11);
IkReal x4121 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4121)==0){
continue;
}
IkReal x4120=pow(x4121,-0.5);
CheckValue<IkReal> x4122 = IKatan2WithCheck(IkReal(x4119),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4122.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x4122.value))));
IkReal gconst112=(x4119*x4120);
IkReal gconst113=((1.0)*r10*x4120);
CheckValue<IkReal> x4123 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4123.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4123.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4124=((-1.0)*r11);
CheckValue<IkReal> x4127 = IKatan2WithCheck(IkReal(x4124),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4127.valid){
continue;
}
IkReal x4125=((1.0)*(x4127.value));
IkReal x4126=x4120;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4125)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4125)));
IkReal gconst112=(x4124*x4126);
IkReal gconst113=((1.0)*r10*x4126);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4128=((-1.0)*r11);
CheckValue<IkReal> x4131 = IKatan2WithCheck(IkReal(x4128),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4131.valid){
continue;
}
IkReal x4129=((1.0)*(x4131.value));
IkReal x4130=x4120;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4129)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4129)));
IkReal gconst112=(x4128*x4130);
IkReal gconst113=((1.0)*r10*x4130);
IkReal x4132=r12*r12;
IkReal x4133=(cj0*r02);
IkReal x4134=x4120;
IkReal x4135=(sj0*x4134);
j4eval[0]=((IKabs((((r12*x4133*x4134))+(((-1.0)*x4135))+((x4132*x4135)))))+(IKabs((x4133+((r12*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4136=((-1.0)*r11);
CheckValue<IkReal> x4139 = IKatan2WithCheck(IkReal(x4136),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4139.valid){
continue;
}
IkReal x4137=((1.0)*(x4139.value));
IkReal x4138=x4120;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4137)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4137)));
IkReal gconst112=(x4136*x4138);
IkReal gconst113=((1.0)*r10*x4138);
IkReal x4140=(cj1*sj2);
IkReal x4141=(cj2*sj1);
IkReal x4142=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x4148=IKPowWithIntegerCheck(x4142,-1);
if(!x4148.valid){
continue;
}
IkReal x4143=x4148.value;
IkReal x4144=((1.0)*x4143);
IkReal x4145=x4120;
IkReal x4146=(r12*r22*x4145);
IkReal x4147=((((-1.0)*x4144*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-1.0)*x4144*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x4143)));
j4eval[0]=x4147;
j4eval[1]=((IKabs((((x4141*x4146))+((x4140*x4146)))))+(IKabs((((r22*x4141))+((r22*x4140))))));
j4eval[2]=IKsign(x4147);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4149=(cj2*sj1);
IkReal x4150=(cj1*sj2);
IkReal x4151=(gconst113*r20);
IkReal x4152=((1.0)*gconst112*r21);
CheckValue<IkReal> x4153=IKPowWithIntegerCheck(IKsign(((((2.0)*gconst112*r21*x4151))+(((-1.0)*gconst112*r21*x4152))+(((-1.0)*(r22*r22)))+(((-1.0)*(x4151*x4151))))),-1);
if(!x4153.valid){
continue;
}
CheckValue<IkReal> x4154 = IKatan2WithCheck(IkReal((((r22*x4150))+((r22*x4149)))),IkReal((((x4150*x4151))+(((-1.0)*x4150*x4152))+((x4149*x4151))+(((-1.0)*x4149*x4152)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4154.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4153.value)))+(x4154.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4155=IKsin(j4);
IkReal x4156=IKcos(j4);
IkReal x4157=(gconst113*r10);
IkReal x4158=(cj1*cj2);
IkReal x4159=(gconst112*r01);
IkReal x4160=(gconst112*r11);
IkReal x4161=(gconst113*r20);
IkReal x4162=(gconst113*r00);
IkReal x4163=(gconst112*r21);
IkReal x4164=((1.0)*cj0);
IkReal x4165=(sj1*sj2);
IkReal x4166=((1.0)*x4156);
IkReal x4167=((1.0)*x4155);
evalcond[0]=((((-1.0)*x4163*x4167))+((x4155*x4161))+(((-1.0)*r22*x4166)));
evalcond[1]=((((-1.0)*r02*x4166))+sj0+(((-1.0)*x4159*x4167))+((x4155*x4162)));
evalcond[2]=(((x4155*x4157))+(((-1.0)*x4164))+(((-1.0)*x4160*x4167))+(((-1.0)*r12*x4166)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x4155))+((x4156*x4161))+(((-1.0)*x4163*x4166)));
evalcond[4]=(((r02*x4155))+(((-1.0)*x4159*x4166))+((x4156*x4162))+((cj0*x4158))+(((-1.0)*x4164*x4165)));
evalcond[5]=((((-1.0)*x4160*x4166))+((r12*x4155))+((sj0*x4158))+(((-1.0)*sj0*x4165))+((x4156*x4157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4168=((1.0)*gconst112);
CheckValue<IkReal> x4169 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst113*r10*sj0))+((cj0*gconst113*r00))+(((-1.0)*r11*sj0*x4168))+(((-1.0)*cj0*r01*x4168)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4169.valid){
continue;
}
CheckValue<IkReal> x4170=IKPowWithIntegerCheck(IKsign((((gconst112*r20))+((gconst113*r21)))),-1);
if(!x4170.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4169.value)+(((1.5707963267949)*(x4170.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4171=IKsin(j4);
IkReal x4172=IKcos(j4);
IkReal x4173=(gconst113*r10);
IkReal x4174=(cj1*cj2);
IkReal x4175=(gconst112*r01);
IkReal x4176=(gconst112*r11);
IkReal x4177=(gconst113*r20);
IkReal x4178=(gconst113*r00);
IkReal x4179=(gconst112*r21);
IkReal x4180=((1.0)*cj0);
IkReal x4181=(sj1*sj2);
IkReal x4182=((1.0)*x4172);
IkReal x4183=((1.0)*x4171);
evalcond[0]=(((x4171*x4177))+(((-1.0)*r22*x4182))+(((-1.0)*x4179*x4183)));
evalcond[1]=(sj0+(((-1.0)*x4175*x4183))+(((-1.0)*r02*x4182))+((x4171*x4178)));
evalcond[2]=((((-1.0)*r12*x4182))+(((-1.0)*x4180))+(((-1.0)*x4176*x4183))+((x4171*x4173)));
evalcond[3]=(((cj2*sj1))+((r22*x4171))+((cj1*sj2))+((x4172*x4177))+(((-1.0)*x4179*x4182)));
evalcond[4]=(((cj0*x4174))+(((-1.0)*x4180*x4181))+(((-1.0)*x4175*x4182))+((x4172*x4178))+((r02*x4171)));
evalcond[5]=(((r12*x4171))+((sj0*x4174))+(((-1.0)*x4176*x4182))+(((-1.0)*sj0*x4181))+((x4172*x4173)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4184=((1.0)*gconst112);
CheckValue<IkReal> x4185=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4184))+(((-1.0)*gconst113*r01)))),-1);
if(!x4185.valid){
continue;
}
CheckValue<IkReal> x4186 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x4184))+((cj0*gconst113*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4186.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4185.value)))+(x4186.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4187=IKsin(j4);
IkReal x4188=IKcos(j4);
IkReal x4189=(gconst113*r10);
IkReal x4190=(cj1*cj2);
IkReal x4191=(gconst112*r01);
IkReal x4192=(gconst112*r11);
IkReal x4193=(gconst113*r20);
IkReal x4194=(gconst113*r00);
IkReal x4195=(gconst112*r21);
IkReal x4196=((1.0)*cj0);
IkReal x4197=(sj1*sj2);
IkReal x4198=((1.0)*x4188);
IkReal x4199=((1.0)*x4187);
evalcond[0]=((((-1.0)*x4195*x4199))+((x4187*x4193))+(((-1.0)*r22*x4198)));
evalcond[1]=(sj0+((x4187*x4194))+(((-1.0)*r02*x4198))+(((-1.0)*x4191*x4199)));
evalcond[2]=((((-1.0)*r12*x4198))+(((-1.0)*x4196))+((x4187*x4189))+(((-1.0)*x4192*x4199)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x4195*x4198))+((cj1*sj2))+((r22*x4187))+((x4188*x4193)));
evalcond[4]=(((cj0*x4190))+((r02*x4187))+(((-1.0)*x4196*x4197))+((x4188*x4194))+(((-1.0)*x4191*x4198)));
evalcond[5]=(((r12*x4187))+((sj0*x4190))+(((-1.0)*sj0*x4197))+((x4188*x4189))+(((-1.0)*x4192*x4198)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4200=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4200;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x4200);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4201=((1.0)*sj5);
IkReal x4202=((((-1.0)*r00*x4201))+(((-1.0)*cj5*r01)));
j4eval[0]=x4202;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x4201))))));
j4eval[2]=IKsign(x4202);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4203=cj5*cj5;
IkReal x4204=r11*r11;
IkReal x4205=(r11*sj5);
IkReal x4206=(cj5*r10);
IkReal x4207=((r12*r12)+((x4203*(r10*r10)))+(((-1.0)*x4203*x4204))+(((-2.0)*x4205*x4206))+x4204);
j4eval[0]=x4207;
j4eval[1]=IKsign(x4207);
j4eval[2]=((IKabs(r12))+(IKabs((x4206+(((-1.0)*x4205))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4208=cj5*cj5;
IkReal x4209=r11*r11;
IkReal x4210=(cj5*r10);
IkReal x4211=(r11*sj5);
CheckValue<IkReal> x4212 = IKatan2WithCheck(IkReal((x4210+(((-1.0)*x4211)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4212.valid){
continue;
}
CheckValue<IkReal> x4213=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4208*x4209))+(r12*r12)+((x4208*(r10*r10)))+x4209+(((-2.0)*x4210*x4211)))),-1);
if(!x4213.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4212.value)+(((1.5707963267949)*(x4213.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4214=IKcos(j4);
IkReal x4215=IKsin(j4);
IkReal x4216=(cj5*r10);
IkReal x4217=((1.0)*x4214);
IkReal x4218=(cj5*x4215);
IkReal x4219=(cj5*x4214);
IkReal x4220=((1.0)*sj5*x4215);
evalcond[0]=(((r12*x4215))+((x4214*x4216))+(((-1.0)*r11*sj5*x4217)));
evalcond[1]=((((-1.0)*r22*x4217))+((r20*x4218))+(((-1.0)*r21*x4220)));
evalcond[2]=((((-1.0)*r02*x4217))+(((-1.0)*r01*x4220))+((r00*x4218)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x4220))+(((-1.0)*r12*x4217))+((x4215*x4216)));
evalcond[4]=(((cj2*sj1))+((r22*x4215))+((cj1*sj2))+((r20*x4219))+(((-1.0)*r21*sj5*x4217)));
evalcond[5]=(((r02*x4215))+(((-1.0)*sj1*sj2))+(((-1.0)*r01*sj5*x4217))+((cj1*cj2))+((r00*x4219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4221=((1.0)*sj5);
CheckValue<IkReal> x4222 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x4221)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4222.valid){
continue;
}
CheckValue<IkReal> x4223=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4221))+(((-1.0)*cj5*r01)))),-1);
if(!x4223.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4222.value)+(((1.5707963267949)*(x4223.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4224=IKcos(j4);
IkReal x4225=IKsin(j4);
IkReal x4226=(cj5*r10);
IkReal x4227=((1.0)*x4224);
IkReal x4228=(cj5*x4225);
IkReal x4229=(cj5*x4224);
IkReal x4230=((1.0)*sj5*x4225);
evalcond[0]=(((x4224*x4226))+(((-1.0)*r11*sj5*x4227))+((r12*x4225)));
evalcond[1]=((((-1.0)*r22*x4227))+(((-1.0)*r21*x4230))+((r20*x4228)));
evalcond[2]=(((r00*x4228))+(((-1.0)*r01*x4230))+(((-1.0)*r02*x4227)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x4230))+(((-1.0)*r12*x4227))+((x4225*x4226)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x4225))+(((-1.0)*r21*sj5*x4227))+((r20*x4229)));
evalcond[5]=(((r00*x4229))+(((-1.0)*sj1*sj2))+((r02*x4225))+(((-1.0)*r01*sj5*x4227))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4231=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4231.valid){
continue;
}
CheckValue<IkReal> x4232 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4232.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4231.value)))+(x4232.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4233=IKcos(j4);
IkReal x4234=IKsin(j4);
IkReal x4235=(cj5*r10);
IkReal x4236=((1.0)*x4233);
IkReal x4237=(cj5*x4234);
IkReal x4238=(cj5*x4233);
IkReal x4239=((1.0)*sj5*x4234);
evalcond[0]=(((r12*x4234))+(((-1.0)*r11*sj5*x4236))+((x4233*x4235)));
evalcond[1]=((((-1.0)*r22*x4236))+((r20*x4237))+(((-1.0)*r21*x4239)));
evalcond[2]=(((r00*x4237))+(((-1.0)*r01*x4239))+(((-1.0)*r02*x4236)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x4239))+(((-1.0)*r12*x4236))+((x4234*x4235)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x4234))+(((-1.0)*r21*sj5*x4236))+((r20*x4238)));
evalcond[5]=(((r00*x4238))+(((-1.0)*sj1*sj2))+((r02*x4234))+(((-1.0)*r01*sj5*x4236))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4240=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4240;
j4eval[1]=IKsign(x4240);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4241=((1.0)*sj5);
IkReal x4242=((((-1.0)*r20*x4241))+(((-1.0)*cj5*r21)));
j4eval[0]=x4242;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x4241))+((cj5*r00))))));
j4eval[2]=IKsign(x4242);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4243=(cj5*r10);
IkReal x4244=(cj2*sj1);
IkReal x4245=(cj1*sj2);
IkReal x4246=((1.0)*r12);
IkReal x4247=((1.0)*r11*sj5);
IkReal x4248=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4248;
j4eval[1]=((IKabs(((((-1.0)*x4244*x4247))+((x4243*x4244))+((x4243*x4245))+(((-1.0)*x4245*x4247)))))+(IKabs(((((-1.0)*x4244*x4246))+(((-1.0)*x4245*x4246))))));
j4eval[2]=IKsign(x4248);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4249=(cj5*r10);
IkReal x4250=(cj2*sj1);
IkReal x4251=(cj1*sj2);
IkReal x4252=((1.0)*r12);
IkReal x4253=((1.0)*r11*sj5);
CheckValue<IkReal> x4254=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4254.valid){
continue;
}
CheckValue<IkReal> x4255 = IKatan2WithCheck(IkReal(((((-1.0)*x4251*x4253))+((x4249*x4251))+((x4249*x4250))+(((-1.0)*x4250*x4253)))),IkReal(((((-1.0)*x4251*x4252))+(((-1.0)*x4250*x4252)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4255.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4254.value)))+(x4255.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4256=IKcos(j4);
IkReal x4257=IKsin(j4);
IkReal x4258=(cj5*r10);
IkReal x4259=((1.0)*x4256);
IkReal x4260=(cj5*x4257);
IkReal x4261=(cj5*x4256);
IkReal x4262=((1.0)*sj5*x4257);
evalcond[0]=(((r12*x4257))+(((-1.0)*r11*sj5*x4259))+((x4256*x4258)));
evalcond[1]=((((-1.0)*r21*x4262))+((r20*x4260))+(((-1.0)*r22*x4259)));
evalcond[2]=((((-1.0)*r01*x4262))+(((-1.0)*r02*x4259))+((r00*x4260)));
evalcond[3]=((1.0)+(((-1.0)*r11*x4262))+((x4257*x4258))+(((-1.0)*r12*x4259)));
evalcond[4]=(((cj2*sj1))+((r22*x4257))+((cj1*sj2))+(((-1.0)*r21*sj5*x4259))+((r20*x4261)));
evalcond[5]=(((r02*x4257))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r01*sj5*x4259))+((r00*x4261)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4263=((1.0)*sj5);
CheckValue<IkReal> x4264=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4263))+(((-1.0)*cj5*r21)))),-1);
if(!x4264.valid){
continue;
}
CheckValue<IkReal> x4265 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x4263))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4265.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4264.value)))+(x4265.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4266=IKcos(j4);
IkReal x4267=IKsin(j4);
IkReal x4268=(cj5*r10);
IkReal x4269=((1.0)*x4266);
IkReal x4270=(cj5*x4267);
IkReal x4271=(cj5*x4266);
IkReal x4272=((1.0)*sj5*x4267);
evalcond[0]=(((x4266*x4268))+((r12*x4267))+(((-1.0)*r11*sj5*x4269)));
evalcond[1]=((((-1.0)*r21*x4272))+(((-1.0)*r22*x4269))+((r20*x4270)));
evalcond[2]=(((r00*x4270))+(((-1.0)*r01*x4272))+(((-1.0)*r02*x4269)));
evalcond[3]=((1.0)+(((-1.0)*r11*x4272))+(((-1.0)*r12*x4269))+((x4267*x4268)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r20*x4271))+(((-1.0)*r21*sj5*x4269))+((r22*x4267)));
evalcond[5]=(((r00*x4271))+((r02*x4267))+(((-1.0)*r01*sj5*x4269))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4273=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4273.valid){
continue;
}
CheckValue<IkReal> x4274 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4274.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4273.value)))+(x4274.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4275=IKcos(j4);
IkReal x4276=IKsin(j4);
IkReal x4277=(cj5*r10);
IkReal x4278=((1.0)*x4275);
IkReal x4279=(cj5*x4276);
IkReal x4280=(cj5*x4275);
IkReal x4281=((1.0)*sj5*x4276);
evalcond[0]=(((r12*x4276))+((x4275*x4277))+(((-1.0)*r11*sj5*x4278)));
evalcond[1]=((((-1.0)*r21*x4281))+(((-1.0)*r22*x4278))+((r20*x4279)));
evalcond[2]=(((r00*x4279))+(((-1.0)*r01*x4281))+(((-1.0)*r02*x4278)));
evalcond[3]=((1.0)+(((-1.0)*r12*x4278))+(((-1.0)*r11*x4281))+((x4276*x4277)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x4278))+((r20*x4280))+((r22*x4276)));
evalcond[5]=(((r02*x4276))+(((-1.0)*r01*sj5*x4278))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r00*x4280)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4282=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x4282);
rxp0_2=(py*r00);
rxp1_0=(r21*x4282);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4283=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x4283);
rxp0_2=(py*r00);
rxp1_0=(r21*x4283);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4284=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x4284);
rxp0_2=(py*r00);
rxp1_0=(r21*x4284);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4287=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x4287.valid){
continue;
}
IkReal x4285=x4287.value;
IkReal x4286=(cj0*x4285);
cj4array[0]=((((-1.0)*cj1*cj2*x4286))+((sj1*sj2*x4286)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4288=IKsin(j4);
IkReal x4289=IKcos(j4);
IkReal x4290=(cj5*r20);
IkReal x4291=((1.0)*sj5);
evalcond[0]=(r12*x4288);
evalcond[1]=((((-1.0)*r12*x4289))+(((-1.0)*cj0)));
evalcond[2]=(((x4288*x4290))+(((-1.0)*r21*x4288*x4291)));
evalcond[3]=((((-1.0)*r01*x4288*x4291))+((cj5*r00*x4288)));
evalcond[4]=(((cj2*sj1))+((x4289*x4290))+((cj1*sj2))+(((-1.0)*r21*x4289*x4291)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4294=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x4294.valid){
continue;
}
IkReal x4292=x4294.value;
IkReal x4293=((1.0)*x4292);
cj4array[0]=((((-1.0)*cj1*sj2*x4293))+(((-1.0)*cj2*sj1*x4293)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4295=IKsin(j4);
IkReal x4296=IKcos(j4);
IkReal x4297=(cj5*r00);
IkReal x4298=((1.0)*cj0);
IkReal x4299=((1.0)*r01*sj5);
evalcond[0]=(r12*x4295);
evalcond[1]=((((-1.0)*r12*x4296))+(((-1.0)*x4298)));
evalcond[2]=(((cj5*r20*x4295))+(((-1.0)*r21*sj5*x4295)));
evalcond[3]=((((-1.0)*x4295*x4299))+((x4295*x4297)));
evalcond[4]=((((-1.0)*x4296*x4299))+(((-1.0)*sj1*sj2*x4298))+((cj0*cj1*cj2))+((x4296*x4297)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4300=IKPowWithIntegerCheck(r12,-1);
if(!x4300.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x4300.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4301=IKsin(j4);
IkReal x4302=IKcos(j4);
IkReal x4303=((1.0)*sj5);
IkReal x4304=(cj5*x4302);
IkReal x4305=(cj5*x4301);
evalcond[0]=(r12*x4301);
evalcond[1]=(((r20*x4305))+(((-1.0)*r21*x4301*x4303)));
evalcond[2]=((((-1.0)*r01*x4301*x4303))+((r00*x4305)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*x4302*x4303))+((r20*x4304)));
evalcond[4]=((((-1.0)*cj0*sj1*sj2))+(((-1.0)*r01*x4302*x4303))+((cj0*cj1*cj2))+((r00*x4304)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4306=((1.0)*sj5);
CheckValue<IkReal> x4307=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4307.valid){
continue;
}
CheckValue<IkReal> x4308 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r11*sj0*x4306))+((cj5*r10*sj0))+(((-1.0)*cj0*r01*x4306)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4308.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4307.value)))+(x4308.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4309=IKsin(j4);
IkReal x4310=IKcos(j4);
IkReal x4311=(cj1*cj2);
IkReal x4312=(cj5*r10);
IkReal x4313=((1.0)*cj0);
IkReal x4314=(sj1*sj2);
IkReal x4315=((1.0)*x4310);
IkReal x4316=(cj5*x4309);
IkReal x4317=(cj5*x4310);
IkReal x4318=((1.0)*sj5*x4309);
evalcond[0]=((((-1.0)*r22*x4315))+((r20*x4316))+(((-1.0)*r21*x4318)));
evalcond[1]=(sj0+((r00*x4316))+(((-1.0)*r02*x4315))+(((-1.0)*r01*x4318)));
evalcond[2]=((((-1.0)*x4313))+(((-1.0)*r11*x4318))+(((-1.0)*r12*x4315))+((x4309*x4312)));
evalcond[3]=(((cj2*sj1))+((r22*x4309))+(((-1.0)*r21*sj5*x4315))+((r20*x4317))+((cj1*sj2)));
evalcond[4]=(((r02*x4309))+((cj0*x4311))+((r00*x4317))+(((-1.0)*r01*sj5*x4315))+(((-1.0)*x4313*x4314)));
evalcond[5]=(((x4310*x4312))+((r12*x4309))+(((-1.0)*r11*sj5*x4315))+((sj0*x4311))+(((-1.0)*sj0*x4314)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4319=((1.0)*sj5);
CheckValue<IkReal> x4320=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r01))+(((-1.0)*r00*x4319)))),-1);
if(!x4320.valid){
continue;
}
CheckValue<IkReal> x4321 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x4319))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4321.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4320.value)))+(x4321.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4322=IKsin(j4);
IkReal x4323=IKcos(j4);
IkReal x4324=(cj1*cj2);
IkReal x4325=(cj5*r10);
IkReal x4326=((1.0)*cj0);
IkReal x4327=(sj1*sj2);
IkReal x4328=((1.0)*x4323);
IkReal x4329=(cj5*x4322);
IkReal x4330=(cj5*x4323);
IkReal x4331=((1.0)*sj5*x4322);
evalcond[0]=(((r20*x4329))+(((-1.0)*r21*x4331))+(((-1.0)*r22*x4328)));
evalcond[1]=(((r00*x4329))+(((-1.0)*r01*x4331))+sj0+(((-1.0)*r02*x4328)));
evalcond[2]=((((-1.0)*x4326))+(((-1.0)*r11*x4331))+(((-1.0)*r12*x4328))+((x4322*x4325)));
evalcond[3]=((((-1.0)*r21*sj5*x4328))+((cj2*sj1))+((r20*x4330))+((cj1*sj2))+((r22*x4322)));
evalcond[4]=(((cj0*x4324))+((r00*x4330))+(((-1.0)*r01*sj5*x4328))+(((-1.0)*x4326*x4327))+((r02*x4322)));
evalcond[5]=(((sj0*x4324))+((r12*x4322))+((x4323*x4325))+(((-1.0)*r11*sj5*x4328))+(((-1.0)*sj0*x4327)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4332=((1.0)*sj5);
CheckValue<IkReal> x4333=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x4332)))),-1);
if(!x4333.valid){
continue;
}
CheckValue<IkReal> x4334 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x4332)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4334.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4333.value)))+(x4334.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4335=IKsin(j4);
IkReal x4336=IKcos(j4);
IkReal x4337=(cj1*cj2);
IkReal x4338=(cj5*r10);
IkReal x4339=((1.0)*cj0);
IkReal x4340=(sj1*sj2);
IkReal x4341=((1.0)*x4336);
IkReal x4342=(cj5*x4335);
IkReal x4343=(cj5*x4336);
IkReal x4344=((1.0)*sj5*x4335);
evalcond[0]=((((-1.0)*r22*x4341))+(((-1.0)*r21*x4344))+((r20*x4342)));
evalcond[1]=(((r00*x4342))+(((-1.0)*r02*x4341))+sj0+(((-1.0)*r01*x4344)));
evalcond[2]=((((-1.0)*x4339))+(((-1.0)*r11*x4344))+(((-1.0)*r12*x4341))+((x4335*x4338)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x4335))+(((-1.0)*r21*sj5*x4341))+((r20*x4343)));
evalcond[4]=(((r00*x4343))+((cj0*x4337))+(((-1.0)*x4339*x4340))+(((-1.0)*r01*sj5*x4341))+((r02*x4335)));
evalcond[5]=((((-1.0)*r11*sj5*x4341))+((sj0*x4337))+((r12*x4335))+(((-1.0)*sj0*x4340))+((x4336*x4338)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x4345=((1.0)*cj5);
IkReal x4346=((1.0)*sj5);
IkReal x4347=((((-1.0)*sj1*sj2))+((cj1*cj2)));
j0eval[0]=x4347;
j0eval[1]=IKsign(x4347);
j0eval[2]=((IKabs(((((-1.0)*r01*x4345))+(((-1.0)*r00*x4346)))))+(IKabs(((((-1.0)*r11*x4345))+(((-1.0)*r10*x4346))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x4348=cj5*cj5;
IkReal x4349=r21*r21;
IkReal x4350=(r21*sj5);
IkReal x4351=(sj1*sj2);
IkReal x4352=(cj1*cj2);
IkReal x4353=(cj5*r20);
IkReal x4354=((((-2.0)*x4350*x4353))+(((-1.0)*x4348*x4349))+(r22*r22)+((x4348*(r20*r20)))+x4349);
j4eval[0]=x4354;
j4eval[1]=((IKabs((((r22*x4352))+(((-1.0)*r22*x4351)))))+(IKabs((((x4350*x4351))+(((-1.0)*x4351*x4353))+((x4352*x4353))+(((-1.0)*x4350*x4352))))));
j4eval[2]=IKsign(x4354);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x4355=((((-1.0)*sj1*sj2))+((cj1*cj2)));
j0eval[0]=x4355;
j0eval[1]=IKsign(x4355);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.84023668639053)*py))+(((-1.18343195266272)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.18343195266272)*py))+(((-2.84023668639053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.84023668639053)*py))+(((-1.18343195266272)*px))))+IKsqr(((((1.18343195266272)*py))+(((-2.84023668639053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.84023668639053)*py))+(((-1.18343195266272)*px))), ((((1.18343195266272)*py))+(((-2.84023668639053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4356=IKcos(j0);
IkReal x4357=IKsin(j0);
evalcond[0]=((((-0.3)*x4356))+(((-0.125)*x4357))+(((-1.0)*px)));
evalcond[1]=((((-0.3)*x4357))+(((-1.0)*py))+(((0.125)*x4356)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4358=((1.0)*sj5);
IkReal x4359=((((-1.0)*cj5*r11))+(((-1.0)*r10*x4358)));
j4eval[0]=x4359;
j4eval[1]=IKsign(x4359);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x4358))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4360=((1.0)*sj5);
IkReal x4361=((((-1.0)*r00*x4360))+(((-1.0)*cj5*r01)));
j4eval[0]=x4361;
j4eval[1]=IKsign(x4361);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x4360))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4362=cj5*cj5;
IkReal x4363=((1.0)*r21);
IkReal x4364=(cj5*sj5);
IkReal x4365=((1.0)*r20);
IkReal x4366=(((r00*r20*x4362))+((r01*r21))+(((-1.0)*r00*x4363*x4364))+(((-1.0)*r01*x4362*x4363))+(((-1.0)*r01*x4364*x4365))+((r02*r22)));
j4eval[0]=x4366;
j4eval[1]=IKsign(x4366);
j4eval[2]=((IKabs(((((-1.0)*cj5*sj0*x4365))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4367=cj5*cj5;
IkReal x4368=((1.0)*r21);
IkReal x4369=(cj5*sj5);
IkReal x4370=((1.0)*r20);
CheckValue<IkReal> x4371 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*cj5*sj0*x4370)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4371.valid){
continue;
}
CheckValue<IkReal> x4372=IKPowWithIntegerCheck(IKsign((((r00*r20*x4367))+((r01*r21))+(((-1.0)*r01*x4367*x4368))+(((-1.0)*r01*x4369*x4370))+((r02*r22))+(((-1.0)*r00*x4368*x4369)))),-1);
if(!x4372.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4371.value)+(((1.5707963267949)*(x4372.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4373=IKsin(j4);
IkReal x4374=IKcos(j4);
IkReal x4375=((1.0)*cj0);
IkReal x4376=(cj5*r00);
IkReal x4377=(r11*sj5);
IkReal x4378=(r01*sj5);
IkReal x4379=(cj5*r20);
IkReal x4380=(r21*sj5);
IkReal x4381=(cj5*r10);
IkReal x4382=((1.0)*x4374);
IkReal x4383=((1.0)*x4373);
evalcond[0]=((((-1.0)*x4380*x4383))+(((-1.0)*r22*x4382))+((x4373*x4379)));
evalcond[1]=((((-1.0)*x4379*x4382))+(((-1.0)*r22*x4383))+((x4374*x4380)));
evalcond[2]=((((-1.0)*r02*x4382))+sj0+(((-1.0)*x4378*x4383))+((x4373*x4376)));
evalcond[3]=((((-1.0)*r12*x4382))+(((-1.0)*x4375))+((x4373*x4381))+(((-1.0)*x4377*x4383)));
evalcond[4]=((((-1.0)*r02*x4383))+((x4374*x4378))+(((-1.0)*x4375))+(((-1.0)*x4376*x4382)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x4383))+(((-1.0)*x4381*x4382))+((x4374*x4377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4384=((1.0)*sj5);
CheckValue<IkReal> x4385 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x4384)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4385.valid){
continue;
}
CheckValue<IkReal> x4386=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4384))+(((-1.0)*cj5*r01)))),-1);
if(!x4386.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4385.value)+(((1.5707963267949)*(x4386.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4387=IKsin(j4);
IkReal x4388=IKcos(j4);
IkReal x4389=((1.0)*cj0);
IkReal x4390=(cj5*r00);
IkReal x4391=(r11*sj5);
IkReal x4392=(r01*sj5);
IkReal x4393=(cj5*r20);
IkReal x4394=(r21*sj5);
IkReal x4395=(cj5*r10);
IkReal x4396=((1.0)*x4388);
IkReal x4397=((1.0)*x4387);
evalcond[0]=((((-1.0)*r22*x4396))+((x4387*x4393))+(((-1.0)*x4394*x4397)));
evalcond[1]=(((x4388*x4394))+(((-1.0)*r22*x4397))+(((-1.0)*x4393*x4396)));
evalcond[2]=((((-1.0)*r02*x4396))+sj0+((x4387*x4390))+(((-1.0)*x4392*x4397)));
evalcond[3]=((((-1.0)*r12*x4396))+((x4387*x4395))+(((-1.0)*x4391*x4397))+(((-1.0)*x4389)));
evalcond[4]=((((-1.0)*r02*x4397))+((x4388*x4392))+(((-1.0)*x4390*x4396))+(((-1.0)*x4389)));
evalcond[5]=((((-1.0)*r12*x4397))+(((-1.0)*sj0))+((x4388*x4391))+(((-1.0)*x4395*x4396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4398=((1.0)*sj5);
CheckValue<IkReal> x4399 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x4398)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4399.valid){
continue;
}
CheckValue<IkReal> x4400=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x4398)))),-1);
if(!x4400.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4399.value)+(((1.5707963267949)*(x4400.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4401=IKsin(j4);
IkReal x4402=IKcos(j4);
IkReal x4403=((1.0)*cj0);
IkReal x4404=(cj5*r00);
IkReal x4405=(r11*sj5);
IkReal x4406=(r01*sj5);
IkReal x4407=(cj5*r20);
IkReal x4408=(r21*sj5);
IkReal x4409=(cj5*r10);
IkReal x4410=((1.0)*x4402);
IkReal x4411=((1.0)*x4401);
evalcond[0]=((((-1.0)*x4408*x4411))+((x4401*x4407))+(((-1.0)*r22*x4410)));
evalcond[1]=((((-1.0)*x4407*x4410))+((x4402*x4408))+(((-1.0)*r22*x4411)));
evalcond[2]=(sj0+((x4401*x4404))+(((-1.0)*r02*x4410))+(((-1.0)*x4406*x4411)));
evalcond[3]=(((x4401*x4409))+(((-1.0)*r12*x4410))+(((-1.0)*x4403))+(((-1.0)*x4405*x4411)));
evalcond[4]=((((-1.0)*r02*x4411))+((x4402*x4406))+(((-1.0)*x4403))+(((-1.0)*x4404*x4410)));
evalcond[5]=((((-1.0)*x4409*x4410))+(((-1.0)*sj0))+(((-1.0)*r12*x4411))+((x4402*x4405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.84023668639053)*py))+(((-1.18343195266272)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.18343195266272)*py))+(((2.84023668639053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.84023668639053)*py))+(((-1.18343195266272)*px))))+IKsqr(((((1.18343195266272)*py))+(((2.84023668639053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.84023668639053)*py))+(((-1.18343195266272)*px))), ((((1.18343195266272)*py))+(((2.84023668639053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4412=IKsin(j0);
IkReal x4413=IKcos(j0);
evalcond[0]=((((0.3)*x4413))+(((-1.0)*px))+(((-0.125)*x4412)));
evalcond[1]=((((0.125)*x4413))+(((0.3)*x4412))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4414=((1.0)*sj5);
IkReal x4415=((((-1.0)*cj5*r11))+(((-1.0)*r10*x4414)));
j4eval[0]=x4415;
j4eval[1]=IKsign(x4415);
j4eval[2]=((IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x4414)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4416=cj5*cj5;
IkReal x4417=((1.0)*r21);
IkReal x4418=(cj5*sj5);
IkReal x4419=(((r01*r21))+(((-1.0)*r00*x4417*x4418))+(((-1.0)*r01*x4416*x4417))+((r00*r20*x4416))+((r02*r22))+(((-1.0)*r01*r20*x4418)));
j4eval[0]=x4419;
j4eval[1]=IKsign(x4419);
j4eval[2]=((IKabs(((((-1.0)*cj0*sj5*x4417))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4420=cj5*cj5;
IkReal x4421=(cj5*r20);
IkReal x4422=((1.0)*sj5);
IkReal x4423=(r11*r21);
IkReal x4424=(x4423+(((-1.0)*x4420*x4423))+((r12*r22))+(((-1.0)*r11*x4421*x4422))+(((-1.0)*cj5*r10*r21*x4422))+((r10*r20*x4420)));
j4eval[0]=x4424;
j4eval[1]=IKsign(x4424);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x4422))+((sj0*x4421))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4425=cj5*cj5;
IkReal x4426=(cj5*r20);
IkReal x4427=((1.0)*sj5);
IkReal x4428=(r11*r21);
CheckValue<IkReal> x4429=IKPowWithIntegerCheck(IKsign((x4428+((r12*r22))+(((-1.0)*cj5*r10*r21*x4427))+((r10*r20*x4425))+(((-1.0)*r11*x4426*x4427))+(((-1.0)*x4425*x4428)))),-1);
if(!x4429.valid){
continue;
}
CheckValue<IkReal> x4430 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x4427))+((sj0*x4426)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4430.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4429.value)))+(x4430.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4431=IKsin(j4);
IkReal x4432=IKcos(j4);
IkReal x4433=(cj5*r00);
IkReal x4434=(r11*sj5);
IkReal x4435=(r01*sj5);
IkReal x4436=(cj5*r20);
IkReal x4437=(r21*sj5);
IkReal x4438=(cj5*r10);
IkReal x4439=((1.0)*x4432);
IkReal x4440=((1.0)*x4431);
evalcond[0]=((((-1.0)*r22*x4439))+((x4431*x4436))+(((-1.0)*x4437*x4440)));
evalcond[1]=(((x4432*x4437))+(((-1.0)*r22*x4440))+(((-1.0)*x4436*x4439)));
evalcond[2]=(sj0+(((-1.0)*r02*x4439))+(((-1.0)*x4435*x4440))+((x4431*x4433)));
evalcond[3]=(((x4432*x4435))+cj0+(((-1.0)*x4433*x4439))+(((-1.0)*r02*x4440)));
evalcond[4]=(((x4432*x4434))+sj0+(((-1.0)*r12*x4440))+(((-1.0)*x4438*x4439)));
evalcond[5]=((((-1.0)*r12*x4439))+((x4431*x4438))+(((-1.0)*cj0))+(((-1.0)*x4434*x4440)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4441=cj5*cj5;
IkReal x4442=((1.0)*r21);
IkReal x4443=(cj5*sj5);
CheckValue<IkReal> x4444=IKPowWithIntegerCheck(IKsign((((r00*r20*x4441))+(((-1.0)*r00*x4442*x4443))+((r01*r21))+(((-1.0)*r01*x4441*x4442))+(((-1.0)*r01*r20*x4443))+((r02*r22)))),-1);
if(!x4444.valid){
continue;
}
CheckValue<IkReal> x4445 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*sj5*x4442)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4445.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4444.value)))+(x4445.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4446=IKsin(j4);
IkReal x4447=IKcos(j4);
IkReal x4448=(cj5*r00);
IkReal x4449=(r11*sj5);
IkReal x4450=(r01*sj5);
IkReal x4451=(cj5*r20);
IkReal x4452=(r21*sj5);
IkReal x4453=(cj5*r10);
IkReal x4454=((1.0)*x4447);
IkReal x4455=((1.0)*x4446);
evalcond[0]=((((-1.0)*r22*x4454))+((x4446*x4451))+(((-1.0)*x4452*x4455)));
evalcond[1]=((((-1.0)*r22*x4455))+((x4447*x4452))+(((-1.0)*x4451*x4454)));
evalcond[2]=(((x4446*x4448))+sj0+(((-1.0)*r02*x4454))+(((-1.0)*x4450*x4455)));
evalcond[3]=(cj0+(((-1.0)*r02*x4455))+(((-1.0)*x4448*x4454))+((x4447*x4450)));
evalcond[4]=(sj0+(((-1.0)*r12*x4455))+((x4447*x4449))+(((-1.0)*x4453*x4454)));
evalcond[5]=((((-1.0)*r12*x4454))+(((-1.0)*x4449*x4455))+(((-1.0)*cj0))+((x4446*x4453)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4456=((1.0)*sj5);
CheckValue<IkReal> x4457=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x4456)))),-1);
if(!x4457.valid){
continue;
}
CheckValue<IkReal> x4458 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x4456))+((cj5*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4458.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4457.value)))+(x4458.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4459=IKsin(j4);
IkReal x4460=IKcos(j4);
IkReal x4461=(cj5*r00);
IkReal x4462=(r11*sj5);
IkReal x4463=(r01*sj5);
IkReal x4464=(cj5*r20);
IkReal x4465=(r21*sj5);
IkReal x4466=(cj5*r10);
IkReal x4467=((1.0)*x4460);
IkReal x4468=((1.0)*x4459);
evalcond[0]=((((-1.0)*x4465*x4468))+(((-1.0)*r22*x4467))+((x4459*x4464)));
evalcond[1]=((((-1.0)*x4464*x4467))+(((-1.0)*r22*x4468))+((x4460*x4465)));
evalcond[2]=(sj0+(((-1.0)*x4463*x4468))+(((-1.0)*r02*x4467))+((x4459*x4461)));
evalcond[3]=(cj0+(((-1.0)*r02*x4468))+((x4460*x4463))+(((-1.0)*x4461*x4467)));
evalcond[4]=(sj0+(((-1.0)*x4466*x4467))+(((-1.0)*r12*x4468))+((x4460*x4462)));
evalcond[5]=((((-1.0)*x4462*x4468))+((x4459*x4466))+(((-1.0)*r12*x4467))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.48359486447932)*py))+(((-0.285306704707561)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.285306704707561)*py))+(((-1.48359486447932)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.48359486447932)*py))+(((-0.285306704707561)*px))))+IKsqr(((((0.285306704707561)*py))+(((-1.48359486447932)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.48359486447932)*py))+(((-0.285306704707561)*px))), ((((0.285306704707561)*py))+(((-1.48359486447932)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4469=IKcos(j0);
IkReal x4470=IKsin(j0);
evalcond[0]=((((-0.65)*x4469))+(((-1.0)*px))+(((-0.125)*x4470)));
evalcond[1]=((((0.125)*x4469))+(((-0.65)*x4470))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4471=((1.0)*sj5);
IkReal x4472=((((-1.0)*cj5*r11))+(((-1.0)*r10*x4471)));
j4eval[0]=x4472;
j4eval[1]=IKsign(x4472);
j4eval[2]=((IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x4471)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4473=((1.0)*sj5);
IkReal x4474=((((-1.0)*r00*x4473))+(((-1.0)*cj5*r01)));
j4eval[0]=x4474;
j4eval[1]=IKsign(x4474);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x4473))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4475=cj5*cj5;
IkReal x4476=((1.0)*r21);
IkReal x4477=(cj5*sj5);
IkReal x4478=((1.0)*r20);
IkReal x4479=(((r00*r20*x4475))+((r01*r21))+(((-1.0)*r01*x4475*x4476))+(((-1.0)*r01*x4477*x4478))+((r02*r22))+(((-1.0)*r00*x4476*x4477)));
j4eval[0]=x4479;
j4eval[1]=IKsign(x4479);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*cj5*sj0*x4478))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4480=cj5*cj5;
IkReal x4481=((1.0)*r21);
IkReal x4482=(cj5*sj5);
IkReal x4483=((1.0)*r20);
CheckValue<IkReal> x4484=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4480*x4481))+(((-1.0)*r00*x4481*x4482))+((r01*r21))+(((-1.0)*r01*x4482*x4483))+((r02*r22))+((r00*r20*x4480)))),-1);
if(!x4484.valid){
continue;
}
CheckValue<IkReal> x4485 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*sj0*x4483))+((r21*sj0*sj5)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4485.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4484.value)))+(x4485.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4486=IKsin(j4);
IkReal x4487=IKcos(j4);
IkReal x4488=((1.0)*cj0);
IkReal x4489=(cj5*r00);
IkReal x4490=(r11*sj5);
IkReal x4491=(r01*sj5);
IkReal x4492=(cj5*r20);
IkReal x4493=(r21*sj5);
IkReal x4494=(cj5*r10);
IkReal x4495=((1.0)*x4487);
IkReal x4496=((1.0)*x4486);
evalcond[0]=(((x4486*x4492))+(((-1.0)*r22*x4495))+(((-1.0)*x4493*x4496)));
evalcond[1]=((((-1.0)*x4492*x4495))+((x4487*x4493))+(((-1.0)*r22*x4496)));
evalcond[2]=((((-1.0)*r02*x4495))+sj0+(((-1.0)*x4491*x4496))+((x4486*x4489)));
evalcond[3]=((((-1.0)*x4490*x4496))+((x4486*x4494))+(((-1.0)*x4488))+(((-1.0)*r12*x4495)));
evalcond[4]=((((-1.0)*x4489*x4495))+(((-1.0)*r02*x4496))+((x4487*x4491))+(((-1.0)*x4488)));
evalcond[5]=((((-1.0)*sj0))+((x4487*x4490))+(((-1.0)*x4494*x4495))+(((-1.0)*r12*x4496)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4497=((1.0)*sj5);
CheckValue<IkReal> x4498=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4497))+(((-1.0)*cj5*r01)))),-1);
if(!x4498.valid){
continue;
}
CheckValue<IkReal> x4499 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x4497))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4499.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4498.value)))+(x4499.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4500=IKsin(j4);
IkReal x4501=IKcos(j4);
IkReal x4502=((1.0)*cj0);
IkReal x4503=(cj5*r00);
IkReal x4504=(r11*sj5);
IkReal x4505=(r01*sj5);
IkReal x4506=(cj5*r20);
IkReal x4507=(r21*sj5);
IkReal x4508=(cj5*r10);
IkReal x4509=((1.0)*x4501);
IkReal x4510=((1.0)*x4500);
evalcond[0]=(((x4500*x4506))+(((-1.0)*r22*x4509))+(((-1.0)*x4507*x4510)));
evalcond[1]=((((-1.0)*x4506*x4509))+((x4501*x4507))+(((-1.0)*r22*x4510)));
evalcond[2]=(sj0+(((-1.0)*x4505*x4510))+((x4500*x4503))+(((-1.0)*r02*x4509)));
evalcond[3]=((((-1.0)*x4502))+(((-1.0)*x4504*x4510))+((x4500*x4508))+(((-1.0)*r12*x4509)));
evalcond[4]=((((-1.0)*r02*x4510))+(((-1.0)*x4502))+((x4501*x4505))+(((-1.0)*x4503*x4509)));
evalcond[5]=((((-1.0)*sj0))+((x4501*x4504))+(((-1.0)*x4508*x4509))+(((-1.0)*r12*x4510)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4511=((1.0)*sj5);
CheckValue<IkReal> x4512=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x4511)))),-1);
if(!x4512.valid){
continue;
}
CheckValue<IkReal> x4513 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x4511)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4513.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4512.value)))+(x4513.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4514=IKsin(j4);
IkReal x4515=IKcos(j4);
IkReal x4516=((1.0)*cj0);
IkReal x4517=(cj5*r00);
IkReal x4518=(r11*sj5);
IkReal x4519=(r01*sj5);
IkReal x4520=(cj5*r20);
IkReal x4521=(r21*sj5);
IkReal x4522=(cj5*r10);
IkReal x4523=((1.0)*x4515);
IkReal x4524=((1.0)*x4514);
evalcond[0]=((((-1.0)*x4521*x4524))+((x4514*x4520))+(((-1.0)*r22*x4523)));
evalcond[1]=((((-1.0)*x4520*x4523))+((x4515*x4521))+(((-1.0)*r22*x4524)));
evalcond[2]=(sj0+(((-1.0)*r02*x4523))+(((-1.0)*x4519*x4524))+((x4514*x4517)));
evalcond[3]=((((-1.0)*r12*x4523))+((x4514*x4522))+(((-1.0)*x4516))+(((-1.0)*x4518*x4524)));
evalcond[4]=((((-1.0)*x4517*x4523))+(((-1.0)*x4516))+(((-1.0)*r02*x4524))+((x4515*x4519)));
evalcond[5]=((((-1.0)*r12*x4524))+(((-1.0)*sj0))+(((-1.0)*x4522*x4523))+((x4515*x4518)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.75862068965517)*py))+(((-6.89655172413793)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.75862068965517)*px))+(((6.89655172413793)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.75862068965517)*py))+(((-6.89655172413793)*px))))+IKsqr(((((-2.75862068965517)*px))+(((6.89655172413793)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.75862068965517)*py))+(((-6.89655172413793)*px))), ((((-2.75862068965517)*px))+(((6.89655172413793)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4525=IKcos(j0);
IkReal x4526=IKsin(j0);
evalcond[0]=((((-0.05)*x4525))+(((-1.0)*px))+(((-0.125)*x4526)));
evalcond[1]=((((-0.05)*x4526))+(((0.125)*x4525))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4527=((1.0)*sj5);
IkReal x4528=((((-1.0)*cj5*r11))+(((-1.0)*r10*x4527)));
j4eval[0]=x4528;
j4eval[1]=IKsign(x4528);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x4527))+((cj5*r20*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4529=cj5*cj5;
IkReal x4530=((1.0)*r21);
IkReal x4531=(cj5*sj5);
IkReal x4532=((((-1.0)*r01*r20*x4531))+((r00*r20*x4529))+((r01*r21))+(((-1.0)*r01*x4529*x4530))+(((-1.0)*r00*x4530*x4531))+((r02*r22)));
j4eval[0]=x4532;
j4eval[1]=IKsign(x4532);
j4eval[2]=((IKabs(((((-1.0)*cj0*sj5*x4530))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4533=cj5*cj5;
IkReal x4534=(cj5*r20);
IkReal x4535=((1.0)*sj5);
IkReal x4536=(r11*r21);
IkReal x4537=((((-1.0)*r11*x4534*x4535))+x4536+((r12*r22))+(((-1.0)*x4533*x4536))+((r10*r20*x4533))+(((-1.0)*cj5*r10*r21*x4535)));
j4eval[0]=x4537;
j4eval[1]=IKsign(x4537);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x4535))+((sj0*x4534))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4538=cj5*cj5;
IkReal x4539=(cj5*r20);
IkReal x4540=((1.0)*sj5);
IkReal x4541=(r11*r21);
CheckValue<IkReal> x4542=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*r21*x4540))+x4541+((r12*r22))+(((-1.0)*r11*x4539*x4540))+((r10*r20*x4538))+(((-1.0)*x4538*x4541)))),-1);
if(!x4542.valid){
continue;
}
CheckValue<IkReal> x4543 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x4539))+(((-1.0)*r21*sj0*x4540)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4543.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4542.value)))+(x4543.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4544=IKsin(j4);
IkReal x4545=IKcos(j4);
IkReal x4546=(cj5*r00);
IkReal x4547=(r11*sj5);
IkReal x4548=(r01*sj5);
IkReal x4549=(cj5*r20);
IkReal x4550=(r21*sj5);
IkReal x4551=(cj5*r10);
IkReal x4552=((1.0)*x4545);
IkReal x4553=((1.0)*x4544);
evalcond[0]=((((-1.0)*x4550*x4553))+((x4544*x4549))+(((-1.0)*r22*x4552)));
evalcond[1]=((((-1.0)*x4549*x4552))+(((-1.0)*r22*x4553))+((x4545*x4550)));
evalcond[2]=(sj0+((x4544*x4546))+(((-1.0)*x4548*x4553))+(((-1.0)*r02*x4552)));
evalcond[3]=(cj0+((x4545*x4548))+(((-1.0)*r02*x4553))+(((-1.0)*x4546*x4552)));
evalcond[4]=((((-1.0)*r12*x4553))+sj0+((x4545*x4547))+(((-1.0)*x4551*x4552)));
evalcond[5]=((((-1.0)*r12*x4552))+(((-1.0)*x4547*x4553))+((x4544*x4551))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4554=cj5*cj5;
IkReal x4555=((1.0)*r21);
IkReal x4556=(cj5*sj5);
CheckValue<IkReal> x4557=IKPowWithIntegerCheck(IKsign((((r00*r20*x4554))+((r01*r21))+(((-1.0)*r01*r20*x4556))+(((-1.0)*r01*x4554*x4555))+(((-1.0)*r00*x4555*x4556))+((r02*r22)))),-1);
if(!x4557.valid){
continue;
}
CheckValue<IkReal> x4558 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x4555))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4558.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4557.value)))+(x4558.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4559=IKsin(j4);
IkReal x4560=IKcos(j4);
IkReal x4561=(cj5*r00);
IkReal x4562=(r11*sj5);
IkReal x4563=(r01*sj5);
IkReal x4564=(cj5*r20);
IkReal x4565=(r21*sj5);
IkReal x4566=(cj5*r10);
IkReal x4567=((1.0)*x4560);
IkReal x4568=((1.0)*x4559);
evalcond[0]=((((-1.0)*r22*x4567))+((x4559*x4564))+(((-1.0)*x4565*x4568)));
evalcond[1]=((((-1.0)*x4564*x4567))+(((-1.0)*r22*x4568))+((x4560*x4565)));
evalcond[2]=(sj0+(((-1.0)*r02*x4567))+(((-1.0)*x4563*x4568))+((x4559*x4561)));
evalcond[3]=(cj0+(((-1.0)*r02*x4568))+((x4560*x4563))+(((-1.0)*x4561*x4567)));
evalcond[4]=((((-1.0)*x4566*x4567))+sj0+(((-1.0)*r12*x4568))+((x4560*x4562)));
evalcond[5]=((((-1.0)*r12*x4567))+(((-1.0)*x4562*x4568))+(((-1.0)*cj0))+((x4559*x4566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4569=((1.0)*sj5);
CheckValue<IkReal> x4570=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x4569)))),-1);
if(!x4570.valid){
continue;
}
CheckValue<IkReal> x4571 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x4569))+((cj5*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4571.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4570.value)))+(x4571.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4572=IKsin(j4);
IkReal x4573=IKcos(j4);
IkReal x4574=(cj5*r00);
IkReal x4575=(r11*sj5);
IkReal x4576=(r01*sj5);
IkReal x4577=(cj5*r20);
IkReal x4578=(r21*sj5);
IkReal x4579=(cj5*r10);
IkReal x4580=((1.0)*x4573);
IkReal x4581=((1.0)*x4572);
evalcond[0]=((((-1.0)*r22*x4580))+(((-1.0)*x4578*x4581))+((x4572*x4577)));
evalcond[1]=((((-1.0)*r22*x4581))+((x4573*x4578))+(((-1.0)*x4577*x4580)));
evalcond[2]=(sj0+(((-1.0)*r02*x4580))+((x4572*x4574))+(((-1.0)*x4576*x4581)));
evalcond[3]=(cj0+(((-1.0)*r02*x4581))+((x4573*x4576))+(((-1.0)*x4574*x4580)));
evalcond[4]=((((-1.0)*x4579*x4580))+sj0+((x4573*x4575))+(((-1.0)*r12*x4581)));
evalcond[5]=((((-1.0)*x4575*x4581))+(((-1.0)*r12*x4580))+(((-1.0)*cj0))+((x4572*x4579)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.84023668639053)*py))+(((-1.18343195266272)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.18343195266272)*py))+(((2.84023668639053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.84023668639053)*py))+(((-1.18343195266272)*px))))+IKsqr(((((1.18343195266272)*py))+(((2.84023668639053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.84023668639053)*py))+(((-1.18343195266272)*px))), ((((1.18343195266272)*py))+(((2.84023668639053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4582=IKsin(j0);
IkReal x4583=IKcos(j0);
evalcond[0]=((((0.3)*x4583))+(((-0.125)*x4582))+(((-1.0)*px)));
evalcond[1]=((((0.3)*x4582))+(((0.125)*x4583))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4584=((1.0)*sj5);
IkReal x4585=((((-1.0)*cj5*r11))+(((-1.0)*r10*x4584)));
j4eval[0]=x4585;
j4eval[1]=IKsign(x4585);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x4584))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4586=cj5*cj5;
IkReal x4587=((1.0)*r21);
IkReal x4588=(cj5*sj5);
IkReal x4589=(((r00*r20*x4586))+(((-1.0)*r01*r20*x4588))+(((-1.0)*r00*x4587*x4588))+((r01*r21))+(((-1.0)*r01*x4586*x4587))+((r02*r22)));
j4eval[0]=x4589;
j4eval[1]=IKsign(x4589);
j4eval[2]=((IKabs(((((-1.0)*cj0*sj5*x4587))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4590=cj5*cj5;
IkReal x4591=(cj5*r20);
IkReal x4592=((1.0)*sj5);
IkReal x4593=(r11*r21);
IkReal x4594=(x4593+(((-1.0)*r11*x4591*x4592))+((r12*r22))+((r10*r20*x4590))+(((-1.0)*cj5*r10*r21*x4592))+(((-1.0)*x4590*x4593)));
j4eval[0]=x4594;
j4eval[1]=IKsign(x4594);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x4592))+((sj0*x4591))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4595=cj5*cj5;
IkReal x4596=(cj5*r20);
IkReal x4597=((1.0)*sj5);
IkReal x4598=(r11*r21);
CheckValue<IkReal> x4599=IKPowWithIntegerCheck(IKsign((x4598+((r12*r22))+(((-1.0)*r11*x4596*x4597))+((r10*r20*x4595))+(((-1.0)*cj5*r10*r21*x4597))+(((-1.0)*x4595*x4598)))),-1);
if(!x4599.valid){
continue;
}
CheckValue<IkReal> x4600 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x4597))+((sj0*x4596)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4600.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4599.value)))+(x4600.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4601=IKsin(j4);
IkReal x4602=IKcos(j4);
IkReal x4603=(cj5*r00);
IkReal x4604=(r11*sj5);
IkReal x4605=(r01*sj5);
IkReal x4606=(cj5*r20);
IkReal x4607=(r21*sj5);
IkReal x4608=(cj5*r10);
IkReal x4609=((1.0)*x4602);
IkReal x4610=((1.0)*x4601);
evalcond[0]=(((x4601*x4606))+(((-1.0)*x4607*x4610))+(((-1.0)*r22*x4609)));
evalcond[1]=((((-1.0)*x4606*x4609))+(((-1.0)*r22*x4610))+((x4602*x4607)));
evalcond[2]=(sj0+((x4601*x4603))+(((-1.0)*r02*x4609))+(((-1.0)*x4605*x4610)));
evalcond[3]=((((-1.0)*r02*x4610))+(((-1.0)*x4603*x4609))+cj0+((x4602*x4605)));
evalcond[4]=(sj0+(((-1.0)*r12*x4610))+((x4602*x4604))+(((-1.0)*x4608*x4609)));
evalcond[5]=(((x4601*x4608))+(((-1.0)*x4604*x4610))+(((-1.0)*r12*x4609))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4611=cj5*cj5;
IkReal x4612=((1.0)*r21);
IkReal x4613=(cj5*sj5);
CheckValue<IkReal> x4614 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x4612))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4614.valid){
continue;
}
CheckValue<IkReal> x4615=IKPowWithIntegerCheck(IKsign((((r00*r20*x4611))+((r01*r21))+(((-1.0)*r00*x4612*x4613))+(((-1.0)*r01*x4611*x4612))+(((-1.0)*r01*r20*x4613))+((r02*r22)))),-1);
if(!x4615.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4614.value)+(((1.5707963267949)*(x4615.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4616=IKsin(j4);
IkReal x4617=IKcos(j4);
IkReal x4618=(cj5*r00);
IkReal x4619=(r11*sj5);
IkReal x4620=(r01*sj5);
IkReal x4621=(cj5*r20);
IkReal x4622=(r21*sj5);
IkReal x4623=(cj5*r10);
IkReal x4624=((1.0)*x4617);
IkReal x4625=((1.0)*x4616);
evalcond[0]=((((-1.0)*r22*x4624))+((x4616*x4621))+(((-1.0)*x4622*x4625)));
evalcond[1]=((((-1.0)*x4621*x4624))+(((-1.0)*r22*x4625))+((x4617*x4622)));
evalcond[2]=(sj0+(((-1.0)*r02*x4624))+(((-1.0)*x4620*x4625))+((x4616*x4618)));
evalcond[3]=(cj0+(((-1.0)*r02*x4625))+(((-1.0)*x4618*x4624))+((x4617*x4620)));
evalcond[4]=(sj0+((x4617*x4619))+(((-1.0)*x4623*x4624))+(((-1.0)*r12*x4625)));
evalcond[5]=(((x4616*x4623))+(((-1.0)*x4619*x4625))+(((-1.0)*r12*x4624))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4626=((1.0)*sj5);
CheckValue<IkReal> x4627 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x4626))+((cj5*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4627.valid){
continue;
}
CheckValue<IkReal> x4628=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x4626)))),-1);
if(!x4628.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4627.value)+(((1.5707963267949)*(x4628.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4629=IKsin(j4);
IkReal x4630=IKcos(j4);
IkReal x4631=(cj5*r00);
IkReal x4632=(r11*sj5);
IkReal x4633=(r01*sj5);
IkReal x4634=(cj5*r20);
IkReal x4635=(r21*sj5);
IkReal x4636=(cj5*r10);
IkReal x4637=((1.0)*x4630);
IkReal x4638=((1.0)*x4629);
evalcond[0]=((((-1.0)*x4635*x4638))+((x4629*x4634))+(((-1.0)*r22*x4637)));
evalcond[1]=((((-1.0)*x4634*x4637))+((x4630*x4635))+(((-1.0)*r22*x4638)));
evalcond[2]=(sj0+(((-1.0)*r02*x4637))+((x4629*x4631))+(((-1.0)*x4633*x4638)));
evalcond[3]=(cj0+(((-1.0)*r02*x4638))+((x4630*x4633))+(((-1.0)*x4631*x4637)));
evalcond[4]=(sj0+((x4630*x4632))+(((-1.0)*x4636*x4637))+(((-1.0)*r12*x4638)));
evalcond[5]=(((x4629*x4636))+(((-1.0)*r12*x4637))+(((-1.0)*x4632*x4638))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.84023668639053)*py))+(((-1.18343195266272)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.18343195266272)*py))+(((-2.84023668639053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.84023668639053)*py))+(((-1.18343195266272)*px))))+IKsqr(((((1.18343195266272)*py))+(((-2.84023668639053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.84023668639053)*py))+(((-1.18343195266272)*px))), ((((1.18343195266272)*py))+(((-2.84023668639053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4639=IKcos(j0);
IkReal x4640=IKsin(j0);
evalcond[0]=((((-0.125)*x4640))+(((-1.0)*px))+(((-0.3)*x4639)));
evalcond[1]=((((-1.0)*py))+(((0.125)*x4639))+(((-0.3)*x4640)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4641=((1.0)*sj5);
IkReal x4642=((((-1.0)*cj5*r11))+(((-1.0)*r10*x4641)));
j4eval[0]=x4642;
j4eval[1]=IKsign(x4642);
j4eval[2]=((IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x4641)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4643=((1.0)*sj5);
IkReal x4644=((((-1.0)*r00*x4643))+(((-1.0)*cj5*r01)));
j4eval[0]=x4644;
j4eval[1]=IKsign(x4644);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x4643))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4645=cj5*cj5;
IkReal x4646=((1.0)*r21);
IkReal x4647=(cj5*sj5);
IkReal x4648=((1.0)*r20);
IkReal x4649=(((r01*r21))+(((-1.0)*r00*x4646*x4647))+(((-1.0)*r01*x4645*x4646))+(((-1.0)*r01*x4647*x4648))+((r02*r22))+((r00*r20*x4645)));
j4eval[0]=x4649;
j4eval[1]=IKsign(x4649);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*cj5*sj0*x4648))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4650=cj5*cj5;
IkReal x4651=((1.0)*r21);
IkReal x4652=(cj5*sj5);
IkReal x4653=((1.0)*r20);
CheckValue<IkReal> x4654=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4651*x4652))+(((-1.0)*r01*x4650*x4651))+((r01*r21))+(((-1.0)*r01*x4652*x4653))+((r00*r20*x4650))+((r02*r22)))),-1);
if(!x4654.valid){
continue;
}
CheckValue<IkReal> x4655 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*sj0*x4653))+((r21*sj0*sj5)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4655.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4654.value)))+(x4655.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4656=IKsin(j4);
IkReal x4657=IKcos(j4);
IkReal x4658=((1.0)*cj0);
IkReal x4659=(cj5*r00);
IkReal x4660=(r11*sj5);
IkReal x4661=(r01*sj5);
IkReal x4662=(cj5*r20);
IkReal x4663=(r21*sj5);
IkReal x4664=(cj5*r10);
IkReal x4665=((1.0)*x4657);
IkReal x4666=((1.0)*x4656);
evalcond[0]=((((-1.0)*x4663*x4666))+(((-1.0)*r22*x4665))+((x4656*x4662)));
evalcond[1]=((((-1.0)*x4662*x4665))+(((-1.0)*r22*x4666))+((x4657*x4663)));
evalcond[2]=((((-1.0)*x4661*x4666))+sj0+((x4656*x4659))+(((-1.0)*r02*x4665)));
evalcond[3]=((((-1.0)*x4658))+(((-1.0)*x4660*x4666))+(((-1.0)*r12*x4665))+((x4656*x4664)));
evalcond[4]=((((-1.0)*x4658))+(((-1.0)*x4659*x4665))+((x4657*x4661))+(((-1.0)*r02*x4666)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x4666))+(((-1.0)*x4664*x4665))+((x4657*x4660)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4667=((1.0)*sj5);
CheckValue<IkReal> x4668=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4667))+(((-1.0)*cj5*r01)))),-1);
if(!x4668.valid){
continue;
}
CheckValue<IkReal> x4669 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x4667)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4669.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4668.value)))+(x4669.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4670=IKsin(j4);
IkReal x4671=IKcos(j4);
IkReal x4672=((1.0)*cj0);
IkReal x4673=(cj5*r00);
IkReal x4674=(r11*sj5);
IkReal x4675=(r01*sj5);
IkReal x4676=(cj5*r20);
IkReal x4677=(r21*sj5);
IkReal x4678=(cj5*r10);
IkReal x4679=((1.0)*x4671);
IkReal x4680=((1.0)*x4670);
evalcond[0]=(((x4670*x4676))+(((-1.0)*r22*x4679))+(((-1.0)*x4677*x4680)));
evalcond[1]=((((-1.0)*x4676*x4679))+(((-1.0)*r22*x4680))+((x4671*x4677)));
evalcond[2]=((((-1.0)*r02*x4679))+sj0+((x4670*x4673))+(((-1.0)*x4675*x4680)));
evalcond[3]=(((x4670*x4678))+(((-1.0)*r12*x4679))+(((-1.0)*x4672))+(((-1.0)*x4674*x4680)));
evalcond[4]=((((-1.0)*x4672))+(((-1.0)*r02*x4680))+(((-1.0)*x4673*x4679))+((x4671*x4675)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x4678*x4679))+((x4671*x4674))+(((-1.0)*r12*x4680)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4681=((1.0)*sj5);
CheckValue<IkReal> x4682=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x4681)))),-1);
if(!x4682.valid){
continue;
}
CheckValue<IkReal> x4683 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x4681)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4683.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4682.value)))+(x4683.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4684=IKsin(j4);
IkReal x4685=IKcos(j4);
IkReal x4686=((1.0)*cj0);
IkReal x4687=(cj5*r00);
IkReal x4688=(r11*sj5);
IkReal x4689=(r01*sj5);
IkReal x4690=(cj5*r20);
IkReal x4691=(r21*sj5);
IkReal x4692=(cj5*r10);
IkReal x4693=((1.0)*x4685);
IkReal x4694=((1.0)*x4684);
evalcond[0]=((((-1.0)*r22*x4693))+(((-1.0)*x4691*x4694))+((x4684*x4690)));
evalcond[1]=((((-1.0)*x4690*x4693))+(((-1.0)*r22*x4694))+((x4685*x4691)));
evalcond[2]=(sj0+(((-1.0)*r02*x4693))+(((-1.0)*x4689*x4694))+((x4684*x4687)));
evalcond[3]=((((-1.0)*r12*x4693))+(((-1.0)*x4688*x4694))+(((-1.0)*x4686))+((x4684*x4692)));
evalcond[4]=((((-1.0)*x4687*x4693))+(((-1.0)*r02*x4694))+(((-1.0)*x4686))+((x4685*x4689)));
evalcond[5]=((((-1.0)*r12*x4694))+(((-1.0)*sj0))+(((-1.0)*x4692*x4693))+((x4685*x4688)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.48359486447932)*py))+(((-0.285306704707561)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.285306704707561)*py))+(((1.48359486447932)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.48359486447932)*py))+(((-0.285306704707561)*px))))+IKsqr(((((0.285306704707561)*py))+(((1.48359486447932)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.48359486447932)*py))+(((-0.285306704707561)*px))), ((((0.285306704707561)*py))+(((1.48359486447932)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4695=IKcos(j0);
IkReal x4696=IKsin(j0);
evalcond[0]=((((-0.125)*x4696))+(((-1.0)*px))+(((0.65)*x4695)));
evalcond[1]=((((0.125)*x4695))+(((-1.0)*py))+(((0.65)*x4696)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4697=((1.0)*sj5);
IkReal x4698=((((-1.0)*cj5*r11))+(((-1.0)*r10*x4697)));
j4eval[0]=x4698;
j4eval[1]=IKsign(x4698);
j4eval[2]=((IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x4697)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4699=cj5*cj5;
IkReal x4700=((1.0)*r21);
IkReal x4701=(cj5*sj5);
IkReal x4702=((((-1.0)*r00*x4700*x4701))+((r01*r21))+((r00*r20*x4699))+(((-1.0)*r01*r20*x4701))+(((-1.0)*r01*x4699*x4700))+((r02*r22)));
j4eval[0]=x4702;
j4eval[1]=IKsign(x4702);
j4eval[2]=((IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*sj5*x4700)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4703=cj5*cj5;
IkReal x4704=(cj5*r20);
IkReal x4705=((1.0)*sj5);
IkReal x4706=(r11*r21);
IkReal x4707=(((r10*r20*x4703))+((r12*r22))+x4706+(((-1.0)*cj5*r10*r21*x4705))+(((-1.0)*r11*x4704*x4705))+(((-1.0)*x4703*x4706)));
j4eval[0]=x4707;
j4eval[1]=IKsign(x4707);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((sj0*x4704))+(((-1.0)*r21*sj0*x4705))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4708=cj5*cj5;
IkReal x4709=(cj5*r20);
IkReal x4710=((1.0)*sj5);
IkReal x4711=(r11*r21);
CheckValue<IkReal> x4712=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4708*x4711))+((r10*r20*x4708))+((r12*r22))+(((-1.0)*cj5*r10*r21*x4710))+x4711+(((-1.0)*r11*x4709*x4710)))),-1);
if(!x4712.valid){
continue;
}
CheckValue<IkReal> x4713 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x4709))+(((-1.0)*r21*sj0*x4710)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4713.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4712.value)))+(x4713.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4714=IKsin(j4);
IkReal x4715=IKcos(j4);
IkReal x4716=(cj5*r00);
IkReal x4717=(r11*sj5);
IkReal x4718=(r01*sj5);
IkReal x4719=(cj5*r20);
IkReal x4720=(r21*sj5);
IkReal x4721=(cj5*r10);
IkReal x4722=((1.0)*x4715);
IkReal x4723=((1.0)*x4714);
evalcond[0]=(((x4714*x4719))+(((-1.0)*r22*x4722))+(((-1.0)*x4720*x4723)));
evalcond[1]=(((x4715*x4720))+(((-1.0)*x4719*x4722))+(((-1.0)*r22*x4723)));
evalcond[2]=(sj0+((x4714*x4716))+(((-1.0)*x4718*x4723))+(((-1.0)*r02*x4722)));
evalcond[3]=(cj0+(((-1.0)*x4716*x4722))+((x4715*x4718))+(((-1.0)*r02*x4723)));
evalcond[4]=(sj0+(((-1.0)*r12*x4723))+((x4715*x4717))+(((-1.0)*x4721*x4722)));
evalcond[5]=((((-1.0)*r12*x4722))+((x4714*x4721))+(((-1.0)*x4717*x4723))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4724=cj5*cj5;
IkReal x4725=((1.0)*r21);
IkReal x4726=(cj5*sj5);
CheckValue<IkReal> x4727=IKPowWithIntegerCheck(IKsign((((r00*r20*x4724))+(((-1.0)*r01*r20*x4726))+((r01*r21))+(((-1.0)*r01*x4724*x4725))+(((-1.0)*r00*x4725*x4726))+((r02*r22)))),-1);
if(!x4727.valid){
continue;
}
CheckValue<IkReal> x4728 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*sj5*x4725)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4728.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4727.value)))+(x4728.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4729=IKsin(j4);
IkReal x4730=IKcos(j4);
IkReal x4731=(cj5*r00);
IkReal x4732=(r11*sj5);
IkReal x4733=(r01*sj5);
IkReal x4734=(cj5*r20);
IkReal x4735=(r21*sj5);
IkReal x4736=(cj5*r10);
IkReal x4737=((1.0)*x4730);
IkReal x4738=((1.0)*x4729);
evalcond[0]=((((-1.0)*x4735*x4738))+((x4729*x4734))+(((-1.0)*r22*x4737)));
evalcond[1]=((((-1.0)*x4734*x4737))+((x4730*x4735))+(((-1.0)*r22*x4738)));
evalcond[2]=(sj0+((x4729*x4731))+(((-1.0)*x4733*x4738))+(((-1.0)*r02*x4737)));
evalcond[3]=(((x4730*x4733))+(((-1.0)*x4731*x4737))+cj0+(((-1.0)*r02*x4738)));
evalcond[4]=(sj0+((x4730*x4732))+(((-1.0)*x4736*x4737))+(((-1.0)*r12*x4738)));
evalcond[5]=((((-1.0)*r12*x4737))+((x4729*x4736))+(((-1.0)*x4732*x4738))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4739=((1.0)*sj5);
CheckValue<IkReal> x4740 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x4739)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4740.valid){
continue;
}
CheckValue<IkReal> x4741=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x4739)))),-1);
if(!x4741.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4740.value)+(((1.5707963267949)*(x4741.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4742=IKsin(j4);
IkReal x4743=IKcos(j4);
IkReal x4744=(cj5*r00);
IkReal x4745=(r11*sj5);
IkReal x4746=(r01*sj5);
IkReal x4747=(cj5*r20);
IkReal x4748=(r21*sj5);
IkReal x4749=(cj5*r10);
IkReal x4750=((1.0)*x4743);
IkReal x4751=((1.0)*x4742);
evalcond[0]=(((x4742*x4747))+(((-1.0)*x4748*x4751))+(((-1.0)*r22*x4750)));
evalcond[1]=((((-1.0)*r22*x4751))+((x4743*x4748))+(((-1.0)*x4747*x4750)));
evalcond[2]=(sj0+((x4742*x4744))+(((-1.0)*x4746*x4751))+(((-1.0)*r02*x4750)));
evalcond[3]=(cj0+(((-1.0)*x4744*x4750))+((x4743*x4746))+(((-1.0)*r02*x4751)));
evalcond[4]=((((-1.0)*x4749*x4750))+sj0+(((-1.0)*r12*x4751))+((x4743*x4745)));
evalcond[5]=(((x4742*x4749))+(((-1.0)*r12*x4750))+(((-1.0)*x4745*x4751))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.75862068965517)*py))+(((-6.89655172413793)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((6.89655172413793)*py))+(((2.75862068965517)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.75862068965517)*py))+(((-6.89655172413793)*px))))+IKsqr(((((6.89655172413793)*py))+(((2.75862068965517)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.75862068965517)*py))+(((-6.89655172413793)*px))), ((((6.89655172413793)*py))+(((2.75862068965517)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4752=IKsin(j0);
IkReal x4753=IKcos(j0);
evalcond[0]=((((-0.125)*x4752))+(((-1.0)*px))+(((0.05)*x4753)));
evalcond[1]=((((-1.0)*py))+(((0.125)*x4753))+(((0.05)*x4752)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4754=((1.0)*sj5);
IkReal x4755=((((-1.0)*cj5*r11))+(((-1.0)*r10*x4754)));
j4eval[0]=x4755;
j4eval[1]=IKsign(x4755);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x4754))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4756=((1.0)*sj5);
IkReal x4757=((((-1.0)*r00*x4756))+(((-1.0)*cj5*r01)));
j4eval[0]=x4757;
j4eval[1]=IKsign(x4757);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x4756))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4758=cj5*cj5;
IkReal x4759=((1.0)*r21);
IkReal x4760=(cj5*sj5);
IkReal x4761=((1.0)*r20);
IkReal x4762=((((-1.0)*r01*x4758*x4759))+(((-1.0)*r00*x4759*x4760))+((r01*r21))+((r00*r20*x4758))+((r02*r22))+(((-1.0)*r01*x4760*x4761)));
j4eval[0]=x4762;
j4eval[1]=IKsign(x4762);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*cj5*sj0*x4761))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4763=cj5*cj5;
IkReal x4764=((1.0)*r21);
IkReal x4765=(cj5*sj5);
IkReal x4766=((1.0)*r20);
CheckValue<IkReal> x4767=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4763*x4764))+(((-1.0)*r00*x4764*x4765))+((r01*r21))+(((-1.0)*r01*x4765*x4766))+((r02*r22))+((r00*r20*x4763)))),-1);
if(!x4767.valid){
continue;
}
CheckValue<IkReal> x4768 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*sj0*x4766))+((r21*sj0*sj5)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4768.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4767.value)))+(x4768.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4769=IKsin(j4);
IkReal x4770=IKcos(j4);
IkReal x4771=((1.0)*cj0);
IkReal x4772=(cj5*r00);
IkReal x4773=(r11*sj5);
IkReal x4774=(r01*sj5);
IkReal x4775=(cj5*r20);
IkReal x4776=(r21*sj5);
IkReal x4777=(cj5*r10);
IkReal x4778=((1.0)*x4770);
IkReal x4779=((1.0)*x4769);
evalcond[0]=((((-1.0)*x4776*x4779))+((x4769*x4775))+(((-1.0)*r22*x4778)));
evalcond[1]=((((-1.0)*r22*x4779))+(((-1.0)*x4775*x4778))+((x4770*x4776)));
evalcond[2]=(sj0+((x4769*x4772))+(((-1.0)*x4774*x4779))+(((-1.0)*r02*x4778)));
evalcond[3]=((((-1.0)*r12*x4778))+((x4769*x4777))+(((-1.0)*x4773*x4779))+(((-1.0)*x4771)));
evalcond[4]=((((-1.0)*x4771))+(((-1.0)*x4772*x4778))+(((-1.0)*r02*x4779))+((x4770*x4774)));
evalcond[5]=((((-1.0)*x4777*x4778))+(((-1.0)*sj0))+(((-1.0)*r12*x4779))+((x4770*x4773)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4780=((1.0)*sj5);
CheckValue<IkReal> x4781 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x4780))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4781.valid){
continue;
}
CheckValue<IkReal> x4782=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4780))+(((-1.0)*cj5*r01)))),-1);
if(!x4782.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4781.value)+(((1.5707963267949)*(x4782.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4783=IKsin(j4);
IkReal x4784=IKcos(j4);
IkReal x4785=((1.0)*cj0);
IkReal x4786=(cj5*r00);
IkReal x4787=(r11*sj5);
IkReal x4788=(r01*sj5);
IkReal x4789=(cj5*r20);
IkReal x4790=(r21*sj5);
IkReal x4791=(cj5*r10);
IkReal x4792=((1.0)*x4784);
IkReal x4793=((1.0)*x4783);
evalcond[0]=((((-1.0)*x4790*x4793))+(((-1.0)*r22*x4792))+((x4783*x4789)));
evalcond[1]=((((-1.0)*x4789*x4792))+(((-1.0)*r22*x4793))+((x4784*x4790)));
evalcond[2]=((((-1.0)*x4788*x4793))+sj0+(((-1.0)*r02*x4792))+((x4783*x4786)));
evalcond[3]=((((-1.0)*x4787*x4793))+((x4783*x4791))+(((-1.0)*r12*x4792))+(((-1.0)*x4785)));
evalcond[4]=((((-1.0)*r02*x4793))+(((-1.0)*x4786*x4792))+((x4784*x4788))+(((-1.0)*x4785)));
evalcond[5]=((((-1.0)*sj0))+((x4784*x4787))+(((-1.0)*r12*x4793))+(((-1.0)*x4791*x4792)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4794=((1.0)*sj5);
CheckValue<IkReal> x4795=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x4794)))),-1);
if(!x4795.valid){
continue;
}
CheckValue<IkReal> x4796 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x4794)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4796.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4795.value)))+(x4796.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4797=IKsin(j4);
IkReal x4798=IKcos(j4);
IkReal x4799=((1.0)*cj0);
IkReal x4800=(cj5*r00);
IkReal x4801=(r11*sj5);
IkReal x4802=(r01*sj5);
IkReal x4803=(cj5*r20);
IkReal x4804=(r21*sj5);
IkReal x4805=(cj5*r10);
IkReal x4806=((1.0)*x4798);
IkReal x4807=((1.0)*x4797);
evalcond[0]=((((-1.0)*r22*x4806))+((x4797*x4803))+(((-1.0)*x4804*x4807)));
evalcond[1]=((((-1.0)*r22*x4807))+(((-1.0)*x4803*x4806))+((x4798*x4804)));
evalcond[2]=(sj0+((x4797*x4800))+(((-1.0)*x4802*x4807))+(((-1.0)*r02*x4806)));
evalcond[3]=((((-1.0)*x4801*x4807))+((x4797*x4805))+(((-1.0)*x4799))+(((-1.0)*r12*x4806)));
evalcond[4]=((((-1.0)*x4800*x4806))+(((-1.0)*x4799))+(((-1.0)*r02*x4807))+((x4798*x4802)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x4805*x4806))+(((-1.0)*r12*x4807))+((x4798*x4801)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4808=((2.4)*sj1);
IkReal x4809=((2.4)*sj2);
IkReal x4810=(r00*sj5);
IkReal x4811=(cj5*r01);
IkReal x4812=(cj1*cj2);
IkReal x4813=((8.0)*px);
IkReal x4814=((2.8)*sj1);
IkReal x4815=(cj2*x4811);
IkReal x4816=(cj1*x4810);
IkReal x4817=((1.0)*sj1*sj2);
CheckValue<IkReal> x4818 = IKatan2WithCheck(IkReal(((((-1.0)*x4811*x4817))+((cj1*x4809*x4811))+((x4809*x4816))+((x4811*x4812))+((x4811*x4814))+((x4808*x4815))+((sj1*sj2*x4813))+((x4810*x4812))+((x4810*x4814))+(((-1.0)*x4810*x4817))+((cj2*x4808*x4810))+(((-1.0)*x4812*x4813)))),IkReal(((((-1.0)*x4811))+(((-1.0)*x4810)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4818.valid){
continue;
}
CheckValue<IkReal> x4819=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4817))+x4812)),-1);
if(!x4819.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4818.value)+(((1.5707963267949)*(x4819.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4820=IKcos(j0);
IkReal x4821=IKsin(j0);
IkReal x4822=((0.125)*sj5);
IkReal x4823=(cj5*r01);
IkReal x4824=((1.0)*sj2);
IkReal x4825=((0.3)*cj2);
IkReal x4826=(cj1*cj2);
IkReal x4827=(cj5*r11);
IkReal x4828=(sj1*x4821);
IkReal x4829=((0.3)*cj1*sj2);
IkReal x4830=(sj1*x4820);
evalcond[0]=(((r00*sj5))+((x4820*x4826))+(((-1.0)*x4824*x4830))+x4823);
evalcond[1]=(((r10*sj5))+((x4821*x4826))+(((-1.0)*x4824*x4828))+x4827);
evalcond[2]=((((-0.125)*x4821))+(((0.125)*x4823))+(((-0.35)*x4830))+(((-1.0)*x4825*x4830))+(((-1.0)*px))+(((-1.0)*x4820*x4829))+((r00*x4822)));
evalcond[3]=((((0.125)*x4827))+(((0.125)*x4820))+((r10*x4822))+(((-1.0)*x4825*x4828))+(((-0.35)*x4828))+(((-1.0)*py))+(((-1.0)*x4821*x4829)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x4831=((1.0)*sj5);
IkReal x4832=((((-1.0)*cj5*r11))+(((-1.0)*r10*x4831)));
j4eval[0]=x4832;
j4eval[1]=IKsign(x4832);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x4831))+((cj5*r20*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x4833=((1.0)*sj5);
IkReal x4834=((((-1.0)*r00*x4833))+(((-1.0)*cj5*r01)));
j4eval[0]=x4834;
j4eval[1]=IKsign(x4834);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x4833))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x4835=((1.0)*sj5);
IkReal x4836=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4836;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((cj0*cj5*r00))+(((-1.0)*cj0*r01*x4835))+((cj5*r10*sj0))+(((-1.0)*r11*sj0*x4835))))));
j4eval[2]=IKsign(x4836);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x4838 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4838)==0){
continue;
}
IkReal x4837=pow(x4838,-0.5);
CheckValue<IkReal> x4839 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x4839.valid){
continue;
}
IkReal gconst114=((-1.0)*(x4839.value));
IkReal gconst115=((-1.0)*r21*x4837);
IkReal gconst116=(r20*x4837);
CheckValue<IkReal> x4840 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x4840.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4840.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x4843 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x4843.valid){
continue;
}
IkReal x4841=((-1.0)*(x4843.value));
IkReal x4842=x4837;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x4841;
IkReal gconst114=x4841;
IkReal gconst115=((-1.0)*r21*x4842);
IkReal gconst116=(r20*x4842);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x4846 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x4846.valid){
continue;
}
IkReal x4844=((-1.0)*(x4846.value));
IkReal x4845=x4837;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x4844;
IkReal gconst114=x4844;
IkReal gconst115=((-1.0)*r21*x4845);
IkReal gconst116=(r20*x4845);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x4849 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x4849.valid){
continue;
}
IkReal x4847=((-1.0)*(x4849.value));
IkReal x4848=x4837;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x4847;
IkReal gconst114=x4847;
IkReal gconst115=((-1.0)*r21*x4848);
IkReal gconst116=(r20*x4848);
IkReal x4850=r22*r22;
CheckValue<IkReal> x4853=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x4850))),-1);
if(!x4853.valid){
continue;
}
IkReal x4851=x4853.value;
IkReal x4852=((((2.0)*x4851*(r20*r20)*(r21*r21)))+((x4851*(r20*r20*r20*r20)))+((x4851*(r21*r21*r21*r21)))+x4850);
j4eval[0]=x4852;
j4eval[1]=IKsign(x4852);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4854=(sj1*sj2);
IkReal x4855=(gconst116*r20);
IkReal x4856=(gconst115*r21);
IkReal x4857=(cj1*cj2);
CheckValue<IkReal> x4858 = IKatan2WithCheck(IkReal((((r22*x4857))+(((-1.0)*r22*x4854)))),IkReal((((x4855*x4857))+(((-1.0)*x4856*x4857))+(((-1.0)*x4854*x4855))+((x4854*x4856)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4858.valid){
continue;
}
CheckValue<IkReal> x4859=IKPowWithIntegerCheck(IKsign(((x4856*x4856)+(r22*r22)+(((-2.0)*x4855*x4856))+(x4855*x4855))),-1);
if(!x4859.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4858.value)+(((1.5707963267949)*(x4859.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4860=IKsin(j4);
IkReal x4861=IKcos(j4);
IkReal x4862=((1.0)*sj1);
IkReal x4863=((1.0)*x4861);
IkReal x4864=(gconst116*x4860);
IkReal x4865=(gconst115*x4861);
IkReal x4866=((1.0)*x4860);
IkReal x4867=((1.0)*cj1*sj2);
evalcond[0]=((((-1.0)*gconst115*r21*x4866))+(((-1.0)*r22*x4863))+((r20*x4864)));
evalcond[1]=(sj0+((r00*x4864))+(((-1.0)*r02*x4863))+(((-1.0)*gconst115*r01*x4866)));
evalcond[2]=((((-1.0)*r12*x4863))+((r10*x4864))+(((-1.0)*cj0))+(((-1.0)*gconst115*r11*x4866)));
evalcond[3]=((((-1.0)*r22*x4866))+((cj1*cj2))+(((-1.0)*sj2*x4862))+(((-1.0)*gconst116*r20*x4863))+((r21*x4865)));
evalcond[4]=(((r01*x4865))+(((-1.0)*gconst116*r00*x4863))+(((-1.0)*cj0*x4867))+(((-1.0)*r02*x4866))+(((-1.0)*cj0*cj2*x4862)));
evalcond[5]=(((r11*x4865))+(((-1.0)*sj0*x4867))+(((-1.0)*gconst116*r10*x4863))+(((-1.0)*r12*x4866))+(((-1.0)*cj2*sj0*x4862)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4868=((1.0)*gconst115);
CheckValue<IkReal> x4869=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4868))+(((-1.0)*gconst116*r01)))),-1);
if(!x4869.valid){
continue;
}
CheckValue<IkReal> x4870 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst116*r20))+(((-1.0)*cj0*r21*x4868)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4870.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4869.value)))+(x4870.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4871=IKsin(j4);
IkReal x4872=IKcos(j4);
IkReal x4873=((1.0)*sj1);
IkReal x4874=((1.0)*x4872);
IkReal x4875=(gconst116*x4871);
IkReal x4876=(gconst115*x4872);
IkReal x4877=((1.0)*x4871);
IkReal x4878=((1.0)*cj1*sj2);
evalcond[0]=(((r20*x4875))+(((-1.0)*r22*x4874))+(((-1.0)*gconst115*r21*x4877)));
evalcond[1]=((((-1.0)*gconst115*r01*x4877))+sj0+((r00*x4875))+(((-1.0)*r02*x4874)));
evalcond[2]=((((-1.0)*gconst115*r11*x4877))+((r10*x4875))+(((-1.0)*r12*x4874))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj2*x4873))+(((-1.0)*r22*x4877))+(((-1.0)*gconst116*r20*x4874))+((r21*x4876))+((cj1*cj2)));
evalcond[4]=((((-1.0)*cj0*cj2*x4873))+((r01*x4876))+(((-1.0)*cj0*x4878))+(((-1.0)*r02*x4877))+(((-1.0)*gconst116*r00*x4874)));
evalcond[5]=((((-1.0)*cj2*sj0*x4873))+(((-1.0)*r12*x4877))+(((-1.0)*gconst116*r10*x4874))+(((-1.0)*sj0*x4878))+((r11*x4876)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4879=((1.0)*gconst115);
CheckValue<IkReal> x4880 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x4879))+((gconst116*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4880.valid){
continue;
}
CheckValue<IkReal> x4881=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst116*r11))+(((-1.0)*r10*x4879)))),-1);
if(!x4881.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4880.value)+(((1.5707963267949)*(x4881.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4882=IKsin(j4);
IkReal x4883=IKcos(j4);
IkReal x4884=((1.0)*sj1);
IkReal x4885=((1.0)*x4883);
IkReal x4886=(gconst116*x4882);
IkReal x4887=(gconst115*x4883);
IkReal x4888=((1.0)*x4882);
IkReal x4889=((1.0)*cj1*sj2);
evalcond[0]=(((r20*x4886))+(((-1.0)*gconst115*r21*x4888))+(((-1.0)*r22*x4885)));
evalcond[1]=(sj0+(((-1.0)*r02*x4885))+((r00*x4886))+(((-1.0)*gconst115*r01*x4888)));
evalcond[2]=((((-1.0)*r12*x4885))+((r10*x4886))+(((-1.0)*gconst115*r11*x4888))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst116*r20*x4885))+(((-1.0)*sj2*x4884))+((cj1*cj2))+(((-1.0)*r22*x4888))+((r21*x4887)));
evalcond[4]=((((-1.0)*r02*x4888))+(((-1.0)*gconst116*r00*x4885))+(((-1.0)*cj0*cj2*x4884))+((r01*x4887))+(((-1.0)*cj0*x4889)));
evalcond[5]=(((r11*x4887))+(((-1.0)*gconst116*r10*x4885))+(((-1.0)*r12*x4888))+(((-1.0)*cj2*sj0*x4884))+(((-1.0)*sj0*x4889)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4891 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4891)==0){
continue;
}
IkReal x4890=pow(x4891,-0.5);
CheckValue<IkReal> x4892 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x4892.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x4892.value))));
IkReal gconst118=((1.0)*r21*x4890);
IkReal gconst119=((-1.0)*r20*x4890);
CheckValue<IkReal> x4893 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x4893.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4893.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x4896 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x4896.valid){
continue;
}
IkReal x4894=((1.0)*(x4896.value));
IkReal x4895=x4890;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x4894)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x4894)));
IkReal gconst118=((1.0)*r21*x4895);
IkReal gconst119=((-1.0)*r20*x4895);
IkReal x4897=r22*r22;
IkReal x4898=((1.0)*x4897);
CheckValue<IkReal> x4902=IKPowWithIntegerCheck(((-1.0)+x4897),-1);
if(!x4902.valid){
continue;
}
IkReal x4899=x4902.value;
if((((1.0)+(((-1.0)*x4898)))) < -0.00001)
continue;
IkReal x4900=IKsqrt(((1.0)+(((-1.0)*x4898))));
IkReal x4901=(sj0*x4899*x4900);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x4901+(((-1.0)*x4898*x4901))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x4905 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x4905.valid){
continue;
}
IkReal x4903=((1.0)*(x4905.value));
IkReal x4904=x4890;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x4903)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x4903)));
IkReal gconst118=((1.0)*r21*x4904);
IkReal gconst119=((-1.0)*r20*x4904);
IkReal x4906=r22*r22;
IkReal x4907=((1.0)*x4906);
CheckValue<IkReal> x4911=IKPowWithIntegerCheck(((-1.0)+x4906),-1);
if(!x4911.valid){
continue;
}
IkReal x4908=x4911.value;
if((((1.0)+(((-1.0)*x4907)))) < -0.00001)
continue;
IkReal x4909=IKsqrt(((1.0)+(((-1.0)*x4907))));
IkReal x4910=(cj0*x4908*x4909);
j4eval[0]=((IKabs((x4910+(((-1.0)*x4907*x4910)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x4914 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x4914.valid){
continue;
}
IkReal x4912=((1.0)*(x4914.value));
IkReal x4913=x4890;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x4912)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x4912)));
IkReal gconst118=((1.0)*r21*x4913);
IkReal gconst119=((-1.0)*r20*x4913);
IkReal x4915=r22*r22;
IkReal x4916=(cj0*r02);
IkReal x4917=(r12*sj0);
CheckValue<IkReal> x4921=IKPowWithIntegerCheck(((-1.0)+x4915),-1);
if(!x4921.valid){
continue;
}
IkReal x4918=x4921.value;
if((((1.0)+(((-1.0)*x4915)))) < -0.00001)
continue;
IkReal x4919=IKsqrt(((1.0)+(((-1.0)*x4915))));
IkReal x4920=((1.0)*r22*x4918*x4919);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x4916*x4920))+(((-1.0)*x4917*x4920)))))+(IKabs((x4916+x4917))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4922=((1.0)*gconst118);
CheckValue<IkReal> x4923=IKPowWithIntegerCheck(IKsign((((gconst119*r21))+((gconst118*r20)))),-1);
if(!x4923.valid){
continue;
}
CheckValue<IkReal> x4924 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst119*r10*sj0))+(((-1.0)*r11*sj0*x4922))+(((-1.0)*cj0*r01*x4922))+((cj0*gconst119*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4924.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4923.value)))+(x4924.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4925=IKsin(j4);
IkReal x4926=IKcos(j4);
IkReal x4927=(gconst118*r01);
IkReal x4928=((1.0)*sj1);
IkReal x4929=(gconst119*r10);
IkReal x4930=(gconst119*r20);
IkReal x4931=(gconst118*r21);
IkReal x4932=(gconst119*r00);
IkReal x4933=(gconst118*r11);
IkReal x4934=((1.0)*x4926);
IkReal x4935=((1.0)*x4925);
IkReal x4936=((1.0)*cj1*sj2);
evalcond[0]=((((-1.0)*x4931*x4935))+((x4925*x4930))+(((-1.0)*r22*x4934)));
evalcond[1]=(sj0+(((-1.0)*r02*x4934))+((x4925*x4932))+(((-1.0)*x4927*x4935)));
evalcond[2]=((((-1.0)*x4933*x4935))+((x4925*x4929))+(((-1.0)*r12*x4934))+(((-1.0)*cj0)));
evalcond[3]=(((x4926*x4931))+(((-1.0)*x4930*x4934))+((cj1*cj2))+(((-1.0)*r22*x4935))+(((-1.0)*sj2*x4928)));
evalcond[4]=((((-1.0)*r02*x4935))+(((-1.0)*cj0*x4936))+((x4926*x4927))+(((-1.0)*x4932*x4934))+(((-1.0)*cj0*cj2*x4928)));
evalcond[5]=(((x4926*x4933))+(((-1.0)*sj0*x4936))+(((-1.0)*cj2*sj0*x4928))+(((-1.0)*r12*x4935))+(((-1.0)*x4929*x4934)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4937=((1.0)*gconst118);
CheckValue<IkReal> x4938=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4937))+(((-1.0)*gconst119*r01)))),-1);
if(!x4938.valid){
continue;
}
CheckValue<IkReal> x4939 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x4937))+((cj0*gconst119*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4939.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4938.value)))+(x4939.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4940=IKsin(j4);
IkReal x4941=IKcos(j4);
IkReal x4942=(gconst118*r01);
IkReal x4943=((1.0)*sj1);
IkReal x4944=(gconst119*r10);
IkReal x4945=(gconst119*r20);
IkReal x4946=(gconst118*r21);
IkReal x4947=(gconst119*r00);
IkReal x4948=(gconst118*r11);
IkReal x4949=((1.0)*x4941);
IkReal x4950=((1.0)*x4940);
IkReal x4951=((1.0)*cj1*sj2);
evalcond[0]=((((-1.0)*x4946*x4950))+((x4940*x4945))+(((-1.0)*r22*x4949)));
evalcond[1]=(sj0+(((-1.0)*x4942*x4950))+((x4940*x4947))+(((-1.0)*r02*x4949)));
evalcond[2]=(((x4940*x4944))+(((-1.0)*r12*x4949))+(((-1.0)*x4948*x4950))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj2*x4943))+(((-1.0)*x4945*x4949))+(((-1.0)*r22*x4950))+((x4941*x4946))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x4947*x4949))+(((-1.0)*cj0*cj2*x4943))+(((-1.0)*r02*x4950))+(((-1.0)*cj0*x4951))+((x4941*x4942)));
evalcond[5]=((((-1.0)*x4944*x4949))+(((-1.0)*sj0*x4951))+((x4941*x4948))+(((-1.0)*r12*x4950))+(((-1.0)*cj2*sj0*x4943)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4952=((1.0)*gconst118);
CheckValue<IkReal> x4953=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r11))+(((-1.0)*r10*x4952)))),-1);
if(!x4953.valid){
continue;
}
CheckValue<IkReal> x4954 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x4952))+((gconst119*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4954.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4953.value)))+(x4954.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4955=IKsin(j4);
IkReal x4956=IKcos(j4);
IkReal x4957=(gconst118*r01);
IkReal x4958=((1.0)*sj1);
IkReal x4959=(gconst119*r10);
IkReal x4960=(gconst119*r20);
IkReal x4961=(gconst118*r21);
IkReal x4962=(gconst119*r00);
IkReal x4963=(gconst118*r11);
IkReal x4964=((1.0)*x4956);
IkReal x4965=((1.0)*x4955);
IkReal x4966=((1.0)*cj1*sj2);
evalcond[0]=((((-1.0)*x4961*x4965))+(((-1.0)*r22*x4964))+((x4955*x4960)));
evalcond[1]=(sj0+(((-1.0)*x4957*x4965))+(((-1.0)*r02*x4964))+((x4955*x4962)));
evalcond[2]=((((-1.0)*x4963*x4965))+(((-1.0)*r12*x4964))+((x4955*x4959))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x4960*x4964))+(((-1.0)*sj2*x4958))+((x4956*x4961))+(((-1.0)*r22*x4965))+((cj1*cj2)));
evalcond[4]=((((-1.0)*cj0*cj2*x4958))+((x4956*x4957))+(((-1.0)*r02*x4965))+(((-1.0)*cj0*x4966))+(((-1.0)*x4962*x4964)));
evalcond[5]=((((-1.0)*x4959*x4964))+((x4956*x4963))+(((-1.0)*sj0*x4966))+(((-1.0)*r12*x4965))+(((-1.0)*cj2*sj0*x4958)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4967=((-1.0)*r00);
IkReal x4969 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4969)==0){
continue;
}
IkReal x4968=pow(x4969,-0.5);
CheckValue<IkReal> x4970 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4967),IKFAST_ATAN2_MAGTHRESH);
if(!x4970.valid){
continue;
}
IkReal gconst120=((-1.0)*(x4970.value));
IkReal gconst121=(r01*x4968);
IkReal gconst122=(x4967*x4968);
CheckValue<IkReal> x4971 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4971.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4971.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4972=((-1.0)*r00);
IkReal x4973=x4968;
CheckValue<IkReal> x4975 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4972),IKFAST_ATAN2_MAGTHRESH);
if(!x4975.valid){
continue;
}
IkReal x4974=((-1.0)*(x4975.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst121;
cj5=gconst122;
j5=x4974;
IkReal gconst120=x4974;
IkReal gconst121=(r01*x4973);
IkReal gconst122=(x4972*x4973);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4976=((1.0)*gconst121);
CheckValue<IkReal> x4977 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x4976))+((cj0*gconst122*r00))+(((-1.0)*cj0*r01*x4976))+((gconst122*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4977.valid){
continue;
}
CheckValue<IkReal> x4978=IKPowWithIntegerCheck(IKsign((((gconst122*r21))+((gconst121*r20)))),-1);
if(!x4978.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4977.value)+(((1.5707963267949)*(x4978.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4979=IKsin(j4);
IkReal x4980=IKcos(j4);
IkReal x4981=((1.0)*r22);
IkReal x4982=(gconst121*r11);
IkReal x4983=(gconst122*r00);
IkReal x4984=((1.0)*sj1);
IkReal x4985=(gconst122*r10);
IkReal x4986=(gconst121*r01);
IkReal x4987=(gconst122*r20);
IkReal x4988=(gconst121*r21);
IkReal x4989=((1.0)*x4980);
IkReal x4990=((1.0)*x4979);
IkReal x4991=((1.0)*cj1*sj2);
evalcond[0]=(((x4979*x4987))+(((-1.0)*x4980*x4981))+(((-1.0)*x4988*x4990)));
evalcond[1]=((((-1.0)*x4986*x4990))+sj0+((x4979*x4983))+(((-1.0)*r02*x4989)));
evalcond[2]=(((x4979*x4985))+(((-1.0)*r12*x4989))+(((-1.0)*x4982*x4990))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x4987*x4989))+(((-1.0)*x4979*x4981))+((cj1*cj2))+(((-1.0)*sj2*x4984))+((x4980*x4988)));
evalcond[4]=((((-1.0)*cj0*cj2*x4984))+(((-1.0)*r02*x4990))+(((-1.0)*cj0*x4991))+(((-1.0)*x4983*x4989))+((x4980*x4986)));
evalcond[5]=((((-1.0)*x4985*x4989))+(((-1.0)*r12*x4990))+(((-1.0)*cj2*sj0*x4984))+(((-1.0)*sj0*x4991))+((x4980*x4982)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4992=((1.0)*gconst121);
CheckValue<IkReal> x4993 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst122*r20*sj0))+(((-1.0)*r21*sj0*x4992)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4993.valid){
continue;
}
CheckValue<IkReal> x4994=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst122*r11))+(((-1.0)*r10*x4992)))),-1);
if(!x4994.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4993.value)+(((1.5707963267949)*(x4994.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4995=IKsin(j4);
IkReal x4996=IKcos(j4);
IkReal x4997=((1.0)*r22);
IkReal x4998=(gconst121*r11);
IkReal x4999=(gconst122*r00);
IkReal x5000=((1.0)*sj1);
IkReal x5001=(gconst122*r10);
IkReal x5002=(gconst121*r01);
IkReal x5003=(gconst122*r20);
IkReal x5004=(gconst121*r21);
IkReal x5005=((1.0)*x4996);
IkReal x5006=((1.0)*x4995);
IkReal x5007=((1.0)*cj1*sj2);
evalcond[0]=((((-1.0)*x5004*x5006))+((x4995*x5003))+(((-1.0)*x4996*x4997)));
evalcond[1]=(((x4995*x4999))+sj0+(((-1.0)*x5002*x5006))+(((-1.0)*r02*x5005)));
evalcond[2]=((((-1.0)*x4998*x5006))+(((-1.0)*r12*x5005))+((x4995*x5001))+(((-1.0)*cj0)));
evalcond[3]=(((x4996*x5004))+(((-1.0)*x5003*x5005))+(((-1.0)*sj2*x5000))+((cj1*cj2))+(((-1.0)*x4995*x4997)));
evalcond[4]=((((-1.0)*cj0*cj2*x5000))+((x4996*x5002))+(((-1.0)*x4999*x5005))+(((-1.0)*r02*x5006))+(((-1.0)*cj0*x5007)));
evalcond[5]=((((-1.0)*cj2*sj0*x5000))+(((-1.0)*sj0*x5007))+((x4996*x4998))+(((-1.0)*x5001*x5005))+(((-1.0)*r12*x5006)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5008=((-1.0)*r01);
IkReal x5010 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5010)==0){
continue;
}
IkReal x5009=pow(x5010,-0.5);
CheckValue<IkReal> x5011 = IKatan2WithCheck(IkReal(x5008),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5011.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x5011.value))));
IkReal gconst124=(x5008*x5009);
IkReal gconst125=((1.0)*r00*x5009);
CheckValue<IkReal> x5012 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5012.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5012.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5013=((-1.0)*r01);
CheckValue<IkReal> x5016 = IKatan2WithCheck(IkReal(x5013),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5016.valid){
continue;
}
IkReal x5014=((1.0)*(x5016.value));
IkReal x5015=x5009;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5014)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5014)));
IkReal gconst124=(x5013*x5015);
IkReal gconst125=((1.0)*r00*x5015);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x5017=((-1.0)*r01);
CheckValue<IkReal> x5020 = IKatan2WithCheck(IkReal(x5017),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5020.valid){
continue;
}
IkReal x5018=((1.0)*(x5020.value));
IkReal x5019=x5009;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5018)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5018)));
IkReal gconst124=(x5017*x5019);
IkReal gconst125=((1.0)*r00*x5019);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5021=((-1.0)*r01);
CheckValue<IkReal> x5024 = IKatan2WithCheck(IkReal(x5021),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5024.valid){
continue;
}
IkReal x5022=((1.0)*(x5024.value));
IkReal x5023=x5009;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5022)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5022)));
IkReal gconst124=(x5021*x5023);
IkReal gconst125=((1.0)*r00*x5023);
IkReal x5025=r02*r02;
IkReal x5026=(r12*sj0);
IkReal x5027=x5009;
IkReal x5028=(cj0*x5027);
j4eval[0]=((IKabs((x5026+((cj0*r02)))))+(IKabs(((((-1.0)*x5028))+((x5025*x5028))+((r02*x5026*x5027))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5029=((1.0)*gconst124);
CheckValue<IkReal> x5030 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst125*r10*sj0))+(((-1.0)*r11*sj0*x5029))+((cj0*gconst125*r00))+(((-1.0)*cj0*r01*x5029)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5030.valid){
continue;
}
CheckValue<IkReal> x5031=IKPowWithIntegerCheck(IKsign((((gconst124*r20))+((gconst125*r21)))),-1);
if(!x5031.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5030.value)+(((1.5707963267949)*(x5031.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5032=IKsin(j4);
IkReal x5033=IKcos(j4);
IkReal x5034=((1.0)*sj1);
IkReal x5035=((1.0)*x5033);
IkReal x5036=(gconst125*x5032);
IkReal x5037=(gconst124*x5033);
IkReal x5038=((1.0)*x5032);
IkReal x5039=((1.0)*cj1*sj2);
evalcond[0]=(((r20*x5036))+(((-1.0)*r22*x5035))+(((-1.0)*gconst124*r21*x5038)));
evalcond[1]=(sj0+(((-1.0)*gconst124*r01*x5038))+((r00*x5036))+(((-1.0)*r02*x5035)));
evalcond[2]=(((r10*x5036))+(((-1.0)*r12*x5035))+(((-1.0)*gconst124*r11*x5038))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst125*r20*x5035))+((r21*x5037))+(((-1.0)*sj2*x5034))+((cj1*cj2))+(((-1.0)*r22*x5038)));
evalcond[4]=((((-1.0)*cj0*cj2*x5034))+(((-1.0)*gconst125*r00*x5035))+((r01*x5037))+(((-1.0)*r02*x5038))+(((-1.0)*cj0*x5039)));
evalcond[5]=((((-1.0)*gconst125*r10*x5035))+(((-1.0)*cj2*sj0*x5034))+(((-1.0)*sj0*x5039))+((r11*x5037))+(((-1.0)*r12*x5038)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5040=((1.0)*gconst124);
CheckValue<IkReal> x5041 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x5040))+((cj0*gconst125*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5041.valid){
continue;
}
CheckValue<IkReal> x5042=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x5040))+(((-1.0)*gconst125*r01)))),-1);
if(!x5042.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5041.value)+(((1.5707963267949)*(x5042.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5043=IKsin(j4);
IkReal x5044=IKcos(j4);
IkReal x5045=((1.0)*sj1);
IkReal x5046=((1.0)*x5044);
IkReal x5047=(gconst125*x5043);
IkReal x5048=(gconst124*x5044);
IkReal x5049=((1.0)*x5043);
IkReal x5050=((1.0)*cj1*sj2);
evalcond[0]=(((r20*x5047))+(((-1.0)*gconst124*r21*x5049))+(((-1.0)*r22*x5046)));
evalcond[1]=(sj0+(((-1.0)*gconst124*r01*x5049))+(((-1.0)*r02*x5046))+((r00*x5047)));
evalcond[2]=(((r10*x5047))+(((-1.0)*gconst124*r11*x5049))+(((-1.0)*r12*x5046))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst125*r20*x5046))+((r21*x5048))+((cj1*cj2))+(((-1.0)*r22*x5049))+(((-1.0)*sj2*x5045)));
evalcond[4]=((((-1.0)*gconst125*r00*x5046))+(((-1.0)*cj0*cj2*x5045))+(((-1.0)*r02*x5049))+(((-1.0)*cj0*x5050))+((r01*x5048)));
evalcond[5]=((((-1.0)*cj2*sj0*x5045))+(((-1.0)*sj0*x5050))+(((-1.0)*r12*x5049))+(((-1.0)*gconst125*r10*x5046))+((r11*x5048)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5051=((1.0)*gconst124);
CheckValue<IkReal> x5052=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x5051))+(((-1.0)*gconst125*r11)))),-1);
if(!x5052.valid){
continue;
}
CheckValue<IkReal> x5053 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst125*r20*sj0))+(((-1.0)*r21*sj0*x5051)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5053.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5052.value)))+(x5053.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5054=IKsin(j4);
IkReal x5055=IKcos(j4);
IkReal x5056=((1.0)*sj1);
IkReal x5057=((1.0)*x5055);
IkReal x5058=(gconst125*x5054);
IkReal x5059=(gconst124*x5055);
IkReal x5060=((1.0)*x5054);
IkReal x5061=((1.0)*cj1*sj2);
evalcond[0]=(((r20*x5058))+(((-1.0)*r22*x5057))+(((-1.0)*gconst124*r21*x5060)));
evalcond[1]=(sj0+(((-1.0)*gconst124*r01*x5060))+((r00*x5058))+(((-1.0)*r02*x5057)));
evalcond[2]=(((r10*x5058))+(((-1.0)*r12*x5057))+(((-1.0)*gconst124*r11*x5060))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst125*r20*x5057))+((r21*x5059))+(((-1.0)*sj2*x5056))+(((-1.0)*r22*x5060))+((cj1*cj2)));
evalcond[4]=((((-1.0)*cj0*cj2*x5056))+(((-1.0)*r02*x5060))+(((-1.0)*cj0*x5061))+((r01*x5059))+(((-1.0)*gconst125*r00*x5057)));
evalcond[5]=((((-1.0)*gconst125*r10*x5057))+(((-1.0)*sj0*x5061))+(((-1.0)*cj2*sj0*x5056))+((r11*x5059))+(((-1.0)*r12*x5060)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5062=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5062;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x5062);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5063=((1.0)*sj5);
IkReal x5064=((((-1.0)*cj5*r11))+(((-1.0)*r10*x5063)));
j4eval[0]=x5064;
j4eval[1]=IKsign(x5064);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x5063))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5065=cj5*cj5;
IkReal x5066=r01*r01;
IkReal x5067=(cj5*r00);
IkReal x5068=(r01*sj5);
IkReal x5069=((((-2.0)*x5067*x5068))+((x5065*(r00*r00)))+(((-1.0)*x5065*x5066))+x5066+(r02*r02));
j4eval[0]=x5069;
j4eval[1]=((IKabs(r02))+(IKabs((x5068+(((-1.0)*x5067))))));
j4eval[2]=IKsign(x5069);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5070=cj5*cj5;
IkReal x5071=r01*r01;
IkReal x5072=(r01*sj5);
IkReal x5073=(cj5*r00);
CheckValue<IkReal> x5074=IKPowWithIntegerCheck(IKsign(((((-2.0)*x5072*x5073))+((x5070*(r00*r00)))+(((-1.0)*x5070*x5071))+x5071+(r02*r02))),-1);
if(!x5074.valid){
continue;
}
CheckValue<IkReal> x5075 = IKatan2WithCheck(IkReal((x5072+(((-1.0)*x5073)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x5075.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5074.value)))+(x5075.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5076=IKsin(j4);
IkReal x5077=IKcos(j4);
IkReal x5078=(cj5*r00);
IkReal x5079=((1.0)*sj2);
IkReal x5080=(cj5*r20);
IkReal x5081=(cj5*r10);
IkReal x5082=((1.0)*x5077);
IkReal x5083=(sj5*x5077);
IkReal x5084=((1.0)*x5076);
IkReal x5085=(sj5*x5084);
evalcond[0]=(((x5076*x5080))+(((-1.0)*r21*x5085))+(((-1.0)*r22*x5082)));
evalcond[1]=((((-1.0)*r11*x5085))+(((-1.0)*r12*x5082))+((x5076*x5081)));
evalcond[2]=(((r01*x5083))+(((-1.0)*x5078*x5082))+(((-1.0)*r02*x5084)));
evalcond[3]=((1.0)+(((-1.0)*r01*x5085))+((x5076*x5078))+(((-1.0)*r02*x5082)));
evalcond[4]=(((r21*x5083))+(((-1.0)*x5080*x5082))+((cj1*cj2))+(((-1.0)*sj1*x5079))+(((-1.0)*r22*x5084)));
evalcond[5]=((((-1.0)*r12*x5084))+(((-1.0)*cj2*sj1))+((r11*x5083))+(((-1.0)*cj1*x5079))+(((-1.0)*x5081*x5082)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5086=((1.0)*sj5);
CheckValue<IkReal> x5087=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x5086)))),-1);
if(!x5087.valid){
continue;
}
CheckValue<IkReal> x5088 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x5086)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5088.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5087.value)))+(x5088.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5089=IKsin(j4);
IkReal x5090=IKcos(j4);
IkReal x5091=(cj5*r00);
IkReal x5092=((1.0)*sj2);
IkReal x5093=(cj5*r20);
IkReal x5094=(cj5*r10);
IkReal x5095=((1.0)*x5090);
IkReal x5096=(sj5*x5090);
IkReal x5097=((1.0)*x5089);
IkReal x5098=(sj5*x5097);
evalcond[0]=((((-1.0)*r22*x5095))+((x5089*x5093))+(((-1.0)*r21*x5098)));
evalcond[1]=((((-1.0)*r11*x5098))+((x5089*x5094))+(((-1.0)*r12*x5095)));
evalcond[2]=((((-1.0)*x5091*x5095))+((r01*x5096))+(((-1.0)*r02*x5097)));
evalcond[3]=((1.0)+(((-1.0)*r01*x5098))+((x5089*x5091))+(((-1.0)*r02*x5095)));
evalcond[4]=((((-1.0)*r22*x5097))+(((-1.0)*x5093*x5095))+((r21*x5096))+(((-1.0)*sj1*x5092))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj1*x5092))+(((-1.0)*cj2*sj1))+((r11*x5096))+(((-1.0)*x5094*x5095))+(((-1.0)*r12*x5097)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5099 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5099.valid){
continue;
}
CheckValue<IkReal> x5100=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5100.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5099.value)+(((1.5707963267949)*(x5100.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5101=IKsin(j4);
IkReal x5102=IKcos(j4);
IkReal x5103=(cj5*r00);
IkReal x5104=((1.0)*sj2);
IkReal x5105=(cj5*r20);
IkReal x5106=(cj5*r10);
IkReal x5107=((1.0)*x5102);
IkReal x5108=(sj5*x5102);
IkReal x5109=((1.0)*x5101);
IkReal x5110=(sj5*x5109);
evalcond[0]=((((-1.0)*r22*x5107))+((x5101*x5105))+(((-1.0)*r21*x5110)));
evalcond[1]=(((x5101*x5106))+(((-1.0)*r12*x5107))+(((-1.0)*r11*x5110)));
evalcond[2]=(((r01*x5108))+(((-1.0)*r02*x5109))+(((-1.0)*x5103*x5107)));
evalcond[3]=((1.0)+(((-1.0)*r02*x5107))+((x5101*x5103))+(((-1.0)*r01*x5110)));
evalcond[4]=((((-1.0)*sj1*x5104))+(((-1.0)*r22*x5109))+((r21*x5108))+((cj1*cj2))+(((-1.0)*x5105*x5107)));
evalcond[5]=((((-1.0)*x5106*x5107))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x5104))+((r11*x5108))+(((-1.0)*r12*x5109)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5111=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5111;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x5111);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5112=((1.0)*sj5);
IkReal x5113=((((-1.0)*r20*x5112))+(((-1.0)*cj5*r21)));
j4eval[0]=x5113;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x5112))))));
j4eval[2]=IKsign(x5113);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5114=cj5*cj5;
IkReal x5115=r01*r01;
IkReal x5116=(r01*sj5);
IkReal x5117=(cj5*r00);
IkReal x5118=((((2.0)*x5116*x5117))+(((-1.0)*x5114*(r00*r00)))+(((-1.0)*(r02*r02)))+(((-1.0)*x5115))+((x5114*x5115)));
j4eval[0]=x5118;
j4eval[1]=IKsign(x5118);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x5117))+x5116))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5119=cj5*cj5;
IkReal x5120=r01*r01;
IkReal x5121=(r01*sj5);
IkReal x5122=(cj5*r00);
CheckValue<IkReal> x5123 = IKatan2WithCheck(IkReal((x5121+(((-1.0)*x5122)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x5123.valid){
continue;
}
CheckValue<IkReal> x5124=IKPowWithIntegerCheck(IKsign((((x5119*x5120))+(((2.0)*x5121*x5122))+(((-1.0)*(r02*r02)))+(((-1.0)*x5119*(r00*r00)))+(((-1.0)*x5120)))),-1);
if(!x5124.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5123.value)+(((1.5707963267949)*(x5124.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5125=IKsin(j4);
IkReal x5126=IKcos(j4);
IkReal x5127=(cj5*r00);
IkReal x5128=(r11*sj5);
IkReal x5129=((1.0)*x5126);
IkReal x5130=((1.0)*x5125);
IkReal x5131=(sj5*x5126);
IkReal x5132=(cj5*x5125);
evalcond[0]=(((r20*x5132))+(((-1.0)*r21*sj5*x5130))+(((-1.0)*r22*x5129)));
evalcond[1]=((((-1.0)*x5128*x5130))+((r10*x5132))+(((-1.0)*r12*x5129)));
evalcond[2]=(((r01*x5131))+(((-1.0)*r02*x5130))+(((-1.0)*x5127*x5129)));
evalcond[3]=((-1.0)+((x5125*x5127))+(((-1.0)*r02*x5129))+(((-1.0)*r01*sj5*x5130)));
evalcond[4]=((((-1.0)*cj5*r10*x5129))+((cj2*sj1))+((cj1*sj2))+((x5126*x5128))+(((-1.0)*r12*x5130)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r21*x5131))+((cj1*cj2))+(((-1.0)*r22*x5130))+(((-1.0)*cj5*r20*x5129)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5133=((1.0)*sj5);
CheckValue<IkReal> x5134=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x5133))+(((-1.0)*cj5*r21)))),-1);
if(!x5134.valid){
continue;
}
CheckValue<IkReal> x5135 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x5133)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5135.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5134.value)))+(x5135.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5136=IKsin(j4);
IkReal x5137=IKcos(j4);
IkReal x5138=(cj5*r00);
IkReal x5139=(r11*sj5);
IkReal x5140=((1.0)*x5137);
IkReal x5141=((1.0)*x5136);
IkReal x5142=(sj5*x5137);
IkReal x5143=(cj5*x5136);
evalcond[0]=(((r20*x5143))+(((-1.0)*r21*sj5*x5141))+(((-1.0)*r22*x5140)));
evalcond[1]=(((r10*x5143))+(((-1.0)*r12*x5140))+(((-1.0)*x5139*x5141)));
evalcond[2]=(((r01*x5142))+(((-1.0)*r02*x5141))+(((-1.0)*x5138*x5140)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x5140))+((x5136*x5138))+(((-1.0)*r01*sj5*x5141)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*cj5*r10*x5140))+((cj1*sj2))+(((-1.0)*r12*x5141))+((x5137*x5139)));
evalcond[5]=(((r21*x5142))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*cj5*r20*x5140))+(((-1.0)*r22*x5141)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5144=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5144.valid){
continue;
}
CheckValue<IkReal> x5145 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5145.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5144.value)))+(x5145.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5146=IKsin(j4);
IkReal x5147=IKcos(j4);
IkReal x5148=(cj5*r00);
IkReal x5149=(r11*sj5);
IkReal x5150=((1.0)*x5147);
IkReal x5151=((1.0)*x5146);
IkReal x5152=(sj5*x5147);
IkReal x5153=(cj5*x5146);
evalcond[0]=(((r20*x5153))+(((-1.0)*r22*x5150))+(((-1.0)*r21*sj5*x5151)));
evalcond[1]=((((-1.0)*r12*x5150))+((r10*x5153))+(((-1.0)*x5149*x5151)));
evalcond[2]=(((r01*x5152))+(((-1.0)*x5148*x5150))+(((-1.0)*r02*x5151)));
evalcond[3]=((-1.0)+(((-1.0)*r01*sj5*x5151))+((x5146*x5148))+(((-1.0)*r02*x5150)));
evalcond[4]=(((cj2*sj1))+((x5147*x5149))+((cj1*sj2))+(((-1.0)*cj5*r10*x5150))+(((-1.0)*r12*x5151)));
evalcond[5]=(((r21*x5152))+(((-1.0)*r22*x5151))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*cj5*r20*x5150)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5154=((-1.0)*r10);
IkReal x5156 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5156)==0){
continue;
}
IkReal x5155=pow(x5156,-0.5);
CheckValue<IkReal> x5157 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5154),IKFAST_ATAN2_MAGTHRESH);
if(!x5157.valid){
continue;
}
IkReal gconst126=((-1.0)*(x5157.value));
IkReal gconst127=(r11*x5155);
IkReal gconst128=(x5154*x5155);
CheckValue<IkReal> x5158 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5158.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5158.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5159=((-1.0)*r10);
IkReal x5160=x5155;
CheckValue<IkReal> x5162 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5159),IKFAST_ATAN2_MAGTHRESH);
if(!x5162.valid){
continue;
}
IkReal x5161=((-1.0)*(x5162.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst127;
cj5=gconst128;
j5=x5161;
IkReal gconst126=x5161;
IkReal gconst127=(r11*x5160);
IkReal gconst128=(x5159*x5160);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5163=((1.0)*gconst127);
CheckValue<IkReal> x5164 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst128*r10*sj0))+(((-1.0)*cj0*r01*x5163))+(((-1.0)*r11*sj0*x5163))+((cj0*gconst128*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5164.valid){
continue;
}
CheckValue<IkReal> x5165=IKPowWithIntegerCheck(IKsign((((gconst127*r20))+((gconst128*r21)))),-1);
if(!x5165.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5164.value)+(((1.5707963267949)*(x5165.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5166=IKsin(j4);
IkReal x5167=IKcos(j4);
IkReal x5168=(gconst128*r10);
IkReal x5169=((1.0)*sj1);
IkReal x5170=((1.0)*x5167);
IkReal x5171=(gconst127*x5167);
IkReal x5172=((1.0)*x5166);
IkReal x5173=(gconst128*x5166);
IkReal x5174=((1.0)*cj1*sj2);
evalcond[0]=(((r20*x5173))+(((-1.0)*gconst127*r21*x5172))+(((-1.0)*r22*x5170)));
evalcond[1]=(sj0+((r00*x5173))+(((-1.0)*r02*x5170))+(((-1.0)*gconst127*r01*x5172)));
evalcond[2]=(((x5166*x5168))+(((-1.0)*gconst127*r11*x5172))+(((-1.0)*r12*x5170))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst128*r20*x5170))+(((-1.0)*sj2*x5169))+((cj1*cj2))+(((-1.0)*r22*x5172))+((r21*x5171)));
evalcond[4]=((((-1.0)*cj0*x5174))+(((-1.0)*cj0*cj2*x5169))+((r01*x5171))+(((-1.0)*r02*x5172))+(((-1.0)*gconst128*r00*x5170)));
evalcond[5]=((((-1.0)*sj0*x5174))+(((-1.0)*r12*x5172))+(((-1.0)*x5168*x5170))+((r11*x5171))+(((-1.0)*cj2*sj0*x5169)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5175=((1.0)*gconst127);
CheckValue<IkReal> x5176=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst128*r01))+(((-1.0)*r00*x5175)))),-1);
if(!x5176.valid){
continue;
}
CheckValue<IkReal> x5177 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst128*r20))+(((-1.0)*cj0*r21*x5175)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5177.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5176.value)))+(x5177.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5178=IKsin(j4);
IkReal x5179=IKcos(j4);
IkReal x5180=(gconst128*r10);
IkReal x5181=((1.0)*sj1);
IkReal x5182=((1.0)*x5179);
IkReal x5183=(gconst127*x5179);
IkReal x5184=((1.0)*x5178);
IkReal x5185=(gconst128*x5178);
IkReal x5186=((1.0)*cj1*sj2);
evalcond[0]=((((-1.0)*r22*x5182))+((r20*x5185))+(((-1.0)*gconst127*r21*x5184)));
evalcond[1]=(sj0+((r00*x5185))+(((-1.0)*r02*x5182))+(((-1.0)*gconst127*r01*x5184)));
evalcond[2]=(((x5178*x5180))+(((-1.0)*r12*x5182))+(((-1.0)*gconst127*r11*x5184))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x5184))+(((-1.0)*gconst128*r20*x5182))+(((-1.0)*sj2*x5181))+((cj1*cj2))+((r21*x5183)));
evalcond[4]=((((-1.0)*gconst128*r00*x5182))+(((-1.0)*r02*x5184))+((r01*x5183))+(((-1.0)*cj0*cj2*x5181))+(((-1.0)*cj0*x5186)));
evalcond[5]=((((-1.0)*cj2*sj0*x5181))+(((-1.0)*r12*x5184))+((r11*x5183))+(((-1.0)*x5180*x5182))+(((-1.0)*sj0*x5186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5187=((-1.0)*r11);
IkReal x5189 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5189)==0){
continue;
}
IkReal x5188=pow(x5189,-0.5);
CheckValue<IkReal> x5190 = IKatan2WithCheck(IkReal(x5187),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5190.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x5190.value))));
IkReal gconst130=(x5187*x5188);
IkReal gconst131=((1.0)*r10*x5188);
CheckValue<IkReal> x5191 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5191.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5191.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5192=((-1.0)*r11);
CheckValue<IkReal> x5195 = IKatan2WithCheck(IkReal(x5192),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5195.valid){
continue;
}
IkReal x5193=((1.0)*(x5195.value));
IkReal x5194=x5188;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5193)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5193)));
IkReal gconst130=(x5192*x5194);
IkReal gconst131=((1.0)*r10*x5194);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5196=((-1.0)*r11);
CheckValue<IkReal> x5199 = IKatan2WithCheck(IkReal(x5196),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5199.valid){
continue;
}
IkReal x5197=((1.0)*(x5199.value));
IkReal x5198=x5188;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5197)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5197)));
IkReal gconst130=(x5196*x5198);
IkReal gconst131=((1.0)*r10*x5198);
IkReal x5200=r12*r12;
IkReal x5201=(cj0*r02);
IkReal x5202=x5188;
IkReal x5203=(sj0*x5202);
j4eval[0]=((IKabs((x5201+((r12*sj0)))))+(IKabs((((r12*x5201*x5202))+((x5200*x5203))+(((-1.0)*x5203))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5204=((-1.0)*r11);
CheckValue<IkReal> x5207 = IKatan2WithCheck(IkReal(x5204),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5207.valid){
continue;
}
IkReal x5205=((1.0)*(x5207.value));
IkReal x5206=x5188;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5205)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5205)));
IkReal gconst130=(x5204*x5206);
IkReal gconst131=((1.0)*r10*x5206);
IkReal x5208=r12*r12;
IkReal x5209=(cj1*cj2*r22);
CheckValue<IkReal> x5214=IKPowWithIntegerCheck(((-1.0)+x5208),-1);
if(!x5214.valid){
continue;
}
IkReal x5210=x5214.value;
IkReal x5211=((1.0)*r22*sj1*sj2);
if((((1.0)+(((-1.0)*x5208)))) < -0.00001)
continue;
IkReal x5212=IKsqrt(((1.0)+(((-1.0)*x5208))));
IkReal x5213=(r12*x5210*x5212);
j4eval[0]=((IKabs(((((-1.0)*x5211))+x5209)))+(IKabs((((x5209*x5213))+(((-1.0)*x5211*x5213))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5215=(gconst131*r20);
IkReal x5216=(cj1*cj2);
IkReal x5217=(sj1*sj2);
IkReal x5218=(gconst130*r21);
CheckValue<IkReal> x5219=IKPowWithIntegerCheck(IKsign(((x5215*x5215)+(r22*r22)+(x5218*x5218)+(((-2.0)*x5215*x5218)))),-1);
if(!x5219.valid){
continue;
}
CheckValue<IkReal> x5220 = IKatan2WithCheck(IkReal((((r22*x5216))+(((-1.0)*r22*x5217)))),IkReal((((x5217*x5218))+(((-1.0)*x5215*x5217))+((x5215*x5216))+(((-1.0)*x5216*x5218)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5220.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5219.value)))+(x5220.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5221=IKsin(j4);
IkReal x5222=IKcos(j4);
IkReal x5223=(gconst131*r10);
IkReal x5224=((1.0)*sj1);
IkReal x5225=(gconst131*r20);
IkReal x5226=(gconst131*r00);
IkReal x5227=((1.0)*x5222);
IkReal x5228=(gconst130*x5222);
IkReal x5229=((1.0)*x5221);
IkReal x5230=((1.0)*cj1*sj2);
evalcond[0]=(((x5221*x5225))+(((-1.0)*r22*x5227))+(((-1.0)*gconst130*r21*x5229)));
evalcond[1]=((((-1.0)*gconst130*r01*x5229))+sj0+((x5221*x5226))+(((-1.0)*r02*x5227)));
evalcond[2]=(((x5221*x5223))+(((-1.0)*r12*x5227))+(((-1.0)*gconst130*r11*x5229))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x5228))+(((-1.0)*x5225*x5227))+(((-1.0)*r22*x5229))+(((-1.0)*sj2*x5224))+((cj1*cj2)));
evalcond[4]=((((-1.0)*cj0*cj2*x5224))+(((-1.0)*cj0*x5230))+(((-1.0)*x5226*x5227))+(((-1.0)*r02*x5229))+((r01*x5228)));
evalcond[5]=((((-1.0)*x5223*x5227))+(((-1.0)*cj2*sj0*x5224))+(((-1.0)*sj0*x5230))+(((-1.0)*r12*x5229))+((r11*x5228)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5231=((1.0)*gconst130);
CheckValue<IkReal> x5232 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x5231))+(((-1.0)*r11*sj0*x5231))+((gconst131*r10*sj0))+((cj0*gconst131*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5232.valid){
continue;
}
CheckValue<IkReal> x5233=IKPowWithIntegerCheck(IKsign((((gconst131*r21))+((gconst130*r20)))),-1);
if(!x5233.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5232.value)+(((1.5707963267949)*(x5233.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5234=IKsin(j4);
IkReal x5235=IKcos(j4);
IkReal x5236=(gconst131*r10);
IkReal x5237=((1.0)*sj1);
IkReal x5238=(gconst131*r20);
IkReal x5239=(gconst131*r00);
IkReal x5240=((1.0)*x5235);
IkReal x5241=(gconst130*x5235);
IkReal x5242=((1.0)*x5234);
IkReal x5243=((1.0)*cj1*sj2);
evalcond[0]=((((-1.0)*r22*x5240))+(((-1.0)*gconst130*r21*x5242))+((x5234*x5238)));
evalcond[1]=(sj0+(((-1.0)*r02*x5240))+(((-1.0)*gconst130*r01*x5242))+((x5234*x5239)));
evalcond[2]=((((-1.0)*r12*x5240))+(((-1.0)*gconst130*r11*x5242))+((x5234*x5236))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj2*x5237))+(((-1.0)*r22*x5242))+((r21*x5241))+((cj1*cj2))+(((-1.0)*x5238*x5240)));
evalcond[4]=(((r01*x5241))+(((-1.0)*r02*x5242))+(((-1.0)*cj0*x5243))+(((-1.0)*x5239*x5240))+(((-1.0)*cj0*cj2*x5237)));
evalcond[5]=((((-1.0)*r12*x5242))+((r11*x5241))+(((-1.0)*x5236*x5240))+(((-1.0)*sj0*x5243))+(((-1.0)*cj2*sj0*x5237)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5244=((1.0)*gconst130);
CheckValue<IkReal> x5245=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x5244))+(((-1.0)*gconst131*r01)))),-1);
if(!x5245.valid){
continue;
}
CheckValue<IkReal> x5246 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst131*r20))+(((-1.0)*cj0*r21*x5244)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5246.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5245.value)))+(x5246.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5247=IKsin(j4);
IkReal x5248=IKcos(j4);
IkReal x5249=(gconst131*r10);
IkReal x5250=((1.0)*sj1);
IkReal x5251=(gconst131*r20);
IkReal x5252=(gconst131*r00);
IkReal x5253=((1.0)*x5248);
IkReal x5254=(gconst130*x5248);
IkReal x5255=((1.0)*x5247);
IkReal x5256=((1.0)*cj1*sj2);
evalcond[0]=((((-1.0)*r22*x5253))+((x5247*x5251))+(((-1.0)*gconst130*r21*x5255)));
evalcond[1]=(sj0+(((-1.0)*r02*x5253))+((x5247*x5252))+(((-1.0)*gconst130*r01*x5255)));
evalcond[2]=(((x5247*x5249))+(((-1.0)*gconst130*r11*x5255))+(((-1.0)*r12*x5253))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj2*x5250))+((r21*x5254))+(((-1.0)*r22*x5255))+(((-1.0)*x5251*x5253))+((cj1*cj2)));
evalcond[4]=((((-1.0)*r02*x5255))+((r01*x5254))+(((-1.0)*cj0*x5256))+(((-1.0)*cj0*cj2*x5250))+(((-1.0)*x5252*x5253)));
evalcond[5]=((((-1.0)*x5249*x5253))+(((-1.0)*sj0*x5256))+(((-1.0)*r12*x5255))+((r11*x5254))+(((-1.0)*cj2*sj0*x5250)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5257=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5257;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x5257);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5258=((1.0)*sj5);
IkReal x5259=((((-1.0)*r00*x5258))+(((-1.0)*cj5*r01)));
j4eval[0]=x5259;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x5258))))));
j4eval[2]=IKsign(x5259);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5260=cj5*cj5;
IkReal x5261=r11*r11;
IkReal x5262=(cj5*r10);
IkReal x5263=(r11*sj5);
IkReal x5264=((((-1.0)*x5261))+((x5260*x5261))+(((-1.0)*x5260*(r10*r10)))+(((2.0)*x5262*x5263))+(((-1.0)*(r12*r12))));
j4eval[0]=x5264;
j4eval[1]=((IKabs(((((-1.0)*x5262))+x5263)))+(IKabs(r12)));
j4eval[2]=IKsign(x5264);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5265=cj5*cj5;
IkReal x5266=r11*r11;
IkReal x5267=(cj5*r10);
IkReal x5268=(r11*sj5);
CheckValue<IkReal> x5269=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5266))+(((-1.0)*x5265*(r10*r10)))+((x5265*x5266))+(((-1.0)*(r12*r12)))+(((2.0)*x5267*x5268)))),-1);
if(!x5269.valid){
continue;
}
CheckValue<IkReal> x5270 = IKatan2WithCheck(IkReal(((((-1.0)*x5267))+x5268)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x5270.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5269.value)))+(x5270.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5271=IKsin(j4);
IkReal x5272=IKcos(j4);
IkReal x5273=(cj5*r00);
IkReal x5274=((1.0)*sj2);
IkReal x5275=((1.0)*x5272);
IkReal x5276=(sj5*x5272);
IkReal x5277=(cj5*x5271);
IkReal x5278=((1.0)*x5271);
IkReal x5279=(sj5*x5278);
evalcond[0]=(((r20*x5277))+(((-1.0)*r21*x5279))+(((-1.0)*r22*x5275)));
evalcond[1]=((((-1.0)*r01*x5279))+((x5271*x5273))+(((-1.0)*r02*x5275)));
evalcond[2]=((((-1.0)*cj5*r10*x5275))+(((-1.0)*r12*x5278))+((r11*x5276)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x5279))+((r10*x5277))+(((-1.0)*r12*x5275)));
evalcond[4]=(((r21*x5276))+(((-1.0)*sj1*x5274))+(((-1.0)*cj5*r20*x5275))+((cj1*cj2))+(((-1.0)*r22*x5278)));
evalcond[5]=((((-1.0)*cj1*x5274))+(((-1.0)*cj2*sj1))+((r01*x5276))+(((-1.0)*r02*x5278))+(((-1.0)*x5273*x5275)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5280=((1.0)*sj5);
CheckValue<IkReal> x5281 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x5280)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5281.valid){
continue;
}
CheckValue<IkReal> x5282=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x5280))+(((-1.0)*cj5*r01)))),-1);
if(!x5282.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5281.value)+(((1.5707963267949)*(x5282.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5283=IKsin(j4);
IkReal x5284=IKcos(j4);
IkReal x5285=(cj5*r00);
IkReal x5286=((1.0)*sj2);
IkReal x5287=((1.0)*x5284);
IkReal x5288=(sj5*x5284);
IkReal x5289=(cj5*x5283);
IkReal x5290=((1.0)*x5283);
IkReal x5291=(sj5*x5290);
evalcond[0]=((((-1.0)*r22*x5287))+((r20*x5289))+(((-1.0)*r21*x5291)));
evalcond[1]=((((-1.0)*r01*x5291))+((x5283*x5285))+(((-1.0)*r02*x5287)));
evalcond[2]=((((-1.0)*cj5*r10*x5287))+(((-1.0)*r12*x5290))+((r11*x5288)));
evalcond[3]=((-1.0)+((r10*x5289))+(((-1.0)*r12*x5287))+(((-1.0)*r11*x5291)));
evalcond[4]=((((-1.0)*r22*x5290))+((r21*x5288))+(((-1.0)*sj1*x5286))+(((-1.0)*cj5*r20*x5287))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*x5286))+((r01*x5288))+(((-1.0)*r02*x5290))+(((-1.0)*x5285*x5287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5292=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5292.valid){
continue;
}
CheckValue<IkReal> x5293 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5293.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5292.value)))+(x5293.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5294=IKsin(j4);
IkReal x5295=IKcos(j4);
IkReal x5296=(cj5*r00);
IkReal x5297=((1.0)*sj2);
IkReal x5298=((1.0)*x5295);
IkReal x5299=(sj5*x5295);
IkReal x5300=(cj5*x5294);
IkReal x5301=((1.0)*x5294);
IkReal x5302=(sj5*x5301);
evalcond[0]=((((-1.0)*r22*x5298))+(((-1.0)*r21*x5302))+((r20*x5300)));
evalcond[1]=(((x5294*x5296))+(((-1.0)*r01*x5302))+(((-1.0)*r02*x5298)));
evalcond[2]=((((-1.0)*cj5*r10*x5298))+(((-1.0)*r12*x5301))+((r11*x5299)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x5302))+(((-1.0)*r12*x5298))+((r10*x5300)));
evalcond[4]=((((-1.0)*r22*x5301))+((r21*x5299))+(((-1.0)*sj1*x5297))+(((-1.0)*cj5*r20*x5298))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj1*x5297))+(((-1.0)*cj2*sj1))+(((-1.0)*x5296*x5298))+((r01*x5299))+(((-1.0)*r02*x5301)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5303=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5303;
j4eval[1]=IKsign(x5303);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5304=((1.0)*sj5);
IkReal x5305=((((-1.0)*r20*x5304))+(((-1.0)*cj5*r21)));
j4eval[0]=x5305;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x5304))+((cj5*r00))))));
j4eval[2]=IKsign(x5305);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5306=cj5*cj5;
IkReal x5307=r11*r11;
IkReal x5308=(r11*sj5);
IkReal x5309=(cj5*r10);
IkReal x5310=((((-1.0)*x5306*x5307))+(r12*r12)+x5307+((x5306*(r10*r10)))+(((-2.0)*x5308*x5309)));
j4eval[0]=x5310;
j4eval[1]=IKsign(x5310);
j4eval[2]=((IKabs((x5308+(((-1.0)*x5309)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5311=cj5*cj5;
IkReal x5312=r11*r11;
IkReal x5313=(cj5*r10);
IkReal x5314=(r11*sj5);
CheckValue<IkReal> x5315=IKPowWithIntegerCheck(IKsign(((((-2.0)*x5313*x5314))+(r12*r12)+x5312+(((-1.0)*x5311*x5312))+((x5311*(r10*r10))))),-1);
if(!x5315.valid){
continue;
}
CheckValue<IkReal> x5316 = IKatan2WithCheck(IkReal((x5314+(((-1.0)*x5313)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x5316.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5315.value)))+(x5316.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5317=IKsin(j4);
IkReal x5318=IKcos(j4);
IkReal x5319=(cj5*r00);
IkReal x5320=((1.0)*x5318);
IkReal x5321=(sj5*x5318);
IkReal x5322=(cj5*x5317);
IkReal x5323=((1.0)*x5317);
IkReal x5324=(sj5*x5323);
evalcond[0]=((((-1.0)*r21*x5324))+((r20*x5322))+(((-1.0)*r22*x5320)));
evalcond[1]=((((-1.0)*r02*x5320))+((x5317*x5319))+(((-1.0)*r01*x5324)));
evalcond[2]=(((r11*x5321))+(((-1.0)*cj5*r10*x5320))+(((-1.0)*r12*x5323)));
evalcond[3]=((1.0)+((r10*x5322))+(((-1.0)*r12*x5320))+(((-1.0)*r11*x5324)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x5323))+((r01*x5321))+(((-1.0)*x5319*x5320)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*cj5*r20*x5320))+(((-1.0)*r22*x5323))+((cj1*cj2))+((r21*x5321)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5325=((1.0)*sj5);
CheckValue<IkReal> x5326 = IKatan2WithCheck(IkReal(r02),IkReal((((cj5*r00))+(((-1.0)*r01*x5325)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5326.valid){
continue;
}
CheckValue<IkReal> x5327=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x5325))+(((-1.0)*cj5*r21)))),-1);
if(!x5327.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5326.value)+(((1.5707963267949)*(x5327.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5328=IKsin(j4);
IkReal x5329=IKcos(j4);
IkReal x5330=(cj5*r00);
IkReal x5331=((1.0)*x5329);
IkReal x5332=(sj5*x5329);
IkReal x5333=(cj5*x5328);
IkReal x5334=((1.0)*x5328);
IkReal x5335=(sj5*x5334);
evalcond[0]=((((-1.0)*r21*x5335))+((r20*x5333))+(((-1.0)*r22*x5331)));
evalcond[1]=(((x5328*x5330))+(((-1.0)*r02*x5331))+(((-1.0)*r01*x5335)));
evalcond[2]=(((r11*x5332))+(((-1.0)*r12*x5334))+(((-1.0)*cj5*r10*x5331)));
evalcond[3]=((1.0)+((r10*x5333))+(((-1.0)*r11*x5335))+(((-1.0)*r12*x5331)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x5330*x5331))+(((-1.0)*r02*x5334))+((cj1*sj2))+((r01*x5332)));
evalcond[5]=((((-1.0)*cj5*r20*x5331))+(((-1.0)*sj1*sj2))+(((-1.0)*r22*x5334))+((r21*x5332))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5336=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5336.valid){
continue;
}
CheckValue<IkReal> x5337 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5337.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5336.value)))+(x5337.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5338=IKsin(j4);
IkReal x5339=IKcos(j4);
IkReal x5340=(cj5*r00);
IkReal x5341=((1.0)*x5339);
IkReal x5342=(sj5*x5339);
IkReal x5343=(cj5*x5338);
IkReal x5344=((1.0)*x5338);
IkReal x5345=(sj5*x5344);
evalcond[0]=(((r20*x5343))+(((-1.0)*r22*x5341))+(((-1.0)*r21*x5345)));
evalcond[1]=((((-1.0)*r02*x5341))+(((-1.0)*r01*x5345))+((x5338*x5340)));
evalcond[2]=((((-1.0)*cj5*r10*x5341))+((r11*x5342))+(((-1.0)*r12*x5344)));
evalcond[3]=((1.0)+((r10*x5343))+(((-1.0)*r11*x5345))+(((-1.0)*r12*x5341)));
evalcond[4]=((((-1.0)*r02*x5344))+((cj2*sj1))+((r01*x5342))+((cj1*sj2))+(((-1.0)*x5340*x5341)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r22*x5344))+((cj1*cj2))+((r21*x5342))+(((-1.0)*cj5*r20*x5341)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5346=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x5346);
rxp0_2=(py*r00);
rxp1_0=(r21*x5346);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5347=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x5347);
rxp0_2=(py*r00);
rxp1_0=(r21*x5347);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5348=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x5348);
rxp0_2=(py*r00);
rxp1_0=(r21*x5348);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5351=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x5351.valid){
continue;
}
IkReal x5349=x5351.value;
IkReal x5350=(cj0*x5349);
cj4array[0]=(((cj2*sj1*x5350))+((cj1*sj2*x5350)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5352=IKsin(j4);
IkReal x5353=IKcos(j4);
IkReal x5354=(cj5*r20);
IkReal x5355=((1.0)*x5353);
IkReal x5356=((1.0)*sj5*x5352);
evalcond[0]=((-1.0)*r12*x5352);
evalcond[1]=((((-1.0)*r12*x5355))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r21*x5356))+((x5352*x5354)));
evalcond[3]=((((-1.0)*r01*x5356))+((cj5*r00*x5352)));
evalcond[4]=((((-1.0)*sj1*sj2))+((r21*sj5*x5353))+(((-1.0)*x5354*x5355))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5358=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x5358.valid){
continue;
}
IkReal x5357=x5358.value;
cj4array[0]=((((-1.0)*cj1*cj2*x5357))+((sj1*sj2*x5357)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5359=IKsin(j4);
IkReal x5360=IKcos(j4);
IkReal x5361=(cj5*r00);
IkReal x5362=(r01*sj5);
IkReal x5363=((1.0)*cj0);
IkReal x5364=((1.0)*x5360);
IkReal x5365=((1.0)*x5359);
evalcond[0]=((-1.0)*r12*x5359);
evalcond[1]=((((-1.0)*r12*x5364))+(((-1.0)*x5363)));
evalcond[2]=(((cj5*r20*x5359))+(((-1.0)*r21*sj5*x5365)));
evalcond[3]=((((-1.0)*x5362*x5365))+((x5359*x5361)));
evalcond[4]=(((x5360*x5362))+(((-1.0)*cj1*sj2*x5363))+(((-1.0)*x5361*x5364))+(((-1.0)*cj2*sj1*x5363)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5366=IKPowWithIntegerCheck(r12,-1);
if(!x5366.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x5366.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5367=IKsin(j4);
IkReal x5368=IKcos(j4);
IkReal x5369=(r01*sj5);
IkReal x5370=(r21*sj5);
IkReal x5371=((1.0)*cj0);
IkReal x5372=((1.0)*x5367);
IkReal x5373=(cj5*x5367);
IkReal x5374=((1.0)*cj5*x5368);
evalcond[0]=((-1.0)*r12*x5367);
evalcond[1]=((((-1.0)*x5370*x5372))+((r20*x5373)));
evalcond[2]=(((r00*x5373))+(((-1.0)*x5369*x5372)));
evalcond[3]=(((x5368*x5370))+(((-1.0)*sj1*sj2))+(((-1.0)*r20*x5374))+((cj1*cj2)));
evalcond[4]=((((-1.0)*cj1*sj2*x5371))+(((-1.0)*r00*x5374))+((x5368*x5369))+(((-1.0)*cj2*sj1*x5371)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5375=((1.0)*sj5);
CheckValue<IkReal> x5376=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5376.valid){
continue;
}
CheckValue<IkReal> x5377 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r11*sj0*x5375))+((cj5*r10*sj0))+(((-1.0)*cj0*r01*x5375)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5377.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5376.value)))+(x5377.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5378=IKsin(j4);
IkReal x5379=IKcos(j4);
IkReal x5380=(cj5*r00);
IkReal x5381=((1.0)*sj1);
IkReal x5382=((1.0)*x5379);
IkReal x5383=(sj5*x5379);
IkReal x5384=(cj5*x5378);
IkReal x5385=((1.0)*x5378);
IkReal x5386=((1.0)*cj1*sj2);
IkReal x5387=(sj5*x5385);
evalcond[0]=(((r20*x5384))+(((-1.0)*r21*x5387))+(((-1.0)*r22*x5382)));
evalcond[1]=(sj0+((x5378*x5380))+(((-1.0)*r02*x5382))+(((-1.0)*r01*x5387)));
evalcond[2]=(((r10*x5384))+(((-1.0)*r12*x5382))+(((-1.0)*r11*x5387))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj5*r20*x5382))+((cj1*cj2))+(((-1.0)*sj2*x5381))+(((-1.0)*r22*x5385))+((r21*x5383)));
evalcond[4]=((((-1.0)*cj0*x5386))+(((-1.0)*r02*x5385))+(((-1.0)*x5380*x5382))+(((-1.0)*cj0*cj2*x5381))+((r01*x5383)));
evalcond[5]=((((-1.0)*cj2*sj0*x5381))+(((-1.0)*sj0*x5386))+((r11*x5383))+(((-1.0)*r12*x5385))+(((-1.0)*cj5*r10*x5382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5388=((1.0)*sj5);
CheckValue<IkReal> x5389=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x5388))+(((-1.0)*cj5*r01)))),-1);
if(!x5389.valid){
continue;
}
CheckValue<IkReal> x5390 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x5388))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5390.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5389.value)))+(x5390.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5391=IKsin(j4);
IkReal x5392=IKcos(j4);
IkReal x5393=(cj5*r00);
IkReal x5394=((1.0)*sj1);
IkReal x5395=((1.0)*x5392);
IkReal x5396=(sj5*x5392);
IkReal x5397=(cj5*x5391);
IkReal x5398=((1.0)*x5391);
IkReal x5399=((1.0)*cj1*sj2);
IkReal x5400=(sj5*x5398);
evalcond[0]=(((r20*x5397))+(((-1.0)*r21*x5400))+(((-1.0)*r22*x5395)));
evalcond[1]=(sj0+((x5391*x5393))+(((-1.0)*r01*x5400))+(((-1.0)*r02*x5395)));
evalcond[2]=(((r10*x5397))+(((-1.0)*r11*x5400))+(((-1.0)*r12*x5395))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj5*r20*x5395))+((cj1*cj2))+(((-1.0)*r22*x5398))+((r21*x5396))+(((-1.0)*sj2*x5394)));
evalcond[4]=((((-1.0)*cj0*x5399))+(((-1.0)*x5393*x5395))+(((-1.0)*r02*x5398))+(((-1.0)*cj0*cj2*x5394))+((r01*x5396)));
evalcond[5]=((((-1.0)*sj0*x5399))+((r11*x5396))+(((-1.0)*r12*x5398))+(((-1.0)*cj5*r10*x5395))+(((-1.0)*cj2*sj0*x5394)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5401=((1.0)*sj5);
CheckValue<IkReal> x5402=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x5401)))),-1);
if(!x5402.valid){
continue;
}
CheckValue<IkReal> x5403 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x5401)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5403.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5402.value)))+(x5403.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5404=IKsin(j4);
IkReal x5405=IKcos(j4);
IkReal x5406=(cj5*r00);
IkReal x5407=((1.0)*sj1);
IkReal x5408=((1.0)*x5405);
IkReal x5409=(sj5*x5405);
IkReal x5410=(cj5*x5404);
IkReal x5411=((1.0)*x5404);
IkReal x5412=((1.0)*cj1*sj2);
IkReal x5413=(sj5*x5411);
evalcond[0]=((((-1.0)*r21*x5413))+(((-1.0)*r22*x5408))+((r20*x5410)));
evalcond[1]=(sj0+(((-1.0)*r02*x5408))+((x5404*x5406))+(((-1.0)*r01*x5413)));
evalcond[2]=(((r10*x5410))+(((-1.0)*r12*x5408))+(((-1.0)*r11*x5413))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x5409))+(((-1.0)*cj5*r20*x5408))+(((-1.0)*sj2*x5407))+((cj1*cj2))+(((-1.0)*r22*x5411)));
evalcond[4]=((((-1.0)*r02*x5411))+(((-1.0)*cj0*cj2*x5407))+(((-1.0)*cj0*x5412))+(((-1.0)*x5406*x5408))+((r01*x5409)));
evalcond[5]=((((-1.0)*cj5*r10*x5408))+(((-1.0)*cj2*sj0*x5407))+(((-1.0)*sj0*x5412))+(((-1.0)*r12*x5411))+((r11*x5409)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5414=cj5*cj5;
IkReal x5415=r21*r21;
IkReal x5416=(r21*sj5);
IkReal x5417=(sj1*sj2);
IkReal x5418=(cj5*r20);
IkReal x5419=(cj1*cj2);
CheckValue<IkReal> x5420=IKPowWithIntegerCheck(IKsign((((x5414*(r20*r20)))+(((-1.0)*x5414*x5415))+x5415+(r22*r22)+(((-2.0)*x5416*x5418)))),-1);
if(!x5420.valid){
continue;
}
CheckValue<IkReal> x5421 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x5417))+((r22*x5419)))),IkReal(((((-1.0)*x5417*x5418))+(((-1.0)*x5416*x5419))+((x5416*x5417))+((x5418*x5419)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5421.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5420.value)))+(x5421.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x5422=IKsin(j4);
IkReal x5423=IKcos(j4);
IkReal x5424=(cj5*r20);
IkReal x5425=(r21*sj5);
IkReal x5426=((1.0)*x5423);
IkReal x5427=((1.0)*x5422);
evalcond[0]=(((x5422*x5424))+(((-1.0)*x5425*x5427))+(((-1.0)*r22*x5426)));
evalcond[1]=((((-1.0)*sj1*sj2))+(((-1.0)*x5424*x5426))+((x5423*x5425))+((cj1*cj2))+(((-1.0)*r22*x5427)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5428=(cj5*sj4);
IkReal x5429=(sj4*sj5);
if( IKabs((((r01*x5429))+(((-1.0)*r00*x5428))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x5428))+(((-1.0)*r11*x5429))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x5429))+(((-1.0)*r00*x5428))+((cj4*r02))))+IKsqr((((r10*x5428))+(((-1.0)*r11*x5429))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x5429))+(((-1.0)*r00*x5428))+((cj4*r02))), (((r10*x5428))+(((-1.0)*r11*x5429))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x5430=IKcos(j0);
IkReal x5431=IKsin(j0);
IkReal x5432=((0.125)*sj5);
IkReal x5433=(cj5*r00);
IkReal x5434=(cj5*r01);
IkReal x5435=((1.0)*sj2);
IkReal x5436=((1.0)*sj4);
IkReal x5437=(r01*sj5);
IkReal x5438=((0.3)*sj2);
IkReal x5439=((1.0)*cj4);
IkReal x5440=(cj5*r11);
IkReal x5441=(cj2*sj1);
IkReal x5442=(cj5*r10);
IkReal x5443=(r11*sj5);
IkReal x5444=(sj1*x5431);
IkReal x5445=(cj1*x5430);
IkReal x5446=(cj1*x5431);
IkReal x5447=((1.0)*x5430);
IkReal x5448=(sj1*x5430);
evalcond[0]=(x5431+(((-1.0)*r02*x5439))+((sj4*x5433))+(((-1.0)*x5436*x5437)));
evalcond[1]=((((-1.0)*x5436*x5443))+((sj4*x5442))+(((-1.0)*x5447))+(((-1.0)*r12*x5439)));
evalcond[2]=((((-1.0)*x5435*x5448))+((r00*sj5))+x5434+((cj2*x5445)));
evalcond[3]=((((-1.0)*x5435*x5444))+x5440+((r10*sj5))+((cj2*x5446)));
evalcond[4]=((((-1.0)*x5435*x5445))+(((-1.0)*r02*x5436))+((cj4*x5437))+(((-1.0)*x5441*x5447))+(((-1.0)*x5433*x5439)));
evalcond[5]=((((-1.0)*x5435*x5446))+(((-1.0)*r12*x5436))+(((-1.0)*x5439*x5442))+(((-1.0)*x5431*x5441))+((cj4*x5443)));
evalcond[6]=((((0.125)*x5434))+(((-0.35)*x5448))+(((-0.3)*x5430*x5441))+(((-1.0)*px))+(((-0.125)*x5431))+(((-1.0)*x5438*x5445))+((r00*x5432)));
evalcond[7]=((((0.125)*x5430))+(((-0.35)*x5444))+((r10*x5432))+(((-0.3)*x5431*x5441))+(((-1.0)*py))+(((0.125)*x5440))+(((-1.0)*x5438*x5446)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5449=((1.0)*cj5);
IkReal x5450=((1.0)*sj5);
CheckValue<IkReal> x5451=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj1*sj2))+((cj1*cj2)))),-1);
if(!x5451.valid){
continue;
}
CheckValue<IkReal> x5452 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x5449))+(((-1.0)*r10*x5450)))),IkReal(((((-1.0)*r01*x5449))+(((-1.0)*r00*x5450)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5452.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5451.value)))+(x5452.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5453=IKcos(j0);
IkReal x5454=IKsin(j0);
IkReal x5455=((0.125)*sj5);
IkReal x5456=(cj5*r01);
IkReal x5457=((1.0)*sj2);
IkReal x5458=((0.3)*cj2);
IkReal x5459=(cj1*cj2);
IkReal x5460=(cj5*r11);
IkReal x5461=(sj1*x5454);
IkReal x5462=((0.3)*cj1*sj2);
IkReal x5463=(sj1*x5453);
evalcond[0]=(((r00*sj5))+x5456+(((-1.0)*x5457*x5463))+((x5453*x5459)));
evalcond[1]=(x5460+((r10*sj5))+((x5454*x5459))+(((-1.0)*x5457*x5461)));
evalcond[2]=((((-1.0)*x5458*x5463))+((r00*x5455))+(((-1.0)*x5453*x5462))+(((-0.125)*x5454))+(((-1.0)*px))+(((-0.35)*x5463))+(((0.125)*x5456)));
evalcond[3]=(((r10*x5455))+(((-1.0)*x5458*x5461))+(((-1.0)*py))+(((-0.35)*x5461))+(((0.125)*x5453))+(((-1.0)*x5454*x5462))+(((0.125)*x5460)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x5464=((1.0)*sj5);
IkReal x5465=((((-1.0)*cj5*r11))+(((-1.0)*r10*x5464)));
j4eval[0]=x5465;
j4eval[1]=IKsign(x5465);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x5464))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x5466=((1.0)*sj5);
IkReal x5467=((((-1.0)*cj5*r01))+(((-1.0)*r00*x5466)));
j4eval[0]=x5467;
j4eval[1]=IKsign(x5467);
j4eval[2]=((IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x5466)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x5468=((1.0)*sj5);
IkReal x5469=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5469;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((cj0*cj5*r00))+(((-1.0)*r11*sj0*x5468))+((cj5*r10*sj0))+(((-1.0)*cj0*r01*x5468))))));
j4eval[2]=IKsign(x5469);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5471 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5471)==0){
continue;
}
IkReal x5470=pow(x5471,-0.5);
CheckValue<IkReal> x5472 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5472.valid){
continue;
}
IkReal gconst114=((-1.0)*(x5472.value));
IkReal gconst115=((-1.0)*r21*x5470);
IkReal gconst116=(r20*x5470);
CheckValue<IkReal> x5473 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5473.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5473.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x5476 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5476.valid){
continue;
}
IkReal x5474=((-1.0)*(x5476.value));
IkReal x5475=x5470;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x5474;
IkReal gconst114=x5474;
IkReal gconst115=((-1.0)*r21*x5475);
IkReal gconst116=(r20*x5475);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x5479 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5479.valid){
continue;
}
IkReal x5477=((-1.0)*(x5479.value));
IkReal x5478=x5470;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x5477;
IkReal gconst114=x5477;
IkReal gconst115=((-1.0)*r21*x5478);
IkReal gconst116=(r20*x5478);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x5482 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5482.valid){
continue;
}
IkReal x5480=((-1.0)*(x5482.value));
IkReal x5481=x5470;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x5480;
IkReal gconst114=x5480;
IkReal gconst115=((-1.0)*r21*x5481);
IkReal gconst116=(r20*x5481);
IkReal x5483=r22*r22;
CheckValue<IkReal> x5486=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x5483))),-1);
if(!x5486.valid){
continue;
}
IkReal x5484=x5486.value;
IkReal x5485=(x5483+((x5484*(r21*r21*r21*r21)))+((x5484*(r20*r20*r20*r20)))+(((2.0)*x5484*(r20*r20)*(r21*r21))));
j4eval[0]=x5485;
j4eval[1]=IKsign(x5485);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5487=(sj1*sj2);
IkReal x5488=(gconst116*r20);
IkReal x5489=(gconst115*r21);
IkReal x5490=(cj1*cj2);
CheckValue<IkReal> x5491=IKPowWithIntegerCheck(IKsign(((x5489*x5489)+(x5488*x5488)+(r22*r22)+(((-2.0)*x5488*x5489)))),-1);
if(!x5491.valid){
continue;
}
CheckValue<IkReal> x5492 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x5487))+((r22*x5490)))),IkReal(((((-1.0)*x5487*x5488))+((x5488*x5490))+((x5487*x5489))+(((-1.0)*x5489*x5490)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5492.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5491.value)))+(x5492.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5493=IKsin(j4);
IkReal x5494=IKcos(j4);
IkReal x5495=((1.0)*sj1);
IkReal x5496=((1.0)*x5494);
IkReal x5497=(gconst116*x5493);
IkReal x5498=(gconst115*x5494);
IkReal x5499=((1.0)*x5493);
IkReal x5500=((1.0)*cj1*sj2);
evalcond[0]=(((r20*x5497))+(((-1.0)*r22*x5496))+(((-1.0)*gconst115*r21*x5499)));
evalcond[1]=(sj0+((r00*x5497))+(((-1.0)*r02*x5496))+(((-1.0)*gconst115*r01*x5499)));
evalcond[2]=((((-1.0)*r12*x5496))+((r10*x5497))+(((-1.0)*cj0))+(((-1.0)*gconst115*r11*x5499)));
evalcond[3]=(((r21*x5498))+(((-1.0)*r22*x5499))+((cj1*cj2))+(((-1.0)*gconst116*r20*x5496))+(((-1.0)*sj2*x5495)));
evalcond[4]=((((-1.0)*gconst116*r00*x5496))+((r01*x5498))+(((-1.0)*cj0*x5500))+(((-1.0)*cj0*cj2*x5495))+(((-1.0)*r02*x5499)));
evalcond[5]=((((-1.0)*sj0*x5500))+(((-1.0)*r12*x5499))+((r11*x5498))+(((-1.0)*gconst116*r10*x5496))+(((-1.0)*cj2*sj0*x5495)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5501=((1.0)*gconst115);
CheckValue<IkReal> x5502 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst116*r20))+(((-1.0)*cj0*r21*x5501)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5502.valid){
continue;
}
CheckValue<IkReal> x5503=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x5501))+(((-1.0)*gconst116*r01)))),-1);
if(!x5503.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5502.value)+(((1.5707963267949)*(x5503.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5504=IKsin(j4);
IkReal x5505=IKcos(j4);
IkReal x5506=((1.0)*sj1);
IkReal x5507=((1.0)*x5505);
IkReal x5508=(gconst116*x5504);
IkReal x5509=(gconst115*x5505);
IkReal x5510=((1.0)*x5504);
IkReal x5511=((1.0)*cj1*sj2);
evalcond[0]=((((-1.0)*r22*x5507))+((r20*x5508))+(((-1.0)*gconst115*r21*x5510)));
evalcond[1]=(sj0+(((-1.0)*gconst115*r01*x5510))+(((-1.0)*r02*x5507))+((r00*x5508)));
evalcond[2]=(((r10*x5508))+(((-1.0)*r12*x5507))+(((-1.0)*gconst115*r11*x5510))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x5510))+((r21*x5509))+(((-1.0)*gconst116*r20*x5507))+((cj1*cj2))+(((-1.0)*sj2*x5506)));
evalcond[4]=((((-1.0)*gconst116*r00*x5507))+(((-1.0)*cj0*x5511))+(((-1.0)*r02*x5510))+((r01*x5509))+(((-1.0)*cj0*cj2*x5506)));
evalcond[5]=((((-1.0)*sj0*x5511))+(((-1.0)*r12*x5510))+(((-1.0)*gconst116*r10*x5507))+(((-1.0)*cj2*sj0*x5506))+((r11*x5509)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5512=((1.0)*gconst115);
CheckValue<IkReal> x5513 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst116*r20*sj0))+(((-1.0)*r21*sj0*x5512)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5513.valid){
continue;
}
CheckValue<IkReal> x5514=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x5512))+(((-1.0)*gconst116*r11)))),-1);
if(!x5514.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5513.value)+(((1.5707963267949)*(x5514.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5515=IKsin(j4);
IkReal x5516=IKcos(j4);
IkReal x5517=((1.0)*sj1);
IkReal x5518=((1.0)*x5516);
IkReal x5519=(gconst116*x5515);
IkReal x5520=(gconst115*x5516);
IkReal x5521=((1.0)*x5515);
IkReal x5522=((1.0)*cj1*sj2);
evalcond[0]=((((-1.0)*gconst115*r21*x5521))+(((-1.0)*r22*x5518))+((r20*x5519)));
evalcond[1]=((((-1.0)*gconst115*r01*x5521))+sj0+(((-1.0)*r02*x5518))+((r00*x5519)));
evalcond[2]=((((-1.0)*gconst115*r11*x5521))+((r10*x5519))+(((-1.0)*r12*x5518))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj2*x5517))+(((-1.0)*r22*x5521))+(((-1.0)*gconst116*r20*x5518))+((r21*x5520))+((cj1*cj2)));
evalcond[4]=((((-1.0)*cj0*x5522))+(((-1.0)*r02*x5521))+((r01*x5520))+(((-1.0)*cj0*cj2*x5517))+(((-1.0)*gconst116*r00*x5518)));
evalcond[5]=((((-1.0)*cj2*sj0*x5517))+(((-1.0)*gconst116*r10*x5518))+(((-1.0)*sj0*x5522))+((r11*x5520))+(((-1.0)*r12*x5521)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5524 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5524)==0){
continue;
}
IkReal x5523=pow(x5524,-0.5);
CheckValue<IkReal> x5525 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5525.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x5525.value))));
IkReal gconst118=((1.0)*r21*x5523);
IkReal gconst119=((-1.0)*r20*x5523);
CheckValue<IkReal> x5526 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5526.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5526.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x5529 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5529.valid){
continue;
}
IkReal x5527=((1.0)*(x5529.value));
IkReal x5528=x5523;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5527)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5527)));
IkReal gconst118=((1.0)*r21*x5528);
IkReal gconst119=((-1.0)*r20*x5528);
IkReal x5530=r22*r22;
IkReal x5531=((1.0)*x5530);
CheckValue<IkReal> x5535=IKPowWithIntegerCheck(((-1.0)+x5530),-1);
if(!x5535.valid){
continue;
}
IkReal x5532=x5535.value;
if((((1.0)+(((-1.0)*x5531)))) < -0.00001)
continue;
IkReal x5533=IKsqrt(((1.0)+(((-1.0)*x5531))));
IkReal x5534=(sj0*x5532*x5533);
j4eval[0]=((IKabs((x5534+(((-1.0)*x5531*x5534)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x5538 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5538.valid){
continue;
}
IkReal x5536=((1.0)*(x5538.value));
IkReal x5537=x5523;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5536)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5536)));
IkReal gconst118=((1.0)*r21*x5537);
IkReal gconst119=((-1.0)*r20*x5537);
IkReal x5539=r22*r22;
IkReal x5540=((1.0)*x5539);
CheckValue<IkReal> x5544=IKPowWithIntegerCheck(((-1.0)+x5539),-1);
if(!x5544.valid){
continue;
}
IkReal x5541=x5544.value;
if((((1.0)+(((-1.0)*x5540)))) < -0.00001)
continue;
IkReal x5542=IKsqrt(((1.0)+(((-1.0)*x5540))));
IkReal x5543=(cj0*x5541*x5542);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x5543+(((-1.0)*x5540*x5543))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x5547 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5547.valid){
continue;
}
IkReal x5545=((1.0)*(x5547.value));
IkReal x5546=x5523;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5545)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5545)));
IkReal gconst118=((1.0)*r21*x5546);
IkReal gconst119=((-1.0)*r20*x5546);
IkReal x5548=r22*r22;
IkReal x5549=(cj0*r02);
IkReal x5550=(r12*sj0);
CheckValue<IkReal> x5554=IKPowWithIntegerCheck(((-1.0)+x5548),-1);
if(!x5554.valid){
continue;
}
IkReal x5551=x5554.value;
if((((1.0)+(((-1.0)*x5548)))) < -0.00001)
continue;
IkReal x5552=IKsqrt(((1.0)+(((-1.0)*x5548))));
IkReal x5553=((1.0)*r22*x5551*x5552);
j4eval[0]=0;
j4eval[1]=((IKabs((x5549+x5550)))+(IKabs(((((-1.0)*x5550*x5553))+(((-1.0)*x5549*x5553))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5555=((1.0)*gconst118);
CheckValue<IkReal> x5556=IKPowWithIntegerCheck(IKsign((((gconst119*r21))+((gconst118*r20)))),-1);
if(!x5556.valid){
continue;
}
CheckValue<IkReal> x5557 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst119*r10*sj0))+(((-1.0)*cj0*r01*x5555))+((cj0*gconst119*r00))+(((-1.0)*r11*sj0*x5555)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5557.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5556.value)))+(x5557.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5558=IKsin(j4);
IkReal x5559=IKcos(j4);
IkReal x5560=(gconst118*r01);
IkReal x5561=((1.0)*sj1);
IkReal x5562=(gconst119*r10);
IkReal x5563=(gconst119*r20);
IkReal x5564=(gconst118*r21);
IkReal x5565=(gconst119*r00);
IkReal x5566=(gconst118*r11);
IkReal x5567=((1.0)*x5559);
IkReal x5568=((1.0)*x5558);
IkReal x5569=((1.0)*cj1*sj2);
evalcond[0]=((((-1.0)*x5564*x5568))+(((-1.0)*r22*x5567))+((x5558*x5563)));
evalcond[1]=(sj0+(((-1.0)*r02*x5567))+((x5558*x5565))+(((-1.0)*x5560*x5568)));
evalcond[2]=((((-1.0)*r12*x5567))+((x5558*x5562))+(((-1.0)*x5566*x5568))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x5568))+(((-1.0)*x5563*x5567))+((cj1*cj2))+(((-1.0)*sj2*x5561))+((x5559*x5564)));
evalcond[4]=((((-1.0)*cj0*cj2*x5561))+(((-1.0)*cj0*x5569))+(((-1.0)*r02*x5568))+(((-1.0)*x5565*x5567))+((x5559*x5560)));
evalcond[5]=((((-1.0)*r12*x5568))+(((-1.0)*sj0*x5569))+(((-1.0)*x5562*x5567))+(((-1.0)*cj2*sj0*x5561))+((x5559*x5566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5570=((1.0)*gconst118);
CheckValue<IkReal> x5571=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r01))+(((-1.0)*r00*x5570)))),-1);
if(!x5571.valid){
continue;
}
CheckValue<IkReal> x5572 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x5570))+((cj0*gconst119*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5572.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5571.value)))+(x5572.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5573=IKsin(j4);
IkReal x5574=IKcos(j4);
IkReal x5575=(gconst118*r01);
IkReal x5576=((1.0)*sj1);
IkReal x5577=(gconst119*r10);
IkReal x5578=(gconst119*r20);
IkReal x5579=(gconst118*r21);
IkReal x5580=(gconst119*r00);
IkReal x5581=(gconst118*r11);
IkReal x5582=((1.0)*x5574);
IkReal x5583=((1.0)*x5573);
IkReal x5584=((1.0)*cj1*sj2);
evalcond[0]=((((-1.0)*x5579*x5583))+((x5573*x5578))+(((-1.0)*r22*x5582)));
evalcond[1]=(sj0+(((-1.0)*r02*x5582))+(((-1.0)*x5575*x5583))+((x5573*x5580)));
evalcond[2]=((((-1.0)*r12*x5582))+((x5573*x5577))+(((-1.0)*x5581*x5583))+(((-1.0)*cj0)));
evalcond[3]=(((x5574*x5579))+(((-1.0)*x5578*x5582))+((cj1*cj2))+(((-1.0)*sj2*x5576))+(((-1.0)*r22*x5583)));
evalcond[4]=((((-1.0)*cj0*cj2*x5576))+((x5574*x5575))+(((-1.0)*cj0*x5584))+(((-1.0)*r02*x5583))+(((-1.0)*x5580*x5582)));
evalcond[5]=(((x5574*x5581))+(((-1.0)*r12*x5583))+(((-1.0)*x5577*x5582))+(((-1.0)*cj2*sj0*x5576))+(((-1.0)*sj0*x5584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5585=((1.0)*gconst118);
CheckValue<IkReal> x5586 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst119*r20*sj0))+(((-1.0)*r21*sj0*x5585)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5586.valid){
continue;
}
CheckValue<IkReal> x5587=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r11))+(((-1.0)*r10*x5585)))),-1);
if(!x5587.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5586.value)+(((1.5707963267949)*(x5587.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5588=IKsin(j4);
IkReal x5589=IKcos(j4);
IkReal x5590=(gconst118*r01);
IkReal x5591=((1.0)*sj1);
IkReal x5592=(gconst119*r10);
IkReal x5593=(gconst119*r20);
IkReal x5594=(gconst118*r21);
IkReal x5595=(gconst119*r00);
IkReal x5596=(gconst118*r11);
IkReal x5597=((1.0)*x5589);
IkReal x5598=((1.0)*x5588);
IkReal x5599=((1.0)*cj1*sj2);
evalcond[0]=((((-1.0)*x5594*x5598))+((x5588*x5593))+(((-1.0)*r22*x5597)));
evalcond[1]=(sj0+(((-1.0)*x5590*x5598))+(((-1.0)*r02*x5597))+((x5588*x5595)));
evalcond[2]=((((-1.0)*r12*x5597))+((x5588*x5592))+(((-1.0)*x5596*x5598))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj2*x5591))+(((-1.0)*x5593*x5597))+((cj1*cj2))+(((-1.0)*r22*x5598))+((x5589*x5594)));
evalcond[4]=((((-1.0)*x5595*x5597))+(((-1.0)*cj0*x5599))+(((-1.0)*r02*x5598))+(((-1.0)*cj0*cj2*x5591))+((x5589*x5590)));
evalcond[5]=((((-1.0)*r12*x5598))+(((-1.0)*cj2*sj0*x5591))+(((-1.0)*x5592*x5597))+(((-1.0)*sj0*x5599))+((x5589*x5596)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5600=((-1.0)*r00);
IkReal x5602 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5602)==0){
continue;
}
IkReal x5601=pow(x5602,-0.5);
CheckValue<IkReal> x5603 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5600),IKFAST_ATAN2_MAGTHRESH);
if(!x5603.valid){
continue;
}
IkReal gconst120=((-1.0)*(x5603.value));
IkReal gconst121=(r01*x5601);
IkReal gconst122=(x5600*x5601);
CheckValue<IkReal> x5604 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5604.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5604.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5605=((-1.0)*r00);
IkReal x5606=x5601;
CheckValue<IkReal> x5608 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5605),IKFAST_ATAN2_MAGTHRESH);
if(!x5608.valid){
continue;
}
IkReal x5607=((-1.0)*(x5608.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst121;
cj5=gconst122;
j5=x5607;
IkReal gconst120=x5607;
IkReal gconst121=(r01*x5606);
IkReal gconst122=(x5605*x5606);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5609=((1.0)*gconst121);
CheckValue<IkReal> x5610 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x5609))+(((-1.0)*r11*sj0*x5609))+((cj0*gconst122*r00))+((gconst122*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5610.valid){
continue;
}
CheckValue<IkReal> x5611=IKPowWithIntegerCheck(IKsign((((gconst122*r21))+((gconst121*r20)))),-1);
if(!x5611.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5610.value)+(((1.5707963267949)*(x5611.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5612=IKsin(j4);
IkReal x5613=IKcos(j4);
IkReal x5614=((1.0)*r22);
IkReal x5615=(gconst121*r11);
IkReal x5616=(gconst122*r00);
IkReal x5617=((1.0)*sj1);
IkReal x5618=(gconst122*r10);
IkReal x5619=(gconst121*r01);
IkReal x5620=(gconst122*r20);
IkReal x5621=(gconst121*r21);
IkReal x5622=((1.0)*x5613);
IkReal x5623=((1.0)*x5612);
IkReal x5624=((1.0)*cj1*sj2);
evalcond[0]=((((-1.0)*x5613*x5614))+(((-1.0)*x5621*x5623))+((x5612*x5620)));
evalcond[1]=(sj0+(((-1.0)*x5619*x5623))+(((-1.0)*r02*x5622))+((x5612*x5616)));
evalcond[2]=((((-1.0)*r12*x5622))+(((-1.0)*x5615*x5623))+((x5612*x5618))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x5612*x5614))+(((-1.0)*sj2*x5617))+((cj1*cj2))+(((-1.0)*x5620*x5622))+((x5613*x5621)));
evalcond[4]=(((x5613*x5619))+(((-1.0)*cj0*x5624))+(((-1.0)*cj0*cj2*x5617))+(((-1.0)*r02*x5623))+(((-1.0)*x5616*x5622)));
evalcond[5]=(((x5613*x5615))+(((-1.0)*x5618*x5622))+(((-1.0)*r12*x5623))+(((-1.0)*sj0*x5624))+(((-1.0)*cj2*sj0*x5617)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5625=((1.0)*gconst121);
CheckValue<IkReal> x5626=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x5625))+(((-1.0)*gconst122*r11)))),-1);
if(!x5626.valid){
continue;
}
CheckValue<IkReal> x5627 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst122*r20*sj0))+(((-1.0)*r21*sj0*x5625)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5627.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5626.value)))+(x5627.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5628=IKsin(j4);
IkReal x5629=IKcos(j4);
IkReal x5630=((1.0)*r22);
IkReal x5631=(gconst121*r11);
IkReal x5632=(gconst122*r00);
IkReal x5633=((1.0)*sj1);
IkReal x5634=(gconst122*r10);
IkReal x5635=(gconst121*r01);
IkReal x5636=(gconst122*r20);
IkReal x5637=(gconst121*r21);
IkReal x5638=((1.0)*x5629);
IkReal x5639=((1.0)*x5628);
IkReal x5640=((1.0)*cj1*sj2);
evalcond[0]=((((-1.0)*x5629*x5630))+((x5628*x5636))+(((-1.0)*x5637*x5639)));
evalcond[1]=(sj0+(((-1.0)*x5635*x5639))+(((-1.0)*r02*x5638))+((x5628*x5632)));
evalcond[2]=((((-1.0)*r12*x5638))+((x5628*x5634))+(((-1.0)*cj0))+(((-1.0)*x5631*x5639)));
evalcond[3]=((((-1.0)*x5628*x5630))+(((-1.0)*x5636*x5638))+((x5629*x5637))+((cj1*cj2))+(((-1.0)*sj2*x5633)));
evalcond[4]=((((-1.0)*x5632*x5638))+((x5629*x5635))+(((-1.0)*r02*x5639))+(((-1.0)*cj0*x5640))+(((-1.0)*cj0*cj2*x5633)));
evalcond[5]=((((-1.0)*r12*x5639))+(((-1.0)*sj0*x5640))+((x5629*x5631))+(((-1.0)*cj2*sj0*x5633))+(((-1.0)*x5634*x5638)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5641=((-1.0)*r01);
IkReal x5643 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5643)==0){
continue;
}
IkReal x5642=pow(x5643,-0.5);
CheckValue<IkReal> x5644 = IKatan2WithCheck(IkReal(x5641),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5644.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x5644.value))));
IkReal gconst124=(x5641*x5642);
IkReal gconst125=((1.0)*r00*x5642);
CheckValue<IkReal> x5645 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5645.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5645.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5646=((-1.0)*r01);
CheckValue<IkReal> x5649 = IKatan2WithCheck(IkReal(x5646),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5649.valid){
continue;
}
IkReal x5647=((1.0)*(x5649.value));
IkReal x5648=x5642;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5647)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5647)));
IkReal gconst124=(x5646*x5648);
IkReal gconst125=((1.0)*r00*x5648);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x5650=((-1.0)*r01);
CheckValue<IkReal> x5653 = IKatan2WithCheck(IkReal(x5650),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5653.valid){
continue;
}
IkReal x5651=((1.0)*(x5653.value));
IkReal x5652=x5642;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5651)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5651)));
IkReal gconst124=(x5650*x5652);
IkReal gconst125=((1.0)*r00*x5652);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5654=((-1.0)*r01);
CheckValue<IkReal> x5657 = IKatan2WithCheck(IkReal(x5654),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5657.valid){
continue;
}
IkReal x5655=((1.0)*(x5657.value));
IkReal x5656=x5642;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5655)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5655)));
IkReal gconst124=(x5654*x5656);
IkReal gconst125=((1.0)*r00*x5656);
IkReal x5658=r02*r02;
IkReal x5659=(r12*sj0);
IkReal x5660=x5642;
IkReal x5661=(cj0*x5660);
j4eval[0]=((IKabs((x5659+((cj0*r02)))))+(IKabs((((r02*x5659*x5660))+(((-1.0)*x5661))+((x5658*x5661))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5662=((1.0)*gconst124);
CheckValue<IkReal> x5663=IKPowWithIntegerCheck(IKsign((((gconst124*r20))+((gconst125*r21)))),-1);
if(!x5663.valid){
continue;
}
CheckValue<IkReal> x5664 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst125*r10*sj0))+(((-1.0)*cj0*r01*x5662))+((cj0*gconst125*r00))+(((-1.0)*r11*sj0*x5662)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5664.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5663.value)))+(x5664.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5665=IKsin(j4);
IkReal x5666=IKcos(j4);
IkReal x5667=((1.0)*sj1);
IkReal x5668=((1.0)*x5666);
IkReal x5669=(gconst125*x5665);
IkReal x5670=(gconst124*x5666);
IkReal x5671=((1.0)*x5665);
IkReal x5672=((1.0)*cj1*sj2);
evalcond[0]=((((-1.0)*gconst124*r21*x5671))+(((-1.0)*r22*x5668))+((r20*x5669)));
evalcond[1]=(((r00*x5669))+sj0+(((-1.0)*r02*x5668))+(((-1.0)*gconst124*r01*x5671)));
evalcond[2]=((((-1.0)*gconst124*r11*x5671))+(((-1.0)*r12*x5668))+((r10*x5669))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x5671))+(((-1.0)*gconst125*r20*x5668))+(((-1.0)*sj2*x5667))+((r21*x5670))+((cj1*cj2)));
evalcond[4]=((((-1.0)*cj0*x5672))+(((-1.0)*gconst125*r00*x5668))+((r01*x5670))+(((-1.0)*cj0*cj2*x5667))+(((-1.0)*r02*x5671)));
evalcond[5]=((((-1.0)*gconst125*r10*x5668))+(((-1.0)*r12*x5671))+((r11*x5670))+(((-1.0)*cj2*sj0*x5667))+(((-1.0)*sj0*x5672)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5673=((1.0)*gconst124);
CheckValue<IkReal> x5674 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x5673))+((cj0*gconst125*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5674.valid){
continue;
}
CheckValue<IkReal> x5675=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x5673))+(((-1.0)*gconst125*r01)))),-1);
if(!x5675.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5674.value)+(((1.5707963267949)*(x5675.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5676=IKsin(j4);
IkReal x5677=IKcos(j4);
IkReal x5678=((1.0)*sj1);
IkReal x5679=((1.0)*x5677);
IkReal x5680=(gconst125*x5676);
IkReal x5681=(gconst124*x5677);
IkReal x5682=((1.0)*x5676);
IkReal x5683=((1.0)*cj1*sj2);
evalcond[0]=((((-1.0)*gconst124*r21*x5682))+(((-1.0)*r22*x5679))+((r20*x5680)));
evalcond[1]=(sj0+((r00*x5680))+(((-1.0)*gconst124*r01*x5682))+(((-1.0)*r02*x5679)));
evalcond[2]=((((-1.0)*gconst124*r11*x5682))+(((-1.0)*r12*x5679))+((r10*x5680))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj2*x5678))+(((-1.0)*r22*x5682))+((cj1*cj2))+((r21*x5681))+(((-1.0)*gconst125*r20*x5679)));
evalcond[4]=((((-1.0)*r02*x5682))+(((-1.0)*cj0*x5683))+(((-1.0)*gconst125*r00*x5679))+(((-1.0)*cj0*cj2*x5678))+((r01*x5681)));
evalcond[5]=((((-1.0)*cj2*sj0*x5678))+(((-1.0)*sj0*x5683))+(((-1.0)*gconst125*r10*x5679))+((r11*x5681))+(((-1.0)*r12*x5682)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5684=((1.0)*gconst124);
CheckValue<IkReal> x5685=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x5684))+(((-1.0)*gconst125*r11)))),-1);
if(!x5685.valid){
continue;
}
CheckValue<IkReal> x5686 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x5684))+((gconst125*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5686.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5685.value)))+(x5686.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5687=IKsin(j4);
IkReal x5688=IKcos(j4);
IkReal x5689=((1.0)*sj1);
IkReal x5690=((1.0)*x5688);
IkReal x5691=(gconst125*x5687);
IkReal x5692=(gconst124*x5688);
IkReal x5693=((1.0)*x5687);
IkReal x5694=((1.0)*cj1*sj2);
evalcond[0]=((((-1.0)*gconst124*r21*x5693))+(((-1.0)*r22*x5690))+((r20*x5691)));
evalcond[1]=(sj0+(((-1.0)*r02*x5690))+((r00*x5691))+(((-1.0)*gconst124*r01*x5693)));
evalcond[2]=((((-1.0)*gconst124*r11*x5693))+((r10*x5691))+(((-1.0)*r12*x5690))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj2*x5689))+(((-1.0)*r22*x5693))+(((-1.0)*gconst125*r20*x5690))+((cj1*cj2))+((r21*x5692)));
evalcond[4]=((((-1.0)*r02*x5693))+(((-1.0)*cj0*x5694))+(((-1.0)*gconst125*r00*x5690))+(((-1.0)*cj0*cj2*x5689))+((r01*x5692)));
evalcond[5]=((((-1.0)*sj0*x5694))+(((-1.0)*cj2*sj0*x5689))+((r11*x5692))+(((-1.0)*r12*x5693))+(((-1.0)*gconst125*r10*x5690)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5695=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5695;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x5695);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5696=((1.0)*sj5);
IkReal x5697=((((-1.0)*cj5*r11))+(((-1.0)*r10*x5696)));
j4eval[0]=x5697;
j4eval[1]=IKsign(x5697);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x5696))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5698=cj5*cj5;
IkReal x5699=r01*r01;
IkReal x5700=(cj5*r00);
IkReal x5701=(r01*sj5);
IkReal x5702=(x5699+(((-2.0)*x5700*x5701))+(r02*r02)+(((-1.0)*x5698*x5699))+((x5698*(r00*r00))));
j4eval[0]=x5702;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x5700))+x5701))));
j4eval[2]=IKsign(x5702);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5703=cj5*cj5;
IkReal x5704=r01*r01;
IkReal x5705=(r01*sj5);
IkReal x5706=(cj5*r00);
CheckValue<IkReal> x5707 = IKatan2WithCheck(IkReal(((((-1.0)*x5706))+x5705)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x5707.valid){
continue;
}
CheckValue<IkReal> x5708=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5703*x5704))+(((-2.0)*x5705*x5706))+(r02*r02)+x5704+((x5703*(r00*r00))))),-1);
if(!x5708.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5707.value)+(((1.5707963267949)*(x5708.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5709=IKsin(j4);
IkReal x5710=IKcos(j4);
IkReal x5711=(cj5*r00);
IkReal x5712=((1.0)*sj2);
IkReal x5713=(cj5*r20);
IkReal x5714=(cj5*r10);
IkReal x5715=((1.0)*x5710);
IkReal x5716=(sj5*x5710);
IkReal x5717=((1.0)*x5709);
IkReal x5718=(sj5*x5717);
evalcond[0]=((((-1.0)*r22*x5715))+(((-1.0)*r21*x5718))+((x5709*x5713)));
evalcond[1]=((((-1.0)*r12*x5715))+(((-1.0)*r11*x5718))+((x5709*x5714)));
evalcond[2]=((((-1.0)*x5711*x5715))+((r01*x5716))+(((-1.0)*r02*x5717)));
evalcond[3]=((1.0)+(((-1.0)*r01*x5718))+((x5709*x5711))+(((-1.0)*r02*x5715)));
evalcond[4]=((((-1.0)*sj1*x5712))+(((-1.0)*r22*x5717))+(((-1.0)*x5713*x5715))+((cj1*cj2))+((r21*x5716)));
evalcond[5]=((((-1.0)*x5714*x5715))+(((-1.0)*cj2*sj1))+((r11*x5716))+(((-1.0)*cj1*x5712))+(((-1.0)*r12*x5717)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5719=((1.0)*sj5);
CheckValue<IkReal> x5720 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x5719)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5720.valid){
continue;
}
CheckValue<IkReal> x5721=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x5719)))),-1);
if(!x5721.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5720.value)+(((1.5707963267949)*(x5721.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5722=IKsin(j4);
IkReal x5723=IKcos(j4);
IkReal x5724=(cj5*r00);
IkReal x5725=((1.0)*sj2);
IkReal x5726=(cj5*r20);
IkReal x5727=(cj5*r10);
IkReal x5728=((1.0)*x5723);
IkReal x5729=(sj5*x5723);
IkReal x5730=((1.0)*x5722);
IkReal x5731=(sj5*x5730);
evalcond[0]=((((-1.0)*r21*x5731))+((x5722*x5726))+(((-1.0)*r22*x5728)));
evalcond[1]=((((-1.0)*r11*x5731))+(((-1.0)*r12*x5728))+((x5722*x5727)));
evalcond[2]=(((r01*x5729))+(((-1.0)*r02*x5730))+(((-1.0)*x5724*x5728)));
evalcond[3]=((1.0)+(((-1.0)*r02*x5728))+((x5722*x5724))+(((-1.0)*r01*x5731)));
evalcond[4]=(((r21*x5729))+(((-1.0)*r22*x5730))+(((-1.0)*sj1*x5725))+(((-1.0)*x5726*x5728))+((cj1*cj2)));
evalcond[5]=(((r11*x5729))+(((-1.0)*x5727*x5728))+(((-1.0)*r12*x5730))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x5725)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5732 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5732.valid){
continue;
}
CheckValue<IkReal> x5733=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5733.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5732.value)+(((1.5707963267949)*(x5733.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5734=IKsin(j4);
IkReal x5735=IKcos(j4);
IkReal x5736=(cj5*r00);
IkReal x5737=((1.0)*sj2);
IkReal x5738=(cj5*r20);
IkReal x5739=(cj5*r10);
IkReal x5740=((1.0)*x5735);
IkReal x5741=(sj5*x5735);
IkReal x5742=((1.0)*x5734);
IkReal x5743=(sj5*x5742);
evalcond[0]=((((-1.0)*r21*x5743))+((x5734*x5738))+(((-1.0)*r22*x5740)));
evalcond[1]=(((x5734*x5739))+(((-1.0)*r11*x5743))+(((-1.0)*r12*x5740)));
evalcond[2]=(((r01*x5741))+(((-1.0)*r02*x5742))+(((-1.0)*x5736*x5740)));
evalcond[3]=((1.0)+(((-1.0)*r01*x5743))+((x5734*x5736))+(((-1.0)*r02*x5740)));
evalcond[4]=((((-1.0)*sj1*x5737))+(((-1.0)*x5738*x5740))+(((-1.0)*r22*x5742))+((cj1*cj2))+((r21*x5741)));
evalcond[5]=(((r11*x5741))+(((-1.0)*cj2*sj1))+(((-1.0)*x5739*x5740))+(((-1.0)*r12*x5742))+(((-1.0)*cj1*x5737)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5744=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5744;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x5744);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5745=((1.0)*sj5);
IkReal x5746=((((-1.0)*r20*x5745))+(((-1.0)*cj5*r21)));
j4eval[0]=x5746;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x5745))))));
j4eval[2]=IKsign(x5746);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5747=cj5*cj5;
IkReal x5748=r01*r01;
IkReal x5749=(r01*sj5);
IkReal x5750=(cj5*r00);
IkReal x5751=((((-1.0)*(r02*r02)))+(((-1.0)*x5747*(r00*r00)))+(((2.0)*x5749*x5750))+(((-1.0)*x5748))+((x5747*x5748)));
j4eval[0]=x5751;
j4eval[1]=IKsign(x5751);
j4eval[2]=((IKabs(((((-1.0)*x5750))+x5749)))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5752=cj5*cj5;
IkReal x5753=r01*r01;
IkReal x5754=(r01*sj5);
IkReal x5755=(cj5*r00);
CheckValue<IkReal> x5756 = IKatan2WithCheck(IkReal(((((-1.0)*x5755))+x5754)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x5756.valid){
continue;
}
CheckValue<IkReal> x5757=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5752*(r00*r00)))+(((2.0)*x5754*x5755))+(((-1.0)*(r02*r02)))+((x5752*x5753))+(((-1.0)*x5753)))),-1);
if(!x5757.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5756.value)+(((1.5707963267949)*(x5757.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5758=IKsin(j4);
IkReal x5759=IKcos(j4);
IkReal x5760=(cj5*r00);
IkReal x5761=(r11*sj5);
IkReal x5762=((1.0)*x5759);
IkReal x5763=((1.0)*x5758);
IkReal x5764=(sj5*x5759);
IkReal x5765=(cj5*x5758);
evalcond[0]=((((-1.0)*r21*sj5*x5763))+(((-1.0)*r22*x5762))+((r20*x5765)));
evalcond[1]=((((-1.0)*x5761*x5763))+(((-1.0)*r12*x5762))+((r10*x5765)));
evalcond[2]=(((r01*x5764))+(((-1.0)*x5760*x5762))+(((-1.0)*r02*x5763)));
evalcond[3]=((-1.0)+(((-1.0)*r01*sj5*x5763))+(((-1.0)*r02*x5762))+((x5758*x5760)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x5763))+((cj1*sj2))+(((-1.0)*cj5*r10*x5762))+((x5759*x5761)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*cj5*r20*x5762))+((r21*x5764))+(((-1.0)*r22*x5763))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5766=((1.0)*sj5);
CheckValue<IkReal> x5767=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x5766))+(((-1.0)*cj5*r21)))),-1);
if(!x5767.valid){
continue;
}
CheckValue<IkReal> x5768 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x5766)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5768.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5767.value)))+(x5768.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5769=IKsin(j4);
IkReal x5770=IKcos(j4);
IkReal x5771=(cj5*r00);
IkReal x5772=(r11*sj5);
IkReal x5773=((1.0)*x5770);
IkReal x5774=((1.0)*x5769);
IkReal x5775=(sj5*x5770);
IkReal x5776=(cj5*x5769);
evalcond[0]=((((-1.0)*r21*sj5*x5774))+(((-1.0)*r22*x5773))+((r20*x5776)));
evalcond[1]=((((-1.0)*r12*x5773))+((r10*x5776))+(((-1.0)*x5772*x5774)));
evalcond[2]=(((r01*x5775))+(((-1.0)*x5771*x5773))+(((-1.0)*r02*x5774)));
evalcond[3]=((-1.0)+(((-1.0)*r01*sj5*x5774))+((x5769*x5771))+(((-1.0)*r02*x5773)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x5774))+((x5770*x5772))+((cj1*sj2))+(((-1.0)*cj5*r10*x5773)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*cj5*r20*x5773))+((r21*x5775))+(((-1.0)*r22*x5774))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5777=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5777.valid){
continue;
}
CheckValue<IkReal> x5778 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5778.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5777.value)))+(x5778.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5779=IKsin(j4);
IkReal x5780=IKcos(j4);
IkReal x5781=(cj5*r00);
IkReal x5782=(r11*sj5);
IkReal x5783=((1.0)*x5780);
IkReal x5784=((1.0)*x5779);
IkReal x5785=(sj5*x5780);
IkReal x5786=(cj5*x5779);
evalcond[0]=(((r20*x5786))+(((-1.0)*r22*x5783))+(((-1.0)*r21*sj5*x5784)));
evalcond[1]=((((-1.0)*x5782*x5784))+(((-1.0)*r12*x5783))+((r10*x5786)));
evalcond[2]=(((r01*x5785))+(((-1.0)*x5781*x5783))+(((-1.0)*r02*x5784)));
evalcond[3]=((-1.0)+(((-1.0)*r01*sj5*x5784))+((x5779*x5781))+(((-1.0)*r02*x5783)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*cj5*r10*x5783))+(((-1.0)*r12*x5784))+((x5780*x5782)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*cj5*r20*x5783))+((r21*x5785))+((cj1*cj2))+(((-1.0)*r22*x5784)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5787=((-1.0)*r10);
IkReal x5789 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5789)==0){
continue;
}
IkReal x5788=pow(x5789,-0.5);
CheckValue<IkReal> x5790 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5787),IKFAST_ATAN2_MAGTHRESH);
if(!x5790.valid){
continue;
}
IkReal gconst126=((-1.0)*(x5790.value));
IkReal gconst127=(r11*x5788);
IkReal gconst128=(x5787*x5788);
CheckValue<IkReal> x5791 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5791.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5791.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5792=((-1.0)*r10);
IkReal x5793=x5788;
CheckValue<IkReal> x5795 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5792),IKFAST_ATAN2_MAGTHRESH);
if(!x5795.valid){
continue;
}
IkReal x5794=((-1.0)*(x5795.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst127;
cj5=gconst128;
j5=x5794;
IkReal gconst126=x5794;
IkReal gconst127=(r11*x5793);
IkReal gconst128=(x5792*x5793);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5796=((1.0)*gconst127);
CheckValue<IkReal> x5797 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst128*r10*sj0))+(((-1.0)*r11*sj0*x5796))+((cj0*gconst128*r00))+(((-1.0)*cj0*r01*x5796)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5797.valid){
continue;
}
CheckValue<IkReal> x5798=IKPowWithIntegerCheck(IKsign((((gconst127*r20))+((gconst128*r21)))),-1);
if(!x5798.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5797.value)+(((1.5707963267949)*(x5798.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5799=IKsin(j4);
IkReal x5800=IKcos(j4);
IkReal x5801=(gconst128*r10);
IkReal x5802=((1.0)*sj1);
IkReal x5803=((1.0)*x5800);
IkReal x5804=(gconst127*x5800);
IkReal x5805=((1.0)*x5799);
IkReal x5806=(gconst128*x5799);
IkReal x5807=((1.0)*cj1*sj2);
evalcond[0]=((((-1.0)*gconst127*r21*x5805))+(((-1.0)*r22*x5803))+((r20*x5806)));
evalcond[1]=(sj0+((r00*x5806))+(((-1.0)*r02*x5803))+(((-1.0)*gconst127*r01*x5805)));
evalcond[2]=((((-1.0)*gconst127*r11*x5805))+((x5799*x5801))+(((-1.0)*r12*x5803))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x5805))+((r21*x5804))+(((-1.0)*gconst128*r20*x5803))+(((-1.0)*sj2*x5802))+((cj1*cj2)));
evalcond[4]=(((r01*x5804))+(((-1.0)*cj0*x5807))+(((-1.0)*cj0*cj2*x5802))+(((-1.0)*gconst128*r00*x5803))+(((-1.0)*r02*x5805)));
evalcond[5]=((((-1.0)*cj2*sj0*x5802))+(((-1.0)*r12*x5805))+((r11*x5804))+(((-1.0)*sj0*x5807))+(((-1.0)*x5801*x5803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5808=((1.0)*gconst127);
CheckValue<IkReal> x5809=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst128*r01))+(((-1.0)*r00*x5808)))),-1);
if(!x5809.valid){
continue;
}
CheckValue<IkReal> x5810 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst128*r20))+(((-1.0)*cj0*r21*x5808)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5810.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5809.value)))+(x5810.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5811=IKsin(j4);
IkReal x5812=IKcos(j4);
IkReal x5813=(gconst128*r10);
IkReal x5814=((1.0)*sj1);
IkReal x5815=((1.0)*x5812);
IkReal x5816=(gconst127*x5812);
IkReal x5817=((1.0)*x5811);
IkReal x5818=(gconst128*x5811);
IkReal x5819=((1.0)*cj1*sj2);
evalcond[0]=((((-1.0)*gconst127*r21*x5817))+((r20*x5818))+(((-1.0)*r22*x5815)));
evalcond[1]=(sj0+(((-1.0)*r02*x5815))+(((-1.0)*gconst127*r01*x5817))+((r00*x5818)));
evalcond[2]=((((-1.0)*r12*x5815))+(((-1.0)*gconst127*r11*x5817))+((x5811*x5813))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x5816))+(((-1.0)*gconst128*r20*x5815))+(((-1.0)*sj2*x5814))+((cj1*cj2))+(((-1.0)*r22*x5817)));
evalcond[4]=((((-1.0)*cj0*x5819))+(((-1.0)*cj0*cj2*x5814))+(((-1.0)*r02*x5817))+(((-1.0)*gconst128*r00*x5815))+((r01*x5816)));
evalcond[5]=((((-1.0)*r12*x5817))+(((-1.0)*sj0*x5819))+(((-1.0)*cj2*sj0*x5814))+(((-1.0)*x5813*x5815))+((r11*x5816)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5820=((-1.0)*r11);
IkReal x5822 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5822)==0){
continue;
}
IkReal x5821=pow(x5822,-0.5);
CheckValue<IkReal> x5823 = IKatan2WithCheck(IkReal(x5820),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5823.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x5823.value))));
IkReal gconst130=(x5820*x5821);
IkReal gconst131=((1.0)*r10*x5821);
CheckValue<IkReal> x5824 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5824.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5824.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5825=((-1.0)*r11);
CheckValue<IkReal> x5828 = IKatan2WithCheck(IkReal(x5825),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5828.valid){
continue;
}
IkReal x5826=((1.0)*(x5828.value));
IkReal x5827=x5821;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5826)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5826)));
IkReal gconst130=(x5825*x5827);
IkReal gconst131=((1.0)*r10*x5827);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5829=((-1.0)*r11);
CheckValue<IkReal> x5832 = IKatan2WithCheck(IkReal(x5829),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5832.valid){
continue;
}
IkReal x5830=((1.0)*(x5832.value));
IkReal x5831=x5821;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5830)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5830)));
IkReal gconst130=(x5829*x5831);
IkReal gconst131=((1.0)*r10*x5831);
IkReal x5833=r12*r12;
IkReal x5834=(cj0*r02);
IkReal x5835=x5821;
IkReal x5836=(sj0*x5835);
j4eval[0]=((IKabs((((r12*sj0))+x5834)))+(IKabs((((r12*x5834*x5835))+((x5833*x5836))+(((-1.0)*x5836))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5837=((-1.0)*r11);
CheckValue<IkReal> x5840 = IKatan2WithCheck(IkReal(x5837),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5840.valid){
continue;
}
IkReal x5838=((1.0)*(x5840.value));
IkReal x5839=x5821;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5838)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5838)));
IkReal gconst130=(x5837*x5839);
IkReal gconst131=((1.0)*r10*x5839);
IkReal x5841=r12*r12;
IkReal x5842=(cj1*cj2*r22);
CheckValue<IkReal> x5847=IKPowWithIntegerCheck(((-1.0)+x5841),-1);
if(!x5847.valid){
continue;
}
IkReal x5843=x5847.value;
IkReal x5844=((1.0)*r22*sj1*sj2);
if((((1.0)+(((-1.0)*x5841)))) < -0.00001)
continue;
IkReal x5845=IKsqrt(((1.0)+(((-1.0)*x5841))));
IkReal x5846=(r12*x5843*x5845);
j4eval[0]=((IKabs((((x5842*x5846))+(((-1.0)*x5844*x5846)))))+(IKabs(((((-1.0)*x5844))+x5842))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5848=(gconst131*r20);
IkReal x5849=(cj1*cj2);
IkReal x5850=(sj1*sj2);
IkReal x5851=(gconst130*r21);
CheckValue<IkReal> x5852 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x5850))+((r22*x5849)))),IkReal((((x5848*x5849))+(((-1.0)*x5848*x5850))+((x5850*x5851))+(((-1.0)*x5849*x5851)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5852.valid){
continue;
}
CheckValue<IkReal> x5853=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x5851*x5851)+(x5848*x5848)+(((-2.0)*x5848*x5851)))),-1);
if(!x5853.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5852.value)+(((1.5707963267949)*(x5853.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5854=IKsin(j4);
IkReal x5855=IKcos(j4);
IkReal x5856=(gconst131*r10);
IkReal x5857=((1.0)*sj1);
IkReal x5858=(gconst131*r20);
IkReal x5859=(gconst131*r00);
IkReal x5860=((1.0)*x5855);
IkReal x5861=(gconst130*x5855);
IkReal x5862=((1.0)*x5854);
IkReal x5863=((1.0)*cj1*sj2);
evalcond[0]=((((-1.0)*r22*x5860))+(((-1.0)*gconst130*r21*x5862))+((x5854*x5858)));
evalcond[1]=(sj0+(((-1.0)*gconst130*r01*x5862))+((x5854*x5859))+(((-1.0)*r02*x5860)));
evalcond[2]=(((x5854*x5856))+(((-1.0)*gconst130*r11*x5862))+(((-1.0)*cj0))+(((-1.0)*r12*x5860)));
evalcond[3]=((((-1.0)*r22*x5862))+((r21*x5861))+(((-1.0)*x5858*x5860))+((cj1*cj2))+(((-1.0)*sj2*x5857)));
evalcond[4]=((((-1.0)*cj0*x5863))+(((-1.0)*x5859*x5860))+(((-1.0)*r02*x5862))+(((-1.0)*cj0*cj2*x5857))+((r01*x5861)));
evalcond[5]=((((-1.0)*sj0*x5863))+((r11*x5861))+(((-1.0)*x5856*x5860))+(((-1.0)*cj2*sj0*x5857))+(((-1.0)*r12*x5862)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5864=((1.0)*gconst130);
CheckValue<IkReal> x5865 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x5864))+(((-1.0)*cj0*r01*x5864))+((gconst131*r10*sj0))+((cj0*gconst131*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5865.valid){
continue;
}
CheckValue<IkReal> x5866=IKPowWithIntegerCheck(IKsign((((gconst131*r21))+((gconst130*r20)))),-1);
if(!x5866.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5865.value)+(((1.5707963267949)*(x5866.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5867=IKsin(j4);
IkReal x5868=IKcos(j4);
IkReal x5869=(gconst131*r10);
IkReal x5870=((1.0)*sj1);
IkReal x5871=(gconst131*r20);
IkReal x5872=(gconst131*r00);
IkReal x5873=((1.0)*x5868);
IkReal x5874=(gconst130*x5868);
IkReal x5875=((1.0)*x5867);
IkReal x5876=((1.0)*cj1*sj2);
evalcond[0]=(((x5867*x5871))+(((-1.0)*r22*x5873))+(((-1.0)*gconst130*r21*x5875)));
evalcond[1]=((((-1.0)*gconst130*r01*x5875))+((x5867*x5872))+sj0+(((-1.0)*r02*x5873)));
evalcond[2]=((((-1.0)*r12*x5873))+((x5867*x5869))+(((-1.0)*gconst130*r11*x5875))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x5875))+(((-1.0)*x5871*x5873))+(((-1.0)*sj2*x5870))+((cj1*cj2))+((r21*x5874)));
evalcond[4]=((((-1.0)*cj0*x5876))+(((-1.0)*x5872*x5873))+(((-1.0)*cj0*cj2*x5870))+(((-1.0)*r02*x5875))+((r01*x5874)));
evalcond[5]=((((-1.0)*sj0*x5876))+(((-1.0)*r12*x5875))+(((-1.0)*cj2*sj0*x5870))+((r11*x5874))+(((-1.0)*x5869*x5873)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5877=((1.0)*gconst130);
CheckValue<IkReal> x5878=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst131*r01))+(((-1.0)*r00*x5877)))),-1);
if(!x5878.valid){
continue;
}
CheckValue<IkReal> x5879 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x5877))+((cj0*gconst131*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5879.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5878.value)))+(x5879.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5880=IKsin(j4);
IkReal x5881=IKcos(j4);
IkReal x5882=(gconst131*r10);
IkReal x5883=((1.0)*sj1);
IkReal x5884=(gconst131*r20);
IkReal x5885=(gconst131*r00);
IkReal x5886=((1.0)*x5881);
IkReal x5887=(gconst130*x5881);
IkReal x5888=((1.0)*x5880);
IkReal x5889=((1.0)*cj1*sj2);
evalcond[0]=(((x5880*x5884))+(((-1.0)*gconst130*r21*x5888))+(((-1.0)*r22*x5886)));
evalcond[1]=(sj0+((x5880*x5885))+(((-1.0)*r02*x5886))+(((-1.0)*gconst130*r01*x5888)));
evalcond[2]=((((-1.0)*gconst130*r11*x5888))+((x5880*x5882))+(((-1.0)*r12*x5886))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj2*x5883))+((r21*x5887))+(((-1.0)*x5884*x5886))+((cj1*cj2))+(((-1.0)*r22*x5888)));
evalcond[4]=(((r01*x5887))+(((-1.0)*x5885*x5886))+(((-1.0)*cj0*x5889))+(((-1.0)*cj0*cj2*x5883))+(((-1.0)*r02*x5888)));
evalcond[5]=((((-1.0)*x5882*x5886))+((r11*x5887))+(((-1.0)*r12*x5888))+(((-1.0)*sj0*x5889))+(((-1.0)*cj2*sj0*x5883)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5890=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5890;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x5890);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5891=((1.0)*sj5);
IkReal x5892=((((-1.0)*r00*x5891))+(((-1.0)*cj5*r01)));
j4eval[0]=x5892;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x5891))))));
j4eval[2]=IKsign(x5892);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5893=cj5*cj5;
IkReal x5894=r11*r11;
IkReal x5895=(cj5*r10);
IkReal x5896=(r11*sj5);
IkReal x5897=((((-1.0)*x5894))+(((-1.0)*(r12*r12)))+((x5893*x5894))+(((-1.0)*x5893*(r10*r10)))+(((2.0)*x5895*x5896)));
j4eval[0]=x5897;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x5895))+x5896))));
j4eval[2]=IKsign(x5897);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5898=cj5*cj5;
IkReal x5899=r11*r11;
IkReal x5900=(cj5*r10);
IkReal x5901=(r11*sj5);
CheckValue<IkReal> x5902 = IKatan2WithCheck(IkReal((x5901+(((-1.0)*x5900)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x5902.valid){
continue;
}
CheckValue<IkReal> x5903=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5899))+(((-1.0)*(r12*r12)))+(((-1.0)*x5898*(r10*r10)))+(((2.0)*x5900*x5901))+((x5898*x5899)))),-1);
if(!x5903.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5902.value)+(((1.5707963267949)*(x5903.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5904=IKsin(j4);
IkReal x5905=IKcos(j4);
IkReal x5906=(cj5*r00);
IkReal x5907=((1.0)*sj2);
IkReal x5908=((1.0)*x5905);
IkReal x5909=(sj5*x5905);
IkReal x5910=(cj5*x5904);
IkReal x5911=((1.0)*x5904);
IkReal x5912=(sj5*x5911);
evalcond[0]=((((-1.0)*r21*x5912))+(((-1.0)*r22*x5908))+((r20*x5910)));
evalcond[1]=((((-1.0)*r02*x5908))+((x5904*x5906))+(((-1.0)*r01*x5912)));
evalcond[2]=((((-1.0)*r12*x5911))+(((-1.0)*cj5*r10*x5908))+((r11*x5909)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x5912))+(((-1.0)*r12*x5908))+((r10*x5910)));
evalcond[4]=((((-1.0)*sj1*x5907))+(((-1.0)*r22*x5911))+(((-1.0)*cj5*r20*x5908))+((cj1*cj2))+((r21*x5909)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*x5907))+(((-1.0)*x5906*x5908))+(((-1.0)*r02*x5911))+((r01*x5909)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5913=((1.0)*sj5);
CheckValue<IkReal> x5914 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x5913)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5914.valid){
continue;
}
CheckValue<IkReal> x5915=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x5913))+(((-1.0)*cj5*r01)))),-1);
if(!x5915.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5914.value)+(((1.5707963267949)*(x5915.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5916=IKsin(j4);
IkReal x5917=IKcos(j4);
IkReal x5918=(cj5*r00);
IkReal x5919=((1.0)*sj2);
IkReal x5920=((1.0)*x5917);
IkReal x5921=(sj5*x5917);
IkReal x5922=(cj5*x5916);
IkReal x5923=((1.0)*x5916);
IkReal x5924=(sj5*x5923);
evalcond[0]=((((-1.0)*r22*x5920))+((r20*x5922))+(((-1.0)*r21*x5924)));
evalcond[1]=(((x5916*x5918))+(((-1.0)*r01*x5924))+(((-1.0)*r02*x5920)));
evalcond[2]=((((-1.0)*cj5*r10*x5920))+((r11*x5921))+(((-1.0)*r12*x5923)));
evalcond[3]=((-1.0)+((r10*x5922))+(((-1.0)*r12*x5920))+(((-1.0)*r11*x5924)));
evalcond[4]=((((-1.0)*r22*x5923))+(((-1.0)*sj1*x5919))+((r21*x5921))+((cj1*cj2))+(((-1.0)*cj5*r20*x5920)));
evalcond[5]=((((-1.0)*x5918*x5920))+(((-1.0)*cj2*sj1))+(((-1.0)*r02*x5923))+(((-1.0)*cj1*x5919))+((r01*x5921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5925=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5925.valid){
continue;
}
CheckValue<IkReal> x5926 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5926.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5925.value)))+(x5926.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5927=IKsin(j4);
IkReal x5928=IKcos(j4);
IkReal x5929=(cj5*r00);
IkReal x5930=((1.0)*sj2);
IkReal x5931=((1.0)*x5928);
IkReal x5932=(sj5*x5928);
IkReal x5933=(cj5*x5927);
IkReal x5934=((1.0)*x5927);
IkReal x5935=(sj5*x5934);
evalcond[0]=(((r20*x5933))+(((-1.0)*r21*x5935))+(((-1.0)*r22*x5931)));
evalcond[1]=((((-1.0)*r01*x5935))+(((-1.0)*r02*x5931))+((x5927*x5929)));
evalcond[2]=((((-1.0)*cj5*r10*x5931))+((r11*x5932))+(((-1.0)*r12*x5934)));
evalcond[3]=((-1.0)+((r10*x5933))+(((-1.0)*r11*x5935))+(((-1.0)*r12*x5931)));
evalcond[4]=(((r21*x5932))+(((-1.0)*sj1*x5930))+((cj1*cj2))+(((-1.0)*cj5*r20*x5931))+(((-1.0)*r22*x5934)));
evalcond[5]=((((-1.0)*x5929*x5931))+(((-1.0)*r02*x5934))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x5930))+((r01*x5932)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5936=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5936;
j4eval[1]=IKsign(x5936);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5937=((1.0)*sj5);
IkReal x5938=((((-1.0)*cj5*r21))+(((-1.0)*r20*x5937)));
j4eval[0]=x5938;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x5937))+((cj5*r00))))));
j4eval[2]=IKsign(x5938);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5939=cj5*cj5;
IkReal x5940=r11*r11;
IkReal x5941=(r11*sj5);
IkReal x5942=(cj5*r10);
IkReal x5943=((r12*r12)+((x5939*(r10*r10)))+(((-1.0)*x5939*x5940))+(((-2.0)*x5941*x5942))+x5940);
j4eval[0]=x5943;
j4eval[1]=IKsign(x5943);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x5942))+x5941))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5944=cj5*cj5;
IkReal x5945=r11*r11;
IkReal x5946=(cj5*r10);
IkReal x5947=(r11*sj5);
CheckValue<IkReal> x5948=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x5944*x5945))+(((-2.0)*x5946*x5947))+((x5944*(r10*r10)))+x5945)),-1);
if(!x5948.valid){
continue;
}
CheckValue<IkReal> x5949 = IKatan2WithCheck(IkReal(((((-1.0)*x5946))+x5947)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x5949.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5948.value)))+(x5949.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5950=IKsin(j4);
IkReal x5951=IKcos(j4);
IkReal x5952=(cj5*r00);
IkReal x5953=((1.0)*x5951);
IkReal x5954=(sj5*x5951);
IkReal x5955=(cj5*x5950);
IkReal x5956=((1.0)*x5950);
IkReal x5957=(sj5*x5956);
evalcond[0]=(((r20*x5955))+(((-1.0)*r22*x5953))+(((-1.0)*r21*x5957)));
evalcond[1]=((((-1.0)*r01*x5957))+((x5950*x5952))+(((-1.0)*r02*x5953)));
evalcond[2]=(((r11*x5954))+(((-1.0)*cj5*r10*x5953))+(((-1.0)*r12*x5956)));
evalcond[3]=((1.0)+((r10*x5955))+(((-1.0)*r11*x5957))+(((-1.0)*r12*x5953)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x5956))+(((-1.0)*x5952*x5953))+((r01*x5954)));
evalcond[5]=(((r21*x5954))+(((-1.0)*sj1*sj2))+(((-1.0)*r22*x5956))+(((-1.0)*cj5*r20*x5953))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5958=((1.0)*sj5);
CheckValue<IkReal> x5959=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*x5958)))),-1);
if(!x5959.valid){
continue;
}
CheckValue<IkReal> x5960 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x5958))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5960.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5959.value)))+(x5960.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5961=IKsin(j4);
IkReal x5962=IKcos(j4);
IkReal x5963=(cj5*r00);
IkReal x5964=((1.0)*x5962);
IkReal x5965=(sj5*x5962);
IkReal x5966=(cj5*x5961);
IkReal x5967=((1.0)*x5961);
IkReal x5968=(sj5*x5967);
evalcond[0]=((((-1.0)*r22*x5964))+(((-1.0)*r21*x5968))+((r20*x5966)));
evalcond[1]=(((x5961*x5963))+(((-1.0)*r01*x5968))+(((-1.0)*r02*x5964)));
evalcond[2]=((((-1.0)*cj5*r10*x5964))+(((-1.0)*r12*x5967))+((r11*x5965)));
evalcond[3]=((1.0)+(((-1.0)*r12*x5964))+(((-1.0)*r11*x5968))+((r10*x5966)));
evalcond[4]=(((cj2*sj1))+((r01*x5965))+((cj1*sj2))+(((-1.0)*x5963*x5964))+(((-1.0)*r02*x5967)));
evalcond[5]=((((-1.0)*r22*x5967))+(((-1.0)*sj1*sj2))+((r21*x5965))+((cj1*cj2))+(((-1.0)*cj5*r20*x5964)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5969=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5969.valid){
continue;
}
CheckValue<IkReal> x5970 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5970.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5969.value)))+(x5970.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5971=IKsin(j4);
IkReal x5972=IKcos(j4);
IkReal x5973=(cj5*r00);
IkReal x5974=((1.0)*x5972);
IkReal x5975=(sj5*x5972);
IkReal x5976=(cj5*x5971);
IkReal x5977=((1.0)*x5971);
IkReal x5978=(sj5*x5977);
evalcond[0]=((((-1.0)*r22*x5974))+(((-1.0)*r21*x5978))+((r20*x5976)));
evalcond[1]=((((-1.0)*r02*x5974))+(((-1.0)*r01*x5978))+((x5971*x5973)));
evalcond[2]=((((-1.0)*cj5*r10*x5974))+(((-1.0)*r12*x5977))+((r11*x5975)));
evalcond[3]=((1.0)+(((-1.0)*r12*x5974))+(((-1.0)*r11*x5978))+((r10*x5976)));
evalcond[4]=((((-1.0)*r02*x5977))+((cj2*sj1))+((cj1*sj2))+((r01*x5975))+(((-1.0)*x5973*x5974)));
evalcond[5]=((((-1.0)*r22*x5977))+(((-1.0)*sj1*sj2))+((r21*x5975))+((cj1*cj2))+(((-1.0)*cj5*r20*x5974)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5979=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x5979);
rxp0_2=(py*r00);
rxp1_0=(r21*x5979);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5980=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x5980);
rxp0_2=(py*r00);
rxp1_0=(r21*x5980);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5981=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x5981);
rxp0_2=(py*r00);
rxp1_0=(r21*x5981);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5984=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x5984.valid){
continue;
}
IkReal x5982=x5984.value;
IkReal x5983=(cj0*x5982);
cj4array[0]=(((cj2*sj1*x5983))+((cj1*sj2*x5983)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5985=IKsin(j4);
IkReal x5986=IKcos(j4);
IkReal x5987=(cj5*r20);
IkReal x5988=((1.0)*x5986);
IkReal x5989=((1.0)*sj5*x5985);
evalcond[0]=((-1.0)*r12*x5985);
evalcond[1]=((((-1.0)*r12*x5988))+(((-1.0)*cj0)));
evalcond[2]=(((x5985*x5987))+(((-1.0)*r21*x5989)));
evalcond[3]=(((cj5*r00*x5985))+(((-1.0)*r01*x5989)));
evalcond[4]=((((-1.0)*x5987*x5988))+(((-1.0)*sj1*sj2))+((r21*sj5*x5986))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5991=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x5991.valid){
continue;
}
IkReal x5990=x5991.value;
cj4array[0]=((((-1.0)*cj1*cj2*x5990))+((sj1*sj2*x5990)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5992=IKsin(j4);
IkReal x5993=IKcos(j4);
IkReal x5994=(cj5*r00);
IkReal x5995=(r01*sj5);
IkReal x5996=((1.0)*cj0);
IkReal x5997=((1.0)*x5993);
IkReal x5998=((1.0)*x5992);
evalcond[0]=((-1.0)*r12*x5992);
evalcond[1]=((((-1.0)*r12*x5997))+(((-1.0)*x5996)));
evalcond[2]=(((cj5*r20*x5992))+(((-1.0)*r21*sj5*x5998)));
evalcond[3]=(((x5992*x5994))+(((-1.0)*x5995*x5998)));
evalcond[4]=(((x5993*x5995))+(((-1.0)*cj2*sj1*x5996))+(((-1.0)*x5994*x5997))+(((-1.0)*cj1*sj2*x5996)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5999=IKPowWithIntegerCheck(r12,-1);
if(!x5999.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x5999.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6000=IKsin(j4);
IkReal x6001=IKcos(j4);
IkReal x6002=(r01*sj5);
IkReal x6003=(r21*sj5);
IkReal x6004=((1.0)*cj0);
IkReal x6005=((1.0)*x6000);
IkReal x6006=(cj5*x6000);
IkReal x6007=((1.0)*cj5*x6001);
evalcond[0]=((-1.0)*r12*x6000);
evalcond[1]=(((r20*x6006))+(((-1.0)*x6003*x6005)));
evalcond[2]=(((r00*x6006))+(((-1.0)*x6002*x6005)));
evalcond[3]=((((-1.0)*sj1*sj2))+((x6001*x6003))+((cj1*cj2))+(((-1.0)*r20*x6007)));
evalcond[4]=((((-1.0)*cj1*sj2*x6004))+(((-1.0)*cj2*sj1*x6004))+((x6001*x6002))+(((-1.0)*r00*x6007)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6008=((1.0)*sj5);
CheckValue<IkReal> x6009=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6009.valid){
continue;
}
CheckValue<IkReal> x6010 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*cj5*r00))+(((-1.0)*cj0*r01*x6008))+((cj5*r10*sj0))+(((-1.0)*r11*sj0*x6008)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6010.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6009.value)))+(x6010.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6011=IKsin(j4);
IkReal x6012=IKcos(j4);
IkReal x6013=(cj5*r00);
IkReal x6014=((1.0)*sj1);
IkReal x6015=((1.0)*x6012);
IkReal x6016=(sj5*x6012);
IkReal x6017=(cj5*x6011);
IkReal x6018=((1.0)*x6011);
IkReal x6019=((1.0)*cj1*sj2);
IkReal x6020=(sj5*x6018);
evalcond[0]=(((r20*x6017))+(((-1.0)*r21*x6020))+(((-1.0)*r22*x6015)));
evalcond[1]=(sj0+(((-1.0)*r01*x6020))+(((-1.0)*r02*x6015))+((x6011*x6013)));
evalcond[2]=((((-1.0)*r11*x6020))+(((-1.0)*r12*x6015))+((r10*x6017))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj5*r20*x6015))+((r21*x6016))+(((-1.0)*sj2*x6014))+(((-1.0)*r22*x6018))+((cj1*cj2)));
evalcond[4]=(((r01*x6016))+(((-1.0)*r02*x6018))+(((-1.0)*x6013*x6015))+(((-1.0)*cj0*x6019))+(((-1.0)*cj0*cj2*x6014)));
evalcond[5]=(((r11*x6016))+(((-1.0)*r12*x6018))+(((-1.0)*cj2*sj0*x6014))+(((-1.0)*sj0*x6019))+(((-1.0)*cj5*r10*x6015)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6021=((1.0)*sj5);
CheckValue<IkReal> x6022=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x6021))+(((-1.0)*cj5*r01)))),-1);
if(!x6022.valid){
continue;
}
CheckValue<IkReal> x6023 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x6021)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6023.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6022.value)))+(x6023.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6024=IKsin(j4);
IkReal x6025=IKcos(j4);
IkReal x6026=(cj5*r00);
IkReal x6027=((1.0)*sj1);
IkReal x6028=((1.0)*x6025);
IkReal x6029=(sj5*x6025);
IkReal x6030=(cj5*x6024);
IkReal x6031=((1.0)*x6024);
IkReal x6032=((1.0)*cj1*sj2);
IkReal x6033=(sj5*x6031);
evalcond[0]=((((-1.0)*r22*x6028))+((r20*x6030))+(((-1.0)*r21*x6033)));
evalcond[1]=(sj0+((x6024*x6026))+(((-1.0)*r01*x6033))+(((-1.0)*r02*x6028)));
evalcond[2]=((((-1.0)*r11*x6033))+((r10*x6030))+(((-1.0)*cj0))+(((-1.0)*r12*x6028)));
evalcond[3]=((((-1.0)*sj2*x6027))+(((-1.0)*cj5*r20*x6028))+((r21*x6029))+((cj1*cj2))+(((-1.0)*r22*x6031)));
evalcond[4]=((((-1.0)*x6026*x6028))+(((-1.0)*cj0*cj2*x6027))+((r01*x6029))+(((-1.0)*cj0*x6032))+(((-1.0)*r02*x6031)));
evalcond[5]=((((-1.0)*sj0*x6032))+(((-1.0)*cj5*r10*x6028))+(((-1.0)*r12*x6031))+(((-1.0)*cj2*sj0*x6027))+((r11*x6029)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6034=((1.0)*sj5);
CheckValue<IkReal> x6035=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x6034)))),-1);
if(!x6035.valid){
continue;
}
CheckValue<IkReal> x6036 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x6034))+((cj5*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6036.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6035.value)))+(x6036.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6037=IKsin(j4);
IkReal x6038=IKcos(j4);
IkReal x6039=(cj5*r00);
IkReal x6040=((1.0)*sj1);
IkReal x6041=((1.0)*x6038);
IkReal x6042=(sj5*x6038);
IkReal x6043=(cj5*x6037);
IkReal x6044=((1.0)*x6037);
IkReal x6045=((1.0)*cj1*sj2);
IkReal x6046=(sj5*x6044);
evalcond[0]=((((-1.0)*r21*x6046))+(((-1.0)*r22*x6041))+((r20*x6043)));
evalcond[1]=(sj0+(((-1.0)*r02*x6041))+(((-1.0)*r01*x6046))+((x6037*x6039)));
evalcond[2]=((((-1.0)*r11*x6046))+(((-1.0)*r12*x6041))+((r10*x6043))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x6044))+(((-1.0)*sj2*x6040))+((cj1*cj2))+((r21*x6042))+(((-1.0)*cj5*r20*x6041)));
evalcond[4]=((((-1.0)*r02*x6044))+(((-1.0)*x6039*x6041))+(((-1.0)*cj0*cj2*x6040))+(((-1.0)*cj0*x6045))+((r01*x6042)));
evalcond[5]=(((r11*x6042))+(((-1.0)*cj5*r10*x6041))+(((-1.0)*r12*x6044))+(((-1.0)*sj0*x6045))+(((-1.0)*cj2*sj0*x6040)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x6047=((((-1.0)*sj1*sj2))+((cj1*cj2)));
j0eval[0]=x6047;
j0eval[1]=IKsign(x6047);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x6048=r21*r21;
IkReal x6049=cj5*cj5;
IkReal x6050=(cj1*cj2);
IkReal x6051=(r21*sj5);
IkReal x6052=(sj1*sj2);
IkReal x6053=(cj5*r20);
IkReal x6054=((((-1.0)*x6049*(r20*r20)))+(((-1.0)*x6048))+((x6048*x6049))+(((-1.0)*(r22*r22)))+(((2.0)*x6051*x6053)));
j4eval[0]=x6054;
j4eval[1]=((IKabs((((r22*x6050))+(((-1.0)*r22*x6052)))))+(IKabs(((((-1.0)*x6052*x6053))+(((-1.0)*x6050*x6051))+((x6050*x6053))+((x6051*x6052))))));
j4eval[2]=IKsign(x6054);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x6055=((((-1.0)*sj1*sj2))+((cj1*cj2)));
j0eval[0]=x6055;
j0eval[1]=IKsign(x6055);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.84023668639053)*py))+(((-1.18343195266272)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.18343195266272)*py))+(((-2.84023668639053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.84023668639053)*py))+(((-1.18343195266272)*px))))+IKsqr(((((1.18343195266272)*py))+(((-2.84023668639053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.84023668639053)*py))+(((-1.18343195266272)*px))), ((((1.18343195266272)*py))+(((-2.84023668639053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6056=IKcos(j0);
IkReal x6057=IKsin(j0);
evalcond[0]=((((-0.125)*x6057))+(((-0.3)*x6056))+(((-1.0)*px)));
evalcond[1]=((((0.125)*x6056))+(((-0.3)*x6057))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6058=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6058;
j4eval[1]=IKsign(x6058);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6059=((1.0)*sj5);
IkReal x6060=((((-1.0)*cj5*r11))+(((-1.0)*r10*x6059)));
j4eval[0]=x6060;
j4eval[1]=IKsign(x6060);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6059))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6061=((1.0)*sj5);
IkReal x6062=((((-1.0)*cj5*r11))+(((-1.0)*r10*x6061)));
j4eval[0]=x6062;
j4eval[1]=IKsign(x6062);
j4eval[2]=((IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x6061)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6063=((1.0)*sj5);
CheckValue<IkReal> x6064=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x6063)))),-1);
if(!x6064.valid){
continue;
}
CheckValue<IkReal> x6065 = IKatan2WithCheck(IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x6063)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6065.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6064.value)))+(x6065.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6066=IKcos(j4);
IkReal x6067=IKsin(j4);
IkReal x6068=((1.0)*cj0);
IkReal x6069=(r11*sj5);
IkReal x6070=(r21*sj5);
IkReal x6071=(r01*sj5);
IkReal x6072=((1.0)*x6066);
IkReal x6073=(cj5*x6066);
IkReal x6074=((1.0)*x6067);
IkReal x6075=(cj5*x6067);
evalcond[0]=(((r22*x6067))+((r20*x6073))+(((-1.0)*x6070*x6072)));
evalcond[1]=((((-1.0)*r22*x6072))+((r20*x6075))+(((-1.0)*x6070*x6074)));
evalcond[2]=(sj0+(((-1.0)*r02*x6072))+(((-1.0)*x6071*x6074))+((r00*x6075)));
evalcond[3]=((((-1.0)*x6068))+(((-1.0)*x6071*x6072))+((r02*x6067))+((r00*x6073)));
evalcond[4]=((((-1.0)*sj0))+((r10*x6073))+((r12*x6067))+(((-1.0)*x6069*x6072)));
evalcond[5]=((((-1.0)*x6068))+(((-1.0)*r12*x6072))+((r10*x6075))+(((-1.0)*x6069*x6074)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6076=((1.0)*sj5);
CheckValue<IkReal> x6077 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x6076))+((cj5*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6077.valid){
continue;
}
CheckValue<IkReal> x6078=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x6076)))),-1);
if(!x6078.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6077.value)+(((1.5707963267949)*(x6078.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6079=IKcos(j4);
IkReal x6080=IKsin(j4);
IkReal x6081=((1.0)*cj0);
IkReal x6082=(r11*sj5);
IkReal x6083=(r21*sj5);
IkReal x6084=(r01*sj5);
IkReal x6085=((1.0)*x6079);
IkReal x6086=(cj5*x6079);
IkReal x6087=((1.0)*x6080);
IkReal x6088=(cj5*x6080);
evalcond[0]=((((-1.0)*x6083*x6085))+((r22*x6080))+((r20*x6086)));
evalcond[1]=((((-1.0)*r22*x6085))+(((-1.0)*x6083*x6087))+((r20*x6088)));
evalcond[2]=(sj0+((r00*x6088))+(((-1.0)*r02*x6085))+(((-1.0)*x6084*x6087)));
evalcond[3]=(((r00*x6086))+(((-1.0)*x6081))+(((-1.0)*x6084*x6085))+((r02*x6080)));
evalcond[4]=(((r10*x6086))+(((-1.0)*sj0))+(((-1.0)*x6082*x6085))+((r12*x6080)));
evalcond[5]=((((-1.0)*r12*x6085))+((r10*x6088))+(((-1.0)*x6081))+(((-1.0)*x6082*x6087)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6089 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6089.valid){
continue;
}
CheckValue<IkReal> x6090=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6090.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6089.value)+(((1.5707963267949)*(x6090.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6091=IKcos(j4);
IkReal x6092=IKsin(j4);
IkReal x6093=((1.0)*cj0);
IkReal x6094=(r11*sj5);
IkReal x6095=(r21*sj5);
IkReal x6096=(r01*sj5);
IkReal x6097=((1.0)*x6091);
IkReal x6098=(cj5*x6091);
IkReal x6099=((1.0)*x6092);
IkReal x6100=(cj5*x6092);
evalcond[0]=((((-1.0)*x6095*x6097))+((r22*x6092))+((r20*x6098)));
evalcond[1]=((((-1.0)*r22*x6097))+(((-1.0)*x6095*x6099))+((r20*x6100)));
evalcond[2]=(sj0+(((-1.0)*x6096*x6099))+(((-1.0)*r02*x6097))+((r00*x6100)));
evalcond[3]=((((-1.0)*x6093))+((r00*x6098))+(((-1.0)*x6096*x6097))+((r02*x6092)));
evalcond[4]=((((-1.0)*sj0))+((r10*x6098))+((r12*x6092))+(((-1.0)*x6094*x6097)));
evalcond[5]=((((-1.0)*x6093))+((r10*x6100))+(((-1.0)*x6094*x6099))+(((-1.0)*r12*x6097)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.84023668639053)*py))+(((-1.18343195266272)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.18343195266272)*py))+(((2.84023668639053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.84023668639053)*py))+(((-1.18343195266272)*px))))+IKsqr(((((1.18343195266272)*py))+(((2.84023668639053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.84023668639053)*py))+(((-1.18343195266272)*px))), ((((1.18343195266272)*py))+(((2.84023668639053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6101=IKsin(j0);
IkReal x6102=IKcos(j0);
evalcond[0]=((((-0.125)*x6101))+(((-1.0)*px))+(((0.3)*x6102)));
evalcond[1]=((((-1.0)*py))+(((0.125)*x6102))+(((0.3)*x6101)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6103=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6103;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
j4eval[2]=IKsign(x6103);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6104=((1.0)*sj5);
IkReal x6105=((((-1.0)*r00*x6104))+(((-1.0)*cj5*r01)));
j4eval[0]=x6105;
j4eval[1]=IKsign(x6105);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x6104))+((cj5*r20*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6106=cj5*cj5;
IkReal x6107=((1.0)*r21);
IkReal x6108=(cj5*r20);
IkReal x6109=((((-1.0)*r02*r22))+(((-1.0)*r01*x6107))+((cj5*r00*r21*sj5))+((r01*r21*x6106))+((r01*sj5*x6108))+(((-1.0)*r00*r20*x6106)));
j4eval[0]=x6109;
j4eval[1]=IKsign(x6109);
j4eval[2]=((IKabs(((((-1.0)*cj0*sj5*x6107))+((cj0*x6108)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6110=cj5*cj5;
IkReal x6111=((1.0)*r21);
IkReal x6112=(cj5*r20);
CheckValue<IkReal> x6113 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x6112))+(((-1.0)*cj0*sj5*x6111)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6113.valid){
continue;
}
CheckValue<IkReal> x6114=IKPowWithIntegerCheck(IKsign((((r01*sj5*x6112))+(((-1.0)*r02*r22))+(((-1.0)*r00*r20*x6110))+((r01*r21*x6110))+((cj5*r00*r21*sj5))+(((-1.0)*r01*x6111)))),-1);
if(!x6114.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6113.value)+(((1.5707963267949)*(x6114.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6115=IKcos(j4);
IkReal x6116=IKsin(j4);
IkReal x6117=(r11*sj5);
IkReal x6118=(r21*sj5);
IkReal x6119=(r01*sj5);
IkReal x6120=((1.0)*x6115);
IkReal x6121=((1.0)*x6116);
IkReal x6122=(cj5*x6115);
IkReal x6123=(cj5*x6116);
evalcond[0]=((((-1.0)*x6118*x6120))+((r20*x6122))+((r22*x6116)));
evalcond[1]=((((-1.0)*x6118*x6121))+(((-1.0)*r22*x6120))+((r20*x6123)));
evalcond[2]=(((r02*x6116))+cj0+(((-1.0)*x6119*x6120))+((r00*x6122)));
evalcond[3]=((((-1.0)*x6117*x6120))+sj0+((r12*x6116))+((r10*x6122)));
evalcond[4]=(sj0+(((-1.0)*r02*x6120))+(((-1.0)*x6119*x6121))+((r00*x6123)));
evalcond[5]=((((-1.0)*x6117*x6121))+(((-1.0)*r12*x6120))+((r10*x6123))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6124=((1.0)*sj5);
CheckValue<IkReal> x6125 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6124)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6125.valid){
continue;
}
CheckValue<IkReal> x6126=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x6124))+(((-1.0)*cj5*r01)))),-1);
if(!x6126.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6125.value)+(((1.5707963267949)*(x6126.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6127=IKcos(j4);
IkReal x6128=IKsin(j4);
IkReal x6129=(r11*sj5);
IkReal x6130=(r21*sj5);
IkReal x6131=(r01*sj5);
IkReal x6132=((1.0)*x6127);
IkReal x6133=((1.0)*x6128);
IkReal x6134=(cj5*x6127);
IkReal x6135=(cj5*x6128);
evalcond[0]=((((-1.0)*x6130*x6132))+((r20*x6134))+((r22*x6128)));
evalcond[1]=((((-1.0)*x6130*x6133))+(((-1.0)*r22*x6132))+((r20*x6135)));
evalcond[2]=(cj0+(((-1.0)*x6131*x6132))+((r02*x6128))+((r00*x6134)));
evalcond[3]=(((r12*x6128))+sj0+(((-1.0)*x6129*x6132))+((r10*x6134)));
evalcond[4]=(sj0+(((-1.0)*x6131*x6133))+((r00*x6135))+(((-1.0)*r02*x6132)));
evalcond[5]=((((-1.0)*x6129*x6133))+((r10*x6135))+(((-1.0)*r12*x6132))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6136 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6136.valid){
continue;
}
CheckValue<IkReal> x6137=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6137.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6136.value)+(((1.5707963267949)*(x6137.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6138=IKcos(j4);
IkReal x6139=IKsin(j4);
IkReal x6140=(r11*sj5);
IkReal x6141=(r21*sj5);
IkReal x6142=(r01*sj5);
IkReal x6143=((1.0)*x6138);
IkReal x6144=((1.0)*x6139);
IkReal x6145=(cj5*x6138);
IkReal x6146=(cj5*x6139);
evalcond[0]=(((r22*x6139))+(((-1.0)*x6141*x6143))+((r20*x6145)));
evalcond[1]=((((-1.0)*r22*x6143))+(((-1.0)*x6141*x6144))+((r20*x6146)));
evalcond[2]=(cj0+(((-1.0)*x6142*x6143))+((r00*x6145))+((r02*x6139)));
evalcond[3]=(((r10*x6145))+sj0+(((-1.0)*x6140*x6143))+((r12*x6139)));
evalcond[4]=(sj0+(((-1.0)*r02*x6143))+(((-1.0)*x6142*x6144))+((r00*x6146)));
evalcond[5]=(((r10*x6146))+(((-1.0)*x6140*x6144))+(((-1.0)*r12*x6143))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.48359486447932)*py))+(((-0.285306704707561)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.285306704707561)*py))+(((-1.48359486447932)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.48359486447932)*py))+(((-0.285306704707561)*px))))+IKsqr(((((0.285306704707561)*py))+(((-1.48359486447932)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.48359486447932)*py))+(((-0.285306704707561)*px))), ((((0.285306704707561)*py))+(((-1.48359486447932)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6147=IKcos(j0);
IkReal x6148=IKsin(j0);
evalcond[0]=((((-0.125)*x6148))+(((-0.65)*x6147))+(((-1.0)*px)));
evalcond[1]=((((-0.65)*x6148))+(((-1.0)*py))+(((0.125)*x6147)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6149=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6149;
j4eval[1]=IKsign(x6149);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6150=((1.0)*sj5);
IkReal x6151=((((-1.0)*cj5*r11))+(((-1.0)*r10*x6150)));
j4eval[0]=x6151;
j4eval[1]=IKsign(x6151);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6150))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6152=((1.0)*sj5);
IkReal x6153=((((-1.0)*cj5*r11))+(((-1.0)*r10*x6152)));
j4eval[0]=x6153;
j4eval[1]=IKsign(x6153);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x6152))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6154=((1.0)*sj5);
CheckValue<IkReal> x6155=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x6154)))),-1);
if(!x6155.valid){
continue;
}
CheckValue<IkReal> x6156 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x6154))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6156.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6155.value)))+(x6156.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6157=IKcos(j4);
IkReal x6158=IKsin(j4);
IkReal x6159=((1.0)*cj0);
IkReal x6160=(r11*sj5);
IkReal x6161=(r21*sj5);
IkReal x6162=(r01*sj5);
IkReal x6163=((1.0)*x6157);
IkReal x6164=(cj5*x6157);
IkReal x6165=((1.0)*x6158);
IkReal x6166=(cj5*x6158);
evalcond[0]=(((r22*x6158))+((r20*x6164))+(((-1.0)*x6161*x6163)));
evalcond[1]=(((r20*x6166))+(((-1.0)*r22*x6163))+(((-1.0)*x6161*x6165)));
evalcond[2]=(sj0+((r00*x6166))+(((-1.0)*r02*x6163))+(((-1.0)*x6162*x6165)));
evalcond[3]=(((r02*x6158))+(((-1.0)*x6159))+((r00*x6164))+(((-1.0)*x6162*x6163)));
evalcond[4]=((((-1.0)*x6160*x6163))+((r12*x6158))+((r10*x6164))+(((-1.0)*sj0)));
evalcond[5]=((((-1.0)*x6160*x6165))+((r10*x6166))+(((-1.0)*r12*x6163))+(((-1.0)*x6159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6167=((1.0)*sj5);
CheckValue<IkReal> x6168=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x6167)))),-1);
if(!x6168.valid){
continue;
}
CheckValue<IkReal> x6169 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6167)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6169.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6168.value)))+(x6169.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6170=IKcos(j4);
IkReal x6171=IKsin(j4);
IkReal x6172=((1.0)*cj0);
IkReal x6173=(r11*sj5);
IkReal x6174=(r21*sj5);
IkReal x6175=(r01*sj5);
IkReal x6176=((1.0)*x6170);
IkReal x6177=(cj5*x6170);
IkReal x6178=((1.0)*x6171);
IkReal x6179=(cj5*x6171);
evalcond[0]=(((r20*x6177))+(((-1.0)*x6174*x6176))+((r22*x6171)));
evalcond[1]=(((r20*x6179))+(((-1.0)*x6174*x6178))+(((-1.0)*r22*x6176)));
evalcond[2]=(sj0+(((-1.0)*x6175*x6178))+((r00*x6179))+(((-1.0)*r02*x6176)));
evalcond[3]=((((-1.0)*x6172))+((r02*x6171))+(((-1.0)*x6175*x6176))+((r00*x6177)));
evalcond[4]=(((r10*x6177))+(((-1.0)*sj0))+((r12*x6171))+(((-1.0)*x6173*x6176)));
evalcond[5]=(((r10*x6179))+(((-1.0)*r12*x6176))+(((-1.0)*x6172))+(((-1.0)*x6173*x6178)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6180 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6180.valid){
continue;
}
CheckValue<IkReal> x6181=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6181.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6180.value)+(((1.5707963267949)*(x6181.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6182=IKcos(j4);
IkReal x6183=IKsin(j4);
IkReal x6184=((1.0)*cj0);
IkReal x6185=(r11*sj5);
IkReal x6186=(r21*sj5);
IkReal x6187=(r01*sj5);
IkReal x6188=((1.0)*x6182);
IkReal x6189=(cj5*x6182);
IkReal x6190=((1.0)*x6183);
IkReal x6191=(cj5*x6183);
evalcond[0]=(((r22*x6183))+(((-1.0)*x6186*x6188))+((r20*x6189)));
evalcond[1]=((((-1.0)*x6186*x6190))+(((-1.0)*r22*x6188))+((r20*x6191)));
evalcond[2]=(sj0+(((-1.0)*r02*x6188))+((r00*x6191))+(((-1.0)*x6187*x6190)));
evalcond[3]=(((r00*x6189))+(((-1.0)*x6187*x6188))+((r02*x6183))+(((-1.0)*x6184)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x6185*x6188))+((r10*x6189))+((r12*x6183)));
evalcond[5]=(((r10*x6191))+(((-1.0)*r12*x6188))+(((-1.0)*x6185*x6190))+(((-1.0)*x6184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.75862068965517)*py))+(((-6.89655172413793)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.75862068965517)*px))+(((6.89655172413793)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.75862068965517)*py))+(((-6.89655172413793)*px))))+IKsqr(((((-2.75862068965517)*px))+(((6.89655172413793)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.75862068965517)*py))+(((-6.89655172413793)*px))), ((((-2.75862068965517)*px))+(((6.89655172413793)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6192=IKcos(j0);
IkReal x6193=IKsin(j0);
evalcond[0]=((((-0.05)*x6192))+(((-1.0)*px))+(((-0.125)*x6193)));
evalcond[1]=((((-0.05)*x6193))+(((-1.0)*py))+(((0.125)*x6192)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6194=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6194;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
j4eval[2]=IKsign(x6194);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6195=((1.0)*sj5);
IkReal x6196=((((-1.0)*r00*x6195))+(((-1.0)*cj5*r01)));
j4eval[0]=x6196;
j4eval[1]=IKsign(x6196);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6195))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6197=cj5*cj5;
IkReal x6198=((1.0)*r21);
IkReal x6199=(cj5*r20);
IkReal x6200=((((-1.0)*r02*r22))+((r01*r21*x6197))+((r01*sj5*x6199))+(((-1.0)*r00*r20*x6197))+((cj5*r00*r21*sj5))+(((-1.0)*r01*x6198)));
j4eval[0]=x6200;
j4eval[1]=IKsign(x6200);
j4eval[2]=((IKabs(((((-1.0)*cj0*sj5*x6198))+((cj0*x6199)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6201=cj5*cj5;
IkReal x6202=((1.0)*r21);
IkReal x6203=(cj5*r20);
CheckValue<IkReal> x6204=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+((r01*r21*x6201))+((r01*sj5*x6203))+((cj5*r00*r21*sj5))+(((-1.0)*r00*r20*x6201))+(((-1.0)*r01*x6202)))),-1);
if(!x6204.valid){
continue;
}
CheckValue<IkReal> x6205 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x6202))+((cj0*x6203)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6205.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6204.value)))+(x6205.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6206=IKcos(j4);
IkReal x6207=IKsin(j4);
IkReal x6208=(r11*sj5);
IkReal x6209=(r21*sj5);
IkReal x6210=(r01*sj5);
IkReal x6211=((1.0)*x6206);
IkReal x6212=((1.0)*x6207);
IkReal x6213=(cj5*x6206);
IkReal x6214=(cj5*x6207);
evalcond[0]=(((r22*x6207))+((r20*x6213))+(((-1.0)*x6209*x6211)));
evalcond[1]=(((r20*x6214))+(((-1.0)*x6209*x6212))+(((-1.0)*r22*x6211)));
evalcond[2]=(cj0+(((-1.0)*x6210*x6211))+((r00*x6213))+((r02*x6207)));
evalcond[3]=(sj0+(((-1.0)*x6208*x6211))+((r10*x6213))+((r12*x6207)));
evalcond[4]=(sj0+(((-1.0)*x6210*x6212))+((r00*x6214))+(((-1.0)*r02*x6211)));
evalcond[5]=((((-1.0)*r12*x6211))+(((-1.0)*x6208*x6212))+((r10*x6214))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6215=((1.0)*sj5);
CheckValue<IkReal> x6216=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x6215))+(((-1.0)*cj5*r01)))),-1);
if(!x6216.valid){
continue;
}
CheckValue<IkReal> x6217 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6215)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6217.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6216.value)))+(x6217.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6218=IKcos(j4);
IkReal x6219=IKsin(j4);
IkReal x6220=(r11*sj5);
IkReal x6221=(r21*sj5);
IkReal x6222=(r01*sj5);
IkReal x6223=((1.0)*x6218);
IkReal x6224=((1.0)*x6219);
IkReal x6225=(cj5*x6218);
IkReal x6226=(cj5*x6219);
evalcond[0]=(((r20*x6225))+((r22*x6219))+(((-1.0)*x6221*x6223)));
evalcond[1]=(((r20*x6226))+(((-1.0)*r22*x6223))+(((-1.0)*x6221*x6224)));
evalcond[2]=((((-1.0)*x6222*x6223))+cj0+((r02*x6219))+((r00*x6225)));
evalcond[3]=(((r12*x6219))+sj0+((r10*x6225))+(((-1.0)*x6220*x6223)));
evalcond[4]=(sj0+(((-1.0)*x6222*x6224))+(((-1.0)*r02*x6223))+((r00*x6226)));
evalcond[5]=((((-1.0)*r12*x6223))+((r10*x6226))+(((-1.0)*x6220*x6224))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6227 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6227.valid){
continue;
}
CheckValue<IkReal> x6228=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6228.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6227.value)+(((1.5707963267949)*(x6228.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6229=IKcos(j4);
IkReal x6230=IKsin(j4);
IkReal x6231=(r11*sj5);
IkReal x6232=(r21*sj5);
IkReal x6233=(r01*sj5);
IkReal x6234=((1.0)*x6229);
IkReal x6235=((1.0)*x6230);
IkReal x6236=(cj5*x6229);
IkReal x6237=(cj5*x6230);
evalcond[0]=(((r20*x6236))+(((-1.0)*x6232*x6234))+((r22*x6230)));
evalcond[1]=(((r20*x6237))+(((-1.0)*x6232*x6235))+(((-1.0)*r22*x6234)));
evalcond[2]=(((r02*x6230))+cj0+((r00*x6236))+(((-1.0)*x6233*x6234)));
evalcond[3]=(sj0+((r12*x6230))+(((-1.0)*x6231*x6234))+((r10*x6236)));
evalcond[4]=(sj0+((r00*x6237))+(((-1.0)*r02*x6234))+(((-1.0)*x6233*x6235)));
evalcond[5]=((((-1.0)*r12*x6234))+(((-1.0)*x6231*x6235))+((r10*x6237))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.84023668639053)*py))+(((-1.18343195266272)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.18343195266272)*py))+(((2.84023668639053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.84023668639053)*py))+(((-1.18343195266272)*px))))+IKsqr(((((1.18343195266272)*py))+(((2.84023668639053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.84023668639053)*py))+(((-1.18343195266272)*px))), ((((1.18343195266272)*py))+(((2.84023668639053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6238=IKsin(j0);
IkReal x6239=IKcos(j0);
evalcond[0]=((((0.3)*x6239))+(((-1.0)*px))+(((-0.125)*x6238)));
evalcond[1]=((((0.3)*x6238))+(((-1.0)*py))+(((0.125)*x6239)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6240=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6240;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
j4eval[2]=IKsign(x6240);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6241=((1.0)*sj5);
IkReal x6242=((((-1.0)*r00*x6241))+(((-1.0)*cj5*r01)));
j4eval[0]=x6242;
j4eval[1]=IKsign(x6242);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6241))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6243=cj5*cj5;
IkReal x6244=((1.0)*r21);
IkReal x6245=(cj5*r20);
IkReal x6246=((((-1.0)*r02*r22))+(((-1.0)*r01*x6244))+(((-1.0)*r00*r20*x6243))+((cj5*r00*r21*sj5))+((r01*r21*x6243))+((r01*sj5*x6245)));
j4eval[0]=x6246;
j4eval[1]=IKsign(x6246);
j4eval[2]=((IKabs(((((-1.0)*cj0*sj5*x6244))+((cj0*x6245)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6247=cj5*cj5;
IkReal x6248=((1.0)*r21);
IkReal x6249=(cj5*r20);
CheckValue<IkReal> x6250 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x6248))+((cj0*x6249)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6250.valid){
continue;
}
CheckValue<IkReal> x6251=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+(((-1.0)*r01*x6248))+(((-1.0)*r00*r20*x6247))+((cj5*r00*r21*sj5))+((r01*r21*x6247))+((r01*sj5*x6249)))),-1);
if(!x6251.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6250.value)+(((1.5707963267949)*(x6251.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6252=IKcos(j4);
IkReal x6253=IKsin(j4);
IkReal x6254=(r11*sj5);
IkReal x6255=(r21*sj5);
IkReal x6256=(r01*sj5);
IkReal x6257=((1.0)*x6252);
IkReal x6258=((1.0)*x6253);
IkReal x6259=(cj5*x6252);
IkReal x6260=(cj5*x6253);
evalcond[0]=(((r22*x6253))+(((-1.0)*x6255*x6257))+((r20*x6259)));
evalcond[1]=((((-1.0)*x6255*x6258))+((r20*x6260))+(((-1.0)*r22*x6257)));
evalcond[2]=(((r00*x6259))+cj0+((r02*x6253))+(((-1.0)*x6256*x6257)));
evalcond[3]=((((-1.0)*x6254*x6257))+sj0+((r10*x6259))+((r12*x6253)));
evalcond[4]=(sj0+((r00*x6260))+(((-1.0)*r02*x6257))+(((-1.0)*x6256*x6258)));
evalcond[5]=((((-1.0)*x6254*x6258))+((r10*x6260))+(((-1.0)*r12*x6257))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6261=((1.0)*sj5);
CheckValue<IkReal> x6262 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6261)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6262.valid){
continue;
}
CheckValue<IkReal> x6263=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x6261))+(((-1.0)*cj5*r01)))),-1);
if(!x6263.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6262.value)+(((1.5707963267949)*(x6263.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6264=IKcos(j4);
IkReal x6265=IKsin(j4);
IkReal x6266=(r11*sj5);
IkReal x6267=(r21*sj5);
IkReal x6268=(r01*sj5);
IkReal x6269=((1.0)*x6264);
IkReal x6270=((1.0)*x6265);
IkReal x6271=(cj5*x6264);
IkReal x6272=(cj5*x6265);
evalcond[0]=((((-1.0)*x6267*x6269))+((r22*x6265))+((r20*x6271)));
evalcond[1]=((((-1.0)*x6267*x6270))+((r20*x6272))+(((-1.0)*r22*x6269)));
evalcond[2]=(cj0+((r00*x6271))+(((-1.0)*x6268*x6269))+((r02*x6265)));
evalcond[3]=(sj0+(((-1.0)*x6266*x6269))+((r10*x6271))+((r12*x6265)));
evalcond[4]=(sj0+(((-1.0)*r02*x6269))+((r00*x6272))+(((-1.0)*x6268*x6270)));
evalcond[5]=(((r10*x6272))+(((-1.0)*x6266*x6270))+(((-1.0)*cj0))+(((-1.0)*r12*x6269)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6273 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6273.valid){
continue;
}
CheckValue<IkReal> x6274=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6274.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6273.value)+(((1.5707963267949)*(x6274.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6275=IKcos(j4);
IkReal x6276=IKsin(j4);
IkReal x6277=(r11*sj5);
IkReal x6278=(r21*sj5);
IkReal x6279=(r01*sj5);
IkReal x6280=((1.0)*x6275);
IkReal x6281=((1.0)*x6276);
IkReal x6282=(cj5*x6275);
IkReal x6283=(cj5*x6276);
evalcond[0]=(((r22*x6276))+((r20*x6282))+(((-1.0)*x6278*x6280)));
evalcond[1]=((((-1.0)*r22*x6280))+((r20*x6283))+(((-1.0)*x6278*x6281)));
evalcond[2]=(cj0+(((-1.0)*x6279*x6280))+((r02*x6276))+((r00*x6282)));
evalcond[3]=(((r12*x6276))+sj0+((r10*x6282))+(((-1.0)*x6277*x6280)));
evalcond[4]=(sj0+(((-1.0)*x6279*x6281))+(((-1.0)*r02*x6280))+((r00*x6283)));
evalcond[5]=((((-1.0)*r12*x6280))+((r10*x6283))+(((-1.0)*x6277*x6281))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.84023668639053)*py))+(((-1.18343195266272)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.18343195266272)*py))+(((-2.84023668639053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.84023668639053)*py))+(((-1.18343195266272)*px))))+IKsqr(((((1.18343195266272)*py))+(((-2.84023668639053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.84023668639053)*py))+(((-1.18343195266272)*px))), ((((1.18343195266272)*py))+(((-2.84023668639053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6284=IKcos(j0);
IkReal x6285=IKsin(j0);
evalcond[0]=((((-0.125)*x6285))+(((-1.0)*px))+(((-0.3)*x6284)));
evalcond[1]=((((0.125)*x6284))+(((-1.0)*py))+(((-0.3)*x6285)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6286=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6286;
j4eval[1]=IKsign(x6286);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6287=((1.0)*sj5);
IkReal x6288=((((-1.0)*cj5*r11))+(((-1.0)*r10*x6287)));
j4eval[0]=x6288;
j4eval[1]=IKsign(x6288);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6287))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6289=((1.0)*sj5);
IkReal x6290=((((-1.0)*cj5*r11))+(((-1.0)*r10*x6289)));
j4eval[0]=x6290;
j4eval[1]=IKsign(x6290);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x6289))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6291=((1.0)*sj5);
CheckValue<IkReal> x6292=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x6291)))),-1);
if(!x6292.valid){
continue;
}
CheckValue<IkReal> x6293 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x6291))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6293.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6292.value)))+(x6293.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6294=IKcos(j4);
IkReal x6295=IKsin(j4);
IkReal x6296=((1.0)*cj0);
IkReal x6297=(r11*sj5);
IkReal x6298=(r21*sj5);
IkReal x6299=(r01*sj5);
IkReal x6300=((1.0)*x6294);
IkReal x6301=(cj5*x6294);
IkReal x6302=((1.0)*x6295);
IkReal x6303=(cj5*x6295);
evalcond[0]=(((r22*x6295))+(((-1.0)*x6298*x6300))+((r20*x6301)));
evalcond[1]=((((-1.0)*x6298*x6302))+(((-1.0)*r22*x6300))+((r20*x6303)));
evalcond[2]=(sj0+(((-1.0)*r02*x6300))+((r00*x6303))+(((-1.0)*x6299*x6302)));
evalcond[3]=(((r00*x6301))+(((-1.0)*x6299*x6300))+(((-1.0)*x6296))+((r02*x6295)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x6297*x6300))+((r12*x6295))+((r10*x6301)));
evalcond[5]=((((-1.0)*r12*x6300))+(((-1.0)*x6296))+(((-1.0)*x6297*x6302))+((r10*x6303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6304=((1.0)*sj5);
CheckValue<IkReal> x6305=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x6304)))),-1);
if(!x6305.valid){
continue;
}
CheckValue<IkReal> x6306 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6304)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6306.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6305.value)))+(x6306.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6307=IKcos(j4);
IkReal x6308=IKsin(j4);
IkReal x6309=((1.0)*cj0);
IkReal x6310=(r11*sj5);
IkReal x6311=(r21*sj5);
IkReal x6312=(r01*sj5);
IkReal x6313=((1.0)*x6307);
IkReal x6314=(cj5*x6307);
IkReal x6315=((1.0)*x6308);
IkReal x6316=(cj5*x6308);
evalcond[0]=(((r20*x6314))+(((-1.0)*x6311*x6313))+((r22*x6308)));
evalcond[1]=((((-1.0)*r22*x6313))+((r20*x6316))+(((-1.0)*x6311*x6315)));
evalcond[2]=((((-1.0)*x6312*x6315))+sj0+((r00*x6316))+(((-1.0)*r02*x6313)));
evalcond[3]=((((-1.0)*x6312*x6313))+((r00*x6314))+(((-1.0)*x6309))+((r02*x6308)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x6310*x6313))+((r12*x6308))+((r10*x6314)));
evalcond[5]=((((-1.0)*r12*x6313))+(((-1.0)*x6309))+(((-1.0)*x6310*x6315))+((r10*x6316)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6317 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6317.valid){
continue;
}
CheckValue<IkReal> x6318=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6318.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6317.value)+(((1.5707963267949)*(x6318.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6319=IKcos(j4);
IkReal x6320=IKsin(j4);
IkReal x6321=((1.0)*cj0);
IkReal x6322=(r11*sj5);
IkReal x6323=(r21*sj5);
IkReal x6324=(r01*sj5);
IkReal x6325=((1.0)*x6319);
IkReal x6326=(cj5*x6319);
IkReal x6327=((1.0)*x6320);
IkReal x6328=(cj5*x6320);
evalcond[0]=(((r20*x6326))+(((-1.0)*x6323*x6325))+((r22*x6320)));
evalcond[1]=(((r20*x6328))+(((-1.0)*r22*x6325))+(((-1.0)*x6323*x6327)));
evalcond[2]=(sj0+((r00*x6328))+(((-1.0)*x6324*x6327))+(((-1.0)*r02*x6325)));
evalcond[3]=(((r02*x6320))+((r00*x6326))+(((-1.0)*x6321))+(((-1.0)*x6324*x6325)));
evalcond[4]=((((-1.0)*sj0))+((r10*x6326))+((r12*x6320))+(((-1.0)*x6322*x6325)));
evalcond[5]=(((r10*x6328))+(((-1.0)*x6322*x6327))+(((-1.0)*x6321))+(((-1.0)*r12*x6325)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.48359486447932)*py))+(((-0.285306704707561)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.285306704707561)*py))+(((1.48359486447932)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.48359486447932)*py))+(((-0.285306704707561)*px))))+IKsqr(((((0.285306704707561)*py))+(((1.48359486447932)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.48359486447932)*py))+(((-0.285306704707561)*px))), ((((0.285306704707561)*py))+(((1.48359486447932)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6329=IKcos(j0);
IkReal x6330=IKsin(j0);
evalcond[0]=((((0.65)*x6329))+(((-1.0)*px))+(((-0.125)*x6330)));
evalcond[1]=((((0.125)*x6329))+(((0.65)*x6330))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6331=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6331;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
j4eval[2]=IKsign(x6331);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6332=((1.0)*sj5);
IkReal x6333=((((-1.0)*r00*x6332))+(((-1.0)*cj5*r01)));
j4eval[0]=x6333;
j4eval[1]=IKsign(x6333);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6332))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6334=cj5*cj5;
IkReal x6335=((1.0)*r21);
IkReal x6336=(cj5*r20);
IkReal x6337=((((-1.0)*r02*r22))+((r01*sj5*x6336))+((r01*r21*x6334))+((cj5*r00*r21*sj5))+(((-1.0)*r00*r20*x6334))+(((-1.0)*r01*x6335)));
j4eval[0]=x6337;
j4eval[1]=IKsign(x6337);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*sj5*x6335))+((cj0*x6336))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6338=cj5*cj5;
IkReal x6339=((1.0)*r21);
IkReal x6340=(cj5*r20);
CheckValue<IkReal> x6341=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+((r01*sj5*x6340))+((r01*r21*x6338))+((cj5*r00*r21*sj5))+(((-1.0)*r00*r20*x6338))+(((-1.0)*r01*x6339)))),-1);
if(!x6341.valid){
continue;
}
CheckValue<IkReal> x6342 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x6339))+((cj0*x6340)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6342.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6341.value)))+(x6342.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6343=IKcos(j4);
IkReal x6344=IKsin(j4);
IkReal x6345=(r11*sj5);
IkReal x6346=(r21*sj5);
IkReal x6347=(r01*sj5);
IkReal x6348=((1.0)*x6343);
IkReal x6349=((1.0)*x6344);
IkReal x6350=(cj5*x6343);
IkReal x6351=(cj5*x6344);
evalcond[0]=((((-1.0)*x6346*x6348))+((r22*x6344))+((r20*x6350)));
evalcond[1]=((((-1.0)*r22*x6348))+(((-1.0)*x6346*x6349))+((r20*x6351)));
evalcond[2]=(cj0+(((-1.0)*x6347*x6348))+((r02*x6344))+((r00*x6350)));
evalcond[3]=(((r10*x6350))+((r12*x6344))+sj0+(((-1.0)*x6345*x6348)));
evalcond[4]=(sj0+(((-1.0)*x6347*x6349))+((r00*x6351))+(((-1.0)*r02*x6348)));
evalcond[5]=(((r10*x6351))+(((-1.0)*x6345*x6349))+(((-1.0)*r12*x6348))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6352=((1.0)*sj5);
CheckValue<IkReal> x6353=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x6352))+(((-1.0)*cj5*r01)))),-1);
if(!x6353.valid){
continue;
}
CheckValue<IkReal> x6354 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6352)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6354.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6353.value)))+(x6354.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6355=IKcos(j4);
IkReal x6356=IKsin(j4);
IkReal x6357=(r11*sj5);
IkReal x6358=(r21*sj5);
IkReal x6359=(r01*sj5);
IkReal x6360=((1.0)*x6355);
IkReal x6361=((1.0)*x6356);
IkReal x6362=(cj5*x6355);
IkReal x6363=(cj5*x6356);
evalcond[0]=(((r20*x6362))+((r22*x6356))+(((-1.0)*x6358*x6360)));
evalcond[1]=(((r20*x6363))+(((-1.0)*r22*x6360))+(((-1.0)*x6358*x6361)));
evalcond[2]=(cj0+((r00*x6362))+(((-1.0)*x6359*x6360))+((r02*x6356)));
evalcond[3]=(sj0+(((-1.0)*x6357*x6360))+((r12*x6356))+((r10*x6362)));
evalcond[4]=(sj0+(((-1.0)*r02*x6360))+((r00*x6363))+(((-1.0)*x6359*x6361)));
evalcond[5]=((((-1.0)*x6357*x6361))+(((-1.0)*r12*x6360))+(((-1.0)*cj0))+((r10*x6363)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6364 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6364.valid){
continue;
}
CheckValue<IkReal> x6365=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6365.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6364.value)+(((1.5707963267949)*(x6365.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6366=IKcos(j4);
IkReal x6367=IKsin(j4);
IkReal x6368=(r11*sj5);
IkReal x6369=(r21*sj5);
IkReal x6370=(r01*sj5);
IkReal x6371=((1.0)*x6366);
IkReal x6372=((1.0)*x6367);
IkReal x6373=(cj5*x6366);
IkReal x6374=(cj5*x6367);
evalcond[0]=(((r20*x6373))+((r22*x6367))+(((-1.0)*x6369*x6371)));
evalcond[1]=(((r20*x6374))+(((-1.0)*r22*x6371))+(((-1.0)*x6369*x6372)));
evalcond[2]=(cj0+((r00*x6373))+(((-1.0)*x6370*x6371))+((r02*x6367)));
evalcond[3]=((((-1.0)*x6368*x6371))+sj0+((r12*x6367))+((r10*x6373)));
evalcond[4]=(sj0+((r00*x6374))+(((-1.0)*r02*x6371))+(((-1.0)*x6370*x6372)));
evalcond[5]=((((-1.0)*x6368*x6372))+(((-1.0)*r12*x6371))+((r10*x6374))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.75862068965517)*py))+(((-6.89655172413793)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((6.89655172413793)*py))+(((2.75862068965517)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.75862068965517)*py))+(((-6.89655172413793)*px))))+IKsqr(((((6.89655172413793)*py))+(((2.75862068965517)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.75862068965517)*py))+(((-6.89655172413793)*px))), ((((6.89655172413793)*py))+(((2.75862068965517)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6375=IKsin(j0);
IkReal x6376=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.05)*x6376))+(((-0.125)*x6375)));
evalcond[1]=((((0.125)*x6376))+(((-1.0)*py))+(((0.05)*x6375)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6377=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6377;
j4eval[1]=IKsign(x6377);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6378=((1.0)*sj5);
IkReal x6379=((((-1.0)*cj5*r11))+(((-1.0)*r10*x6378)));
j4eval[0]=x6379;
j4eval[1]=IKsign(x6379);
j4eval[2]=((IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6378)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6380=((1.0)*sj5);
IkReal x6381=((((-1.0)*cj5*r11))+(((-1.0)*r10*x6380)));
j4eval[0]=x6381;
j4eval[1]=IKsign(x6381);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x6380))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6382=((1.0)*sj5);
CheckValue<IkReal> x6383 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x6382))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6383.valid){
continue;
}
CheckValue<IkReal> x6384=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x6382)))),-1);
if(!x6384.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6383.value)+(((1.5707963267949)*(x6384.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6385=IKcos(j4);
IkReal x6386=IKsin(j4);
IkReal x6387=((1.0)*cj0);
IkReal x6388=(r11*sj5);
IkReal x6389=(r21*sj5);
IkReal x6390=(r01*sj5);
IkReal x6391=((1.0)*x6385);
IkReal x6392=(cj5*x6385);
IkReal x6393=((1.0)*x6386);
IkReal x6394=(cj5*x6386);
evalcond[0]=(((r22*x6386))+((r20*x6392))+(((-1.0)*x6389*x6391)));
evalcond[1]=(((r20*x6394))+(((-1.0)*r22*x6391))+(((-1.0)*x6389*x6393)));
evalcond[2]=(sj0+((r00*x6394))+(((-1.0)*r02*x6391))+(((-1.0)*x6390*x6393)));
evalcond[3]=((((-1.0)*x6387))+((r02*x6386))+((r00*x6392))+(((-1.0)*x6390*x6391)));
evalcond[4]=((((-1.0)*sj0))+((r10*x6392))+(((-1.0)*x6388*x6391))+((r12*x6386)));
evalcond[5]=((((-1.0)*x6387))+((r10*x6394))+(((-1.0)*x6388*x6393))+(((-1.0)*r12*x6391)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6395=((1.0)*sj5);
CheckValue<IkReal> x6396=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x6395)))),-1);
if(!x6396.valid){
continue;
}
CheckValue<IkReal> x6397 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6395)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6397.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6396.value)))+(x6397.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6398=IKcos(j4);
IkReal x6399=IKsin(j4);
IkReal x6400=((1.0)*cj0);
IkReal x6401=(r11*sj5);
IkReal x6402=(r21*sj5);
IkReal x6403=(r01*sj5);
IkReal x6404=((1.0)*x6398);
IkReal x6405=(cj5*x6398);
IkReal x6406=((1.0)*x6399);
IkReal x6407=(cj5*x6399);
evalcond[0]=(((r20*x6405))+(((-1.0)*x6402*x6404))+((r22*x6399)));
evalcond[1]=(((r20*x6407))+(((-1.0)*x6402*x6406))+(((-1.0)*r22*x6404)));
evalcond[2]=(sj0+(((-1.0)*x6403*x6406))+((r00*x6407))+(((-1.0)*r02*x6404)));
evalcond[3]=((((-1.0)*x6403*x6404))+((r00*x6405))+(((-1.0)*x6400))+((r02*x6399)));
evalcond[4]=(((r10*x6405))+(((-1.0)*sj0))+(((-1.0)*x6401*x6404))+((r12*x6399)));
evalcond[5]=(((r10*x6407))+(((-1.0)*x6401*x6406))+(((-1.0)*x6400))+(((-1.0)*r12*x6404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6408 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6408.valid){
continue;
}
CheckValue<IkReal> x6409=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6409.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6408.value)+(((1.5707963267949)*(x6409.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6410=IKcos(j4);
IkReal x6411=IKsin(j4);
IkReal x6412=((1.0)*cj0);
IkReal x6413=(r11*sj5);
IkReal x6414=(r21*sj5);
IkReal x6415=(r01*sj5);
IkReal x6416=((1.0)*x6410);
IkReal x6417=(cj5*x6410);
IkReal x6418=((1.0)*x6411);
IkReal x6419=(cj5*x6411);
evalcond[0]=(((r20*x6417))+(((-1.0)*x6414*x6416))+((r22*x6411)));
evalcond[1]=(((r20*x6419))+(((-1.0)*x6414*x6418))+(((-1.0)*r22*x6416)));
evalcond[2]=((((-1.0)*x6415*x6418))+sj0+((r00*x6419))+(((-1.0)*r02*x6416)));
evalcond[3]=(((r02*x6411))+(((-1.0)*x6415*x6416))+((r00*x6417))+(((-1.0)*x6412)));
evalcond[4]=((((-1.0)*sj0))+((r10*x6417))+((r12*x6411))+(((-1.0)*x6413*x6416)));
evalcond[5]=(((r10*x6419))+(((-1.0)*x6412))+(((-1.0)*x6413*x6418))+(((-1.0)*r12*x6416)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6420=((2.4)*sj1);
IkReal x6421=(cj1*cj2);
IkReal x6422=((8.0)*px);
IkReal x6423=(r00*sj5);
IkReal x6424=(cj5*r01);
IkReal x6425=((2.8)*sj1);
IkReal x6426=(cj2*x6424);
IkReal x6427=((1.0)*sj1*sj2);
IkReal x6428=((2.4)*cj1*sj2);
CheckValue<IkReal> x6429=IKPowWithIntegerCheck(IKsign((x6421+(((-1.0)*x6427)))),-1);
if(!x6429.valid){
continue;
}
CheckValue<IkReal> x6430 = IKatan2WithCheck(IkReal(((((-1.0)*x6421*x6422))+(((-1.0)*cj2*x6420*x6423))+(((-1.0)*x6424*x6428))+(((-1.0)*x6424*x6425))+(((-1.0)*x6424*x6427))+((sj1*sj2*x6422))+(((-1.0)*x6420*x6426))+((x6421*x6423))+((x6421*x6424))+(((-1.0)*x6423*x6425))+(((-1.0)*x6423*x6427))+(((-1.0)*x6423*x6428)))),IkReal((x6424+x6423)),IKFAST_ATAN2_MAGTHRESH);
if(!x6430.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6429.value)))+(x6430.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6431=IKcos(j0);
IkReal x6432=IKsin(j0);
IkReal x6433=((0.125)*sj5);
IkReal x6434=((1.0)*sj2);
IkReal x6435=((0.3)*cj2);
IkReal x6436=(cj1*cj2);
IkReal x6437=(cj5*r11);
IkReal x6438=((1.0)*sj5);
IkReal x6439=(cj5*r01);
IkReal x6440=(sj1*x6432);
IkReal x6441=((0.3)*cj1*sj2);
IkReal x6442=(sj1*x6431);
evalcond[0]=((((-1.0)*r00*x6438))+((x6431*x6436))+(((-1.0)*x6434*x6442))+(((-1.0)*x6439)));
evalcond[1]=((((-1.0)*r10*x6438))+((x6432*x6436))+(((-1.0)*x6434*x6440))+(((-1.0)*x6437)));
evalcond[2]=((((-0.35)*x6442))+(((-1.0)*x6431*x6441))+(((-1.0)*px))+(((-0.125)*x6432))+(((-1.0)*x6435*x6442))+(((0.125)*x6439))+((r00*x6433)));
evalcond[3]=((((-0.35)*x6440))+(((-1.0)*x6432*x6441))+(((-1.0)*py))+(((-1.0)*x6435*x6440))+((r10*x6433))+(((0.125)*x6431))+(((0.125)*x6437)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x6443=((1.0)*sj5);
IkReal x6444=((((-1.0)*cj5*r11))+(((-1.0)*r10*x6443)));
j4eval[0]=x6444;
j4eval[1]=IKsign(x6444);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6443))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x6445=((1.0)*sj5);
IkReal x6446=((((-1.0)*cj5*r01))+(((-1.0)*r00*x6445)));
j4eval[0]=x6446;
j4eval[1]=IKsign(x6446);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x6445))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x6447=((1.0)*sj5);
IkReal x6448=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6448;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs(((((-1.0)*r11*sj0*x6447))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*cj0*r01*x6447))))));
j4eval[2]=IKsign(x6448);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x6450 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6450)==0){
continue;
}
IkReal x6449=pow(x6450,-0.5);
CheckValue<IkReal> x6451 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x6451.valid){
continue;
}
IkReal gconst132=((-1.0)*(x6451.value));
IkReal gconst133=((-1.0)*r21*x6449);
IkReal gconst134=(r20*x6449);
CheckValue<IkReal> x6452 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x6452.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6452.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x6455 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x6455.valid){
continue;
}
IkReal x6453=((-1.0)*(x6455.value));
IkReal x6454=x6449;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x6453;
IkReal gconst132=x6453;
IkReal gconst133=((-1.0)*r21*x6454);
IkReal gconst134=(r20*x6454);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x6458 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x6458.valid){
continue;
}
IkReal x6456=((-1.0)*(x6458.value));
IkReal x6457=x6449;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x6456;
IkReal gconst132=x6456;
IkReal gconst133=((-1.0)*r21*x6457);
IkReal gconst134=(r20*x6457);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x6461 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x6461.valid){
continue;
}
IkReal x6459=((-1.0)*(x6461.value));
IkReal x6460=x6449;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x6459;
IkReal gconst132=x6459;
IkReal gconst133=((-1.0)*r21*x6460);
IkReal gconst134=(r20*x6460);
IkReal x6462=((1.0)*(r22*r22));
CheckValue<IkReal> x6466=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x6462))),-1);
if(!x6466.valid){
continue;
}
IkReal x6463=x6466.value;
IkReal x6464=((1.0)*x6463);
IkReal x6465=((((-1.0)*x6464*(r21*r21*r21*r21)))+(((-1.0)*x6462))+(((-2.0)*x6463*(r20*r20)*(r21*r21)))+(((-1.0)*x6464*(r20*r20*r20*r20))));
j4eval[0]=x6465;
j4eval[1]=IKsign(x6465);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6467=(gconst133*r21);
IkReal x6468=(cj1*cj2);
IkReal x6469=(sj1*sj2);
IkReal x6470=(gconst134*r20);
CheckValue<IkReal> x6471 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x6469))+((r22*x6468)))),IkReal((((x6467*x6469))+(((-1.0)*x6467*x6468))+((x6468*x6470))+(((-1.0)*x6469*x6470)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6471.valid){
continue;
}
CheckValue<IkReal> x6472=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x6467*x6467)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x6470*x6470)))+(((2.0)*x6467*x6470)))),-1);
if(!x6472.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6471.value)+(((1.5707963267949)*(x6472.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6473=IKsin(j4);
IkReal x6474=IKcos(j4);
IkReal x6475=(gconst134*r10);
IkReal x6476=(gconst133*r11);
IkReal x6477=((1.0)*sj1);
IkReal x6478=(gconst133*r01);
IkReal x6479=(gconst133*r21);
IkReal x6480=((1.0)*x6474);
IkReal x6481=((1.0)*x6473);
IkReal x6482=(gconst134*x6474);
IkReal x6483=((1.0)*cj1*sj2);
IkReal x6484=(gconst134*x6473);
evalcond[0]=((((-1.0)*r22*x6480))+((r20*x6484))+(((-1.0)*x6479*x6481)));
evalcond[1]=(((r00*x6484))+(((-1.0)*x6478*x6481))+sj0+(((-1.0)*r02*x6480)));
evalcond[2]=(((x6473*x6475))+(((-1.0)*r12*x6480))+(((-1.0)*x6476*x6481))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x6473))+((r20*x6482))+(((-1.0)*x6479*x6480))+((cj1*cj2))+(((-1.0)*sj2*x6477)));
evalcond[4]=(((r00*x6482))+(((-1.0)*x6478*x6480))+((r02*x6473))+(((-1.0)*cj0*x6483))+(((-1.0)*cj0*cj2*x6477)));
evalcond[5]=((((-1.0)*sj0*x6483))+((r12*x6473))+(((-1.0)*cj2*sj0*x6477))+(((-1.0)*x6476*x6480))+((x6474*x6475)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6485=((1.0)*gconst133);
CheckValue<IkReal> x6486 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x6485))+((cj0*gconst134*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6486.valid){
continue;
}
CheckValue<IkReal> x6487=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x6485))+(((-1.0)*gconst134*r01)))),-1);
if(!x6487.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6486.value)+(((1.5707963267949)*(x6487.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6488=IKsin(j4);
IkReal x6489=IKcos(j4);
IkReal x6490=(gconst134*r10);
IkReal x6491=(gconst133*r11);
IkReal x6492=((1.0)*sj1);
IkReal x6493=(gconst133*r01);
IkReal x6494=(gconst133*r21);
IkReal x6495=((1.0)*x6489);
IkReal x6496=((1.0)*x6488);
IkReal x6497=(gconst134*x6489);
IkReal x6498=((1.0)*cj1*sj2);
IkReal x6499=(gconst134*x6488);
evalcond[0]=((((-1.0)*r22*x6495))+(((-1.0)*x6494*x6496))+((r20*x6499)));
evalcond[1]=(sj0+((r00*x6499))+(((-1.0)*r02*x6495))+(((-1.0)*x6493*x6496)));
evalcond[2]=((((-1.0)*r12*x6495))+(((-1.0)*x6491*x6496))+(((-1.0)*cj0))+((x6488*x6490)));
evalcond[3]=((((-1.0)*x6494*x6495))+((r20*x6497))+((cj1*cj2))+((r22*x6488))+(((-1.0)*sj2*x6492)));
evalcond[4]=(((r00*x6497))+((r02*x6488))+(((-1.0)*cj0*cj2*x6492))+(((-1.0)*cj0*x6498))+(((-1.0)*x6493*x6495)));
evalcond[5]=((((-1.0)*cj2*sj0*x6492))+(((-1.0)*sj0*x6498))+((r12*x6488))+((x6489*x6490))+(((-1.0)*x6491*x6495)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6500=((1.0)*gconst133);
CheckValue<IkReal> x6501=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x6500))+(((-1.0)*gconst134*r11)))),-1);
if(!x6501.valid){
continue;
}
CheckValue<IkReal> x6502 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x6500))+((gconst134*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6502.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6501.value)))+(x6502.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6503=IKsin(j4);
IkReal x6504=IKcos(j4);
IkReal x6505=(gconst134*r10);
IkReal x6506=(gconst133*r11);
IkReal x6507=((1.0)*sj1);
IkReal x6508=(gconst133*r01);
IkReal x6509=(gconst133*r21);
IkReal x6510=((1.0)*x6504);
IkReal x6511=((1.0)*x6503);
IkReal x6512=(gconst134*x6504);
IkReal x6513=((1.0)*cj1*sj2);
IkReal x6514=(gconst134*x6503);
evalcond[0]=((((-1.0)*r22*x6510))+((r20*x6514))+(((-1.0)*x6509*x6511)));
evalcond[1]=((((-1.0)*r02*x6510))+((r00*x6514))+sj0+(((-1.0)*x6508*x6511)));
evalcond[2]=((((-1.0)*x6506*x6511))+((x6503*x6505))+(((-1.0)*r12*x6510))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x6512))+((r22*x6503))+(((-1.0)*x6509*x6510))+((cj1*cj2))+(((-1.0)*sj2*x6507)));
evalcond[4]=((((-1.0)*cj0*x6513))+((r02*x6503))+((r00*x6512))+(((-1.0)*cj0*cj2*x6507))+(((-1.0)*x6508*x6510)));
evalcond[5]=(((r12*x6503))+(((-1.0)*x6506*x6510))+((x6504*x6505))+(((-1.0)*sj0*x6513))+(((-1.0)*cj2*sj0*x6507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6516 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6516)==0){
continue;
}
IkReal x6515=pow(x6516,-0.5);
CheckValue<IkReal> x6517 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x6517.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x6517.value))));
IkReal gconst136=((1.0)*r21*x6515);
IkReal gconst137=((-1.0)*r20*x6515);
CheckValue<IkReal> x6518 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x6518.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6518.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x6521 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x6521.valid){
continue;
}
IkReal x6519=((1.0)*(x6521.value));
IkReal x6520=x6515;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x6519)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x6519)));
IkReal gconst136=((1.0)*r21*x6520);
IkReal gconst137=((-1.0)*r20*x6520);
IkReal x6522=r22*r22;
IkReal x6523=((1.0)*x6522);
CheckValue<IkReal> x6527=IKPowWithIntegerCheck(((-1.0)+x6522),-1);
if(!x6527.valid){
continue;
}
IkReal x6524=x6527.value;
if((((1.0)+(((-1.0)*x6523)))) < -0.00001)
continue;
IkReal x6525=IKsqrt(((1.0)+(((-1.0)*x6523))));
IkReal x6526=(sj0*x6524*x6525);
j4eval[0]=((IKabs((x6526+(((-1.0)*x6523*x6526)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x6530 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x6530.valid){
continue;
}
IkReal x6528=((1.0)*(x6530.value));
IkReal x6529=x6515;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x6528)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x6528)));
IkReal gconst136=((1.0)*r21*x6529);
IkReal gconst137=((-1.0)*r20*x6529);
IkReal x6531=r22*r22;
IkReal x6532=((1.0)*x6531);
CheckValue<IkReal> x6536=IKPowWithIntegerCheck(((-1.0)+x6531),-1);
if(!x6536.valid){
continue;
}
IkReal x6533=x6536.value;
if((((1.0)+(((-1.0)*x6532)))) < -0.00001)
continue;
IkReal x6534=IKsqrt(((1.0)+(((-1.0)*x6532))));
IkReal x6535=(cj0*x6533*x6534);
j4eval[0]=((IKabs((x6535+(((-1.0)*x6532*x6535)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x6539 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x6539.valid){
continue;
}
IkReal x6537=((1.0)*(x6539.value));
IkReal x6538=x6515;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x6537)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x6537)));
IkReal gconst136=((1.0)*r21*x6538);
IkReal gconst137=((-1.0)*r20*x6538);
IkReal x6540=r22*r22;
IkReal x6541=(cj0*r02);
IkReal x6542=(r12*sj0);
CheckValue<IkReal> x6546=IKPowWithIntegerCheck(((-1.0)+x6540),-1);
if(!x6546.valid){
continue;
}
IkReal x6543=x6546.value;
if((((1.0)+(((-1.0)*x6540)))) < -0.00001)
continue;
IkReal x6544=IKsqrt(((1.0)+(((-1.0)*x6540))));
IkReal x6545=((1.0)*r22*x6543*x6544);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((x6542+x6541)))+(IKabs(((((-1.0)*x6541*x6545))+(((-1.0)*x6542*x6545))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6547=((1.0)*gconst136);
CheckValue<IkReal> x6548 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x6547))+((gconst137*r10*sj0))+(((-1.0)*r11*sj0*x6547))+((cj0*gconst137*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6548.valid){
continue;
}
CheckValue<IkReal> x6549=IKPowWithIntegerCheck(IKsign((((gconst136*r20))+((gconst137*r21)))),-1);
if(!x6549.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6548.value)+(((1.5707963267949)*(x6549.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6550=IKsin(j4);
IkReal x6551=IKcos(j4);
IkReal x6552=(gconst136*r01);
IkReal x6553=((1.0)*sj1);
IkReal x6554=(gconst136*r21);
IkReal x6555=(gconst136*r11);
IkReal x6556=((1.0)*x6551);
IkReal x6557=(gconst137*x6551);
IkReal x6558=((1.0)*x6550);
IkReal x6559=(gconst137*x6550);
IkReal x6560=((1.0)*cj1*sj2);
evalcond[0]=(((r20*x6559))+(((-1.0)*r22*x6556))+(((-1.0)*x6554*x6558)));
evalcond[1]=((((-1.0)*x6552*x6558))+sj0+(((-1.0)*r02*x6556))+((r00*x6559)));
evalcond[2]=((((-1.0)*x6555*x6558))+(((-1.0)*r12*x6556))+((r10*x6559))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x6557))+(((-1.0)*sj2*x6553))+(((-1.0)*x6554*x6556))+((r22*x6550))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x6552*x6556))+((r02*x6550))+(((-1.0)*cj0*cj2*x6553))+(((-1.0)*cj0*x6560))+((r00*x6557)));
evalcond[5]=((((-1.0)*x6555*x6556))+(((-1.0)*cj2*sj0*x6553))+(((-1.0)*sj0*x6560))+((r10*x6557))+((r12*x6550)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6561=((1.0)*gconst136);
CheckValue<IkReal> x6562=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst137*r01))+(((-1.0)*r00*x6561)))),-1);
if(!x6562.valid){
continue;
}
CheckValue<IkReal> x6563 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x6561))+((cj0*gconst137*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6563.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6562.value)))+(x6563.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6564=IKsin(j4);
IkReal x6565=IKcos(j4);
IkReal x6566=(gconst136*r01);
IkReal x6567=((1.0)*sj1);
IkReal x6568=(gconst136*r21);
IkReal x6569=(gconst136*r11);
IkReal x6570=((1.0)*x6565);
IkReal x6571=(gconst137*x6565);
IkReal x6572=((1.0)*x6564);
IkReal x6573=(gconst137*x6564);
IkReal x6574=((1.0)*cj1*sj2);
evalcond[0]=((((-1.0)*r22*x6570))+((r20*x6573))+(((-1.0)*x6568*x6572)));
evalcond[1]=((((-1.0)*x6566*x6572))+sj0+(((-1.0)*r02*x6570))+((r00*x6573)));
evalcond[2]=((((-1.0)*x6569*x6572))+((r10*x6573))+(((-1.0)*r12*x6570))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x6564))+((r20*x6571))+(((-1.0)*sj2*x6567))+((cj1*cj2))+(((-1.0)*x6568*x6570)));
evalcond[4]=((((-1.0)*x6566*x6570))+(((-1.0)*cj0*cj2*x6567))+((r02*x6564))+(((-1.0)*cj0*x6574))+((r00*x6571)));
evalcond[5]=((((-1.0)*cj2*sj0*x6567))+((r12*x6564))+(((-1.0)*x6569*x6570))+((r10*x6571))+(((-1.0)*sj0*x6574)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6575=((1.0)*gconst136);
CheckValue<IkReal> x6576 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst137*r20*sj0))+(((-1.0)*r21*sj0*x6575)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6576.valid){
continue;
}
CheckValue<IkReal> x6577=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst137*r11))+(((-1.0)*r10*x6575)))),-1);
if(!x6577.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6576.value)+(((1.5707963267949)*(x6577.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6578=IKsin(j4);
IkReal x6579=IKcos(j4);
IkReal x6580=(gconst136*r01);
IkReal x6581=((1.0)*sj1);
IkReal x6582=(gconst136*r21);
IkReal x6583=(gconst136*r11);
IkReal x6584=((1.0)*x6579);
IkReal x6585=(gconst137*x6579);
IkReal x6586=((1.0)*x6578);
IkReal x6587=(gconst137*x6578);
IkReal x6588=((1.0)*cj1*sj2);
evalcond[0]=((((-1.0)*x6582*x6586))+(((-1.0)*r22*x6584))+((r20*x6587)));
evalcond[1]=(sj0+(((-1.0)*r02*x6584))+((r00*x6587))+(((-1.0)*x6580*x6586)));
evalcond[2]=((((-1.0)*r12*x6584))+(((-1.0)*x6583*x6586))+(((-1.0)*cj0))+((r10*x6587)));
evalcond[3]=(((r22*x6578))+(((-1.0)*sj2*x6581))+(((-1.0)*x6582*x6584))+((r20*x6585))+((cj1*cj2)));
evalcond[4]=((((-1.0)*cj0*x6588))+((r00*x6585))+(((-1.0)*cj0*cj2*x6581))+((r02*x6578))+(((-1.0)*x6580*x6584)));
evalcond[5]=((((-1.0)*cj2*sj0*x6581))+((r12*x6578))+(((-1.0)*sj0*x6588))+(((-1.0)*x6583*x6584))+((r10*x6585)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6589=((-1.0)*r00);
IkReal x6591 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6591)==0){
continue;
}
IkReal x6590=pow(x6591,-0.5);
CheckValue<IkReal> x6592 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6589),IKFAST_ATAN2_MAGTHRESH);
if(!x6592.valid){
continue;
}
IkReal gconst138=((-1.0)*(x6592.value));
IkReal gconst139=(r01*x6590);
IkReal gconst140=(x6589*x6590);
CheckValue<IkReal> x6593 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6593.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6593.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6594=((-1.0)*r00);
IkReal x6595=x6590;
CheckValue<IkReal> x6597 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6594),IKFAST_ATAN2_MAGTHRESH);
if(!x6597.valid){
continue;
}
IkReal x6596=((-1.0)*(x6597.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst139;
cj5=gconst140;
j5=x6596;
IkReal gconst138=x6596;
IkReal gconst139=(r01*x6595);
IkReal gconst140=(x6594*x6595);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6598=((1.0)*gconst139);
CheckValue<IkReal> x6599=IKPowWithIntegerCheck(IKsign((((gconst139*r20))+((gconst140*r21)))),-1);
if(!x6599.valid){
continue;
}
CheckValue<IkReal> x6600 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst140*r10*sj0))+(((-1.0)*cj0*r01*x6598))+(((-1.0)*r11*sj0*x6598))+((cj0*gconst140*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6600.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6599.value)))+(x6600.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6601=IKsin(j4);
IkReal x6602=IKcos(j4);
IkReal x6603=(gconst140*r10);
IkReal x6604=((1.0)*sj1);
IkReal x6605=((1.0)*x6602);
IkReal x6606=(gconst140*x6602);
IkReal x6607=(gconst140*x6601);
IkReal x6608=((1.0)*cj1*sj2);
IkReal x6609=((1.0)*gconst139*x6601);
evalcond[0]=((((-1.0)*r22*x6605))+((r20*x6607))+(((-1.0)*r21*x6609)));
evalcond[1]=(sj0+((r00*x6607))+(((-1.0)*r02*x6605))+(((-1.0)*r01*x6609)));
evalcond[2]=(((x6601*x6603))+(((-1.0)*r12*x6605))+(((-1.0)*r11*x6609))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x6601))+(((-1.0)*sj2*x6604))+(((-1.0)*gconst139*r21*x6605))+((r20*x6606))+((cj1*cj2)));
evalcond[4]=((((-1.0)*gconst139*r01*x6605))+((r00*x6606))+(((-1.0)*cj0*x6608))+((r02*x6601))+(((-1.0)*cj0*cj2*x6604)));
evalcond[5]=((((-1.0)*sj0*x6608))+(((-1.0)*gconst139*r11*x6605))+(((-1.0)*cj2*sj0*x6604))+((x6602*x6603))+((r12*x6601)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6610=((1.0)*gconst139);
CheckValue<IkReal> x6611 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x6610))+((gconst140*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6611.valid){
continue;
}
CheckValue<IkReal> x6612=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x6610))+(((-1.0)*gconst140*r11)))),-1);
if(!x6612.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6611.value)+(((1.5707963267949)*(x6612.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6613=IKsin(j4);
IkReal x6614=IKcos(j4);
IkReal x6615=(gconst140*r10);
IkReal x6616=((1.0)*sj1);
IkReal x6617=((1.0)*x6614);
IkReal x6618=(gconst140*x6614);
IkReal x6619=(gconst140*x6613);
IkReal x6620=((1.0)*cj1*sj2);
IkReal x6621=((1.0)*gconst139*x6613);
evalcond[0]=((((-1.0)*r22*x6617))+(((-1.0)*r21*x6621))+((r20*x6619)));
evalcond[1]=(sj0+((r00*x6619))+(((-1.0)*r02*x6617))+(((-1.0)*r01*x6621)));
evalcond[2]=((((-1.0)*r12*x6617))+((x6613*x6615))+(((-1.0)*r11*x6621))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj2*x6616))+((r22*x6613))+(((-1.0)*gconst139*r21*x6617))+((cj1*cj2))+((r20*x6618)));
evalcond[4]=(((r02*x6613))+((r00*x6618))+(((-1.0)*cj0*x6620))+(((-1.0)*cj0*cj2*x6616))+(((-1.0)*gconst139*r01*x6617)));
evalcond[5]=((((-1.0)*cj2*sj0*x6616))+((x6614*x6615))+((r12*x6613))+(((-1.0)*sj0*x6620))+(((-1.0)*gconst139*r11*x6617)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6622=((-1.0)*r01);
IkReal x6624 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6624)==0){
continue;
}
IkReal x6623=pow(x6624,-0.5);
CheckValue<IkReal> x6625 = IKatan2WithCheck(IkReal(x6622),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6625.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x6625.value))));
IkReal gconst142=(x6622*x6623);
IkReal gconst143=((1.0)*r00*x6623);
CheckValue<IkReal> x6626 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6626.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6626.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6627=((-1.0)*r01);
CheckValue<IkReal> x6630 = IKatan2WithCheck(IkReal(x6627),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6630.valid){
continue;
}
IkReal x6628=((1.0)*(x6630.value));
IkReal x6629=x6623;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x6628)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x6628)));
IkReal gconst142=(x6627*x6629);
IkReal gconst143=((1.0)*r00*x6629);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x6631=((-1.0)*r01);
CheckValue<IkReal> x6634 = IKatan2WithCheck(IkReal(x6631),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6634.valid){
continue;
}
IkReal x6632=((1.0)*(x6634.value));
IkReal x6633=x6623;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x6632)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x6632)));
IkReal gconst142=(x6631*x6633);
IkReal gconst143=((1.0)*r00*x6633);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6635=((-1.0)*r01);
CheckValue<IkReal> x6638 = IKatan2WithCheck(IkReal(x6635),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6638.valid){
continue;
}
IkReal x6636=((1.0)*(x6638.value));
IkReal x6637=x6623;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x6636)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x6636)));
IkReal gconst142=(x6635*x6637);
IkReal gconst143=((1.0)*r00*x6637);
IkReal x6639=r02*r02;
IkReal x6640=(r12*sj0);
IkReal x6641=x6623;
IkReal x6642=(cj0*x6641);
j4eval[0]=((IKabs(((((-1.0)*x6642))+((x6639*x6642))+((r02*x6640*x6641)))))+(IKabs((x6640+((cj0*r02))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6643=((1.0)*gconst142);
CheckValue<IkReal> x6644=IKPowWithIntegerCheck(IKsign((((gconst143*r21))+((gconst142*r20)))),-1);
if(!x6644.valid){
continue;
}
CheckValue<IkReal> x6645 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst143*r00))+(((-1.0)*r11*sj0*x6643))+((gconst143*r10*sj0))+(((-1.0)*cj0*r01*x6643)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6645.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6644.value)))+(x6645.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6646=IKsin(j4);
IkReal x6647=IKcos(j4);
IkReal x6648=(gconst143*r00);
IkReal x6649=(gconst142*r21);
IkReal x6650=((1.0)*sj1);
IkReal x6651=(gconst142*r11);
IkReal x6652=(gconst142*r01);
IkReal x6653=((1.0)*x6647);
IkReal x6654=((1.0)*x6646);
IkReal x6655=(gconst143*x6647);
IkReal x6656=(gconst143*x6646);
IkReal x6657=((1.0)*cj1*sj2);
evalcond[0]=((((-1.0)*r22*x6653))+(((-1.0)*x6649*x6654))+((r20*x6656)));
evalcond[1]=(sj0+(((-1.0)*x6652*x6654))+((x6646*x6648))+(((-1.0)*r02*x6653)));
evalcond[2]=((((-1.0)*x6651*x6654))+(((-1.0)*r12*x6653))+((r10*x6656))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x6649*x6653))+((r20*x6655))+((r22*x6646))+((cj1*cj2))+(((-1.0)*sj2*x6650)));
evalcond[4]=((((-1.0)*x6652*x6653))+((x6647*x6648))+(((-1.0)*cj0*x6657))+(((-1.0)*cj0*cj2*x6650))+((r02*x6646)));
evalcond[5]=((((-1.0)*x6651*x6653))+(((-1.0)*cj2*sj0*x6650))+(((-1.0)*sj0*x6657))+((r10*x6655))+((r12*x6646)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6658=((1.0)*gconst142);
CheckValue<IkReal> x6659=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x6658))+(((-1.0)*gconst143*r01)))),-1);
if(!x6659.valid){
continue;
}
CheckValue<IkReal> x6660 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x6658))+((cj0*gconst143*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6660.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6659.value)))+(x6660.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6661=IKsin(j4);
IkReal x6662=IKcos(j4);
IkReal x6663=(gconst143*r00);
IkReal x6664=(gconst142*r21);
IkReal x6665=((1.0)*sj1);
IkReal x6666=(gconst142*r11);
IkReal x6667=(gconst142*r01);
IkReal x6668=((1.0)*x6662);
IkReal x6669=((1.0)*x6661);
IkReal x6670=(gconst143*x6662);
IkReal x6671=(gconst143*x6661);
IkReal x6672=((1.0)*cj1*sj2);
evalcond[0]=((((-1.0)*x6664*x6669))+((r20*x6671))+(((-1.0)*r22*x6668)));
evalcond[1]=((((-1.0)*x6667*x6669))+sj0+(((-1.0)*r02*x6668))+((x6661*x6663)));
evalcond[2]=((((-1.0)*r12*x6668))+((r10*x6671))+(((-1.0)*cj0))+(((-1.0)*x6666*x6669)));
evalcond[3]=((((-1.0)*x6664*x6668))+((r20*x6670))+((cj1*cj2))+(((-1.0)*sj2*x6665))+((r22*x6661)));
evalcond[4]=((((-1.0)*x6667*x6668))+((r02*x6661))+(((-1.0)*cj0*cj2*x6665))+((x6662*x6663))+(((-1.0)*cj0*x6672)));
evalcond[5]=((((-1.0)*cj2*sj0*x6665))+((r12*x6661))+(((-1.0)*sj0*x6672))+((r10*x6670))+(((-1.0)*x6666*x6668)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6673=((1.0)*gconst142);
CheckValue<IkReal> x6674 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst143*r20*sj0))+(((-1.0)*r21*sj0*x6673)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6674.valid){
continue;
}
CheckValue<IkReal> x6675=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst143*r11))+(((-1.0)*r10*x6673)))),-1);
if(!x6675.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6674.value)+(((1.5707963267949)*(x6675.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6676=IKsin(j4);
IkReal x6677=IKcos(j4);
IkReal x6678=(gconst143*r00);
IkReal x6679=(gconst142*r21);
IkReal x6680=((1.0)*sj1);
IkReal x6681=(gconst142*r11);
IkReal x6682=(gconst142*r01);
IkReal x6683=((1.0)*x6677);
IkReal x6684=((1.0)*x6676);
IkReal x6685=(gconst143*x6677);
IkReal x6686=(gconst143*x6676);
IkReal x6687=((1.0)*cj1*sj2);
evalcond[0]=((((-1.0)*x6679*x6684))+((r20*x6686))+(((-1.0)*r22*x6683)));
evalcond[1]=(sj0+(((-1.0)*r02*x6683))+((x6676*x6678))+(((-1.0)*x6682*x6684)));
evalcond[2]=((((-1.0)*x6681*x6684))+((r10*x6686))+(((-1.0)*r12*x6683))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x6679*x6683))+((r22*x6676))+(((-1.0)*sj2*x6680))+((cj1*cj2))+((r20*x6685)));
evalcond[4]=(((r02*x6676))+(((-1.0)*cj0*x6687))+(((-1.0)*cj0*cj2*x6680))+(((-1.0)*x6682*x6683))+((x6677*x6678)));
evalcond[5]=((((-1.0)*x6681*x6683))+(((-1.0)*sj0*x6687))+((r10*x6685))+((r12*x6676))+(((-1.0)*cj2*sj0*x6680)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6688=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6688;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x6688);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6689=((1.0)*sj5);
IkReal x6690=((((-1.0)*cj5*r11))+(((-1.0)*r10*x6689)));
j4eval[0]=x6690;
j4eval[1]=IKsign(x6690);
j4eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*r21*x6689))+((cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6691=((1.0)*cj5);
IkReal x6692=((1.0)*sj5);
IkReal x6693=(cj1*cj2);
IkReal x6694=(sj1*sj2);
IkReal x6695=((((-1.0)*r10*x6692))+(((-1.0)*r11*x6691)));
j4eval[0]=x6695;
j4eval[1]=((IKabs((((r01*sj5*x6694))+((cj5*r00*x6693))+(((-1.0)*r01*x6692*x6693))+(((-1.0)*r00*x6691*x6694)))))+(IKabs(((((-1.0)*r02*x6693))+((r02*x6694))))));
j4eval[2]=IKsign(x6695);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6696=((1.0)*cj5);
IkReal x6697=((1.0)*sj5);
IkReal x6698=(cj1*cj2);
IkReal x6699=(sj1*sj2);
CheckValue<IkReal> x6700 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x6696*x6699))+((r01*sj5*x6699))+((cj5*r00*x6698))+(((-1.0)*r01*x6697*x6698)))),IkReal(((((-1.0)*r02*x6698))+((r02*x6699)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6700.valid){
continue;
}
CheckValue<IkReal> x6701=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x6697))+(((-1.0)*r11*x6696)))),-1);
if(!x6701.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6700.value)+(((1.5707963267949)*(x6701.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6702=IKcos(j4);
IkReal x6703=IKsin(j4);
IkReal x6704=((1.0)*sj2);
IkReal x6705=((1.0)*x6702);
IkReal x6706=(cj5*x6702);
IkReal x6707=(cj5*x6703);
IkReal x6708=((1.0)*sj5*x6703);
evalcond[0]=((((-1.0)*r01*sj5*x6705))+((r00*x6706))+((r02*x6703)));
evalcond[1]=((((-1.0)*r22*x6705))+((r20*x6707))+(((-1.0)*r21*x6708)));
evalcond[2]=(((r10*x6707))+(((-1.0)*r12*x6705))+(((-1.0)*r11*x6708)));
evalcond[3]=((1.0)+(((-1.0)*r02*x6705))+((r00*x6707))+(((-1.0)*r01*x6708)));
evalcond[4]=((((-1.0)*sj1*x6704))+((r20*x6706))+(((-1.0)*r21*sj5*x6705))+((cj1*cj2))+((r22*x6703)));
evalcond[5]=(((r10*x6706))+(((-1.0)*r11*sj5*x6705))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x6704))+((r12*x6703)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6709=((1.0)*sj5);
CheckValue<IkReal> x6710 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x6709)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6710.valid){
continue;
}
CheckValue<IkReal> x6711=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x6709)))),-1);
if(!x6711.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6710.value)+(((1.5707963267949)*(x6711.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6712=IKcos(j4);
IkReal x6713=IKsin(j4);
IkReal x6714=((1.0)*sj2);
IkReal x6715=((1.0)*x6712);
IkReal x6716=(cj5*x6712);
IkReal x6717=(cj5*x6713);
IkReal x6718=((1.0)*sj5*x6713);
evalcond[0]=((((-1.0)*r01*sj5*x6715))+((r02*x6713))+((r00*x6716)));
evalcond[1]=(((r20*x6717))+(((-1.0)*r21*x6718))+(((-1.0)*r22*x6715)));
evalcond[2]=((((-1.0)*r11*x6718))+(((-1.0)*r12*x6715))+((r10*x6717)));
evalcond[3]=((1.0)+(((-1.0)*r02*x6715))+(((-1.0)*r01*x6718))+((r00*x6717)));
evalcond[4]=((((-1.0)*r21*sj5*x6715))+((r20*x6716))+((r22*x6713))+(((-1.0)*sj1*x6714))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj1*x6714))+(((-1.0)*cj2*sj1))+(((-1.0)*r11*sj5*x6715))+((r10*x6716))+((r12*x6713)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6719 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6719.valid){
continue;
}
CheckValue<IkReal> x6720=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6720.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6719.value)+(((1.5707963267949)*(x6720.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6721=IKcos(j4);
IkReal x6722=IKsin(j4);
IkReal x6723=((1.0)*sj2);
IkReal x6724=((1.0)*x6721);
IkReal x6725=(cj5*x6721);
IkReal x6726=(cj5*x6722);
IkReal x6727=((1.0)*sj5*x6722);
evalcond[0]=((((-1.0)*r01*sj5*x6724))+((r02*x6722))+((r00*x6725)));
evalcond[1]=((((-1.0)*r22*x6724))+((r20*x6726))+(((-1.0)*r21*x6727)));
evalcond[2]=((((-1.0)*r12*x6724))+(((-1.0)*r11*x6727))+((r10*x6726)));
evalcond[3]=((1.0)+(((-1.0)*r02*x6724))+(((-1.0)*r01*x6727))+((r00*x6726)));
evalcond[4]=(((r20*x6725))+(((-1.0)*r21*sj5*x6724))+((r22*x6722))+(((-1.0)*sj1*x6723))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj1*x6723))+((r12*x6722))+(((-1.0)*r11*sj5*x6724))+(((-1.0)*cj2*sj1))+((r10*x6725)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6728=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6728;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x6728);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6729=((1.0)*sj5);
IkReal x6730=((((-1.0)*r20*x6729))+(((-1.0)*cj5*r21)));
j4eval[0]=x6730;
j4eval[1]=((IKabs((((cj5*r10))+(((-1.0)*r11*x6729)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6730);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6731=cj5*cj5;
IkReal x6732=r01*r01;
IkReal x6733=(cj5*r00);
IkReal x6734=(r01*sj5);
IkReal x6735=((((-2.0)*x6733*x6734))+x6732+((x6731*(r00*r00)))+(r02*r02)+(((-1.0)*x6731*x6732)));
j4eval[0]=x6735;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x6734))+x6733))));
j4eval[2]=IKsign(x6735);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6736=cj5*cj5;
IkReal x6737=r01*r01;
IkReal x6738=(r01*sj5);
IkReal x6739=(cj5*r00);
CheckValue<IkReal> x6740 = IKatan2WithCheck(IkReal(((((-1.0)*x6738))+x6739)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6740.valid){
continue;
}
CheckValue<IkReal> x6741=IKPowWithIntegerCheck(IKsign(((((-2.0)*x6738*x6739))+x6737+((x6736*(r00*r00)))+(((-1.0)*x6736*x6737))+(r02*r02))),-1);
if(!x6741.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6740.value)+(((1.5707963267949)*(x6741.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6742=IKcos(j4);
IkReal x6743=IKsin(j4);
IkReal x6744=(cj5*r10);
IkReal x6745=((1.0)*x6742);
IkReal x6746=(cj5*x6743);
IkReal x6747=(cj5*x6742);
IkReal x6748=((1.0)*sj5*x6743);
evalcond[0]=(((r02*x6743))+(((-1.0)*r01*sj5*x6745))+((r00*x6747)));
evalcond[1]=((((-1.0)*r21*x6748))+(((-1.0)*r22*x6745))+((r20*x6746)));
evalcond[2]=((((-1.0)*r12*x6745))+(((-1.0)*r11*x6748))+((x6743*x6744)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x6748))+(((-1.0)*r02*x6745))+((r00*x6746)));
evalcond[4]=(((cj2*sj1))+((x6742*x6744))+((cj1*sj2))+(((-1.0)*r11*sj5*x6745))+((r12*x6743)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r21*sj5*x6745))+((r20*x6747))+((cj1*cj2))+((r22*x6743)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6749=((1.0)*sj5);
CheckValue<IkReal> x6750=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*x6749)))),-1);
if(!x6750.valid){
continue;
}
CheckValue<IkReal> x6751 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x6749)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6751.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6750.value)))+(x6751.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6752=IKcos(j4);
IkReal x6753=IKsin(j4);
IkReal x6754=(cj5*r10);
IkReal x6755=((1.0)*x6752);
IkReal x6756=(cj5*x6753);
IkReal x6757=(cj5*x6752);
IkReal x6758=((1.0)*sj5*x6753);
evalcond[0]=(((r00*x6757))+(((-1.0)*r01*sj5*x6755))+((r02*x6753)));
evalcond[1]=(((r20*x6756))+(((-1.0)*r22*x6755))+(((-1.0)*r21*x6758)));
evalcond[2]=(((x6753*x6754))+(((-1.0)*r11*x6758))+(((-1.0)*r12*x6755)));
evalcond[3]=((-1.0)+((r00*x6756))+(((-1.0)*r01*x6758))+(((-1.0)*r02*x6755)));
evalcond[4]=(((cj2*sj1))+((r12*x6753))+((cj1*sj2))+((x6752*x6754))+(((-1.0)*r11*sj5*x6755)));
evalcond[5]=(((r22*x6753))+(((-1.0)*sj1*sj2))+((r20*x6757))+((cj1*cj2))+(((-1.0)*r21*sj5*x6755)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6759=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6759.valid){
continue;
}
CheckValue<IkReal> x6760 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6760.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6759.value)))+(x6760.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6761=IKcos(j4);
IkReal x6762=IKsin(j4);
IkReal x6763=(cj5*r10);
IkReal x6764=((1.0)*x6761);
IkReal x6765=(cj5*x6762);
IkReal x6766=(cj5*x6761);
IkReal x6767=((1.0)*sj5*x6762);
evalcond[0]=(((r00*x6766))+(((-1.0)*r01*sj5*x6764))+((r02*x6762)));
evalcond[1]=((((-1.0)*r22*x6764))+((r20*x6765))+(((-1.0)*r21*x6767)));
evalcond[2]=((((-1.0)*r11*x6767))+(((-1.0)*r12*x6764))+((x6762*x6763)));
evalcond[3]=((-1.0)+((r00*x6765))+(((-1.0)*r01*x6767))+(((-1.0)*r02*x6764)));
evalcond[4]=(((cj2*sj1))+((r12*x6762))+((cj1*sj2))+((x6761*x6763))+(((-1.0)*r11*sj5*x6764)));
evalcond[5]=((((-1.0)*r21*sj5*x6764))+((r22*x6762))+(((-1.0)*sj1*sj2))+((r20*x6766))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6768=((-1.0)*r10);
IkReal x6770 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6770)==0){
continue;
}
IkReal x6769=pow(x6770,-0.5);
CheckValue<IkReal> x6771 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6768),IKFAST_ATAN2_MAGTHRESH);
if(!x6771.valid){
continue;
}
IkReal gconst144=((-1.0)*(x6771.value));
IkReal gconst145=(r11*x6769);
IkReal gconst146=(x6768*x6769);
CheckValue<IkReal> x6772 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6772.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6772.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6773=((-1.0)*r10);
IkReal x6774=x6769;
CheckValue<IkReal> x6776 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6773),IKFAST_ATAN2_MAGTHRESH);
if(!x6776.valid){
continue;
}
IkReal x6775=((-1.0)*(x6776.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst145;
cj5=gconst146;
j5=x6775;
IkReal gconst144=x6775;
IkReal gconst145=(r11*x6774);
IkReal gconst146=(x6773*x6774);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6777=((1.0)*gconst145);
CheckValue<IkReal> x6778=IKPowWithIntegerCheck(IKsign((((gconst145*r20))+((gconst146*r21)))),-1);
if(!x6778.valid){
continue;
}
CheckValue<IkReal> x6779 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst146*r00))+(((-1.0)*r11*sj0*x6777))+((gconst146*r10*sj0))+(((-1.0)*cj0*r01*x6777)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6779.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6778.value)))+(x6779.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6780=IKsin(j4);
IkReal x6781=IKcos(j4);
IkReal x6782=(gconst145*r11);
IkReal x6783=((1.0)*sj1);
IkReal x6784=(gconst145*r01);
IkReal x6785=(gconst145*r21);
IkReal x6786=((1.0)*x6781);
IkReal x6787=(gconst146*x6781);
IkReal x6788=(gconst146*x6780);
IkReal x6789=((1.0)*x6780);
IkReal x6790=((1.0)*cj1*sj2);
evalcond[0]=(((r20*x6788))+(((-1.0)*x6785*x6789))+(((-1.0)*r22*x6786)));
evalcond[1]=((((-1.0)*x6784*x6789))+sj0+(((-1.0)*r02*x6786))+((r00*x6788)));
evalcond[2]=((((-1.0)*x6782*x6789))+(((-1.0)*r12*x6786))+((r10*x6788))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x6787))+(((-1.0)*x6785*x6786))+((r22*x6780))+(((-1.0)*sj2*x6783))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x6784*x6786))+(((-1.0)*cj0*cj2*x6783))+((r02*x6780))+((r00*x6787))+(((-1.0)*cj0*x6790)));
evalcond[5]=((((-1.0)*x6782*x6786))+(((-1.0)*cj2*sj0*x6783))+((r12*x6780))+((r10*x6787))+(((-1.0)*sj0*x6790)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6791=((1.0)*gconst145);
CheckValue<IkReal> x6792=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst146*r01))+(((-1.0)*r00*x6791)))),-1);
if(!x6792.valid){
continue;
}
CheckValue<IkReal> x6793 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x6791))+((cj0*gconst146*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6793.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6792.value)))+(x6793.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6794=IKsin(j4);
IkReal x6795=IKcos(j4);
IkReal x6796=(gconst145*r11);
IkReal x6797=((1.0)*sj1);
IkReal x6798=(gconst145*r01);
IkReal x6799=(gconst145*r21);
IkReal x6800=((1.0)*x6795);
IkReal x6801=(gconst146*x6795);
IkReal x6802=(gconst146*x6794);
IkReal x6803=((1.0)*x6794);
IkReal x6804=((1.0)*cj1*sj2);
evalcond[0]=(((r20*x6802))+(((-1.0)*r22*x6800))+(((-1.0)*x6799*x6803)));
evalcond[1]=(sj0+(((-1.0)*r02*x6800))+((r00*x6802))+(((-1.0)*x6798*x6803)));
evalcond[2]=((((-1.0)*x6796*x6803))+(((-1.0)*r12*x6800))+((r10*x6802))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x6794))+(((-1.0)*sj2*x6797))+((r20*x6801))+((cj1*cj2))+(((-1.0)*x6799*x6800)));
evalcond[4]=(((r02*x6794))+((r00*x6801))+(((-1.0)*cj0*cj2*x6797))+(((-1.0)*cj0*x6804))+(((-1.0)*x6798*x6800)));
evalcond[5]=((((-1.0)*x6796*x6800))+(((-1.0)*sj0*x6804))+((r10*x6801))+((r12*x6794))+(((-1.0)*cj2*sj0*x6797)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6805=((-1.0)*r11);
IkReal x6807 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6807)==0){
continue;
}
IkReal x6806=pow(x6807,-0.5);
CheckValue<IkReal> x6808 = IKatan2WithCheck(IkReal(x6805),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6808.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x6808.value))));
IkReal gconst148=(x6805*x6806);
IkReal gconst149=((1.0)*r10*x6806);
CheckValue<IkReal> x6809 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6809.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6809.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6810=((-1.0)*r11);
CheckValue<IkReal> x6813 = IKatan2WithCheck(IkReal(x6810),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6813.valid){
continue;
}
IkReal x6811=((1.0)*(x6813.value));
IkReal x6812=x6806;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x6811)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x6811)));
IkReal gconst148=(x6810*x6812);
IkReal gconst149=((1.0)*r10*x6812);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6814=((-1.0)*r11);
CheckValue<IkReal> x6817 = IKatan2WithCheck(IkReal(x6814),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6817.valid){
continue;
}
IkReal x6815=((1.0)*(x6817.value));
IkReal x6816=x6806;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x6815)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x6815)));
IkReal gconst148=(x6814*x6816);
IkReal gconst149=((1.0)*r10*x6816);
IkReal x6818=r12*r12;
IkReal x6819=(cj0*r02);
IkReal x6820=x6806;
IkReal x6821=(sj0*x6820);
j4eval[0]=((IKabs((((r12*x6819*x6820))+(((-1.0)*x6821))+((x6818*x6821)))))+(IKabs((x6819+((r12*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6822=((-1.0)*r11);
CheckValue<IkReal> x6825 = IKatan2WithCheck(IkReal(x6822),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6825.valid){
continue;
}
IkReal x6823=((1.0)*(x6825.value));
IkReal x6824=x6806;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x6823)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x6823)));
IkReal gconst148=(x6822*x6824);
IkReal gconst149=((1.0)*r10*x6824);
IkReal x6826=r12*r12;
IkReal x6827=((1.0)+(((-1.0)*x6826)));
IkReal x6828=(cj1*cj2*r22);
CheckValue<IkReal> x6836=IKPowWithIntegerCheck(x6827,-1);
if(!x6836.valid){
continue;
}
IkReal x6829=x6836.value;
CheckValue<IkReal> x6837=IKPowWithIntegerCheck(((-1.0)+x6826),-1);
if(!x6837.valid){
continue;
}
IkReal x6830=x6837.value;
IkReal x6831=((1.0)*x6829);
IkReal x6832=((1.0)*r22*sj1*sj2);
if((x6827) < -0.00001)
continue;
IkReal x6833=IKsqrt(x6827);
IkReal x6834=(r12*x6830*x6833);
IkReal x6835=((((-1.0)*x6831*(r11*r11)*(r21*r21)))+(((-1.0)*x6831*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-2.0)*r10*r11*r20*r21*x6829)));
j4eval[0]=x6835;
j4eval[1]=IKsign(x6835);
j4eval[2]=((IKabs((((x6828*x6834))+(((-1.0)*x6832*x6834)))))+(IKabs((x6828+(((-1.0)*x6832))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6838=(gconst149*r20);
IkReal x6839=(cj1*cj2);
IkReal x6840=(sj1*sj2);
IkReal x6841=(gconst148*r21);
CheckValue<IkReal> x6842 = IKatan2WithCheck(IkReal((((r22*x6839))+(((-1.0)*r22*x6840)))),IkReal(((((-1.0)*x6838*x6840))+((x6838*x6839))+((x6840*x6841))+(((-1.0)*x6839*x6841)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6842.valid){
continue;
}
CheckValue<IkReal> x6843=IKPowWithIntegerCheck(IKsign(((((2.0)*x6838*x6841))+(((-1.0)*(x6841*x6841)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x6838*x6838))))),-1);
if(!x6843.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6842.value)+(((1.5707963267949)*(x6843.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6844=IKsin(j4);
IkReal x6845=IKcos(j4);
IkReal x6846=(gconst148*r11);
IkReal x6847=(gconst148*r21);
IkReal x6848=((1.0)*sj1);
IkReal x6849=(gconst148*r01);
IkReal x6850=((1.0)*x6845);
IkReal x6851=(gconst149*x6845);
IkReal x6852=(gconst149*x6844);
IkReal x6853=((1.0)*x6844);
IkReal x6854=((1.0)*cj1*sj2);
evalcond[0]=((((-1.0)*x6847*x6853))+((r20*x6852))+(((-1.0)*r22*x6850)));
evalcond[1]=(sj0+(((-1.0)*r02*x6850))+((r00*x6852))+(((-1.0)*x6849*x6853)));
evalcond[2]=((((-1.0)*x6846*x6853))+((r10*x6852))+(((-1.0)*r12*x6850))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x6844))+(((-1.0)*x6847*x6850))+(((-1.0)*sj2*x6848))+((r20*x6851))+((cj1*cj2)));
evalcond[4]=(((r00*x6851))+(((-1.0)*cj0*cj2*x6848))+(((-1.0)*cj0*x6854))+(((-1.0)*x6849*x6850))+((r02*x6844)));
evalcond[5]=(((r12*x6844))+(((-1.0)*x6846*x6850))+((r10*x6851))+(((-1.0)*cj2*sj0*x6848))+(((-1.0)*sj0*x6854)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6855=((1.0)*gconst148);
CheckValue<IkReal> x6856=IKPowWithIntegerCheck(IKsign((((gconst148*r20))+((gconst149*r21)))),-1);
if(!x6856.valid){
continue;
}
CheckValue<IkReal> x6857 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst149*r10*sj0))+((cj0*gconst149*r00))+(((-1.0)*cj0*r01*x6855))+(((-1.0)*r11*sj0*x6855)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6857.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6856.value)))+(x6857.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6858=IKsin(j4);
IkReal x6859=IKcos(j4);
IkReal x6860=(gconst148*r11);
IkReal x6861=(gconst148*r21);
IkReal x6862=((1.0)*sj1);
IkReal x6863=(gconst148*r01);
IkReal x6864=((1.0)*x6859);
IkReal x6865=(gconst149*x6859);
IkReal x6866=(gconst149*x6858);
IkReal x6867=((1.0)*x6858);
IkReal x6868=((1.0)*cj1*sj2);
evalcond[0]=((((-1.0)*r22*x6864))+(((-1.0)*x6861*x6867))+((r20*x6866)));
evalcond[1]=(sj0+(((-1.0)*x6863*x6867))+(((-1.0)*r02*x6864))+((r00*x6866)));
evalcond[2]=((((-1.0)*x6860*x6867))+(((-1.0)*r12*x6864))+((r10*x6866))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x6858))+(((-1.0)*sj2*x6862))+(((-1.0)*x6861*x6864))+((cj1*cj2))+((r20*x6865)));
evalcond[4]=(((r02*x6858))+(((-1.0)*cj0*cj2*x6862))+(((-1.0)*x6863*x6864))+((r00*x6865))+(((-1.0)*cj0*x6868)));
evalcond[5]=((((-1.0)*x6860*x6864))+((r12*x6858))+(((-1.0)*sj0*x6868))+((r10*x6865))+(((-1.0)*cj2*sj0*x6862)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6869=((1.0)*gconst148);
CheckValue<IkReal> x6870 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x6869))+((cj0*gconst149*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6870.valid){
continue;
}
CheckValue<IkReal> x6871=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst149*r01))+(((-1.0)*r00*x6869)))),-1);
if(!x6871.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6870.value)+(((1.5707963267949)*(x6871.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6872=IKsin(j4);
IkReal x6873=IKcos(j4);
IkReal x6874=(gconst148*r11);
IkReal x6875=(gconst148*r21);
IkReal x6876=((1.0)*sj1);
IkReal x6877=(gconst148*r01);
IkReal x6878=((1.0)*x6873);
IkReal x6879=(gconst149*x6873);
IkReal x6880=(gconst149*x6872);
IkReal x6881=((1.0)*x6872);
IkReal x6882=((1.0)*cj1*sj2);
evalcond[0]=((((-1.0)*x6875*x6881))+((r20*x6880))+(((-1.0)*r22*x6878)));
evalcond[1]=(sj0+(((-1.0)*r02*x6878))+(((-1.0)*x6877*x6881))+((r00*x6880)));
evalcond[2]=((((-1.0)*r12*x6878))+(((-1.0)*x6874*x6881))+(((-1.0)*cj0))+((r10*x6880)));
evalcond[3]=((((-1.0)*x6875*x6878))+((r22*x6872))+(((-1.0)*sj2*x6876))+((cj1*cj2))+((r20*x6879)));
evalcond[4]=(((r02*x6872))+(((-1.0)*x6877*x6878))+(((-1.0)*cj0*cj2*x6876))+((r00*x6879))+(((-1.0)*cj0*x6882)));
evalcond[5]=(((r12*x6872))+(((-1.0)*x6874*x6878))+(((-1.0)*sj0*x6882))+((r10*x6879))+(((-1.0)*cj2*sj0*x6876)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6883=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6883;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x6883);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6884=((1.0)*sj5);
IkReal x6885=((((-1.0)*r00*x6884))+(((-1.0)*cj5*r01)));
j4eval[0]=x6885;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x6884))))));
j4eval[2]=IKsign(x6885);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6886=cj5*cj5;
IkReal x6887=r11*r11;
IkReal x6888=(r11*sj5);
IkReal x6889=(cj5*r10);
IkReal x6890=((((-2.0)*x6888*x6889))+(r12*r12)+(((-1.0)*x6886*x6887))+((x6886*(r10*r10)))+x6887);
j4eval[0]=x6890;
j4eval[1]=IKsign(x6890);
j4eval[2]=((IKabs(r12))+(IKabs((x6889+(((-1.0)*x6888))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6891=cj5*cj5;
IkReal x6892=r11*r11;
IkReal x6893=(cj5*r10);
IkReal x6894=(r11*sj5);
CheckValue<IkReal> x6895 = IKatan2WithCheck(IkReal(((((-1.0)*x6894))+x6893)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6895.valid){
continue;
}
CheckValue<IkReal> x6896=IKPowWithIntegerCheck(IKsign((((x6891*(r10*r10)))+(r12*r12)+(((-2.0)*x6893*x6894))+x6892+(((-1.0)*x6891*x6892)))),-1);
if(!x6896.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6895.value)+(((1.5707963267949)*(x6896.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6897=IKcos(j4);
IkReal x6898=IKsin(j4);
IkReal x6899=(cj5*r10);
IkReal x6900=((1.0)*sj2);
IkReal x6901=((1.0)*x6897);
IkReal x6902=(cj5*x6898);
IkReal x6903=(cj5*x6897);
IkReal x6904=((1.0)*sj5*x6898);
evalcond[0]=(((r12*x6898))+((x6897*x6899))+(((-1.0)*r11*sj5*x6901)));
evalcond[1]=((((-1.0)*r22*x6901))+(((-1.0)*r21*x6904))+((r20*x6902)));
evalcond[2]=((((-1.0)*r02*x6901))+((r00*x6902))+(((-1.0)*r01*x6904)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x6901))+(((-1.0)*r11*x6904))+((x6898*x6899)));
evalcond[4]=((((-1.0)*r21*sj5*x6901))+((r22*x6898))+((cj1*cj2))+((r20*x6903))+(((-1.0)*sj1*x6900)));
evalcond[5]=((((-1.0)*cj1*x6900))+((r00*x6903))+(((-1.0)*cj2*sj1))+((r02*x6898))+(((-1.0)*r01*sj5*x6901)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6905=((1.0)*sj5);
CheckValue<IkReal> x6906 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x6905)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6906.valid){
continue;
}
CheckValue<IkReal> x6907=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x6905))+(((-1.0)*cj5*r01)))),-1);
if(!x6907.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6906.value)+(((1.5707963267949)*(x6907.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6908=IKcos(j4);
IkReal x6909=IKsin(j4);
IkReal x6910=(cj5*r10);
IkReal x6911=((1.0)*sj2);
IkReal x6912=((1.0)*x6908);
IkReal x6913=(cj5*x6909);
IkReal x6914=(cj5*x6908);
IkReal x6915=((1.0)*sj5*x6909);
evalcond[0]=((((-1.0)*r11*sj5*x6912))+((x6908*x6910))+((r12*x6909)));
evalcond[1]=((((-1.0)*r22*x6912))+(((-1.0)*r21*x6915))+((r20*x6913)));
evalcond[2]=(((r00*x6913))+(((-1.0)*r01*x6915))+(((-1.0)*r02*x6912)));
evalcond[3]=((-1.0)+((x6909*x6910))+(((-1.0)*r11*x6915))+(((-1.0)*r12*x6912)));
evalcond[4]=((((-1.0)*sj1*x6911))+((r22*x6909))+(((-1.0)*r21*sj5*x6912))+((cj1*cj2))+((r20*x6914)));
evalcond[5]=((((-1.0)*cj1*x6911))+((r00*x6914))+(((-1.0)*cj2*sj1))+((r02*x6909))+(((-1.0)*r01*sj5*x6912)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6916=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6916.valid){
continue;
}
CheckValue<IkReal> x6917 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6917.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6916.value)))+(x6917.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6918=IKcos(j4);
IkReal x6919=IKsin(j4);
IkReal x6920=(cj5*r10);
IkReal x6921=((1.0)*sj2);
IkReal x6922=((1.0)*x6918);
IkReal x6923=(cj5*x6919);
IkReal x6924=(cj5*x6918);
IkReal x6925=((1.0)*sj5*x6919);
evalcond[0]=((((-1.0)*r11*sj5*x6922))+((r12*x6919))+((x6918*x6920)));
evalcond[1]=(((r20*x6923))+(((-1.0)*r22*x6922))+(((-1.0)*r21*x6925)));
evalcond[2]=((((-1.0)*r02*x6922))+((r00*x6923))+(((-1.0)*r01*x6925)));
evalcond[3]=((-1.0)+((x6919*x6920))+(((-1.0)*r11*x6925))+(((-1.0)*r12*x6922)));
evalcond[4]=(((r20*x6924))+((r22*x6919))+(((-1.0)*sj1*x6921))+(((-1.0)*r21*sj5*x6922))+((cj1*cj2)));
evalcond[5]=((((-1.0)*r01*sj5*x6922))+(((-1.0)*cj1*x6921))+(((-1.0)*cj2*sj1))+((r00*x6924))+((r02*x6919)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6926=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6926;
j4eval[1]=IKsign(x6926);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6927=((1.0)*sj5);
IkReal x6928=((((-1.0)*cj5*r21))+(((-1.0)*r20*x6927)));
j4eval[0]=x6928;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x6927))+((cj5*r00))))));
j4eval[2]=IKsign(x6928);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6929=cj5*cj5;
IkReal x6930=r11*r11;
IkReal x6931=(cj5*r10);
IkReal x6932=(r11*sj5);
IkReal x6933=((((-1.0)*x6930))+(((-1.0)*x6929*(r10*r10)))+(((-1.0)*(r12*r12)))+(((2.0)*x6931*x6932))+((x6929*x6930)));
j4eval[0]=x6933;
j4eval[1]=((IKabs(((((-1.0)*x6932))+x6931)))+(IKabs(r12)));
j4eval[2]=IKsign(x6933);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6934=cj5*cj5;
IkReal x6935=r11*r11;
IkReal x6936=(cj5*r10);
IkReal x6937=(r11*sj5);
CheckValue<IkReal> x6938=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6935))+(((-1.0)*x6934*(r10*r10)))+(((-1.0)*(r12*r12)))+((x6934*x6935))+(((2.0)*x6936*x6937)))),-1);
if(!x6938.valid){
continue;
}
CheckValue<IkReal> x6939 = IKatan2WithCheck(IkReal(((((-1.0)*x6937))+x6936)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6939.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6938.value)))+(x6939.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6940=IKcos(j4);
IkReal x6941=IKsin(j4);
IkReal x6942=(cj5*r10);
IkReal x6943=((1.0)*x6940);
IkReal x6944=(cj5*x6941);
IkReal x6945=(cj5*x6940);
IkReal x6946=((1.0)*sj5*x6941);
evalcond[0]=(((x6940*x6942))+(((-1.0)*r11*sj5*x6943))+((r12*x6941)));
evalcond[1]=((((-1.0)*r21*x6946))+((r20*x6944))+(((-1.0)*r22*x6943)));
evalcond[2]=((((-1.0)*r02*x6943))+((r00*x6944))+(((-1.0)*r01*x6946)));
evalcond[3]=((1.0)+(((-1.0)*r11*x6946))+(((-1.0)*r12*x6943))+((x6941*x6942)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r01*sj5*x6943))+((cj1*sj2))+((r02*x6941))+((r00*x6945)));
evalcond[5]=((((-1.0)*r21*sj5*x6943))+((r22*x6941))+(((-1.0)*sj1*sj2))+((r20*x6945))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6947=((1.0)*sj5);
CheckValue<IkReal> x6948 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x6947))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6948.valid){
continue;
}
CheckValue<IkReal> x6949=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6947))+(((-1.0)*cj5*r21)))),-1);
if(!x6949.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6948.value)+(((1.5707963267949)*(x6949.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6950=IKcos(j4);
IkReal x6951=IKsin(j4);
IkReal x6952=(cj5*r10);
IkReal x6953=((1.0)*x6950);
IkReal x6954=(cj5*x6951);
IkReal x6955=(cj5*x6950);
IkReal x6956=((1.0)*sj5*x6951);
evalcond[0]=(((x6950*x6952))+(((-1.0)*r11*sj5*x6953))+((r12*x6951)));
evalcond[1]=((((-1.0)*r21*x6956))+((r20*x6954))+(((-1.0)*r22*x6953)));
evalcond[2]=((((-1.0)*r02*x6953))+((r00*x6954))+(((-1.0)*r01*x6956)));
evalcond[3]=((1.0)+(((-1.0)*r11*x6956))+(((-1.0)*r12*x6953))+((x6951*x6952)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r01*sj5*x6953))+((cj1*sj2))+((r02*x6951))+((r00*x6955)));
evalcond[5]=((((-1.0)*r21*sj5*x6953))+((r22*x6951))+(((-1.0)*sj1*sj2))+((r20*x6955))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6957=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6957.valid){
continue;
}
CheckValue<IkReal> x6958 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6958.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6957.value)))+(x6958.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6959=IKcos(j4);
IkReal x6960=IKsin(j4);
IkReal x6961=(cj5*r10);
IkReal x6962=((1.0)*x6959);
IkReal x6963=(cj5*x6960);
IkReal x6964=(cj5*x6959);
IkReal x6965=((1.0)*sj5*x6960);
evalcond[0]=((((-1.0)*r11*sj5*x6962))+((x6959*x6961))+((r12*x6960)));
evalcond[1]=((((-1.0)*r21*x6965))+(((-1.0)*r22*x6962))+((r20*x6963)));
evalcond[2]=((((-1.0)*r02*x6962))+((r00*x6963))+(((-1.0)*r01*x6965)));
evalcond[3]=((1.0)+(((-1.0)*r11*x6965))+(((-1.0)*r12*x6962))+((x6960*x6961)));
evalcond[4]=(((cj2*sj1))+((r00*x6964))+((cj1*sj2))+(((-1.0)*r01*sj5*x6962))+((r02*x6960)));
evalcond[5]=(((r22*x6960))+(((-1.0)*sj1*sj2))+(((-1.0)*r21*sj5*x6962))+((cj1*cj2))+((r20*x6964)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6966=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x6966);
rxp0_2=(py*r00);
rxp1_0=(r21*x6966);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6967=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x6967);
rxp0_2=(py*r00);
rxp1_0=(r21*x6967);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6968=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x6968);
rxp0_2=(py*r00);
rxp1_0=(r21*x6968);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6971=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x6971.valid){
continue;
}
IkReal x6969=x6971.value;
IkReal x6970=(cj0*x6969);
cj4array[0]=(((cj2*sj1*x6970))+((cj1*sj2*x6970)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6972=IKsin(j4);
IkReal x6973=IKcos(j4);
IkReal x6974=(cj5*r20);
IkReal x6975=((1.0)*sj5);
evalcond[0]=(r12*x6972);
evalcond[1]=((((-1.0)*r12*x6973))+(((-1.0)*cj0)));
evalcond[2]=(((x6972*x6974))+(((-1.0)*r21*x6972*x6975)));
evalcond[3]=((((-1.0)*r01*x6972*x6975))+((cj5*r00*x6972)));
evalcond[4]=((((-1.0)*sj1*sj2))+((cj1*cj2))+((x6973*x6974))+(((-1.0)*r21*x6973*x6975)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6977=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x6977.valid){
continue;
}
IkReal x6976=x6977.value;
cj4array[0]=((((-1.0)*cj1*cj2*x6976))+((sj1*sj2*x6976)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6978=IKsin(j4);
IkReal x6979=IKcos(j4);
IkReal x6980=(cj5*r00);
IkReal x6981=((1.0)*cj0);
IkReal x6982=((1.0)*r01*sj5);
evalcond[0]=(r12*x6978);
evalcond[1]=((((-1.0)*x6981))+(((-1.0)*r12*x6979)));
evalcond[2]=(((cj5*r20*x6978))+(((-1.0)*r21*sj5*x6978)));
evalcond[3]=((((-1.0)*x6978*x6982))+((x6978*x6980)));
evalcond[4]=((((-1.0)*x6979*x6982))+((x6979*x6980))+(((-1.0)*cj2*sj1*x6981))+(((-1.0)*cj1*sj2*x6981)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6983=IKPowWithIntegerCheck(r12,-1);
if(!x6983.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x6983.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6984=IKsin(j4);
IkReal x6985=IKcos(j4);
IkReal x6986=((1.0)*sj5);
IkReal x6987=((1.0)*cj0);
IkReal x6988=(cj5*x6985);
IkReal x6989=(cj5*x6984);
evalcond[0]=(r12*x6984);
evalcond[1]=((((-1.0)*r21*x6984*x6986))+((r20*x6989)));
evalcond[2]=(((r00*x6989))+(((-1.0)*r01*x6984*x6986)));
evalcond[3]=((((-1.0)*sj1*sj2))+(((-1.0)*r21*x6985*x6986))+((r20*x6988))+((cj1*cj2)));
evalcond[4]=((((-1.0)*r01*x6985*x6986))+((r00*x6988))+(((-1.0)*cj2*sj1*x6987))+(((-1.0)*cj1*sj2*x6987)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6990=((1.0)*sj5);
CheckValue<IkReal> x6991=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6991.valid){
continue;
}
CheckValue<IkReal> x6992 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*cj0*r01*x6990))+(((-1.0)*r11*sj0*x6990)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6992.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6991.value)))+(x6992.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6993=IKsin(j4);
IkReal x6994=IKcos(j4);
IkReal x6995=(cj5*r10);
IkReal x6996=((1.0)*sj1);
IkReal x6997=((1.0)*x6994);
IkReal x6998=(cj5*x6993);
IkReal x6999=(cj5*x6994);
IkReal x7000=((1.0)*cj1*sj2);
IkReal x7001=((1.0)*sj5*x6993);
evalcond[0]=(((r20*x6998))+(((-1.0)*r21*x7001))+(((-1.0)*r22*x6997)));
evalcond[1]=(sj0+(((-1.0)*r01*x7001))+((r00*x6998))+(((-1.0)*r02*x6997)));
evalcond[2]=((((-1.0)*r11*x7001))+(((-1.0)*r12*x6997))+((x6993*x6995))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x6999))+(((-1.0)*r21*sj5*x6997))+(((-1.0)*sj2*x6996))+((r22*x6993))+((cj1*cj2)));
evalcond[4]=((((-1.0)*cj0*cj2*x6996))+((r02*x6993))+((r00*x6999))+(((-1.0)*cj0*x7000))+(((-1.0)*r01*sj5*x6997)));
evalcond[5]=((((-1.0)*cj2*sj0*x6996))+((x6994*x6995))+(((-1.0)*sj0*x7000))+((r12*x6993))+(((-1.0)*r11*sj5*x6997)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7002=((1.0)*sj5);
CheckValue<IkReal> x7003=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x7002))+(((-1.0)*cj5*r01)))),-1);
if(!x7003.valid){
continue;
}
CheckValue<IkReal> x7004 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x7002)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7004.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7003.value)))+(x7004.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7005=IKsin(j4);
IkReal x7006=IKcos(j4);
IkReal x7007=(cj5*r10);
IkReal x7008=((1.0)*sj1);
IkReal x7009=((1.0)*x7006);
IkReal x7010=(cj5*x7005);
IkReal x7011=(cj5*x7006);
IkReal x7012=((1.0)*cj1*sj2);
IkReal x7013=((1.0)*sj5*x7005);
evalcond[0]=((((-1.0)*r22*x7009))+((r20*x7010))+(((-1.0)*r21*x7013)));
evalcond[1]=((((-1.0)*r02*x7009))+sj0+((r00*x7010))+(((-1.0)*r01*x7013)));
evalcond[2]=((((-1.0)*r12*x7009))+((x7005*x7007))+(((-1.0)*r11*x7013))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r21*sj5*x7009))+(((-1.0)*sj2*x7008))+((r20*x7011))+((r22*x7005))+((cj1*cj2)));
evalcond[4]=((((-1.0)*cj0*cj2*x7008))+(((-1.0)*cj0*x7012))+((r02*x7005))+(((-1.0)*r01*sj5*x7009))+((r00*x7011)));
evalcond[5]=((((-1.0)*r11*sj5*x7009))+((r12*x7005))+(((-1.0)*sj0*x7012))+((x7006*x7007))+(((-1.0)*cj2*sj0*x7008)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7014=((1.0)*sj5);
CheckValue<IkReal> x7015 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x7014)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7015.valid){
continue;
}
CheckValue<IkReal> x7016=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7014)))),-1);
if(!x7016.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7015.value)+(((1.5707963267949)*(x7016.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7017=IKsin(j4);
IkReal x7018=IKcos(j4);
IkReal x7019=(cj5*r10);
IkReal x7020=((1.0)*sj1);
IkReal x7021=((1.0)*x7018);
IkReal x7022=(cj5*x7017);
IkReal x7023=(cj5*x7018);
IkReal x7024=((1.0)*cj1*sj2);
IkReal x7025=((1.0)*sj5*x7017);
evalcond[0]=((((-1.0)*r22*x7021))+((r20*x7022))+(((-1.0)*r21*x7025)));
evalcond[1]=(sj0+((r00*x7022))+(((-1.0)*r02*x7021))+(((-1.0)*r01*x7025)));
evalcond[2]=((((-1.0)*r12*x7021))+(((-1.0)*r11*x7025))+(((-1.0)*cj0))+((x7017*x7019)));
evalcond[3]=((((-1.0)*sj2*x7020))+((r22*x7017))+((r20*x7023))+((cj1*cj2))+(((-1.0)*r21*sj5*x7021)));
evalcond[4]=(((r02*x7017))+(((-1.0)*cj0*x7024))+(((-1.0)*r01*sj5*x7021))+((r00*x7023))+(((-1.0)*cj0*cj2*x7020)));
evalcond[5]=((((-1.0)*cj2*sj0*x7020))+((x7018*x7019))+(((-1.0)*sj0*x7024))+((r12*x7017))+(((-1.0)*r11*sj5*x7021)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7026=r21*r21;
IkReal x7027=cj5*cj5;
IkReal x7028=(cj1*cj2);
IkReal x7029=(r21*sj5);
IkReal x7030=(sj1*sj2);
IkReal x7031=(cj5*r20);
CheckValue<IkReal> x7032=IKPowWithIntegerCheck(IKsign((((x7026*x7027))+(((-1.0)*x7026))+(((-1.0)*(r22*r22)))+(((2.0)*x7029*x7031))+(((-1.0)*x7027*(r20*r20))))),-1);
if(!x7032.valid){
continue;
}
CheckValue<IkReal> x7033 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x7030))+((r22*x7028)))),IkReal(((((-1.0)*x7028*x7029))+((x7029*x7030))+((x7028*x7031))+(((-1.0)*x7030*x7031)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7033.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7032.value)))+(x7033.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x7034=IKsin(j4);
IkReal x7035=IKcos(j4);
IkReal x7036=(r21*sj5);
IkReal x7037=(cj5*r20);
IkReal x7038=((1.0)*x7035);
evalcond[0]=((((-1.0)*r22*x7038))+((x7034*x7037))+(((-1.0)*x7034*x7036)));
evalcond[1]=((((-1.0)*x7036*x7038))+((x7035*x7037))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r22*x7034)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7039=(cj5*sj4);
IkReal x7040=(sj4*sj5);
if( IKabs((((r01*x7040))+(((-1.0)*r00*x7039))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x7039))+(((-1.0)*r11*x7040))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x7040))+(((-1.0)*r00*x7039))+((cj4*r02))))+IKsqr((((r10*x7039))+(((-1.0)*r11*x7040))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x7040))+(((-1.0)*r00*x7039))+((cj4*r02))), (((r10*x7039))+(((-1.0)*r11*x7040))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7041=IKcos(j0);
IkReal x7042=IKsin(j0);
IkReal x7043=(cj5*r10);
IkReal x7044=((0.125)*sj5);
IkReal x7045=(cj5*r00);
IkReal x7046=((1.0)*sj2);
IkReal x7047=((1.0)*sj5);
IkReal x7048=((0.3)*sj2);
IkReal x7049=(cj5*r11);
IkReal x7050=(cj2*sj1);
IkReal x7051=(cj5*r01);
IkReal x7052=((1.0)*cj4);
IkReal x7053=(sj1*x7042);
IkReal x7054=(cj1*x7041);
IkReal x7055=(cj1*x7042);
IkReal x7056=((1.0)*x7041);
IkReal x7057=(sj1*x7041);
evalcond[0]=(x7042+((sj4*x7045))+(((-1.0)*r01*sj4*x7047))+(((-1.0)*r02*x7052)));
evalcond[1]=((((-1.0)*x7056))+((sj4*x7043))+(((-1.0)*r11*sj4*x7047))+(((-1.0)*r12*x7052)));
evalcond[2]=(((cj2*x7054))+(((-1.0)*x7046*x7057))+(((-1.0)*x7051))+(((-1.0)*r00*x7047)));
evalcond[3]=(((cj2*x7055))+(((-1.0)*x7046*x7053))+(((-1.0)*x7049))+(((-1.0)*r10*x7047)));
evalcond[4]=((((-1.0)*x7046*x7054))+((r02*sj4))+(((-1.0)*cj4*r01*x7047))+((cj4*x7045))+(((-1.0)*x7050*x7056)));
evalcond[5]=((((-1.0)*x7046*x7055))+(((-1.0)*x7042*x7050))+((cj4*x7043))+((r12*sj4))+(((-1.0)*cj4*r11*x7047)));
evalcond[6]=(((r00*x7044))+(((-0.3)*x7041*x7050))+(((-1.0)*x7048*x7054))+(((-0.35)*x7057))+(((-1.0)*px))+(((0.125)*x7051))+(((-0.125)*x7042)));
evalcond[7]=((((-0.3)*x7042*x7050))+(((-1.0)*x7048*x7055))+((r10*x7044))+(((0.125)*x7049))+(((0.125)*x7041))+(((-0.35)*x7053))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x7058=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj1*sj2))+((cj1*cj2)))),-1);
if(!x7058.valid){
continue;
}
CheckValue<IkReal> x7059 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7059.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7058.value)))+(x7059.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7060=IKcos(j0);
IkReal x7061=IKsin(j0);
IkReal x7062=((0.125)*sj5);
IkReal x7063=((1.0)*sj2);
IkReal x7064=((0.3)*cj2);
IkReal x7065=(cj1*cj2);
IkReal x7066=(cj5*r11);
IkReal x7067=((1.0)*sj5);
IkReal x7068=(cj5*r01);
IkReal x7069=(sj1*x7061);
IkReal x7070=((0.3)*cj1*sj2);
IkReal x7071=(sj1*x7060);
evalcond[0]=((((-1.0)*x7063*x7071))+(((-1.0)*r00*x7067))+((x7060*x7065))+(((-1.0)*x7068)));
evalcond[1]=((((-1.0)*x7063*x7069))+((x7061*x7065))+(((-1.0)*x7066))+(((-1.0)*r10*x7067)));
evalcond[2]=((((-1.0)*x7064*x7071))+(((-0.35)*x7071))+(((-1.0)*x7060*x7070))+(((-1.0)*px))+((r00*x7062))+(((-0.125)*x7061))+(((0.125)*x7068)));
evalcond[3]=((((-0.35)*x7069))+(((-1.0)*x7064*x7069))+(((-1.0)*x7061*x7070))+(((-1.0)*py))+((r10*x7062))+(((0.125)*x7066))+(((0.125)*x7060)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x7072=((1.0)*sj5);
IkReal x7073=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7072)));
j4eval[0]=x7073;
j4eval[1]=IKsign(x7073);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x7072))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x7074=((1.0)*sj5);
IkReal x7075=((((-1.0)*r00*x7074))+(((-1.0)*cj5*r01)));
j4eval[0]=x7075;
j4eval[1]=IKsign(x7075);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x7074))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x7076=((1.0)*sj5);
IkReal x7077=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7077;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((cj0*cj5*r00))+(((-1.0)*r11*sj0*x7076))+((cj5*r10*sj0))+(((-1.0)*cj0*r01*x7076))))));
j4eval[2]=IKsign(x7077);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7079 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7079)==0){
continue;
}
IkReal x7078=pow(x7079,-0.5);
CheckValue<IkReal> x7080 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7080.valid){
continue;
}
IkReal gconst132=((-1.0)*(x7080.value));
IkReal gconst133=((-1.0)*r21*x7078);
IkReal gconst134=(r20*x7078);
CheckValue<IkReal> x7081 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7081.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7081.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x7084 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7084.valid){
continue;
}
IkReal x7082=((-1.0)*(x7084.value));
IkReal x7083=x7078;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x7082;
IkReal gconst132=x7082;
IkReal gconst133=((-1.0)*r21*x7083);
IkReal gconst134=(r20*x7083);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7087 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7087.valid){
continue;
}
IkReal x7085=((-1.0)*(x7087.value));
IkReal x7086=x7078;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x7085;
IkReal gconst132=x7085;
IkReal gconst133=((-1.0)*r21*x7086);
IkReal gconst134=(r20*x7086);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x7090 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7090.valid){
continue;
}
IkReal x7088=((-1.0)*(x7090.value));
IkReal x7089=x7078;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x7088;
IkReal gconst132=x7088;
IkReal gconst133=((-1.0)*r21*x7089);
IkReal gconst134=(r20*x7089);
IkReal x7091=((1.0)*(r22*r22));
CheckValue<IkReal> x7095=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7091))),-1);
if(!x7095.valid){
continue;
}
IkReal x7092=x7095.value;
IkReal x7093=((1.0)*x7092);
IkReal x7094=((((-1.0)*x7091))+(((-1.0)*x7093*(r20*r20*r20*r20)))+(((-1.0)*x7093*(r21*r21*r21*r21)))+(((-2.0)*x7092*(r20*r20)*(r21*r21))));
j4eval[0]=x7094;
j4eval[1]=IKsign(x7094);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7096=(gconst133*r21);
IkReal x7097=(cj1*cj2);
IkReal x7098=(sj1*sj2);
IkReal x7099=(gconst134*r20);
CheckValue<IkReal> x7100 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x7098))+((r22*x7097)))),IkReal((((x7097*x7099))+((x7096*x7098))+(((-1.0)*x7096*x7097))+(((-1.0)*x7098*x7099)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7100.valid){
continue;
}
CheckValue<IkReal> x7101=IKPowWithIntegerCheck(IKsign(((((2.0)*x7096*x7099))+(((-1.0)*(x7099*x7099)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x7096*x7096))))),-1);
if(!x7101.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7100.value)+(((1.5707963267949)*(x7101.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7102=IKsin(j4);
IkReal x7103=IKcos(j4);
IkReal x7104=(gconst134*r10);
IkReal x7105=(gconst133*r11);
IkReal x7106=((1.0)*sj1);
IkReal x7107=(gconst133*r01);
IkReal x7108=(gconst133*r21);
IkReal x7109=((1.0)*x7103);
IkReal x7110=((1.0)*x7102);
IkReal x7111=(gconst134*x7103);
IkReal x7112=((1.0)*cj1*sj2);
IkReal x7113=(gconst134*x7102);
evalcond[0]=((((-1.0)*r22*x7109))+((r20*x7113))+(((-1.0)*x7108*x7110)));
evalcond[1]=((((-1.0)*x7107*x7110))+sj0+(((-1.0)*r02*x7109))+((r00*x7113)));
evalcond[2]=(((x7102*x7104))+(((-1.0)*r12*x7109))+(((-1.0)*x7105*x7110))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x7108*x7109))+((r22*x7102))+(((-1.0)*sj2*x7106))+((cj1*cj2))+((r20*x7111)));
evalcond[4]=((((-1.0)*cj0*x7112))+((r02*x7102))+(((-1.0)*cj0*cj2*x7106))+((r00*x7111))+(((-1.0)*x7107*x7109)));
evalcond[5]=((((-1.0)*cj2*sj0*x7106))+((r12*x7102))+(((-1.0)*x7105*x7109))+((x7103*x7104))+(((-1.0)*sj0*x7112)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7114=((1.0)*gconst133);
CheckValue<IkReal> x7115 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst134*r20))+(((-1.0)*cj0*r21*x7114)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7115.valid){
continue;
}
CheckValue<IkReal> x7116=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x7114))+(((-1.0)*gconst134*r01)))),-1);
if(!x7116.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7115.value)+(((1.5707963267949)*(x7116.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7117=IKsin(j4);
IkReal x7118=IKcos(j4);
IkReal x7119=(gconst134*r10);
IkReal x7120=(gconst133*r11);
IkReal x7121=((1.0)*sj1);
IkReal x7122=(gconst133*r01);
IkReal x7123=(gconst133*r21);
IkReal x7124=((1.0)*x7118);
IkReal x7125=((1.0)*x7117);
IkReal x7126=(gconst134*x7118);
IkReal x7127=((1.0)*cj1*sj2);
IkReal x7128=(gconst134*x7117);
evalcond[0]=((((-1.0)*x7123*x7125))+((r20*x7128))+(((-1.0)*r22*x7124)));
evalcond[1]=(((r00*x7128))+sj0+(((-1.0)*x7122*x7125))+(((-1.0)*r02*x7124)));
evalcond[2]=((((-1.0)*x7120*x7125))+((x7117*x7119))+(((-1.0)*r12*x7124))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x7123*x7124))+((r20*x7126))+((r22*x7117))+((cj1*cj2))+(((-1.0)*sj2*x7121)));
evalcond[4]=(((r00*x7126))+(((-1.0)*cj0*x7127))+((r02*x7117))+(((-1.0)*x7122*x7124))+(((-1.0)*cj0*cj2*x7121)));
evalcond[5]=((((-1.0)*x7120*x7124))+((r12*x7117))+((x7118*x7119))+(((-1.0)*sj0*x7127))+(((-1.0)*cj2*sj0*x7121)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7129=((1.0)*gconst133);
CheckValue<IkReal> x7130=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst134*r11))+(((-1.0)*r10*x7129)))),-1);
if(!x7130.valid){
continue;
}
CheckValue<IkReal> x7131 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x7129))+((gconst134*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7131.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7130.value)))+(x7131.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7132=IKsin(j4);
IkReal x7133=IKcos(j4);
IkReal x7134=(gconst134*r10);
IkReal x7135=(gconst133*r11);
IkReal x7136=((1.0)*sj1);
IkReal x7137=(gconst133*r01);
IkReal x7138=(gconst133*r21);
IkReal x7139=((1.0)*x7133);
IkReal x7140=((1.0)*x7132);
IkReal x7141=(gconst134*x7133);
IkReal x7142=((1.0)*cj1*sj2);
IkReal x7143=(gconst134*x7132);
evalcond[0]=(((r20*x7143))+(((-1.0)*x7138*x7140))+(((-1.0)*r22*x7139)));
evalcond[1]=(sj0+((r00*x7143))+(((-1.0)*x7137*x7140))+(((-1.0)*r02*x7139)));
evalcond[2]=((((-1.0)*r12*x7139))+(((-1.0)*x7135*x7140))+((x7132*x7134))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x7141))+((r22*x7132))+(((-1.0)*x7138*x7139))+((cj1*cj2))+(((-1.0)*sj2*x7136)));
evalcond[4]=(((r00*x7141))+(((-1.0)*cj0*x7142))+(((-1.0)*x7137*x7139))+((r02*x7132))+(((-1.0)*cj0*cj2*x7136)));
evalcond[5]=(((x7133*x7134))+(((-1.0)*cj2*sj0*x7136))+(((-1.0)*sj0*x7142))+((r12*x7132))+(((-1.0)*x7135*x7139)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7145 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7145)==0){
continue;
}
IkReal x7144=pow(x7145,-0.5);
CheckValue<IkReal> x7146 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7146.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x7146.value))));
IkReal gconst136=((1.0)*r21*x7144);
IkReal gconst137=((-1.0)*r20*x7144);
CheckValue<IkReal> x7147 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7147.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7147.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x7150 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7150.valid){
continue;
}
IkReal x7148=((1.0)*(x7150.value));
IkReal x7149=x7144;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7148)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7148)));
IkReal gconst136=((1.0)*r21*x7149);
IkReal gconst137=((-1.0)*r20*x7149);
IkReal x7151=r22*r22;
IkReal x7152=((1.0)*x7151);
CheckValue<IkReal> x7156=IKPowWithIntegerCheck(((-1.0)+x7151),-1);
if(!x7156.valid){
continue;
}
IkReal x7153=x7156.value;
if((((1.0)+(((-1.0)*x7152)))) < -0.00001)
continue;
IkReal x7154=IKsqrt(((1.0)+(((-1.0)*x7152))));
IkReal x7155=(sj0*x7153*x7154);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x7155+(((-1.0)*x7152*x7155))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7159 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7159.valid){
continue;
}
IkReal x7157=((1.0)*(x7159.value));
IkReal x7158=x7144;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7157)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7157)));
IkReal gconst136=((1.0)*r21*x7158);
IkReal gconst137=((-1.0)*r20*x7158);
IkReal x7160=r22*r22;
IkReal x7161=((1.0)*x7160);
CheckValue<IkReal> x7165=IKPowWithIntegerCheck(((-1.0)+x7160),-1);
if(!x7165.valid){
continue;
}
IkReal x7162=x7165.value;
if((((1.0)+(((-1.0)*x7161)))) < -0.00001)
continue;
IkReal x7163=IKsqrt(((1.0)+(((-1.0)*x7161))));
IkReal x7164=(cj0*x7162*x7163);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x7164+(((-1.0)*x7161*x7164))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x7168 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7168.valid){
continue;
}
IkReal x7166=((1.0)*(x7168.value));
IkReal x7167=x7144;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7166)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7166)));
IkReal gconst136=((1.0)*r21*x7167);
IkReal gconst137=((-1.0)*r20*x7167);
IkReal x7169=r22*r22;
IkReal x7170=(cj0*r02);
IkReal x7171=(r12*sj0);
CheckValue<IkReal> x7175=IKPowWithIntegerCheck(((-1.0)+x7169),-1);
if(!x7175.valid){
continue;
}
IkReal x7172=x7175.value;
if((((1.0)+(((-1.0)*x7169)))) < -0.00001)
continue;
IkReal x7173=IKsqrt(((1.0)+(((-1.0)*x7169))));
IkReal x7174=((1.0)*r22*x7172*x7173);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((x7171+x7170)))+(IKabs(((((-1.0)*x7170*x7174))+(((-1.0)*x7171*x7174))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7176=((1.0)*gconst136);
CheckValue<IkReal> x7177 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst137*r10*sj0))+(((-1.0)*r11*sj0*x7176))+(((-1.0)*cj0*r01*x7176))+((cj0*gconst137*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7177.valid){
continue;
}
CheckValue<IkReal> x7178=IKPowWithIntegerCheck(IKsign((((gconst136*r20))+((gconst137*r21)))),-1);
if(!x7178.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7177.value)+(((1.5707963267949)*(x7178.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7179=IKsin(j4);
IkReal x7180=IKcos(j4);
IkReal x7181=(gconst136*r01);
IkReal x7182=((1.0)*sj1);
IkReal x7183=(gconst136*r21);
IkReal x7184=(gconst136*r11);
IkReal x7185=((1.0)*x7180);
IkReal x7186=(gconst137*x7180);
IkReal x7187=((1.0)*x7179);
IkReal x7188=(gconst137*x7179);
IkReal x7189=((1.0)*cj1*sj2);
evalcond[0]=(((r20*x7188))+(((-1.0)*x7183*x7187))+(((-1.0)*r22*x7185)));
evalcond[1]=(sj0+((r00*x7188))+(((-1.0)*x7181*x7187))+(((-1.0)*r02*x7185)));
evalcond[2]=(((r10*x7188))+(((-1.0)*x7184*x7187))+(((-1.0)*r12*x7185))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x7186))+(((-1.0)*sj2*x7182))+((r22*x7179))+(((-1.0)*x7183*x7185))+((cj1*cj2)));
evalcond[4]=((((-1.0)*cj0*x7189))+((r00*x7186))+((r02*x7179))+(((-1.0)*x7181*x7185))+(((-1.0)*cj0*cj2*x7182)));
evalcond[5]=(((r10*x7186))+(((-1.0)*x7184*x7185))+(((-1.0)*sj0*x7189))+(((-1.0)*cj2*sj0*x7182))+((r12*x7179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7190=((1.0)*gconst136);
CheckValue<IkReal> x7191=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst137*r01))+(((-1.0)*r00*x7190)))),-1);
if(!x7191.valid){
continue;
}
CheckValue<IkReal> x7192 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x7190))+((cj0*gconst137*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7192.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7191.value)))+(x7192.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7193=IKsin(j4);
IkReal x7194=IKcos(j4);
IkReal x7195=(gconst136*r01);
IkReal x7196=((1.0)*sj1);
IkReal x7197=(gconst136*r21);
IkReal x7198=(gconst136*r11);
IkReal x7199=((1.0)*x7194);
IkReal x7200=(gconst137*x7194);
IkReal x7201=((1.0)*x7193);
IkReal x7202=(gconst137*x7193);
IkReal x7203=((1.0)*cj1*sj2);
evalcond[0]=(((r20*x7202))+(((-1.0)*r22*x7199))+(((-1.0)*x7197*x7201)));
evalcond[1]=(((r00*x7202))+sj0+(((-1.0)*x7195*x7201))+(((-1.0)*r02*x7199)));
evalcond[2]=(((r10*x7202))+(((-1.0)*x7198*x7201))+(((-1.0)*r12*x7199))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x7197*x7199))+(((-1.0)*sj2*x7196))+((r20*x7200))+((r22*x7193))+((cj1*cj2)));
evalcond[4]=(((r00*x7200))+((r02*x7193))+(((-1.0)*x7195*x7199))+(((-1.0)*cj0*x7203))+(((-1.0)*cj0*cj2*x7196)));
evalcond[5]=(((r10*x7200))+((r12*x7193))+(((-1.0)*x7198*x7199))+(((-1.0)*sj0*x7203))+(((-1.0)*cj2*sj0*x7196)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7204=((1.0)*gconst136);
CheckValue<IkReal> x7205=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x7204))+(((-1.0)*gconst137*r11)))),-1);
if(!x7205.valid){
continue;
}
CheckValue<IkReal> x7206 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst137*r20*sj0))+(((-1.0)*r21*sj0*x7204)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7206.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7205.value)))+(x7206.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7207=IKsin(j4);
IkReal x7208=IKcos(j4);
IkReal x7209=(gconst136*r01);
IkReal x7210=((1.0)*sj1);
IkReal x7211=(gconst136*r21);
IkReal x7212=(gconst136*r11);
IkReal x7213=((1.0)*x7208);
IkReal x7214=(gconst137*x7208);
IkReal x7215=((1.0)*x7207);
IkReal x7216=(gconst137*x7207);
IkReal x7217=((1.0)*cj1*sj2);
evalcond[0]=((((-1.0)*x7211*x7215))+((r20*x7216))+(((-1.0)*r22*x7213)));
evalcond[1]=(((r00*x7216))+sj0+(((-1.0)*x7209*x7215))+(((-1.0)*r02*x7213)));
evalcond[2]=(((r10*x7216))+(((-1.0)*x7212*x7215))+(((-1.0)*r12*x7213))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj2*x7210))+(((-1.0)*x7211*x7213))+((cj1*cj2))+((r22*x7207))+((r20*x7214)));
evalcond[4]=(((r00*x7214))+(((-1.0)*cj0*x7217))+(((-1.0)*x7209*x7213))+((r02*x7207))+(((-1.0)*cj0*cj2*x7210)));
evalcond[5]=(((r10*x7214))+(((-1.0)*sj0*x7217))+(((-1.0)*x7212*x7213))+(((-1.0)*cj2*sj0*x7210))+((r12*x7207)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7218=((-1.0)*r00);
IkReal x7220 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7220)==0){
continue;
}
IkReal x7219=pow(x7220,-0.5);
CheckValue<IkReal> x7221 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7218),IKFAST_ATAN2_MAGTHRESH);
if(!x7221.valid){
continue;
}
IkReal gconst138=((-1.0)*(x7221.value));
IkReal gconst139=(r01*x7219);
IkReal gconst140=(x7218*x7219);
CheckValue<IkReal> x7222 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7222.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7222.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7223=((-1.0)*r00);
IkReal x7224=x7219;
CheckValue<IkReal> x7226 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7223),IKFAST_ATAN2_MAGTHRESH);
if(!x7226.valid){
continue;
}
IkReal x7225=((-1.0)*(x7226.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst139;
cj5=gconst140;
j5=x7225;
IkReal gconst138=x7225;
IkReal gconst139=(r01*x7224);
IkReal gconst140=(x7223*x7224);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7227=((1.0)*gconst139);
CheckValue<IkReal> x7228=IKPowWithIntegerCheck(IKsign((((gconst139*r20))+((gconst140*r21)))),-1);
if(!x7228.valid){
continue;
}
CheckValue<IkReal> x7229 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst140*r10*sj0))+(((-1.0)*r11*sj0*x7227))+(((-1.0)*cj0*r01*x7227))+((cj0*gconst140*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7229.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7228.value)))+(x7229.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7230=IKsin(j4);
IkReal x7231=IKcos(j4);
IkReal x7232=(gconst140*r10);
IkReal x7233=((1.0)*sj1);
IkReal x7234=((1.0)*x7231);
IkReal x7235=(gconst140*x7231);
IkReal x7236=(gconst140*x7230);
IkReal x7237=((1.0)*cj1*sj2);
IkReal x7238=((1.0)*gconst139*x7230);
evalcond[0]=(((r20*x7236))+(((-1.0)*r22*x7234))+(((-1.0)*r21*x7238)));
evalcond[1]=(sj0+((r00*x7236))+(((-1.0)*r02*x7234))+(((-1.0)*r01*x7238)));
evalcond[2]=(((x7230*x7232))+(((-1.0)*r11*x7238))+(((-1.0)*r12*x7234))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj2*x7233))+((r20*x7235))+((cj1*cj2))+(((-1.0)*gconst139*r21*x7234))+((r22*x7230)));
evalcond[4]=((((-1.0)*gconst139*r01*x7234))+((r00*x7235))+(((-1.0)*cj0*x7237))+((r02*x7230))+(((-1.0)*cj0*cj2*x7233)));
evalcond[5]=(((x7231*x7232))+(((-1.0)*sj0*x7237))+((r12*x7230))+(((-1.0)*cj2*sj0*x7233))+(((-1.0)*gconst139*r11*x7234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7239=((1.0)*gconst139);
CheckValue<IkReal> x7240 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst140*r20*sj0))+(((-1.0)*r21*sj0*x7239)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7240.valid){
continue;
}
CheckValue<IkReal> x7241=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x7239))+(((-1.0)*gconst140*r11)))),-1);
if(!x7241.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7240.value)+(((1.5707963267949)*(x7241.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7242=IKsin(j4);
IkReal x7243=IKcos(j4);
IkReal x7244=(gconst140*r10);
IkReal x7245=((1.0)*sj1);
IkReal x7246=((1.0)*x7243);
IkReal x7247=(gconst140*x7243);
IkReal x7248=(gconst140*x7242);
IkReal x7249=((1.0)*cj1*sj2);
IkReal x7250=((1.0)*gconst139*x7242);
evalcond[0]=((((-1.0)*r21*x7250))+(((-1.0)*r22*x7246))+((r20*x7248)));
evalcond[1]=(sj0+(((-1.0)*r01*x7250))+((r00*x7248))+(((-1.0)*r02*x7246)));
evalcond[2]=((((-1.0)*r12*x7246))+((x7242*x7244))+(((-1.0)*r11*x7250))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj2*x7245))+((r20*x7247))+(((-1.0)*gconst139*r21*x7246))+((cj1*cj2))+((r22*x7242)));
evalcond[4]=(((r02*x7242))+(((-1.0)*cj0*x7249))+((r00*x7247))+(((-1.0)*gconst139*r01*x7246))+(((-1.0)*cj0*cj2*x7245)));
evalcond[5]=((((-1.0)*gconst139*r11*x7246))+(((-1.0)*cj2*sj0*x7245))+((x7243*x7244))+((r12*x7242))+(((-1.0)*sj0*x7249)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7251=((-1.0)*r01);
IkReal x7253 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7253)==0){
continue;
}
IkReal x7252=pow(x7253,-0.5);
CheckValue<IkReal> x7254 = IKatan2WithCheck(IkReal(x7251),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7254.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x7254.value))));
IkReal gconst142=(x7251*x7252);
IkReal gconst143=((1.0)*r00*x7252);
CheckValue<IkReal> x7255 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7255.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7255.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7256=((-1.0)*r01);
CheckValue<IkReal> x7259 = IKatan2WithCheck(IkReal(x7256),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7259.valid){
continue;
}
IkReal x7257=((1.0)*(x7259.value));
IkReal x7258=x7252;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7257)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7257)));
IkReal gconst142=(x7256*x7258);
IkReal gconst143=((1.0)*r00*x7258);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x7260=((-1.0)*r01);
CheckValue<IkReal> x7263 = IKatan2WithCheck(IkReal(x7260),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7263.valid){
continue;
}
IkReal x7261=((1.0)*(x7263.value));
IkReal x7262=x7252;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7261)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7261)));
IkReal gconst142=(x7260*x7262);
IkReal gconst143=((1.0)*r00*x7262);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7264=((-1.0)*r01);
CheckValue<IkReal> x7267 = IKatan2WithCheck(IkReal(x7264),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7267.valid){
continue;
}
IkReal x7265=((1.0)*(x7267.value));
IkReal x7266=x7252;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7265)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7265)));
IkReal gconst142=(x7264*x7266);
IkReal gconst143=((1.0)*r00*x7266);
IkReal x7268=r02*r02;
IkReal x7269=(r12*sj0);
IkReal x7270=x7252;
IkReal x7271=(cj0*x7270);
j4eval[0]=((IKabs((x7269+((cj0*r02)))))+(IKabs(((((-1.0)*x7271))+((x7268*x7271))+((r02*x7269*x7270))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7272=((1.0)*gconst142);
CheckValue<IkReal> x7273=IKPowWithIntegerCheck(IKsign((((gconst143*r21))+((gconst142*r20)))),-1);
if(!x7273.valid){
continue;
}
CheckValue<IkReal> x7274 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x7272))+((cj0*gconst143*r00))+(((-1.0)*r11*sj0*x7272))+((gconst143*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7274.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7273.value)))+(x7274.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7275=IKsin(j4);
IkReal x7276=IKcos(j4);
IkReal x7277=(gconst143*r00);
IkReal x7278=(gconst142*r21);
IkReal x7279=((1.0)*sj1);
IkReal x7280=(gconst142*r11);
IkReal x7281=(gconst142*r01);
IkReal x7282=((1.0)*x7276);
IkReal x7283=((1.0)*x7275);
IkReal x7284=(gconst143*x7276);
IkReal x7285=(gconst143*x7275);
IkReal x7286=((1.0)*cj1*sj2);
evalcond[0]=((((-1.0)*x7278*x7283))+((r20*x7285))+(((-1.0)*r22*x7282)));
evalcond[1]=(sj0+((x7275*x7277))+(((-1.0)*x7281*x7283))+(((-1.0)*r02*x7282)));
evalcond[2]=((((-1.0)*r12*x7282))+((r10*x7285))+(((-1.0)*x7280*x7283))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x7278*x7282))+(((-1.0)*sj2*x7279))+((r20*x7284))+((cj1*cj2))+((r22*x7275)));
evalcond[4]=(((x7276*x7277))+(((-1.0)*cj0*x7286))+(((-1.0)*x7281*x7282))+(((-1.0)*cj0*cj2*x7279))+((r02*x7275)));
evalcond[5]=((((-1.0)*cj2*sj0*x7279))+((r12*x7275))+(((-1.0)*sj0*x7286))+((r10*x7284))+(((-1.0)*x7280*x7282)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7287=((1.0)*gconst142);
CheckValue<IkReal> x7288 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x7287))+((cj0*gconst143*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7288.valid){
continue;
}
CheckValue<IkReal> x7289=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x7287))+(((-1.0)*gconst143*r01)))),-1);
if(!x7289.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7288.value)+(((1.5707963267949)*(x7289.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7290=IKsin(j4);
IkReal x7291=IKcos(j4);
IkReal x7292=(gconst143*r00);
IkReal x7293=(gconst142*r21);
IkReal x7294=((1.0)*sj1);
IkReal x7295=(gconst142*r11);
IkReal x7296=(gconst142*r01);
IkReal x7297=((1.0)*x7291);
IkReal x7298=((1.0)*x7290);
IkReal x7299=(gconst143*x7291);
IkReal x7300=(gconst143*x7290);
IkReal x7301=((1.0)*cj1*sj2);
evalcond[0]=((((-1.0)*r22*x7297))+(((-1.0)*x7293*x7298))+((r20*x7300)));
evalcond[1]=(sj0+(((-1.0)*x7296*x7298))+((x7290*x7292))+(((-1.0)*r02*x7297)));
evalcond[2]=(((r10*x7300))+(((-1.0)*x7295*x7298))+(((-1.0)*r12*x7297))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x7290))+(((-1.0)*x7293*x7297))+((cj1*cj2))+((r20*x7299))+(((-1.0)*sj2*x7294)));
evalcond[4]=((((-1.0)*cj0*cj2*x7294))+(((-1.0)*x7296*x7297))+((r02*x7290))+(((-1.0)*cj0*x7301))+((x7291*x7292)));
evalcond[5]=((((-1.0)*sj0*x7301))+((r12*x7290))+(((-1.0)*x7295*x7297))+((r10*x7299))+(((-1.0)*cj2*sj0*x7294)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7302=((1.0)*gconst142);
CheckValue<IkReal> x7303 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst143*r20*sj0))+(((-1.0)*r21*sj0*x7302)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7303.valid){
continue;
}
CheckValue<IkReal> x7304=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst143*r11))+(((-1.0)*r10*x7302)))),-1);
if(!x7304.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7303.value)+(((1.5707963267949)*(x7304.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7305=IKsin(j4);
IkReal x7306=IKcos(j4);
IkReal x7307=(gconst143*r00);
IkReal x7308=(gconst142*r21);
IkReal x7309=((1.0)*sj1);
IkReal x7310=(gconst142*r11);
IkReal x7311=(gconst142*r01);
IkReal x7312=((1.0)*x7306);
IkReal x7313=((1.0)*x7305);
IkReal x7314=(gconst143*x7306);
IkReal x7315=(gconst143*x7305);
IkReal x7316=((1.0)*cj1*sj2);
evalcond[0]=(((r20*x7315))+(((-1.0)*x7308*x7313))+(((-1.0)*r22*x7312)));
evalcond[1]=(sj0+(((-1.0)*x7311*x7313))+((x7305*x7307))+(((-1.0)*r02*x7312)));
evalcond[2]=(((r10*x7315))+(((-1.0)*r12*x7312))+(((-1.0)*x7310*x7313))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x7305))+(((-1.0)*sj2*x7309))+((r20*x7314))+(((-1.0)*x7308*x7312))+((cj1*cj2)));
evalcond[4]=(((r02*x7305))+(((-1.0)*x7311*x7312))+(((-1.0)*cj0*x7316))+((x7306*x7307))+(((-1.0)*cj0*cj2*x7309)));
evalcond[5]=((((-1.0)*sj0*x7316))+((r12*x7305))+((r10*x7314))+(((-1.0)*cj2*sj0*x7309))+(((-1.0)*x7310*x7312)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7317=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7317;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x7317);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7318=((1.0)*sj5);
IkReal x7319=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7318)));
j4eval[0]=x7319;
j4eval[1]=IKsign(x7319);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x7318))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7320=((1.0)*cj5);
IkReal x7321=((1.0)*sj5);
IkReal x7322=(cj1*cj2);
IkReal x7323=(sj1*sj2);
IkReal x7324=((((-1.0)*r11*x7320))+(((-1.0)*r10*x7321)));
j4eval[0]=x7324;
j4eval[1]=((IKabs(((((-1.0)*r02*x7322))+((r02*x7323)))))+(IKabs(((((-1.0)*r01*x7321*x7322))+((cj5*r00*x7322))+((r01*sj5*x7323))+(((-1.0)*r00*x7320*x7323))))));
j4eval[2]=IKsign(x7324);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7325=((1.0)*cj5);
IkReal x7326=((1.0)*sj5);
IkReal x7327=(cj1*cj2);
IkReal x7328=(sj1*sj2);
CheckValue<IkReal> x7329 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x7325*x7328))+((cj5*r00*x7327))+((r01*sj5*x7328))+(((-1.0)*r01*x7326*x7327)))),IkReal(((((-1.0)*r02*x7327))+((r02*x7328)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7329.valid){
continue;
}
CheckValue<IkReal> x7330=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7325))+(((-1.0)*r10*x7326)))),-1);
if(!x7330.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7329.value)+(((1.5707963267949)*(x7330.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7331=IKcos(j4);
IkReal x7332=IKsin(j4);
IkReal x7333=((1.0)*sj2);
IkReal x7334=((1.0)*x7331);
IkReal x7335=(cj5*x7331);
IkReal x7336=(cj5*x7332);
IkReal x7337=((1.0)*sj5*x7332);
evalcond[0]=((((-1.0)*r01*sj5*x7334))+((r02*x7332))+((r00*x7335)));
evalcond[1]=((((-1.0)*r21*x7337))+((r20*x7336))+(((-1.0)*r22*x7334)));
evalcond[2]=(((r10*x7336))+(((-1.0)*r12*x7334))+(((-1.0)*r11*x7337)));
evalcond[3]=((1.0)+(((-1.0)*r02*x7334))+((r00*x7336))+(((-1.0)*r01*x7337)));
evalcond[4]=(((r22*x7332))+(((-1.0)*r21*sj5*x7334))+(((-1.0)*sj1*x7333))+((r20*x7335))+((cj1*cj2)));
evalcond[5]=(((r12*x7332))+((r10*x7335))+(((-1.0)*cj2*sj1))+(((-1.0)*r11*sj5*x7334))+(((-1.0)*cj1*x7333)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7338=((1.0)*sj5);
CheckValue<IkReal> x7339=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7338)))),-1);
if(!x7339.valid){
continue;
}
CheckValue<IkReal> x7340 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x7338)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7340.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7339.value)))+(x7340.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7341=IKcos(j4);
IkReal x7342=IKsin(j4);
IkReal x7343=((1.0)*sj2);
IkReal x7344=((1.0)*x7341);
IkReal x7345=(cj5*x7341);
IkReal x7346=(cj5*x7342);
IkReal x7347=((1.0)*sj5*x7342);
evalcond[0]=((((-1.0)*r01*sj5*x7344))+((r00*x7345))+((r02*x7342)));
evalcond[1]=((((-1.0)*r22*x7344))+((r20*x7346))+(((-1.0)*r21*x7347)));
evalcond[2]=((((-1.0)*r12*x7344))+(((-1.0)*r11*x7347))+((r10*x7346)));
evalcond[3]=((1.0)+(((-1.0)*r01*x7347))+((r00*x7346))+(((-1.0)*r02*x7344)));
evalcond[4]=((((-1.0)*sj1*x7343))+((r20*x7345))+((cj1*cj2))+(((-1.0)*r21*sj5*x7344))+((r22*x7342)));
evalcond[5]=((((-1.0)*r11*sj5*x7344))+(((-1.0)*cj2*sj1))+((r12*x7342))+(((-1.0)*cj1*x7343))+((r10*x7345)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7348 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7348.valid){
continue;
}
CheckValue<IkReal> x7349=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7349.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7348.value)+(((1.5707963267949)*(x7349.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7350=IKcos(j4);
IkReal x7351=IKsin(j4);
IkReal x7352=((1.0)*sj2);
IkReal x7353=((1.0)*x7350);
IkReal x7354=(cj5*x7350);
IkReal x7355=(cj5*x7351);
IkReal x7356=((1.0)*sj5*x7351);
evalcond[0]=((((-1.0)*r01*sj5*x7353))+((r00*x7354))+((r02*x7351)));
evalcond[1]=((((-1.0)*r22*x7353))+((r20*x7355))+(((-1.0)*r21*x7356)));
evalcond[2]=(((r10*x7355))+(((-1.0)*r11*x7356))+(((-1.0)*r12*x7353)));
evalcond[3]=((1.0)+(((-1.0)*r01*x7356))+((r00*x7355))+(((-1.0)*r02*x7353)));
evalcond[4]=(((r20*x7354))+(((-1.0)*r21*sj5*x7353))+((cj1*cj2))+((r22*x7351))+(((-1.0)*sj1*x7352)));
evalcond[5]=(((r10*x7354))+(((-1.0)*r11*sj5*x7353))+(((-1.0)*cj2*sj1))+((r12*x7351))+(((-1.0)*cj1*x7352)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7357=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7357;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x7357);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7358=((1.0)*sj5);
IkReal x7359=((((-1.0)*cj5*r21))+(((-1.0)*r20*x7358)));
j4eval[0]=x7359;
j4eval[1]=((IKabs((((cj5*r10))+(((-1.0)*r11*x7358)))))+(IKabs(r12)));
j4eval[2]=IKsign(x7359);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7360=cj5*cj5;
IkReal x7361=r01*r01;
IkReal x7362=(cj5*r00);
IkReal x7363=(r01*sj5);
IkReal x7364=(((x7360*(r00*r00)))+(((-1.0)*x7360*x7361))+x7361+(((-2.0)*x7362*x7363))+(r02*r02));
j4eval[0]=x7364;
j4eval[1]=((IKabs((x7362+(((-1.0)*x7363)))))+(IKabs(r02)));
j4eval[2]=IKsign(x7364);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7365=cj5*cj5;
IkReal x7366=r01*r01;
IkReal x7367=(r01*sj5);
IkReal x7368=(cj5*r00);
CheckValue<IkReal> x7369=IKPowWithIntegerCheck(IKsign((x7366+(((-1.0)*x7365*x7366))+((x7365*(r00*r00)))+(r02*r02)+(((-2.0)*x7367*x7368)))),-1);
if(!x7369.valid){
continue;
}
CheckValue<IkReal> x7370 = IKatan2WithCheck(IkReal((x7368+(((-1.0)*x7367)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x7370.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7369.value)))+(x7370.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7371=IKcos(j4);
IkReal x7372=IKsin(j4);
IkReal x7373=(cj5*r10);
IkReal x7374=((1.0)*x7371);
IkReal x7375=(cj5*x7372);
IkReal x7376=(cj5*x7371);
IkReal x7377=((1.0)*sj5*x7372);
evalcond[0]=(((r02*x7372))+((r00*x7376))+(((-1.0)*r01*sj5*x7374)));
evalcond[1]=((((-1.0)*r22*x7374))+((r20*x7375))+(((-1.0)*r21*x7377)));
evalcond[2]=((((-1.0)*r12*x7374))+(((-1.0)*r11*x7377))+((x7372*x7373)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x7377))+((r00*x7375))+(((-1.0)*r02*x7374)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x7374))+((r12*x7372))+((cj1*sj2))+((x7371*x7373)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r20*x7376))+((cj1*cj2))+((r22*x7372))+(((-1.0)*r21*sj5*x7374)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7378=((1.0)*sj5);
CheckValue<IkReal> x7379=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*x7378)))),-1);
if(!x7379.valid){
continue;
}
CheckValue<IkReal> x7380 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x7378)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7380.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7379.value)))+(x7380.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7381=IKcos(j4);
IkReal x7382=IKsin(j4);
IkReal x7383=(cj5*r10);
IkReal x7384=((1.0)*x7381);
IkReal x7385=(cj5*x7382);
IkReal x7386=(cj5*x7381);
IkReal x7387=((1.0)*sj5*x7382);
evalcond[0]=((((-1.0)*r01*sj5*x7384))+((r00*x7386))+((r02*x7382)));
evalcond[1]=((((-1.0)*r22*x7384))+((r20*x7385))+(((-1.0)*r21*x7387)));
evalcond[2]=((((-1.0)*r11*x7387))+(((-1.0)*r12*x7384))+((x7382*x7383)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x7384))+((r00*x7385))+(((-1.0)*r01*x7387)));
evalcond[4]=(((cj2*sj1))+((x7381*x7383))+((cj1*sj2))+((r12*x7382))+(((-1.0)*r11*sj5*x7384)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r20*x7386))+(((-1.0)*r21*sj5*x7384))+((cj1*cj2))+((r22*x7382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7388=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7388.valid){
continue;
}
CheckValue<IkReal> x7389 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7389.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7388.value)))+(x7389.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7390=IKcos(j4);
IkReal x7391=IKsin(j4);
IkReal x7392=(cj5*r10);
IkReal x7393=((1.0)*x7390);
IkReal x7394=(cj5*x7391);
IkReal x7395=(cj5*x7390);
IkReal x7396=((1.0)*sj5*x7391);
evalcond[0]=(((r02*x7391))+((r00*x7395))+(((-1.0)*r01*sj5*x7393)));
evalcond[1]=((((-1.0)*r22*x7393))+((r20*x7394))+(((-1.0)*r21*x7396)));
evalcond[2]=((((-1.0)*r12*x7393))+(((-1.0)*r11*x7396))+((x7391*x7392)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x7393))+(((-1.0)*r01*x7396))+((r00*x7394)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x7391))+(((-1.0)*r11*sj5*x7393))+((x7390*x7392)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r22*x7391))+((r20*x7395))+((cj1*cj2))+(((-1.0)*r21*sj5*x7393)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7397=((-1.0)*r10);
IkReal x7399 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7399)==0){
continue;
}
IkReal x7398=pow(x7399,-0.5);
CheckValue<IkReal> x7400 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7397),IKFAST_ATAN2_MAGTHRESH);
if(!x7400.valid){
continue;
}
IkReal gconst144=((-1.0)*(x7400.value));
IkReal gconst145=(r11*x7398);
IkReal gconst146=(x7397*x7398);
CheckValue<IkReal> x7401 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7401.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7401.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7402=((-1.0)*r10);
IkReal x7403=x7398;
CheckValue<IkReal> x7405 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7402),IKFAST_ATAN2_MAGTHRESH);
if(!x7405.valid){
continue;
}
IkReal x7404=((-1.0)*(x7405.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst145;
cj5=gconst146;
j5=x7404;
IkReal gconst144=x7404;
IkReal gconst145=(r11*x7403);
IkReal gconst146=(x7402*x7403);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7406=((1.0)*gconst145);
CheckValue<IkReal> x7407=IKPowWithIntegerCheck(IKsign((((gconst145*r20))+((gconst146*r21)))),-1);
if(!x7407.valid){
continue;
}
CheckValue<IkReal> x7408 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst146*r00))+(((-1.0)*cj0*r01*x7406))+((gconst146*r10*sj0))+(((-1.0)*r11*sj0*x7406)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7408.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7407.value)))+(x7408.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7409=IKsin(j4);
IkReal x7410=IKcos(j4);
IkReal x7411=(gconst145*r11);
IkReal x7412=((1.0)*sj1);
IkReal x7413=(gconst145*r01);
IkReal x7414=(gconst145*r21);
IkReal x7415=((1.0)*x7410);
IkReal x7416=(gconst146*x7410);
IkReal x7417=(gconst146*x7409);
IkReal x7418=((1.0)*x7409);
IkReal x7419=((1.0)*cj1*sj2);
evalcond[0]=((((-1.0)*x7414*x7418))+((r20*x7417))+(((-1.0)*r22*x7415)));
evalcond[1]=(sj0+((r00*x7417))+(((-1.0)*x7413*x7418))+(((-1.0)*r02*x7415)));
evalcond[2]=((((-1.0)*r12*x7415))+(((-1.0)*x7411*x7418))+((r10*x7417))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x7414*x7415))+((r20*x7416))+(((-1.0)*sj2*x7412))+((r22*x7409))+((cj1*cj2)));
evalcond[4]=(((r02*x7409))+((r00*x7416))+(((-1.0)*cj0*x7419))+(((-1.0)*x7413*x7415))+(((-1.0)*cj0*cj2*x7412)));
evalcond[5]=((((-1.0)*x7411*x7415))+(((-1.0)*sj0*x7419))+((r12*x7409))+((r10*x7416))+(((-1.0)*cj2*sj0*x7412)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7420=((1.0)*gconst145);
CheckValue<IkReal> x7421 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x7420))+((cj0*gconst146*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7421.valid){
continue;
}
CheckValue<IkReal> x7422=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x7420))+(((-1.0)*gconst146*r01)))),-1);
if(!x7422.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7421.value)+(((1.5707963267949)*(x7422.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7423=IKsin(j4);
IkReal x7424=IKcos(j4);
IkReal x7425=(gconst145*r11);
IkReal x7426=((1.0)*sj1);
IkReal x7427=(gconst145*r01);
IkReal x7428=(gconst145*r21);
IkReal x7429=((1.0)*x7424);
IkReal x7430=(gconst146*x7424);
IkReal x7431=(gconst146*x7423);
IkReal x7432=((1.0)*x7423);
IkReal x7433=((1.0)*cj1*sj2);
evalcond[0]=((((-1.0)*r22*x7429))+((r20*x7431))+(((-1.0)*x7428*x7432)));
evalcond[1]=(((r00*x7431))+sj0+(((-1.0)*x7427*x7432))+(((-1.0)*r02*x7429)));
evalcond[2]=(((r10*x7431))+(((-1.0)*r12*x7429))+(((-1.0)*x7425*x7432))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x7430))+(((-1.0)*x7428*x7429))+(((-1.0)*sj2*x7426))+((cj1*cj2))+((r22*x7423)));
evalcond[4]=(((r00*x7430))+(((-1.0)*cj0*x7433))+((r02*x7423))+(((-1.0)*x7427*x7429))+(((-1.0)*cj0*cj2*x7426)));
evalcond[5]=(((r10*x7430))+(((-1.0)*sj0*x7433))+((r12*x7423))+(((-1.0)*x7425*x7429))+(((-1.0)*cj2*sj0*x7426)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7434=((-1.0)*r11);
IkReal x7436 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7436)==0){
continue;
}
IkReal x7435=pow(x7436,-0.5);
CheckValue<IkReal> x7437 = IKatan2WithCheck(IkReal(x7434),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7437.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x7437.value))));
IkReal gconst148=(x7434*x7435);
IkReal gconst149=((1.0)*r10*x7435);
CheckValue<IkReal> x7438 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7438.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7438.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7439=((-1.0)*r11);
CheckValue<IkReal> x7442 = IKatan2WithCheck(IkReal(x7439),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7442.valid){
continue;
}
IkReal x7440=((1.0)*(x7442.value));
IkReal x7441=x7435;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7440)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7440)));
IkReal gconst148=(x7439*x7441);
IkReal gconst149=((1.0)*r10*x7441);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7443=((-1.0)*r11);
CheckValue<IkReal> x7446 = IKatan2WithCheck(IkReal(x7443),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7446.valid){
continue;
}
IkReal x7444=((1.0)*(x7446.value));
IkReal x7445=x7435;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7444)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7444)));
IkReal gconst148=(x7443*x7445);
IkReal gconst149=((1.0)*r10*x7445);
IkReal x7447=r12*r12;
IkReal x7448=(cj0*r02);
IkReal x7449=x7435;
IkReal x7450=(sj0*x7449);
j4eval[0]=((IKabs((((r12*sj0))+x7448)))+(IKabs((((r12*x7448*x7449))+(((-1.0)*x7450))+((x7447*x7450))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7451=((-1.0)*r11);
CheckValue<IkReal> x7454 = IKatan2WithCheck(IkReal(x7451),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7454.valid){
continue;
}
IkReal x7452=((1.0)*(x7454.value));
IkReal x7453=x7435;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7452)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7452)));
IkReal gconst148=(x7451*x7453);
IkReal gconst149=((1.0)*r10*x7453);
IkReal x7455=r12*r12;
IkReal x7456=((1.0)+(((-1.0)*x7455)));
IkReal x7457=(cj1*cj2*r22);
CheckValue<IkReal> x7465=IKPowWithIntegerCheck(x7456,-1);
if(!x7465.valid){
continue;
}
IkReal x7458=x7465.value;
CheckValue<IkReal> x7466=IKPowWithIntegerCheck(((-1.0)+x7455),-1);
if(!x7466.valid){
continue;
}
IkReal x7459=x7466.value;
IkReal x7460=((1.0)*x7458);
IkReal x7461=((1.0)*r22*sj1*sj2);
if((x7456) < -0.00001)
continue;
IkReal x7462=IKsqrt(x7456);
IkReal x7463=(r12*x7459*x7462);
IkReal x7464=((((-2.0)*r10*r11*r20*r21*x7458))+(((-1.0)*(r22*r22)))+(((-1.0)*x7460*(r11*r11)*(r21*r21)))+(((-1.0)*x7460*(r10*r10)*(r20*r20))));
j4eval[0]=x7464;
j4eval[1]=IKsign(x7464);
j4eval[2]=((IKabs((((x7457*x7463))+(((-1.0)*x7461*x7463)))))+(IKabs(((((-1.0)*x7461))+x7457))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7467=(gconst149*r20);
IkReal x7468=(cj1*cj2);
IkReal x7469=(sj1*sj2);
IkReal x7470=(gconst148*r21);
CheckValue<IkReal> x7471=IKPowWithIntegerCheck(IKsign(((((2.0)*x7467*x7470))+(((-1.0)*(r22*r22)))+(((-1.0)*(x7467*x7467)))+(((-1.0)*(x7470*x7470))))),-1);
if(!x7471.valid){
continue;
}
CheckValue<IkReal> x7472 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x7469))+((r22*x7468)))),IkReal(((((-1.0)*x7467*x7469))+((x7469*x7470))+((x7467*x7468))+(((-1.0)*x7468*x7470)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7472.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7471.value)))+(x7472.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7473=IKsin(j4);
IkReal x7474=IKcos(j4);
IkReal x7475=(gconst148*r11);
IkReal x7476=(gconst148*r21);
IkReal x7477=((1.0)*sj1);
IkReal x7478=(gconst148*r01);
IkReal x7479=((1.0)*x7474);
IkReal x7480=(gconst149*x7474);
IkReal x7481=(gconst149*x7473);
IkReal x7482=((1.0)*x7473);
IkReal x7483=((1.0)*cj1*sj2);
evalcond[0]=((((-1.0)*x7476*x7482))+((r20*x7481))+(((-1.0)*r22*x7479)));
evalcond[1]=(sj0+(((-1.0)*r02*x7479))+(((-1.0)*x7478*x7482))+((r00*x7481)));
evalcond[2]=((((-1.0)*x7475*x7482))+((r10*x7481))+(((-1.0)*cj0))+(((-1.0)*r12*x7479)));
evalcond[3]=((((-1.0)*sj2*x7477))+(((-1.0)*x7476*x7479))+((r22*x7473))+((r20*x7480))+((cj1*cj2)));
evalcond[4]=(((r02*x7473))+(((-1.0)*cj0*cj2*x7477))+(((-1.0)*x7478*x7479))+((r00*x7480))+(((-1.0)*cj0*x7483)));
evalcond[5]=((((-1.0)*cj2*sj0*x7477))+(((-1.0)*x7475*x7479))+(((-1.0)*sj0*x7483))+((r10*x7480))+((r12*x7473)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7484=((1.0)*gconst148);
CheckValue<IkReal> x7485=IKPowWithIntegerCheck(IKsign((((gconst148*r20))+((gconst149*r21)))),-1);
if(!x7485.valid){
continue;
}
CheckValue<IkReal> x7486 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst149*r10*sj0))+(((-1.0)*cj0*r01*x7484))+((cj0*gconst149*r00))+(((-1.0)*r11*sj0*x7484)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7486.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7485.value)))+(x7486.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7487=IKsin(j4);
IkReal x7488=IKcos(j4);
IkReal x7489=(gconst148*r11);
IkReal x7490=(gconst148*r21);
IkReal x7491=((1.0)*sj1);
IkReal x7492=(gconst148*r01);
IkReal x7493=((1.0)*x7488);
IkReal x7494=(gconst149*x7488);
IkReal x7495=(gconst149*x7487);
IkReal x7496=((1.0)*x7487);
IkReal x7497=((1.0)*cj1*sj2);
evalcond[0]=(((r20*x7495))+(((-1.0)*r22*x7493))+(((-1.0)*x7490*x7496)));
evalcond[1]=(sj0+((r00*x7495))+(((-1.0)*r02*x7493))+(((-1.0)*x7492*x7496)));
evalcond[2]=((((-1.0)*x7489*x7496))+((r10*x7495))+(((-1.0)*r12*x7493))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x7487))+(((-1.0)*sj2*x7491))+((r20*x7494))+((cj1*cj2))+(((-1.0)*x7490*x7493)));
evalcond[4]=((((-1.0)*cj0*cj2*x7491))+((r00*x7494))+((r02*x7487))+(((-1.0)*cj0*x7497))+(((-1.0)*x7492*x7493)));
evalcond[5]=(((r12*x7487))+(((-1.0)*x7489*x7493))+(((-1.0)*sj0*x7497))+((r10*x7494))+(((-1.0)*cj2*sj0*x7491)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7498=((1.0)*gconst148);
CheckValue<IkReal> x7499=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst149*r01))+(((-1.0)*r00*x7498)))),-1);
if(!x7499.valid){
continue;
}
CheckValue<IkReal> x7500 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x7498))+((cj0*gconst149*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7500.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7499.value)))+(x7500.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7501=IKsin(j4);
IkReal x7502=IKcos(j4);
IkReal x7503=(gconst148*r11);
IkReal x7504=(gconst148*r21);
IkReal x7505=((1.0)*sj1);
IkReal x7506=(gconst148*r01);
IkReal x7507=((1.0)*x7502);
IkReal x7508=(gconst149*x7502);
IkReal x7509=(gconst149*x7501);
IkReal x7510=((1.0)*x7501);
IkReal x7511=((1.0)*cj1*sj2);
evalcond[0]=((((-1.0)*r22*x7507))+((r20*x7509))+(((-1.0)*x7504*x7510)));
evalcond[1]=(((r00*x7509))+sj0+(((-1.0)*r02*x7507))+(((-1.0)*x7506*x7510)));
evalcond[2]=((((-1.0)*x7503*x7510))+((r10*x7509))+(((-1.0)*cj0))+(((-1.0)*r12*x7507)));
evalcond[3]=(((r20*x7508))+(((-1.0)*sj2*x7505))+(((-1.0)*x7504*x7507))+((cj1*cj2))+((r22*x7501)));
evalcond[4]=(((r00*x7508))+(((-1.0)*cj0*cj2*x7505))+((r02*x7501))+(((-1.0)*x7506*x7507))+(((-1.0)*cj0*x7511)));
evalcond[5]=(((r12*x7501))+(((-1.0)*x7503*x7507))+((r10*x7508))+(((-1.0)*sj0*x7511))+(((-1.0)*cj2*sj0*x7505)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7512=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7512;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x7512);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7513=((1.0)*sj5);
IkReal x7514=((((-1.0)*r00*x7513))+(((-1.0)*cj5*r01)));
j4eval[0]=x7514;
j4eval[1]=((IKabs((((cj5*r20))+(((-1.0)*r21*x7513)))))+(IKabs(r22)));
j4eval[2]=IKsign(x7514);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7515=cj5*cj5;
IkReal x7516=r11*r11;
IkReal x7517=(r11*sj5);
IkReal x7518=(cj5*r10);
IkReal x7519=((r12*r12)+((x7515*(r10*r10)))+x7516+(((-1.0)*x7515*x7516))+(((-2.0)*x7517*x7518)));
j4eval[0]=x7519;
j4eval[1]=IKsign(x7519);
j4eval[2]=((IKabs(r12))+(IKabs((x7518+(((-1.0)*x7517))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7520=cj5*cj5;
IkReal x7521=r11*r11;
IkReal x7522=(cj5*r10);
IkReal x7523=(r11*sj5);
CheckValue<IkReal> x7524 = IKatan2WithCheck(IkReal((x7522+(((-1.0)*x7523)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x7524.valid){
continue;
}
CheckValue<IkReal> x7525=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x7520*x7521))+((x7520*(r10*r10)))+x7521+(((-2.0)*x7522*x7523)))),-1);
if(!x7525.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7524.value)+(((1.5707963267949)*(x7525.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7526=IKcos(j4);
IkReal x7527=IKsin(j4);
IkReal x7528=(cj5*r10);
IkReal x7529=((1.0)*sj2);
IkReal x7530=((1.0)*x7526);
IkReal x7531=(cj5*x7527);
IkReal x7532=(cj5*x7526);
IkReal x7533=((1.0)*sj5*x7527);
evalcond[0]=(((x7526*x7528))+((r12*x7527))+(((-1.0)*r11*sj5*x7530)));
evalcond[1]=((((-1.0)*r22*x7530))+((r20*x7531))+(((-1.0)*r21*x7533)));
evalcond[2]=((((-1.0)*r01*x7533))+((r00*x7531))+(((-1.0)*r02*x7530)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x7533))+(((-1.0)*r12*x7530))+((x7527*x7528)));
evalcond[4]=((((-1.0)*r21*sj5*x7530))+(((-1.0)*sj1*x7529))+((r22*x7527))+((r20*x7532))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj1*x7529))+(((-1.0)*r01*sj5*x7530))+(((-1.0)*cj2*sj1))+((r02*x7527))+((r00*x7532)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7534=((1.0)*sj5);
CheckValue<IkReal> x7535=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x7534))+(((-1.0)*cj5*r01)))),-1);
if(!x7535.valid){
continue;
}
CheckValue<IkReal> x7536 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x7534)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7536.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7535.value)))+(x7536.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7537=IKcos(j4);
IkReal x7538=IKsin(j4);
IkReal x7539=(cj5*r10);
IkReal x7540=((1.0)*sj2);
IkReal x7541=((1.0)*x7537);
IkReal x7542=(cj5*x7538);
IkReal x7543=(cj5*x7537);
IkReal x7544=((1.0)*sj5*x7538);
evalcond[0]=((((-1.0)*r11*sj5*x7541))+((x7537*x7539))+((r12*x7538)));
evalcond[1]=(((r20*x7542))+(((-1.0)*r22*x7541))+(((-1.0)*r21*x7544)));
evalcond[2]=((((-1.0)*r01*x7544))+((r00*x7542))+(((-1.0)*r02*x7541)));
evalcond[3]=((-1.0)+((x7538*x7539))+(((-1.0)*r11*x7544))+(((-1.0)*r12*x7541)));
evalcond[4]=(((r20*x7543))+((r22*x7538))+(((-1.0)*sj1*x7540))+(((-1.0)*r21*sj5*x7541))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*r01*sj5*x7541))+((r00*x7543))+((r02*x7538))+(((-1.0)*cj1*x7540)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7545=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7545.valid){
continue;
}
CheckValue<IkReal> x7546 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7546.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7545.value)))+(x7546.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7547=IKcos(j4);
IkReal x7548=IKsin(j4);
IkReal x7549=(cj5*r10);
IkReal x7550=((1.0)*sj2);
IkReal x7551=((1.0)*x7547);
IkReal x7552=(cj5*x7548);
IkReal x7553=(cj5*x7547);
IkReal x7554=((1.0)*sj5*x7548);
evalcond[0]=((((-1.0)*r11*sj5*x7551))+((x7547*x7549))+((r12*x7548)));
evalcond[1]=((((-1.0)*r22*x7551))+(((-1.0)*r21*x7554))+((r20*x7552)));
evalcond[2]=((((-1.0)*r01*x7554))+((r00*x7552))+(((-1.0)*r02*x7551)));
evalcond[3]=((-1.0)+((x7548*x7549))+(((-1.0)*r11*x7554))+(((-1.0)*r12*x7551)));
evalcond[4]=((((-1.0)*sj1*x7550))+((r22*x7548))+(((-1.0)*r21*sj5*x7551))+((cj1*cj2))+((r20*x7553)));
evalcond[5]=(((r02*x7548))+(((-1.0)*r01*sj5*x7551))+(((-1.0)*cj2*sj1))+((r00*x7553))+(((-1.0)*cj1*x7550)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7555=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7555;
j4eval[1]=IKsign(x7555);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7556=((1.0)*sj5);
IkReal x7557=((((-1.0)*cj5*r21))+(((-1.0)*r20*x7556)));
j4eval[0]=x7557;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x7556))+((cj5*r00))))));
j4eval[2]=IKsign(x7557);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7558=cj5*cj5;
IkReal x7559=r11*r11;
IkReal x7560=(cj5*r10);
IkReal x7561=(r11*sj5);
IkReal x7562=(((x7558*x7559))+(((-1.0)*x7558*(r10*r10)))+(((-1.0)*x7559))+(((2.0)*x7560*x7561))+(((-1.0)*(r12*r12))));
j4eval[0]=x7562;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x7561))+x7560))));
j4eval[2]=IKsign(x7562);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7563=cj5*cj5;
IkReal x7564=r11*r11;
IkReal x7565=(cj5*r10);
IkReal x7566=(r11*sj5);
CheckValue<IkReal> x7567 = IKatan2WithCheck(IkReal(((((-1.0)*x7566))+x7565)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x7567.valid){
continue;
}
CheckValue<IkReal> x7568=IKPowWithIntegerCheck(IKsign(((((2.0)*x7565*x7566))+(((-1.0)*x7563*(r10*r10)))+(((-1.0)*x7564))+(((-1.0)*(r12*r12)))+((x7563*x7564)))),-1);
if(!x7568.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7567.value)+(((1.5707963267949)*(x7568.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7569=IKcos(j4);
IkReal x7570=IKsin(j4);
IkReal x7571=(cj5*r10);
IkReal x7572=((1.0)*x7569);
IkReal x7573=(cj5*x7570);
IkReal x7574=(cj5*x7569);
IkReal x7575=((1.0)*sj5*x7570);
evalcond[0]=(((r12*x7570))+(((-1.0)*r11*sj5*x7572))+((x7569*x7571)));
evalcond[1]=(((r20*x7573))+(((-1.0)*r21*x7575))+(((-1.0)*r22*x7572)));
evalcond[2]=((((-1.0)*r01*x7575))+((r00*x7573))+(((-1.0)*r02*x7572)));
evalcond[3]=((1.0)+((x7570*x7571))+(((-1.0)*r12*x7572))+(((-1.0)*r11*x7575)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r00*x7574))+(((-1.0)*r01*sj5*x7572))+((r02*x7570)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r20*x7574))+((r22*x7570))+((cj1*cj2))+(((-1.0)*r21*sj5*x7572)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7576=((1.0)*sj5);
CheckValue<IkReal> x7577 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x7576))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7577.valid){
continue;
}
CheckValue<IkReal> x7578=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7576))+(((-1.0)*cj5*r21)))),-1);
if(!x7578.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7577.value)+(((1.5707963267949)*(x7578.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7579=IKcos(j4);
IkReal x7580=IKsin(j4);
IkReal x7581=(cj5*r10);
IkReal x7582=((1.0)*x7579);
IkReal x7583=(cj5*x7580);
IkReal x7584=(cj5*x7579);
IkReal x7585=((1.0)*sj5*x7580);
evalcond[0]=(((r12*x7580))+((x7579*x7581))+(((-1.0)*r11*sj5*x7582)));
evalcond[1]=((((-1.0)*r22*x7582))+(((-1.0)*r21*x7585))+((r20*x7583)));
evalcond[2]=((((-1.0)*r01*x7585))+(((-1.0)*r02*x7582))+((r00*x7583)));
evalcond[3]=((1.0)+(((-1.0)*r12*x7582))+(((-1.0)*r11*x7585))+((x7580*x7581)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r01*sj5*x7582))+((r02*x7580))+((cj1*sj2))+((r00*x7584)));
evalcond[5]=((((-1.0)*r21*sj5*x7582))+(((-1.0)*sj1*sj2))+((r22*x7580))+((cj1*cj2))+((r20*x7584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7586=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7586.valid){
continue;
}
CheckValue<IkReal> x7587 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7587.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7586.value)))+(x7587.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7588=IKcos(j4);
IkReal x7589=IKsin(j4);
IkReal x7590=(cj5*r10);
IkReal x7591=((1.0)*x7588);
IkReal x7592=(cj5*x7589);
IkReal x7593=(cj5*x7588);
IkReal x7594=((1.0)*sj5*x7589);
evalcond[0]=(((x7588*x7590))+((r12*x7589))+(((-1.0)*r11*sj5*x7591)));
evalcond[1]=(((r20*x7592))+(((-1.0)*r22*x7591))+(((-1.0)*r21*x7594)));
evalcond[2]=((((-1.0)*r02*x7591))+((r00*x7592))+(((-1.0)*r01*x7594)));
evalcond[3]=((1.0)+(((-1.0)*r12*x7591))+((x7589*x7590))+(((-1.0)*r11*x7594)));
evalcond[4]=(((cj2*sj1))+((r02*x7589))+(((-1.0)*r01*sj5*x7591))+((cj1*sj2))+((r00*x7593)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r20*x7593))+((r22*x7589))+((cj1*cj2))+(((-1.0)*r21*sj5*x7591)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7595=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x7595);
rxp0_2=(py*r00);
rxp1_0=(r21*x7595);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7596=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x7596);
rxp0_2=(py*r00);
rxp1_0=(r21*x7596);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7597=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x7597);
rxp0_2=(py*r00);
rxp1_0=(r21*x7597);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7600=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x7600.valid){
continue;
}
IkReal x7598=x7600.value;
IkReal x7599=(cj0*x7598);
cj4array[0]=(((cj2*sj1*x7599))+((cj1*sj2*x7599)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7601=IKsin(j4);
IkReal x7602=IKcos(j4);
IkReal x7603=(cj5*r20);
IkReal x7604=((1.0)*sj5);
evalcond[0]=(r12*x7601);
evalcond[1]=((((-1.0)*r12*x7602))+(((-1.0)*cj0)));
evalcond[2]=(((x7601*x7603))+(((-1.0)*r21*x7601*x7604)));
evalcond[3]=((((-1.0)*r01*x7601*x7604))+((cj5*r00*x7601)));
evalcond[4]=((((-1.0)*r21*x7602*x7604))+((x7602*x7603))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7606=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x7606.valid){
continue;
}
IkReal x7605=x7606.value;
cj4array[0]=(((sj1*sj2*x7605))+(((-1.0)*cj1*cj2*x7605)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7607=IKsin(j4);
IkReal x7608=IKcos(j4);
IkReal x7609=(cj5*r00);
IkReal x7610=((1.0)*cj0);
IkReal x7611=((1.0)*r01*sj5);
evalcond[0]=(r12*x7607);
evalcond[1]=((((-1.0)*x7610))+(((-1.0)*r12*x7608)));
evalcond[2]=(((cj5*r20*x7607))+(((-1.0)*r21*sj5*x7607)));
evalcond[3]=(((x7607*x7609))+(((-1.0)*x7607*x7611)));
evalcond[4]=((((-1.0)*cj1*sj2*x7610))+(((-1.0)*cj2*sj1*x7610))+((x7608*x7609))+(((-1.0)*x7608*x7611)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7612=IKPowWithIntegerCheck(r12,-1);
if(!x7612.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x7612.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7613=IKsin(j4);
IkReal x7614=IKcos(j4);
IkReal x7615=((1.0)*sj5);
IkReal x7616=((1.0)*cj0);
IkReal x7617=(cj5*x7614);
IkReal x7618=(cj5*x7613);
evalcond[0]=(r12*x7613);
evalcond[1]=(((r20*x7618))+(((-1.0)*r21*x7613*x7615)));
evalcond[2]=(((r00*x7618))+(((-1.0)*r01*x7613*x7615)));
evalcond[3]=(((r20*x7617))+(((-1.0)*r21*x7614*x7615))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
evalcond[4]=(((r00*x7617))+(((-1.0)*cj1*sj2*x7616))+(((-1.0)*cj2*sj1*x7616))+(((-1.0)*r01*x7614*x7615)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7619=((1.0)*sj5);
CheckValue<IkReal> x7620=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7620.valid){
continue;
}
CheckValue<IkReal> x7621 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x7619))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj0*x7619)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7621.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7620.value)))+(x7621.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7622=IKsin(j4);
IkReal x7623=IKcos(j4);
IkReal x7624=(cj5*r10);
IkReal x7625=((1.0)*sj1);
IkReal x7626=((1.0)*x7623);
IkReal x7627=(cj5*x7622);
IkReal x7628=(cj5*x7623);
IkReal x7629=((1.0)*cj1*sj2);
IkReal x7630=((1.0)*sj5*x7622);
evalcond[0]=(((r20*x7627))+(((-1.0)*r21*x7630))+(((-1.0)*r22*x7626)));
evalcond[1]=(sj0+((r00*x7627))+(((-1.0)*r01*x7630))+(((-1.0)*r02*x7626)));
evalcond[2]=((((-1.0)*r12*x7626))+((x7622*x7624))+(((-1.0)*cj0))+(((-1.0)*r11*x7630)));
evalcond[3]=((((-1.0)*r21*sj5*x7626))+((r20*x7628))+((cj1*cj2))+((r22*x7622))+(((-1.0)*sj2*x7625)));
evalcond[4]=(((r02*x7622))+(((-1.0)*r01*sj5*x7626))+(((-1.0)*cj0*x7629))+((r00*x7628))+(((-1.0)*cj0*cj2*x7625)));
evalcond[5]=((((-1.0)*r11*sj5*x7626))+(((-1.0)*cj2*sj0*x7625))+(((-1.0)*sj0*x7629))+((r12*x7622))+((x7623*x7624)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7631=((1.0)*sj5);
CheckValue<IkReal> x7632 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x7631))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7632.valid){
continue;
}
CheckValue<IkReal> x7633=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x7631))+(((-1.0)*cj5*r01)))),-1);
if(!x7633.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7632.value)+(((1.5707963267949)*(x7633.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7634=IKsin(j4);
IkReal x7635=IKcos(j4);
IkReal x7636=(cj5*r10);
IkReal x7637=((1.0)*sj1);
IkReal x7638=((1.0)*x7635);
IkReal x7639=(cj5*x7634);
IkReal x7640=(cj5*x7635);
IkReal x7641=((1.0)*cj1*sj2);
IkReal x7642=((1.0)*sj5*x7634);
evalcond[0]=((((-1.0)*r22*x7638))+(((-1.0)*r21*x7642))+((r20*x7639)));
evalcond[1]=(sj0+(((-1.0)*r01*x7642))+((r00*x7639))+(((-1.0)*r02*x7638)));
evalcond[2]=(((x7634*x7636))+(((-1.0)*r11*x7642))+(((-1.0)*cj0))+(((-1.0)*r12*x7638)));
evalcond[3]=(((r22*x7634))+(((-1.0)*sj2*x7637))+((r20*x7640))+(((-1.0)*r21*sj5*x7638))+((cj1*cj2)));
evalcond[4]=((((-1.0)*r01*sj5*x7638))+(((-1.0)*cj0*cj2*x7637))+(((-1.0)*cj0*x7641))+((r02*x7634))+((r00*x7640)));
evalcond[5]=(((x7635*x7636))+(((-1.0)*r11*sj5*x7638))+((r12*x7634))+(((-1.0)*sj0*x7641))+(((-1.0)*cj2*sj0*x7637)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7643=((1.0)*sj5);
CheckValue<IkReal> x7644 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x7643))+((cj5*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7644.valid){
continue;
}
CheckValue<IkReal> x7645=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7643)))),-1);
if(!x7645.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7644.value)+(((1.5707963267949)*(x7645.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7646=IKsin(j4);
IkReal x7647=IKcos(j4);
IkReal x7648=(cj5*r10);
IkReal x7649=((1.0)*sj1);
IkReal x7650=((1.0)*x7647);
IkReal x7651=(cj5*x7646);
IkReal x7652=(cj5*x7647);
IkReal x7653=((1.0)*cj1*sj2);
IkReal x7654=((1.0)*sj5*x7646);
evalcond[0]=((((-1.0)*r22*x7650))+(((-1.0)*r21*x7654))+((r20*x7651)));
evalcond[1]=(sj0+(((-1.0)*r02*x7650))+((r00*x7651))+(((-1.0)*r01*x7654)));
evalcond[2]=((((-1.0)*r11*x7654))+(((-1.0)*r12*x7650))+((x7646*x7648))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x7646))+(((-1.0)*r21*sj5*x7650))+(((-1.0)*sj2*x7649))+((r20*x7652))+((cj1*cj2)));
evalcond[4]=(((r02*x7646))+(((-1.0)*cj0*x7653))+(((-1.0)*r01*sj5*x7650))+((r00*x7652))+(((-1.0)*cj0*cj2*x7649)));
evalcond[5]=(((r12*x7646))+(((-1.0)*r11*sj5*x7650))+(((-1.0)*cj2*sj0*x7649))+(((-1.0)*sj0*x7653))+((x7647*x7648)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7655=cj2*cj2;
IkReal x7656=cj1*cj1;
IkReal x7657=(cj5*r01);
IkReal x7658=(cj1*sj2);
IkReal x7659=((19.2)*py);
IkReal x7660=(r10*sj5);
IkReal x7661=(cj5*r11);
IkReal x7662=((19.2)*px);
IkReal x7663=(cj2*sj1);
IkReal x7664=((13.44)*cj2);
IkReal x7665=(r00*sj5);
IkReal x7666=((2.8)*sj1);
IkReal x7667=((22.4)*sj1);
IkReal x7668=((2.4)*x7663);
CheckValue<IkReal> x7669 = IKatan2WithCheck(IkReal(((((2.4)*x7658*x7660))+(((2.4)*x7658*x7661))+(((-8.0)*px))+(((-1.0)*py*x7667))+((x7661*x7668))+((x7661*x7666))+((x7660*x7666))+((x7660*x7668))+(((-1.0)*x7658*x7659))+(((-1.0)*x7659*x7663))+x7657+x7665)),IkReal(((((-1.0)*px*x7667))+(((2.4)*x7658*x7665))+((x7665*x7666))+((x7665*x7668))+(((2.4)*x7657*x7658))+(((-1.0)*x7662*x7663))+(((-1.0)*x7661))+(((-1.0)*x7660))+(((-1.0)*x7658*x7662))+((x7657*x7668))+((x7657*x7666))+(((8.0)*py)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7669.valid){
continue;
}
CheckValue<IkReal> x7670=IKPowWithIntegerCheck(IKsign(((8.84)+(((13.44)*sj1*x7658))+(((-2.08)*x7656))+(((11.52)*x7658*x7663))+(((-1.0)*x7656*x7664))+(((5.76)*x7655))+(((-11.52)*x7655*x7656))+x7664)),-1);
if(!x7670.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x7669.value)+(((1.5707963267949)*(x7670.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7671=IKcos(j0);
IkReal x7672=IKsin(j0);
IkReal x7673=((0.125)*sj5);
IkReal x7674=((0.125)*cj5);
IkReal x7675=((0.3)*cj2);
IkReal x7676=(sj1*x7671);
IkReal x7677=(sj1*x7672);
IkReal x7678=((0.3)*cj1*sj2);
evalcond[0]=((((-0.35)*x7676))+(((-1.0)*px))+(((-0.125)*x7672))+((r01*x7674))+((r00*x7673))+(((-1.0)*x7671*x7678))+(((-1.0)*x7675*x7676)));
evalcond[1]=(((r11*x7674))+(((-0.35)*x7677))+(((-1.0)*py))+(((0.125)*x7671))+((r10*x7673))+(((-1.0)*x7672*x7678))+(((-1.0)*x7675*x7677)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x7679=((1.0)*sj5);
IkReal x7680=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7679)));
j4eval[0]=x7680;
j4eval[1]=IKsign(x7680);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x7679))+((cj5*r20*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7681=((1.0)*sj5);
IkReal x7682=((((-1.0)*r00*x7681))+(((-1.0)*cj5*r01)));
j4eval[0]=x7682;
j4eval[1]=IKsign(x7682);
j4eval[2]=((IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x7681)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7683=((1.0)*sj5);
IkReal x7684=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7684;
j4eval[1]=((IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*cj0*r01*x7683))+(((-1.0)*r11*sj0*x7683)))))+(IKabs((((r12*sj0))+((cj0*r02))))));
j4eval[2]=IKsign(x7684);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7686 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7686)==0){
continue;
}
IkReal x7685=pow(x7686,-0.5);
CheckValue<IkReal> x7687 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7687.valid){
continue;
}
IkReal gconst0=((-1.0)*(x7687.value));
IkReal gconst1=((-1.0)*r21*x7685);
IkReal gconst2=(r20*x7685);
CheckValue<IkReal> x7688 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7688.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7688.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x7691 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7691.valid){
continue;
}
IkReal x7689=((-1.0)*(x7691.value));
IkReal x7690=x7685;
sj5=gconst1;
cj5=gconst2;
j5=x7689;
IkReal gconst0=x7689;
IkReal gconst1=((-1.0)*r21*x7690);
IkReal gconst2=(r20*x7690);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7694 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7694.valid){
continue;
}
IkReal x7692=((-1.0)*(x7694.value));
IkReal x7693=x7685;
sj5=gconst1;
cj5=gconst2;
j5=x7692;
IkReal gconst0=x7692;
IkReal gconst1=((-1.0)*r21*x7693);
IkReal gconst2=(r20*x7693);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x7697 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7697.valid){
continue;
}
IkReal x7695=((-1.0)*(x7697.value));
IkReal x7696=x7685;
sj5=gconst1;
cj5=gconst2;
j5=x7695;
IkReal gconst0=x7695;
IkReal gconst1=((-1.0)*r21*x7696);
IkReal gconst2=(r20*x7696);
IkReal x7698=r22*r22;
CheckValue<IkReal> x7702=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7698))),-1);
if(!x7702.valid){
continue;
}
IkReal x7699=x7702.value;
IkReal x7700=(cj3*x7699);
IkReal x7701=(((x7700*(r20*r20*r20*r20)))+(((2.0)*x7700*(r20*r20)*(r21*r21)))+((x7700*(r21*r21*r21*r21)))+((cj3*x7698)));
j4eval[0]=x7701;
j4eval[1]=IKsign(x7701);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x7705 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7705.valid){
continue;
}
IkReal x7703=((-1.0)*(x7705.value));
IkReal x7704=x7685;
sj5=gconst1;
cj5=gconst2;
j5=x7703;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x7703;
IkReal gconst1=((-1.0)*r21*x7704);
IkReal gconst2=(r20*x7704);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7708 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7708.valid){
continue;
}
IkReal x7706=((-1.0)*(x7708.value));
IkReal x7707=x7685;
sj5=gconst1;
cj5=gconst2;
j5=x7706;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x7706;
IkReal gconst1=((-1.0)*r21*x7707);
IkReal gconst2=(r20*x7707);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x7711 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7711.valid){
continue;
}
IkReal x7709=((-1.0)*(x7711.value));
IkReal x7710=x7685;
sj5=gconst1;
cj5=gconst2;
j5=x7709;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x7709;
IkReal gconst1=((-1.0)*r21*x7710);
IkReal gconst2=(r20*x7710);
IkReal x7712=r22*r22;
CheckValue<IkReal> x7715=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7712))),-1);
if(!x7715.valid){
continue;
}
IkReal x7713=x7715.value;
IkReal x7714=(((x7713*(r20*r20*r20*r20)))+((x7713*(r21*r21*r21*r21)))+(((2.0)*x7713*(r20*r20)*(r21*r21)))+x7712);
j4eval[0]=x7714;
j4eval[1]=IKsign(x7714);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x7718 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7718.valid){
continue;
}
IkReal x7716=((-1.0)*(x7718.value));
IkReal x7717=x7685;
sj5=gconst1;
cj5=gconst2;
j5=x7716;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x7716;
IkReal gconst1=((-1.0)*r21*x7717);
IkReal gconst2=(r20*x7717);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x7721 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7721.valid){
continue;
}
IkReal x7719=((-1.0)*(x7721.value));
IkReal x7720=x7685;
sj5=gconst1;
cj5=gconst2;
j5=x7719;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x7719;
IkReal gconst1=((-1.0)*r21*x7720);
IkReal gconst2=(r20*x7720);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7724 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7724.valid){
continue;
}
IkReal x7722=((-1.0)*(x7724.value));
IkReal x7723=x7685;
sj5=gconst1;
cj5=gconst2;
j5=x7722;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x7722;
IkReal gconst1=((-1.0)*r21*x7723);
IkReal gconst2=(r20*x7723);
IkReal x7725=r22*r22;
IkReal x7726=(r02*sj1*sj2);
IkReal x7727=(cj1*cj2*r02);
CheckValue<IkReal> x7731=IKPowWithIntegerCheck(((-1.0)+x7725),-1);
if(!x7731.valid){
continue;
}
IkReal x7728=x7731.value;
if((((1.0)+(((-1.0)*x7725)))) < -0.00001)
continue;
IkReal x7729=IKsqrt(((1.0)+(((-1.0)*x7725))));
IkReal x7730=(r22*x7728*x7729);
j4eval[0]=((IKabs(((((-1.0)*x7726))+x7727)))+(IKabs((((x7726*x7730))+(((-1.0)*x7727*x7730))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7732=(gconst1*r01);
IkReal x7733=((1.0)*gconst2);
IkReal x7734=(cj1*cj2);
IkReal x7735=((1.0)*sj1*sj2);
CheckValue<IkReal> x7736=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x7733)))),-1);
if(!x7736.valid){
continue;
}
CheckValue<IkReal> x7737 = IKatan2WithCheck(IkReal(((((-1.0)*x7732*x7735))+((x7732*x7734))+(((-1.0)*r00*x7733*x7734))+((gconst2*r00*sj1*sj2)))),IkReal((((r02*x7734))+(((-1.0)*r02*x7735)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7737.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7736.value)))+(x7737.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7738=IKsin(j4);
IkReal x7739=IKcos(j4);
IkReal x7740=(gconst1*r01);
IkReal x7741=(gconst1*r21);
IkReal x7742=((1.0)*sj1);
IkReal x7743=(gconst1*r11);
IkReal x7744=((1.0)*x7739);
IkReal x7745=((1.0)*x7738);
IkReal x7746=(gconst2*x7738);
evalcond[0]=((((-1.0)*r22*x7744))+(((-1.0)*x7741*x7745))+((r20*x7746)));
evalcond[1]=(((r10*x7746))+(((-1.0)*r12*x7744))+(((-1.0)*x7743*x7745)));
evalcond[2]=((((-1.0)*r02*x7745))+((x7739*x7740))+(((-1.0)*gconst2*r00*x7744)));
evalcond[3]=((1.0)+((r00*x7746))+(((-1.0)*r02*x7744))+(((-1.0)*x7740*x7745)));
evalcond[4]=((((-1.0)*r22*x7745))+(((-1.0)*sj2*x7742))+((x7739*x7741))+(((-1.0)*gconst2*r20*x7744))+((cj1*cj2)));
evalcond[5]=((((-1.0)*gconst2*r10*x7744))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x7745))+((x7739*x7743))+(((-1.0)*cj2*x7742)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7747=(gconst1*r01);
IkReal x7748=(gconst2*r00);
CheckValue<IkReal> x7749=IKPowWithIntegerCheck(IKsign(((x7747*x7747)+(((-2.0)*x7747*x7748))+(x7748*x7748)+(r02*r02))),-1);
if(!x7749.valid){
continue;
}
CheckValue<IkReal> x7750 = IKatan2WithCheck(IkReal(((((-1.0)*x7748))+x7747)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7750.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7749.value)))+(x7750.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7751=IKsin(j4);
IkReal x7752=IKcos(j4);
IkReal x7753=(gconst1*r01);
IkReal x7754=(gconst1*r21);
IkReal x7755=((1.0)*sj1);
IkReal x7756=(gconst1*r11);
IkReal x7757=((1.0)*x7752);
IkReal x7758=((1.0)*x7751);
IkReal x7759=(gconst2*x7751);
evalcond[0]=((((-1.0)*r22*x7757))+(((-1.0)*x7754*x7758))+((r20*x7759)));
evalcond[1]=(((r10*x7759))+(((-1.0)*x7756*x7758))+(((-1.0)*r12*x7757)));
evalcond[2]=(((x7752*x7753))+(((-1.0)*r02*x7758))+(((-1.0)*gconst2*r00*x7757)));
evalcond[3]=((1.0)+((r00*x7759))+(((-1.0)*r02*x7757))+(((-1.0)*x7753*x7758)));
evalcond[4]=((((-1.0)*r22*x7758))+((x7752*x7754))+(((-1.0)*sj2*x7755))+(((-1.0)*gconst2*r20*x7757))+((cj1*cj2)));
evalcond[5]=(((x7752*x7756))+(((-1.0)*gconst2*r10*x7757))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x7755))+(((-1.0)*r12*x7758)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7760=((1.0)*gconst1);
CheckValue<IkReal> x7761 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*r21*x7760)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7761.valid){
continue;
}
CheckValue<IkReal> x7762=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x7760))+(((-1.0)*gconst2*r11)))),-1);
if(!x7762.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7761.value)+(((1.5707963267949)*(x7762.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7763=IKsin(j4);
IkReal x7764=IKcos(j4);
IkReal x7765=(gconst1*r01);
IkReal x7766=(gconst1*r21);
IkReal x7767=((1.0)*sj1);
IkReal x7768=(gconst1*r11);
IkReal x7769=((1.0)*x7764);
IkReal x7770=((1.0)*x7763);
IkReal x7771=(gconst2*x7763);
evalcond[0]=((((-1.0)*x7766*x7770))+(((-1.0)*r22*x7769))+((r20*x7771)));
evalcond[1]=((((-1.0)*x7768*x7770))+(((-1.0)*r12*x7769))+((r10*x7771)));
evalcond[2]=((((-1.0)*r02*x7770))+(((-1.0)*gconst2*r00*x7769))+((x7764*x7765)));
evalcond[3]=((1.0)+((r00*x7771))+(((-1.0)*r02*x7769))+(((-1.0)*x7765*x7770)));
evalcond[4]=((((-1.0)*r22*x7770))+((x7764*x7766))+(((-1.0)*sj2*x7767))+((cj1*cj2))+(((-1.0)*gconst2*r20*x7769)));
evalcond[5]=((((-1.0)*gconst2*r10*x7769))+((x7764*x7768))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x7770))+(((-1.0)*cj2*x7767)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x7774 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7774.valid){
continue;
}
IkReal x7772=((-1.0)*(x7774.value));
IkReal x7773=x7685;
sj5=gconst1;
cj5=gconst2;
j5=x7772;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x7772;
IkReal gconst1=((-1.0)*r21*x7773);
IkReal gconst2=(r20*x7773);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x7777 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7777.valid){
continue;
}
IkReal x7775=((-1.0)*(x7777.value));
IkReal x7776=x7685;
sj5=gconst1;
cj5=gconst2;
j5=x7775;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x7775;
IkReal gconst1=((-1.0)*r21*x7776);
IkReal gconst2=(r20*x7776);
IkReal x7778=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x7782=IKPowWithIntegerCheck(x7778,-1);
if(!x7782.valid){
continue;
}
IkReal x7779=x7782.value;
IkReal x7780=((1.0)*x7779);
IkReal x7781=((((-1.0)*x7780*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x7779))+(((-1.0)*x7780*(r01*r01)*(r21*r21))));
j4eval[0]=x7781;
j4eval[1]=IKsign(x7781);
j4eval[2]=r02;
j4eval[3]=x7778;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7785 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7785.valid){
continue;
}
IkReal x7783=((-1.0)*(x7785.value));
IkReal x7784=x7685;
sj5=gconst1;
cj5=gconst2;
j5=x7783;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x7783;
IkReal gconst1=((-1.0)*r21*x7784);
IkReal gconst2=(r20*x7784);
IkReal x7786=r22*r22;
IkReal x7787=(cj1*r12*sj2);
IkReal x7788=(cj2*r12*sj1);
CheckValue<IkReal> x7792=IKPowWithIntegerCheck(((-1.0)+x7786),-1);
if(!x7792.valid){
continue;
}
IkReal x7789=x7792.value;
if((((1.0)+(((-1.0)*x7786)))) < -0.00001)
continue;
IkReal x7790=IKsqrt(((1.0)+(((-1.0)*x7786))));
IkReal x7791=(r22*x7789*x7790);
j4eval[0]=((IKabs((((x7788*x7791))+((x7787*x7791)))))+(IKabs((x7788+x7787))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7793=(cj2*sj1);
IkReal x7794=(gconst2*r10);
IkReal x7795=(cj1*sj2);
IkReal x7796=((1.0)*gconst1*r11);
CheckValue<IkReal> x7797 = IKatan2WithCheck(IkReal((((r12*x7793))+((r12*x7795)))),IkReal(((((-1.0)*x7793*x7796))+(((-1.0)*x7795*x7796))+((x7794*x7795))+((x7793*x7794)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7797.valid){
continue;
}
CheckValue<IkReal> x7798=IKPowWithIntegerCheck(IKsign(((((gconst1*gconst1)*(r11*r11)))+(r12*r12)+(x7794*x7794)+(((-2.0)*gconst1*r11*x7794)))),-1);
if(!x7798.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7797.value)+(((1.5707963267949)*(x7798.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7799=IKsin(j4);
IkReal x7800=IKcos(j4);
IkReal x7801=(gconst1*r01);
IkReal x7802=(gconst1*r21);
IkReal x7803=(gconst1*r11);
IkReal x7804=((1.0)*x7800);
IkReal x7805=((1.0)*x7799);
IkReal x7806=(gconst2*x7799);
evalcond[0]=((((-1.0)*x7802*x7805))+(((-1.0)*r22*x7804))+((r20*x7806)));
evalcond[1]=((((-1.0)*r12*x7804))+(((-1.0)*x7803*x7805))+((r10*x7806)));
evalcond[2]=(((x7800*x7801))+(((-1.0)*r02*x7805))+(((-1.0)*gconst2*r00*x7804)));
evalcond[3]=((-1.0)+(((-1.0)*x7801*x7805))+((r00*x7806))+(((-1.0)*r02*x7804)));
evalcond[4]=(((cj2*sj1))+((x7800*x7803))+(((-1.0)*r12*x7805))+(((-1.0)*gconst2*r10*x7804))+((cj1*sj2)));
evalcond[5]=(((x7800*x7802))+(((-1.0)*sj1*sj2))+(((-1.0)*r22*x7805))+((cj1*cj2))+(((-1.0)*gconst2*r20*x7804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7807=(gconst1*r01);
IkReal x7808=(gconst2*r00);
CheckValue<IkReal> x7809 = IKatan2WithCheck(IkReal(((((-1.0)*x7808))+x7807)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7809.valid){
continue;
}
CheckValue<IkReal> x7810=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x7808*x7808)))+(((-1.0)*(x7807*x7807)))+(((-1.0)*(r02*r02)))+(((2.0)*x7807*x7808)))),-1);
if(!x7810.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7809.value)+(((1.5707963267949)*(x7810.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7811=IKsin(j4);
IkReal x7812=IKcos(j4);
IkReal x7813=(gconst1*r01);
IkReal x7814=(gconst1*r21);
IkReal x7815=(gconst1*r11);
IkReal x7816=((1.0)*x7812);
IkReal x7817=((1.0)*x7811);
IkReal x7818=(gconst2*x7811);
evalcond[0]=(((r20*x7818))+(((-1.0)*x7814*x7817))+(((-1.0)*r22*x7816)));
evalcond[1]=(((r10*x7818))+(((-1.0)*r12*x7816))+(((-1.0)*x7815*x7817)));
evalcond[2]=(((x7812*x7813))+(((-1.0)*r02*x7817))+(((-1.0)*gconst2*r00*x7816)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x7816))+((r00*x7818))+(((-1.0)*x7813*x7817)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r10*x7816))+((x7812*x7815))+((cj1*sj2))+(((-1.0)*r12*x7817)));
evalcond[5]=(((x7812*x7814))+(((-1.0)*sj1*sj2))+(((-1.0)*r22*x7817))+(((-1.0)*gconst2*r20*x7816))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7819 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7819.valid){
continue;
}
CheckValue<IkReal> x7820=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x7820.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7819.value)+(((1.5707963267949)*(x7820.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7821=IKsin(j4);
IkReal x7822=IKcos(j4);
IkReal x7823=(gconst1*r01);
IkReal x7824=(gconst1*r21);
IkReal x7825=(gconst1*r11);
IkReal x7826=((1.0)*x7822);
IkReal x7827=((1.0)*x7821);
IkReal x7828=(gconst2*x7821);
evalcond[0]=((((-1.0)*x7824*x7827))+((r20*x7828))+(((-1.0)*r22*x7826)));
evalcond[1]=(((r10*x7828))+(((-1.0)*x7825*x7827))+(((-1.0)*r12*x7826)));
evalcond[2]=((((-1.0)*r02*x7827))+((x7822*x7823))+(((-1.0)*gconst2*r00*x7826)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x7826))+(((-1.0)*x7823*x7827))+((r00*x7828)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x7822*x7825))+(((-1.0)*r12*x7827))+(((-1.0)*gconst2*r10*x7826)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r22*x7827))+((x7822*x7824))+(((-1.0)*gconst2*r20*x7826))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x7831 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7831.valid){
continue;
}
IkReal x7829=((-1.0)*(x7831.value));
IkReal x7830=x7685;
sj5=gconst1;
cj5=gconst2;
j5=x7829;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x7829;
IkReal gconst1=((-1.0)*r21*x7830);
IkReal gconst2=(r20*x7830);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x7834 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7834.valid){
continue;
}
IkReal x7832=((-1.0)*(x7834.value));
IkReal x7833=x7685;
sj5=gconst1;
cj5=gconst2;
j5=x7832;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x7832;
IkReal gconst1=((-1.0)*r21*x7833);
IkReal gconst2=(r20*x7833);
IkReal x7835=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x7839=IKPowWithIntegerCheck(x7835,-1);
if(!x7839.valid){
continue;
}
IkReal x7836=x7839.value;
IkReal x7837=((1.0)*x7836);
IkReal x7838=((((-2.0)*r10*r11*r20*r21*x7836))+(((-1.0)*(r12*r12)))+(((-1.0)*x7837*(r10*r10)*(r20*r20)))+(((-1.0)*x7837*(r11*r11)*(r21*r21))));
j4eval[0]=x7838;
j4eval[1]=r12;
j4eval[2]=x7835;
j4eval[3]=IKsign(x7838);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7842 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7842.valid){
continue;
}
IkReal x7840=((-1.0)*(x7842.value));
IkReal x7841=x7685;
sj5=gconst1;
cj5=gconst2;
j5=x7840;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x7840;
IkReal gconst1=((-1.0)*r21*x7841);
IkReal gconst2=(r20*x7841);
IkReal x7843=r22*r22;
IkReal x7844=(cj1*cj2*r12);
IkReal x7845=(r12*sj1*sj2);
CheckValue<IkReal> x7849=IKPowWithIntegerCheck(((-1.0)+x7843),-1);
if(!x7849.valid){
continue;
}
IkReal x7846=x7849.value;
if((((1.0)+(((-1.0)*x7843)))) < -0.00001)
continue;
IkReal x7847=IKsqrt(((1.0)+(((-1.0)*x7843))));
IkReal x7848=(r22*x7846*x7847);
j4eval[0]=((IKabs(((((-1.0)*x7844*x7848))+((x7845*x7848)))))+(IKabs(((((-1.0)*x7845))+x7844))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7850=(cj1*cj2);
IkReal x7851=(gconst2*r10);
IkReal x7852=(gconst1*r11);
IkReal x7853=((1.0)*sj1*sj2);
CheckValue<IkReal> x7854 = IKatan2WithCheck(IkReal((((sj1*sj2*x7851))+(((-1.0)*x7850*x7851))+((x7850*x7852))+(((-1.0)*x7852*x7853)))),IkReal((((r12*x7850))+(((-1.0)*r12*x7853)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7854.valid){
continue;
}
CheckValue<IkReal> x7855=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x7855.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7854.value)+(((1.5707963267949)*(x7855.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7856=IKsin(j4);
IkReal x7857=IKcos(j4);
IkReal x7858=(gconst1*r01);
IkReal x7859=(gconst1*r21);
IkReal x7860=((1.0)*sj1);
IkReal x7861=(gconst1*r11);
IkReal x7862=((1.0)*x7857);
IkReal x7863=((1.0)*x7856);
IkReal x7864=(gconst2*x7856);
evalcond[0]=((((-1.0)*x7859*x7863))+((r20*x7864))+(((-1.0)*r22*x7862)));
evalcond[1]=((((-1.0)*x7858*x7863))+((r00*x7864))+(((-1.0)*r02*x7862)));
evalcond[2]=(((x7857*x7861))+(((-1.0)*r12*x7863))+(((-1.0)*gconst2*r10*x7862)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x7862))+((r10*x7864))+(((-1.0)*x7861*x7863)));
evalcond[4]=((((-1.0)*sj2*x7860))+((x7857*x7859))+((cj1*cj2))+(((-1.0)*gconst2*r20*x7862))+(((-1.0)*r22*x7863)));
evalcond[5]=(((x7857*x7858))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x7863))+(((-1.0)*gconst2*r00*x7862))+(((-1.0)*cj2*x7860)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7865=(gconst1*r11);
IkReal x7866=(gconst2*r10);
CheckValue<IkReal> x7867=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x7866*x7866)))+(((2.0)*x7865*x7866))+(((-1.0)*(r12*r12)))+(((-1.0)*(x7865*x7865))))),-1);
if(!x7867.valid){
continue;
}
CheckValue<IkReal> x7868 = IKatan2WithCheck(IkReal((x7865+(((-1.0)*x7866)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7868.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7867.value)))+(x7868.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7869=IKsin(j4);
IkReal x7870=IKcos(j4);
IkReal x7871=(gconst1*r01);
IkReal x7872=(gconst1*r21);
IkReal x7873=((1.0)*sj1);
IkReal x7874=(gconst1*r11);
IkReal x7875=((1.0)*x7870);
IkReal x7876=((1.0)*x7869);
IkReal x7877=(gconst2*x7869);
evalcond[0]=((((-1.0)*r22*x7875))+(((-1.0)*x7872*x7876))+((r20*x7877)));
evalcond[1]=(((r00*x7877))+(((-1.0)*x7871*x7876))+(((-1.0)*r02*x7875)));
evalcond[2]=((((-1.0)*r12*x7876))+(((-1.0)*gconst2*r10*x7875))+((x7870*x7874)));
evalcond[3]=((-1.0)+(((-1.0)*x7874*x7876))+((r10*x7877))+(((-1.0)*r12*x7875)));
evalcond[4]=((((-1.0)*gconst2*r20*x7875))+(((-1.0)*r22*x7876))+(((-1.0)*sj2*x7873))+((cj1*cj2))+((x7870*x7872)));
evalcond[5]=((((-1.0)*cj2*x7873))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst2*r00*x7875))+(((-1.0)*r02*x7876))+((x7870*x7871)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7878=((1.0)*gconst1);
CheckValue<IkReal> x7879 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*r21*x7878)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7879.valid){
continue;
}
CheckValue<IkReal> x7880=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x7878))+(((-1.0)*gconst2*r01)))),-1);
if(!x7880.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7879.value)+(((1.5707963267949)*(x7880.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7881=IKsin(j4);
IkReal x7882=IKcos(j4);
IkReal x7883=(gconst1*r01);
IkReal x7884=(gconst1*r21);
IkReal x7885=((1.0)*sj1);
IkReal x7886=(gconst1*r11);
IkReal x7887=((1.0)*x7882);
IkReal x7888=((1.0)*x7881);
IkReal x7889=(gconst2*x7881);
evalcond[0]=((((-1.0)*r22*x7887))+((r20*x7889))+(((-1.0)*x7884*x7888)));
evalcond[1]=((((-1.0)*r02*x7887))+((r00*x7889))+(((-1.0)*x7883*x7888)));
evalcond[2]=((((-1.0)*gconst2*r10*x7887))+((x7882*x7886))+(((-1.0)*r12*x7888)));
evalcond[3]=((-1.0)+((r10*x7889))+(((-1.0)*r12*x7887))+(((-1.0)*x7886*x7888)));
evalcond[4]=((((-1.0)*gconst2*r20*x7887))+(((-1.0)*r22*x7888))+(((-1.0)*sj2*x7885))+((x7882*x7884))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj2*x7885))+(((-1.0)*r02*x7888))+(((-1.0)*cj1*sj2))+((x7882*x7883))+(((-1.0)*gconst2*r00*x7887)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x7892 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7892.valid){
continue;
}
IkReal x7890=((-1.0)*(x7892.value));
IkReal x7891=x7685;
sj5=gconst1;
cj5=gconst2;
j5=x7890;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x7890;
IkReal gconst1=((-1.0)*r21*x7891);
IkReal gconst2=(r20*x7891);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x7895 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7895.valid){
continue;
}
IkReal x7893=((-1.0)*(x7895.value));
IkReal x7894=x7685;
sj5=gconst1;
cj5=gconst2;
j5=x7893;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x7893;
IkReal gconst1=((-1.0)*r21*x7894);
IkReal gconst2=(r20*x7894);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7898 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7898.valid){
continue;
}
IkReal x7896=((-1.0)*(x7898.value));
IkReal x7897=x7685;
sj5=gconst1;
cj5=gconst2;
j5=x7896;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x7896;
IkReal gconst1=((-1.0)*r21*x7897);
IkReal gconst2=(r20*x7897);
IkReal x7899=r22*r22;
IkReal x7900=(cj1*r02*sj2);
IkReal x7901=(cj2*r02*sj1);
CheckValue<IkReal> x7905=IKPowWithIntegerCheck(((-1.0)+x7899),-1);
if(!x7905.valid){
continue;
}
IkReal x7902=x7905.value;
if((((1.0)+(((-1.0)*x7899)))) < -0.00001)
continue;
IkReal x7903=IKsqrt(((1.0)+(((-1.0)*x7899))));
IkReal x7904=(r22*x7902*x7903);
j4eval[0]=((IKabs((((x7901*x7904))+((x7900*x7904)))))+(IKabs((x7900+x7901))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7906=(gconst1*r01);
IkReal x7907=(cj2*sj1);
IkReal x7908=(gconst2*r00);
IkReal x7909=(cj1*sj2);
CheckValue<IkReal> x7910 = IKatan2WithCheck(IkReal((((r02*x7909))+((r02*x7907)))),IkReal((((x7908*x7909))+(((-1.0)*x7906*x7907))+(((-1.0)*x7906*x7909))+((x7907*x7908)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7910.valid){
continue;
}
CheckValue<IkReal> x7911=IKPowWithIntegerCheck(IKsign(((((-2.0)*x7906*x7908))+(x7908*x7908)+(x7906*x7906)+(r02*r02))),-1);
if(!x7911.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7910.value)+(((1.5707963267949)*(x7911.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7912=IKsin(j4);
IkReal x7913=IKcos(j4);
IkReal x7914=(gconst1*r01);
IkReal x7915=(gconst1*r21);
IkReal x7916=(gconst1*r11);
IkReal x7917=((1.0)*x7913);
IkReal x7918=((1.0)*x7912);
IkReal x7919=(gconst2*x7912);
evalcond[0]=((((-1.0)*x7915*x7918))+(((-1.0)*r22*x7917))+((r20*x7919)));
evalcond[1]=((((-1.0)*r02*x7917))+(((-1.0)*x7914*x7918))+((r00*x7919)));
evalcond[2]=(((x7913*x7916))+(((-1.0)*gconst2*r10*x7917))+(((-1.0)*r12*x7918)));
evalcond[3]=((1.0)+((r10*x7919))+(((-1.0)*r12*x7917))+(((-1.0)*x7916*x7918)));
evalcond[4]=(((x7913*x7914))+((cj2*sj1))+(((-1.0)*r02*x7918))+((cj1*sj2))+(((-1.0)*gconst2*r00*x7917)));
evalcond[5]=(((x7913*x7915))+(((-1.0)*sj1*sj2))+(((-1.0)*r22*x7918))+((cj1*cj2))+(((-1.0)*gconst2*r20*x7917)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7920=(gconst2*r10);
IkReal x7921=(gconst1*r11);
CheckValue<IkReal> x7922 = IKatan2WithCheck(IkReal(((((-1.0)*x7920))+x7921)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7922.valid){
continue;
}
CheckValue<IkReal> x7923=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x7920*x7921))+(x7921*x7921)+(x7920*x7920))),-1);
if(!x7923.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7922.value)+(((1.5707963267949)*(x7923.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7924=IKsin(j4);
IkReal x7925=IKcos(j4);
IkReal x7926=(gconst1*r01);
IkReal x7927=(gconst1*r21);
IkReal x7928=(gconst1*r11);
IkReal x7929=((1.0)*x7925);
IkReal x7930=((1.0)*x7924);
IkReal x7931=(gconst2*x7924);
evalcond[0]=((((-1.0)*x7927*x7930))+((r20*x7931))+(((-1.0)*r22*x7929)));
evalcond[1]=((((-1.0)*r02*x7929))+(((-1.0)*x7926*x7930))+((r00*x7931)));
evalcond[2]=((((-1.0)*gconst2*r10*x7929))+(((-1.0)*r12*x7930))+((x7925*x7928)));
evalcond[3]=((1.0)+((r10*x7931))+(((-1.0)*x7928*x7930))+(((-1.0)*r12*x7929)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x7930))+((x7925*x7926))+(((-1.0)*gconst2*r00*x7929)));
evalcond[5]=((((-1.0)*r22*x7930))+(((-1.0)*sj1*sj2))+((x7925*x7927))+((cj1*cj2))+(((-1.0)*gconst2*r20*x7929)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7932 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7932.valid){
continue;
}
CheckValue<IkReal> x7933=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x7933.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7932.value)+(((1.5707963267949)*(x7933.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7934=IKsin(j4);
IkReal x7935=IKcos(j4);
IkReal x7936=(gconst1*r01);
IkReal x7937=(gconst1*r21);
IkReal x7938=(gconst1*r11);
IkReal x7939=((1.0)*x7935);
IkReal x7940=((1.0)*x7934);
IkReal x7941=(gconst2*x7934);
evalcond[0]=(((r20*x7941))+(((-1.0)*r22*x7939))+(((-1.0)*x7937*x7940)));
evalcond[1]=((((-1.0)*x7936*x7940))+(((-1.0)*r02*x7939))+((r00*x7941)));
evalcond[2]=((((-1.0)*r12*x7940))+(((-1.0)*gconst2*r10*x7939))+((x7935*x7938)));
evalcond[3]=((1.0)+(((-1.0)*x7938*x7940))+(((-1.0)*r12*x7939))+((r10*x7941)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x7940))+(((-1.0)*gconst2*r00*x7939))+((x7935*x7936)));
evalcond[5]=((((-1.0)*r22*x7940))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*gconst2*r20*x7939))+((x7935*x7937)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7942=((-1.0)*py);
CheckValue<IkReal> x7944 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7944.valid){
continue;
}
IkReal x7943=((-1.0)*(x7944.value));
sj5=gconst1;
cj5=gconst2;
j5=x7943;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x7942);
rxp0_2=(py*r00);
rxp1_0=(r21*x7942);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x7943;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7945=((-1.0)*py);
CheckValue<IkReal> x7947 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7947.valid){
continue;
}
IkReal x7946=((-1.0)*(x7947.value));
sj5=gconst1;
cj5=gconst2;
j5=x7946;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x7945);
rxp0_2=(py*r00);
rxp1_0=(r21*x7945);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x7946;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r00*r00));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7948=((-1.0)*py);
CheckValue<IkReal> x7950 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7950.valid){
continue;
}
IkReal x7949=((-1.0)*(x7950.value));
sj5=gconst1;
cj5=gconst2;
j5=x7949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x7948);
rxp0_2=(py*r00);
rxp1_0=(r21*x7948);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x7949;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7953=IKPowWithIntegerCheck((((gconst1*r01))+(((-1.0)*gconst2*r00))),-1);
if(!x7953.valid){
continue;
}
IkReal x7951=x7953.value;
IkReal x7952=(cj0*x7951);
cj4array[0]=(((cj2*sj1*x7952))+((cj1*sj2*x7952)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7954=IKsin(j4);
IkReal x7955=IKcos(j4);
IkReal x7956=(gconst2*x7954);
IkReal x7957=((1.0)*x7955);
IkReal x7958=((1.0)*gconst1*x7954);
evalcond[0]=((-1.0)*r12*x7954);
evalcond[1]=((((-1.0)*r12*x7957))+(((-1.0)*cj0)));
evalcond[2]=(((r20*x7956))+(((-1.0)*r21*x7958)));
evalcond[3]=(((r00*x7956))+(((-1.0)*r01*x7958)));
evalcond[4]=((((-1.0)*gconst2*r20*x7957))+(((-1.0)*sj1*sj2))+((gconst1*r21*x7955))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7960=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x7960.valid){
continue;
}
IkReal x7959=x7960.value;
cj4array[0]=((((-1.0)*cj1*cj2*x7959))+((sj1*sj2*x7959)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7961=IKsin(j4);
IkReal x7962=IKcos(j4);
IkReal x7963=(gconst2*r00);
IkReal x7964=((1.0)*cj0);
IkReal x7965=((1.0)*x7962);
IkReal x7966=((1.0)*gconst1*x7961);
evalcond[0]=((-1.0)*r12*x7961);
evalcond[1]=((((-1.0)*x7964))+(((-1.0)*r12*x7965)));
evalcond[2]=(((gconst2*r20*x7961))+(((-1.0)*r21*x7966)));
evalcond[3]=(((x7961*x7963))+(((-1.0)*r01*x7966)));
evalcond[4]=((((-1.0)*x7963*x7965))+(((-1.0)*cj1*sj2*x7964))+(((-1.0)*cj2*sj1*x7964))+((gconst1*r01*x7962)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7967=IKPowWithIntegerCheck(r12,-1);
if(!x7967.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x7967.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7968=IKsin(j4);
IkReal x7969=IKcos(j4);
IkReal x7970=(gconst2*r00);
IkReal x7971=(gconst2*r20);
IkReal x7972=((1.0)*sj2);
IkReal x7973=(gconst1*x7969);
IkReal x7974=((1.0)*x7969);
IkReal x7975=((1.0)*gconst1*x7968);
evalcond[0]=((-1.0)*r12*x7968);
evalcond[1]=(((x7968*x7971))+(((-1.0)*r21*x7975)));
evalcond[2]=((((-1.0)*r01*x7975))+((x7968*x7970)));
evalcond[3]=((((-1.0)*sj1*x7972))+((cj1*cj2))+(((-1.0)*x7971*x7974))+((r21*x7973)));
evalcond[4]=((((-1.0)*cj0*cj1*x7972))+((r01*x7973))+(((-1.0)*cj0*cj2*sj1))+(((-1.0)*x7970*x7974)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7976=(gconst2*r20);
IkReal x7977=(cj1*cj2);
IkReal x7978=(sj1*sj2);
IkReal x7979=(gconst1*r21);
CheckValue<IkReal> x7980 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x7978))+((r22*x7977)))),IkReal(((((-1.0)*x7977*x7979))+((x7976*x7977))+(((-1.0)*x7976*x7978))+((x7978*x7979)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7980.valid){
continue;
}
CheckValue<IkReal> x7981=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x7979*x7979)+(((-2.0)*x7976*x7979))+(x7976*x7976))),-1);
if(!x7981.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7980.value)+(((1.5707963267949)*(x7981.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7982=IKsin(j4);
IkReal x7983=IKcos(j4);
IkReal x7984=(gconst1*r01);
IkReal x7985=(gconst1*r21);
IkReal x7986=((1.0)*sj1);
IkReal x7987=(gconst1*r11);
IkReal x7988=((1.0)*x7983);
IkReal x7989=((1.0)*x7982);
IkReal x7990=(gconst2*x7982);
IkReal x7991=((1.0)*cj1*sj2);
evalcond[0]=(((r20*x7990))+(((-1.0)*r22*x7988))+(((-1.0)*x7985*x7989)));
evalcond[1]=(sj0+((r00*x7990))+(((-1.0)*x7984*x7989))+(((-1.0)*r02*x7988)));
evalcond[2]=((((-1.0)*x7987*x7989))+((r10*x7990))+(((-1.0)*r12*x7988))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x7989))+(((-1.0)*sj2*x7986))+((x7983*x7985))+((cj1*cj2))+(((-1.0)*gconst2*r20*x7988)));
evalcond[4]=((((-1.0)*cj0*cj2*x7986))+((x7983*x7984))+(((-1.0)*gconst2*r00*x7988))+(((-1.0)*cj0*x7991))+(((-1.0)*r02*x7989)));
evalcond[5]=((((-1.0)*r12*x7989))+((x7983*x7987))+(((-1.0)*sj0*x7991))+(((-1.0)*gconst2*r10*x7988))+(((-1.0)*cj2*sj0*x7986)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7992=((1.0)*gconst1);
CheckValue<IkReal> x7993=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x7992))+(((-1.0)*gconst2*r01)))),-1);
if(!x7993.valid){
continue;
}
CheckValue<IkReal> x7994 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst2*r20))+(((-1.0)*cj0*r21*x7992)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7994.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7993.value)))+(x7994.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7995=IKsin(j4);
IkReal x7996=IKcos(j4);
IkReal x7997=(gconst1*r01);
IkReal x7998=(gconst1*r21);
IkReal x7999=((1.0)*sj1);
IkReal x8000=(gconst1*r11);
IkReal x8001=((1.0)*x7996);
IkReal x8002=((1.0)*x7995);
IkReal x8003=(gconst2*x7995);
IkReal x8004=((1.0)*cj1*sj2);
evalcond[0]=((((-1.0)*x7998*x8002))+((r20*x8003))+(((-1.0)*r22*x8001)));
evalcond[1]=(sj0+((r00*x8003))+(((-1.0)*x7997*x8002))+(((-1.0)*r02*x8001)));
evalcond[2]=((((-1.0)*r12*x8001))+(((-1.0)*x8000*x8002))+(((-1.0)*cj0))+((r10*x8003)));
evalcond[3]=((((-1.0)*sj2*x7999))+((x7996*x7998))+(((-1.0)*gconst2*r20*x8001))+(((-1.0)*r22*x8002))+((cj1*cj2)));
evalcond[4]=((((-1.0)*cj0*x8004))+(((-1.0)*cj0*cj2*x7999))+((x7996*x7997))+(((-1.0)*gconst2*r00*x8001))+(((-1.0)*r02*x8002)));
evalcond[5]=((((-1.0)*r12*x8002))+(((-1.0)*sj0*x8004))+((x7996*x8000))+(((-1.0)*cj2*sj0*x7999))+(((-1.0)*gconst2*r10*x8001)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8005=((1.0)*gconst1);
CheckValue<IkReal> x8006=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r11))+(((-1.0)*r10*x8005)))),-1);
if(!x8006.valid){
continue;
}
CheckValue<IkReal> x8007 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst2*r20*sj0))+(((-1.0)*r21*sj0*x8005)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8007.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8006.value)))+(x8007.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8008=IKsin(j4);
IkReal x8009=IKcos(j4);
IkReal x8010=(gconst1*r01);
IkReal x8011=(gconst1*r21);
IkReal x8012=((1.0)*sj1);
IkReal x8013=(gconst1*r11);
IkReal x8014=((1.0)*x8009);
IkReal x8015=((1.0)*x8008);
IkReal x8016=(gconst2*x8008);
IkReal x8017=((1.0)*cj1*sj2);
evalcond[0]=((((-1.0)*x8011*x8015))+(((-1.0)*r22*x8014))+((r20*x8016)));
evalcond[1]=((((-1.0)*r02*x8014))+sj0+(((-1.0)*x8010*x8015))+((r00*x8016)));
evalcond[2]=(((r10*x8016))+(((-1.0)*r12*x8014))+(((-1.0)*cj0))+(((-1.0)*x8013*x8015)));
evalcond[3]=((((-1.0)*r22*x8015))+((x8009*x8011))+((cj1*cj2))+(((-1.0)*sj2*x8012))+(((-1.0)*gconst2*r20*x8014)));
evalcond[4]=((((-1.0)*r02*x8015))+(((-1.0)*gconst2*r00*x8014))+(((-1.0)*cj0*cj2*x8012))+(((-1.0)*cj0*x8017))+((x8009*x8010)));
evalcond[5]=((((-1.0)*cj2*sj0*x8012))+(((-1.0)*gconst2*r10*x8014))+((x8009*x8013))+(((-1.0)*sj0*x8017))+(((-1.0)*r12*x8015)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8020 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8020.valid){
continue;
}
IkReal x8018=((-1.0)*(x8020.value));
IkReal x8019=x7685;
sj5=gconst1;
cj5=gconst2;
j5=x8018;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x8018;
IkReal gconst1=((-1.0)*r21*x8019);
IkReal gconst2=(r20*x8019);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8023 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8023.valid){
continue;
}
IkReal x8021=((-1.0)*(x8023.value));
IkReal x8022=x7685;
sj5=gconst1;
cj5=gconst2;
j5=x8021;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x8021;
IkReal gconst1=((-1.0)*r21*x8022);
IkReal gconst2=(r20*x8022);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x8026 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8026.valid){
continue;
}
IkReal x8024=((-1.0)*(x8026.value));
IkReal x8025=x7685;
sj5=gconst1;
cj5=gconst2;
j5=x8024;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x8024;
IkReal gconst1=((-1.0)*r21*x8025);
IkReal gconst2=(r20*x8025);
IkReal x8027=((1.0)*(r22*r22));
CheckValue<IkReal> x8031=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8027))),-1);
if(!x8031.valid){
continue;
}
IkReal x8028=x8031.value;
IkReal x8029=((1.0)*x8028);
IkReal x8030=((((-2.0)*x8028*(r20*r20)*(r21*r21)))+(((-1.0)*x8029*(r20*r20*r20*r20)))+(((-1.0)*x8029*(r21*r21*r21*r21)))+(((-1.0)*x8027)));
j4eval[0]=x8030;
j4eval[1]=IKsign(x8030);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8034 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8034.valid){
continue;
}
IkReal x8032=((-1.0)*(x8034.value));
IkReal x8033=x7685;
sj5=gconst1;
cj5=gconst2;
j5=x8032;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8032;
IkReal gconst1=((-1.0)*r21*x8033);
IkReal gconst2=(r20*x8033);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x8037 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8037.valid){
continue;
}
IkReal x8035=((-1.0)*(x8037.value));
IkReal x8036=x7685;
sj5=gconst1;
cj5=gconst2;
j5=x8035;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8035;
IkReal gconst1=((-1.0)*r21*x8036);
IkReal gconst2=(r20*x8036);
IkReal x8038=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8042=IKPowWithIntegerCheck(x8038,-1);
if(!x8042.valid){
continue;
}
IkReal x8039=x8042.value;
IkReal x8040=((1.0)*x8039);
IkReal x8041=((((-1.0)*x8040*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x8039))+(((-1.0)*(r02*r02)))+(((-1.0)*x8040*(r00*r00)*(r20*r20))));
j4eval[0]=x8041;
j4eval[1]=IKsign(x8041);
j4eval[2]=r02;
j4eval[3]=x8038;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8045 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8045.valid){
continue;
}
IkReal x8043=((-1.0)*(x8045.value));
IkReal x8044=x7685;
sj5=gconst1;
cj5=gconst2;
j5=x8043;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8043;
IkReal gconst1=((-1.0)*r21*x8044);
IkReal gconst2=(r20*x8044);
IkReal x8046=r22*r22;
IkReal x8047=(r02*sj1*sj2);
IkReal x8048=(cj1*cj2*r02);
CheckValue<IkReal> x8052=IKPowWithIntegerCheck(((-1.0)+x8046),-1);
if(!x8052.valid){
continue;
}
IkReal x8049=x8052.value;
if((((1.0)+(((-1.0)*x8046)))) < -0.00001)
continue;
IkReal x8050=IKsqrt(((1.0)+(((-1.0)*x8046))));
IkReal x8051=(r22*x8049*x8050);
j4eval[0]=((IKabs(((((-1.0)*x8047*x8051))+((x8048*x8051)))))+(IKabs(((((-1.0)*x8048))+x8047))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8053=(sj1*sj2);
IkReal x8054=(gconst2*r00);
IkReal x8055=(gconst1*r01);
IkReal x8056=(cj1*cj2);
CheckValue<IkReal> x8057 = IKatan2WithCheck(IkReal((((x8054*x8056))+(((-1.0)*x8055*x8056))+((x8053*x8055))+(((-1.0)*x8053*x8054)))),IkReal((((r02*x8053))+(((-1.0)*r02*x8056)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8057.valid){
continue;
}
CheckValue<IkReal> x8058=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*gconst2*r11)))),-1);
if(!x8058.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8057.value)+(((1.5707963267949)*(x8058.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8059=IKcos(j4);
IkReal x8060=IKsin(j4);
IkReal x8061=(gconst1*r01);
IkReal x8062=((1.0)*sj1);
IkReal x8063=(gconst1*r21);
IkReal x8064=(gconst1*r11);
IkReal x8065=((1.0)*x8059);
IkReal x8066=(gconst2*x8059);
IkReal x8067=((1.0)*x8060);
IkReal x8068=(gconst2*x8060);
evalcond[0]=(((r00*x8066))+((r02*x8060))+(((-1.0)*x8061*x8065)));
evalcond[1]=(((r20*x8068))+(((-1.0)*x8063*x8067))+(((-1.0)*r22*x8065)));
evalcond[2]=((((-1.0)*x8064*x8067))+((r10*x8068))+(((-1.0)*r12*x8065)));
evalcond[3]=((1.0)+((r00*x8068))+(((-1.0)*x8061*x8067))+(((-1.0)*r02*x8065)));
evalcond[4]=(((r22*x8060))+((r20*x8066))+(((-1.0)*sj2*x8062))+((cj1*cj2))+(((-1.0)*x8063*x8065)));
evalcond[5]=((((-1.0)*x8064*x8065))+((r10*x8066))+(((-1.0)*cj2*x8062))+(((-1.0)*cj1*sj2))+((r12*x8060)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8069=(gconst2*r00);
IkReal x8070=(gconst1*r01);
CheckValue<IkReal> x8071=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8070*x8070)))+(((2.0)*x8069*x8070))+(((-1.0)*(r02*r02)))+(((-1.0)*(x8069*x8069))))),-1);
if(!x8071.valid){
continue;
}
CheckValue<IkReal> x8072 = IKatan2WithCheck(IkReal(((((-1.0)*x8070))+x8069)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x8072.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8071.value)))+(x8072.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8073=IKcos(j4);
IkReal x8074=IKsin(j4);
IkReal x8075=(gconst1*r01);
IkReal x8076=((1.0)*sj1);
IkReal x8077=(gconst1*r21);
IkReal x8078=(gconst1*r11);
IkReal x8079=((1.0)*x8073);
IkReal x8080=(gconst2*x8073);
IkReal x8081=((1.0)*x8074);
IkReal x8082=(gconst2*x8074);
evalcond[0]=(((r02*x8074))+((r00*x8080))+(((-1.0)*x8075*x8079)));
evalcond[1]=((((-1.0)*x8077*x8081))+(((-1.0)*r22*x8079))+((r20*x8082)));
evalcond[2]=(((r10*x8082))+(((-1.0)*x8078*x8081))+(((-1.0)*r12*x8079)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8079))+((r00*x8082))+(((-1.0)*x8075*x8081)));
evalcond[4]=((((-1.0)*sj2*x8076))+((r22*x8074))+(((-1.0)*x8077*x8079))+((cj1*cj2))+((r20*x8080)));
evalcond[5]=(((r10*x8080))+(((-1.0)*cj2*x8076))+(((-1.0)*cj1*sj2))+(((-1.0)*x8078*x8079))+((r12*x8074)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8083=((1.0)*gconst1);
CheckValue<IkReal> x8084 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*r21*x8083)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8084.valid){
continue;
}
CheckValue<IkReal> x8085=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r11))+(((-1.0)*r10*x8083)))),-1);
if(!x8085.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8084.value)+(((1.5707963267949)*(x8085.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8086=IKcos(j4);
IkReal x8087=IKsin(j4);
IkReal x8088=(gconst1*r01);
IkReal x8089=((1.0)*sj1);
IkReal x8090=(gconst1*r21);
IkReal x8091=(gconst1*r11);
IkReal x8092=((1.0)*x8086);
IkReal x8093=(gconst2*x8086);
IkReal x8094=((1.0)*x8087);
IkReal x8095=(gconst2*x8087);
evalcond[0]=(((r00*x8093))+(((-1.0)*x8088*x8092))+((r02*x8087)));
evalcond[1]=((((-1.0)*x8090*x8094))+(((-1.0)*r22*x8092))+((r20*x8095)));
evalcond[2]=(((r10*x8095))+(((-1.0)*x8091*x8094))+(((-1.0)*r12*x8092)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8092))+((r00*x8095))+(((-1.0)*x8088*x8094)));
evalcond[4]=((((-1.0)*sj2*x8089))+((r22*x8087))+(((-1.0)*x8090*x8092))+((cj1*cj2))+((r20*x8093)));
evalcond[5]=((((-1.0)*cj2*x8089))+((r10*x8093))+(((-1.0)*cj1*sj2))+(((-1.0)*x8091*x8092))+((r12*x8087)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8098 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8098.valid){
continue;
}
IkReal x8096=((-1.0)*(x8098.value));
IkReal x8097=x7685;
sj5=gconst1;
cj5=gconst2;
j5=x8096;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8096;
IkReal gconst1=((-1.0)*r21*x8097);
IkReal gconst2=(r20*x8097);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x8101 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8101.valid){
continue;
}
IkReal x8099=((-1.0)*(x8101.value));
IkReal x8100=x7685;
sj5=gconst1;
cj5=gconst2;
j5=x8099;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8099;
IkReal gconst1=((-1.0)*r21*x8100);
IkReal gconst2=(r20*x8100);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8104 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8104.valid){
continue;
}
IkReal x8102=((-1.0)*(x8104.value));
IkReal x8103=x7685;
sj5=gconst1;
cj5=gconst2;
j5=x8102;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8102;
IkReal gconst1=((-1.0)*r21*x8103);
IkReal gconst2=(r20*x8103);
IkReal x8105=r22*r22;
IkReal x8106=(r02*sj1*sj2);
IkReal x8107=(cj1*cj2*r02);
CheckValue<IkReal> x8111=IKPowWithIntegerCheck(((-1.0)+x8105),-1);
if(!x8111.valid){
continue;
}
IkReal x8108=x8111.value;
if((((1.0)+(((-1.0)*x8105)))) < -0.00001)
continue;
IkReal x8109=IKsqrt(((1.0)+(((-1.0)*x8105))));
IkReal x8110=(r22*x8108*x8109);
j4eval[0]=((IKabs(((((-1.0)*x8107))+x8106)))+(IKabs(((((-1.0)*x8106*x8110))+((x8107*x8110))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8112=(sj1*sj2);
IkReal x8113=(gconst2*r00);
IkReal x8114=(gconst1*r01);
IkReal x8115=(cj1*cj2);
CheckValue<IkReal> x8116=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*gconst2*r11)))),-1);
if(!x8116.valid){
continue;
}
CheckValue<IkReal> x8117 = IKatan2WithCheck(IkReal((((x8112*x8114))+(((-1.0)*x8114*x8115))+((x8113*x8115))+(((-1.0)*x8112*x8113)))),IkReal((((r02*x8112))+(((-1.0)*r02*x8115)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8117.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8116.value)))+(x8117.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8118=IKcos(j4);
IkReal x8119=IKsin(j4);
IkReal x8120=(gconst1*r01);
IkReal x8121=(gconst1*r21);
IkReal x8122=(gconst1*r11);
IkReal x8123=((1.0)*x8118);
IkReal x8124=(gconst2*x8118);
IkReal x8125=((1.0)*x8119);
IkReal x8126=(gconst2*x8119);
evalcond[0]=(((r02*x8119))+((r00*x8124))+(((-1.0)*x8120*x8123)));
evalcond[1]=((((-1.0)*x8121*x8125))+((r20*x8126))+(((-1.0)*r22*x8123)));
evalcond[2]=((((-1.0)*x8122*x8125))+(((-1.0)*r12*x8123))+((r10*x8126)));
evalcond[3]=((-1.0)+((r00*x8126))+(((-1.0)*r02*x8123))+(((-1.0)*x8120*x8125)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x8122*x8123))+((cj1*sj2))+((r12*x8119))+((r10*x8124)));
evalcond[5]=((((-1.0)*x8121*x8123))+(((-1.0)*sj1*sj2))+((r20*x8124))+((cj1*cj2))+((r22*x8119)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8127=(gconst1*r01);
IkReal x8128=(gconst2*r00);
CheckValue<IkReal> x8129=IKPowWithIntegerCheck(IKsign(((x8127*x8127)+(r02*r02)+(((-2.0)*x8127*x8128))+(x8128*x8128))),-1);
if(!x8129.valid){
continue;
}
CheckValue<IkReal> x8130 = IKatan2WithCheck(IkReal((x8128+(((-1.0)*x8127)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x8130.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8129.value)))+(x8130.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8131=IKcos(j4);
IkReal x8132=IKsin(j4);
IkReal x8133=(gconst1*r01);
IkReal x8134=(gconst1*r21);
IkReal x8135=(gconst1*r11);
IkReal x8136=((1.0)*x8131);
IkReal x8137=(gconst2*x8131);
IkReal x8138=((1.0)*x8132);
IkReal x8139=(gconst2*x8132);
evalcond[0]=(((r00*x8137))+((r02*x8132))+(((-1.0)*x8133*x8136)));
evalcond[1]=((((-1.0)*x8134*x8138))+(((-1.0)*r22*x8136))+((r20*x8139)));
evalcond[2]=((((-1.0)*r12*x8136))+(((-1.0)*x8135*x8138))+((r10*x8139)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8136))+((r00*x8139))+(((-1.0)*x8133*x8138)));
evalcond[4]=(((cj2*sj1))+((r12*x8132))+((cj1*sj2))+(((-1.0)*x8135*x8136))+((r10*x8137)));
evalcond[5]=(((r22*x8132))+(((-1.0)*x8134*x8136))+(((-1.0)*sj1*sj2))+((r20*x8137))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8140 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8140.valid){
continue;
}
CheckValue<IkReal> x8141=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8141.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8140.value)+(((1.5707963267949)*(x8141.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8142=IKcos(j4);
IkReal x8143=IKsin(j4);
IkReal x8144=(gconst1*r01);
IkReal x8145=(gconst1*r21);
IkReal x8146=(gconst1*r11);
IkReal x8147=((1.0)*x8142);
IkReal x8148=(gconst2*x8142);
IkReal x8149=((1.0)*x8143);
IkReal x8150=(gconst2*x8143);
evalcond[0]=((((-1.0)*x8144*x8147))+((r00*x8148))+((r02*x8143)));
evalcond[1]=(((r20*x8150))+(((-1.0)*x8145*x8149))+(((-1.0)*r22*x8147)));
evalcond[2]=(((r10*x8150))+(((-1.0)*x8146*x8149))+(((-1.0)*r12*x8147)));
evalcond[3]=((-1.0)+(((-1.0)*x8144*x8149))+((r00*x8150))+(((-1.0)*r02*x8147)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r10*x8148))+(((-1.0)*x8146*x8147))+((r12*x8143)));
evalcond[5]=(((r20*x8148))+(((-1.0)*sj1*sj2))+((r22*x8143))+(((-1.0)*x8145*x8147))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8153 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8153.valid){
continue;
}
IkReal x8151=((-1.0)*(x8153.value));
IkReal x8152=x7685;
sj5=gconst1;
cj5=gconst2;
j5=x8151;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8151;
IkReal gconst1=((-1.0)*r21*x8152);
IkReal gconst2=(r20*x8152);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x8156 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8156.valid){
continue;
}
IkReal x8154=((-1.0)*(x8156.value));
IkReal x8155=x7685;
sj5=gconst1;
cj5=gconst2;
j5=x8154;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8154;
IkReal gconst1=((-1.0)*r21*x8155);
IkReal gconst2=(r20*x8155);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8159 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8159.valid){
continue;
}
IkReal x8157=((-1.0)*(x8159.value));
IkReal x8158=x7685;
sj5=gconst1;
cj5=gconst2;
j5=x8157;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8157;
IkReal gconst1=((-1.0)*r21*x8158);
IkReal gconst2=(r20*x8158);
IkReal x8160=r22*r22;
IkReal x8161=(r12*sj1*sj2);
IkReal x8162=(cj1*cj2*r12);
CheckValue<IkReal> x8166=IKPowWithIntegerCheck(((-1.0)+x8160),-1);
if(!x8166.valid){
continue;
}
IkReal x8163=x8166.value;
if((((1.0)+(((-1.0)*x8160)))) < -0.00001)
continue;
IkReal x8164=IKsqrt(((1.0)+(((-1.0)*x8160))));
IkReal x8165=(r22*x8163*x8164);
j4eval[0]=((IKabs((((x8162*x8165))+(((-1.0)*x8161*x8165)))))+(IKabs(((((-1.0)*x8162))+x8161))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8167=(sj1*sj2);
IkReal x8168=(gconst1*r11);
IkReal x8169=(gconst2*r10);
IkReal x8170=((1.0)*cj1*cj2);
CheckValue<IkReal> x8171=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8171.valid){
continue;
}
CheckValue<IkReal> x8172 = IKatan2WithCheck(IkReal((((x8167*x8168))+(((-1.0)*x8168*x8170))+((cj1*cj2*x8169))+(((-1.0)*x8167*x8169)))),IkReal(((((-1.0)*r12*x8170))+((r12*x8167)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8172.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8171.value)))+(x8172.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8173=IKcos(j4);
IkReal x8174=IKsin(j4);
IkReal x8175=(gconst1*r01);
IkReal x8176=((1.0)*sj1);
IkReal x8177=(gconst1*r21);
IkReal x8178=(gconst1*r11);
IkReal x8179=((1.0)*x8173);
IkReal x8180=(gconst2*x8173);
IkReal x8181=((1.0)*x8174);
IkReal x8182=(gconst2*x8174);
evalcond[0]=(((r10*x8180))+(((-1.0)*x8178*x8179))+((r12*x8174)));
evalcond[1]=((((-1.0)*r22*x8179))+(((-1.0)*x8177*x8181))+((r20*x8182)));
evalcond[2]=(((r00*x8182))+(((-1.0)*x8175*x8181))+(((-1.0)*r02*x8179)));
evalcond[3]=((-1.0)+((r10*x8182))+(((-1.0)*r12*x8179))+(((-1.0)*x8178*x8181)));
evalcond[4]=((((-1.0)*x8177*x8179))+((cj1*cj2))+(((-1.0)*sj2*x8176))+((r22*x8174))+((r20*x8180)));
evalcond[5]=(((r02*x8174))+(((-1.0)*x8175*x8179))+((r00*x8180))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x8176)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8183=(gconst1*r11);
IkReal x8184=(gconst2*r10);
CheckValue<IkReal> x8185=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x8183*x8184))+(x8183*x8183)+(x8184*x8184))),-1);
if(!x8185.valid){
continue;
}
CheckValue<IkReal> x8186 = IKatan2WithCheck(IkReal(((((-1.0)*x8183))+x8184)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8186.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8185.value)))+(x8186.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8187=IKcos(j4);
IkReal x8188=IKsin(j4);
IkReal x8189=(gconst1*r01);
IkReal x8190=((1.0)*sj1);
IkReal x8191=(gconst1*r21);
IkReal x8192=(gconst1*r11);
IkReal x8193=((1.0)*x8187);
IkReal x8194=(gconst2*x8187);
IkReal x8195=((1.0)*x8188);
IkReal x8196=(gconst2*x8188);
evalcond[0]=(((r12*x8188))+((r10*x8194))+(((-1.0)*x8192*x8193)));
evalcond[1]=(((r20*x8196))+(((-1.0)*r22*x8193))+(((-1.0)*x8191*x8195)));
evalcond[2]=((((-1.0)*r02*x8193))+((r00*x8196))+(((-1.0)*x8189*x8195)));
evalcond[3]=((-1.0)+((r10*x8196))+(((-1.0)*x8192*x8195))+(((-1.0)*r12*x8193)));
evalcond[4]=(((r20*x8194))+((r22*x8188))+(((-1.0)*sj2*x8190))+((cj1*cj2))+(((-1.0)*x8191*x8193)));
evalcond[5]=(((r00*x8194))+(((-1.0)*cj2*x8190))+(((-1.0)*cj1*sj2))+((r02*x8188))+(((-1.0)*x8189*x8193)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8197=((1.0)*gconst1);
CheckValue<IkReal> x8198=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x8197))+(((-1.0)*gconst2*r01)))),-1);
if(!x8198.valid){
continue;
}
CheckValue<IkReal> x8199 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*r21*x8197)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8199.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8198.value)))+(x8199.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8200=IKcos(j4);
IkReal x8201=IKsin(j4);
IkReal x8202=(gconst1*r01);
IkReal x8203=((1.0)*sj1);
IkReal x8204=(gconst1*r21);
IkReal x8205=(gconst1*r11);
IkReal x8206=((1.0)*x8200);
IkReal x8207=(gconst2*x8200);
IkReal x8208=((1.0)*x8201);
IkReal x8209=(gconst2*x8201);
evalcond[0]=((((-1.0)*x8205*x8206))+((r12*x8201))+((r10*x8207)));
evalcond[1]=((((-1.0)*x8204*x8208))+(((-1.0)*r22*x8206))+((r20*x8209)));
evalcond[2]=((((-1.0)*x8202*x8208))+(((-1.0)*r02*x8206))+((r00*x8209)));
evalcond[3]=((-1.0)+(((-1.0)*x8205*x8208))+(((-1.0)*r12*x8206))+((r10*x8209)));
evalcond[4]=((((-1.0)*sj2*x8203))+((r22*x8201))+(((-1.0)*x8204*x8206))+((cj1*cj2))+((r20*x8207)));
evalcond[5]=(((r02*x8201))+(((-1.0)*x8202*x8206))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x8203))+((r00*x8207)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8212 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8212.valid){
continue;
}
IkReal x8210=((-1.0)*(x8212.value));
IkReal x8211=x7685;
sj5=gconst1;
cj5=gconst2;
j5=x8210;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8210;
IkReal gconst1=((-1.0)*r21*x8211);
IkReal gconst2=(r20*x8211);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x8215 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8215.valid){
continue;
}
IkReal x8213=((-1.0)*(x8215.value));
IkReal x8214=x7685;
sj5=gconst1;
cj5=gconst2;
j5=x8213;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8213;
IkReal gconst1=((-1.0)*r21*x8214);
IkReal gconst2=(r20*x8214);
IkReal x8216=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8220=IKPowWithIntegerCheck(x8216,-1);
if(!x8220.valid){
continue;
}
IkReal x8217=x8220.value;
IkReal x8218=((1.0)*x8217);
IkReal x8219=((((-1.0)*x8218*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x8217))+(((-1.0)*x8218*(r11*r11)*(r21*r21))));
j4eval[0]=x8219;
j4eval[1]=IKsign(x8219);
j4eval[2]=r12;
j4eval[3]=x8216;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8223 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8223.valid){
continue;
}
IkReal x8221=((-1.0)*(x8223.value));
IkReal x8222=x7685;
sj5=gconst1;
cj5=gconst2;
j5=x8221;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8221;
IkReal gconst1=((-1.0)*r21*x8222);
IkReal gconst2=(r20*x8222);
IkReal x8224=r22*r22;
IkReal x8225=(r12*sj1*sj2);
IkReal x8226=(cj1*cj2*r12);
CheckValue<IkReal> x8230=IKPowWithIntegerCheck(((-1.0)+x8224),-1);
if(!x8230.valid){
continue;
}
IkReal x8227=x8230.value;
if((((1.0)+(((-1.0)*x8224)))) < -0.00001)
continue;
IkReal x8228=IKsqrt(((1.0)+(((-1.0)*x8224))));
IkReal x8229=(r22*x8227*x8228);
j4eval[0]=((IKabs(((((-1.0)*x8226))+x8225)))+(IKabs(((((-1.0)*x8225*x8229))+((x8226*x8229))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8231=(sj1*sj2);
IkReal x8232=(gconst1*r11);
IkReal x8233=(gconst2*r10);
IkReal x8234=((1.0)*cj1*cj2);
CheckValue<IkReal> x8235 = IKatan2WithCheck(IkReal((((x8231*x8232))+(((-1.0)*x8231*x8233))+((cj1*cj2*x8233))+(((-1.0)*x8232*x8234)))),IkReal((((r12*x8231))+(((-1.0)*r12*x8234)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8235.valid){
continue;
}
CheckValue<IkReal> x8236=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8236.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8235.value)+(((1.5707963267949)*(x8236.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8237=IKcos(j4);
IkReal x8238=IKsin(j4);
IkReal x8239=(gconst1*r01);
IkReal x8240=(gconst1*r21);
IkReal x8241=(gconst1*r11);
IkReal x8242=((1.0)*x8237);
IkReal x8243=(gconst2*x8237);
IkReal x8244=((1.0)*x8238);
IkReal x8245=(gconst2*x8238);
evalcond[0]=(((r12*x8238))+((r10*x8243))+(((-1.0)*x8241*x8242)));
evalcond[1]=(((r20*x8245))+(((-1.0)*x8240*x8244))+(((-1.0)*r22*x8242)));
evalcond[2]=((((-1.0)*x8239*x8244))+(((-1.0)*r02*x8242))+((r00*x8245)));
evalcond[3]=((1.0)+((r10*x8245))+(((-1.0)*x8241*x8244))+(((-1.0)*r12*x8242)));
evalcond[4]=(((cj2*sj1))+((r02*x8238))+((cj1*sj2))+(((-1.0)*x8239*x8242))+((r00*x8243)));
evalcond[5]=(((r20*x8243))+(((-1.0)*x8240*x8242))+(((-1.0)*sj1*sj2))+((r22*x8238))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8246=(gconst1*r11);
IkReal x8247=(gconst2*r10);
CheckValue<IkReal> x8248=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8247*x8247)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x8246*x8246)))+(((2.0)*x8246*x8247)))),-1);
if(!x8248.valid){
continue;
}
CheckValue<IkReal> x8249 = IKatan2WithCheck(IkReal(((((-1.0)*x8246))+x8247)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8249.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8248.value)))+(x8249.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8250=IKcos(j4);
IkReal x8251=IKsin(j4);
IkReal x8252=(gconst1*r01);
IkReal x8253=(gconst1*r21);
IkReal x8254=(gconst1*r11);
IkReal x8255=((1.0)*x8250);
IkReal x8256=(gconst2*x8250);
IkReal x8257=((1.0)*x8251);
IkReal x8258=(gconst2*x8251);
evalcond[0]=(((r10*x8256))+((r12*x8251))+(((-1.0)*x8254*x8255)));
evalcond[1]=((((-1.0)*r22*x8255))+((r20*x8258))+(((-1.0)*x8253*x8257)));
evalcond[2]=(((r00*x8258))+(((-1.0)*x8252*x8257))+(((-1.0)*r02*x8255)));
evalcond[3]=((1.0)+((r10*x8258))+(((-1.0)*r12*x8255))+(((-1.0)*x8254*x8257)));
evalcond[4]=(((r00*x8256))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8252*x8255))+((r02*x8251)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r20*x8256))+((cj1*cj2))+(((-1.0)*x8253*x8255))+((r22*x8251)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8259 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8259.valid){
continue;
}
CheckValue<IkReal> x8260=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8260.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8259.value)+(((1.5707963267949)*(x8260.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8261=IKcos(j4);
IkReal x8262=IKsin(j4);
IkReal x8263=(gconst1*r01);
IkReal x8264=(gconst1*r21);
IkReal x8265=(gconst1*r11);
IkReal x8266=((1.0)*x8261);
IkReal x8267=(gconst2*x8261);
IkReal x8268=((1.0)*x8262);
IkReal x8269=(gconst2*x8262);
evalcond[0]=((((-1.0)*x8265*x8266))+((r12*x8262))+((r10*x8267)));
evalcond[1]=(((r20*x8269))+(((-1.0)*x8264*x8268))+(((-1.0)*r22*x8266)));
evalcond[2]=((((-1.0)*x8263*x8268))+(((-1.0)*r02*x8266))+((r00*x8269)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8266))+(((-1.0)*x8265*x8268))+((r10*x8269)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x8263*x8266))+((cj1*sj2))+((r02*x8262))+((r00*x8267)));
evalcond[5]=(((r20*x8267))+(((-1.0)*sj1*sj2))+(((-1.0)*x8264*x8266))+((r22*x8262))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8270=((-1.0)*py);
CheckValue<IkReal> x8272 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8272.valid){
continue;
}
IkReal x8271=((-1.0)*(x8272.value));
sj5=gconst1;
cj5=gconst2;
j5=x8271;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8270);
rxp0_2=(py*r00);
rxp1_0=(r21*x8270);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8271;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8273=((-1.0)*py);
CheckValue<IkReal> x8275 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8275.valid){
continue;
}
IkReal x8274=((-1.0)*(x8275.value));
sj5=gconst1;
cj5=gconst2;
j5=x8274;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8273);
rxp0_2=(py*r00);
rxp1_0=(r21*x8273);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8274;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
j4eval[0]=((1.0)+(((-1.0)*(r00*r00)))+(r21*r21));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8276=((-1.0)*py);
CheckValue<IkReal> x8278 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8278.valid){
continue;
}
IkReal x8277=((-1.0)*(x8278.value));
sj5=gconst1;
cj5=gconst2;
j5=x8277;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8276);
rxp0_2=(py*r00);
rxp1_0=(r21*x8276);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8277;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
j4eval[0]=(((r00*r20))+((r01*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8281=IKPowWithIntegerCheck(((((-1.0)*gconst1*r01))+((gconst2*r00))),-1);
if(!x8281.valid){
continue;
}
IkReal x8279=x8281.value;
IkReal x8280=(cj0*x8279);
cj4array[0]=(((cj2*sj1*x8280))+((cj1*sj2*x8280)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8282=IKsin(j4);
IkReal x8283=IKcos(j4);
IkReal x8284=(gconst2*x8282);
IkReal x8285=((1.0)*x8283);
IkReal x8286=((1.0)*gconst1*x8282);
evalcond[0]=(r12*x8282);
evalcond[1]=((((-1.0)*r12*x8285))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r21*x8286))+((r20*x8284)));
evalcond[3]=(((r00*x8284))+(((-1.0)*r01*x8286)));
evalcond[4]=((((-1.0)*sj1*sj2))+((gconst2*r20*x8283))+(((-1.0)*gconst1*r21*x8285))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8288=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x8288.valid){
continue;
}
IkReal x8287=x8288.value;
cj4array[0]=((((-1.0)*cj1*cj2*x8287))+((sj1*sj2*x8287)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8289=IKsin(j4);
IkReal x8290=IKcos(j4);
IkReal x8291=(gconst2*r00);
IkReal x8292=((1.0)*cj0);
IkReal x8293=((1.0)*gconst1*r01);
evalcond[0]=(r12*x8289);
evalcond[1]=((((-1.0)*x8292))+(((-1.0)*r12*x8290)));
evalcond[2]=(((gconst2*r20*x8289))+(((-1.0)*gconst1*r21*x8289)));
evalcond[3]=(((x8289*x8291))+(((-1.0)*x8289*x8293)));
evalcond[4]=((((-1.0)*cj1*sj2*x8292))+(((-1.0)*x8290*x8293))+((x8290*x8291))+(((-1.0)*cj2*sj1*x8292)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8294=IKPowWithIntegerCheck(r12,-1);
if(!x8294.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x8294.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8295=IKsin(j4);
IkReal x8296=IKcos(j4);
IkReal x8297=(gconst2*r00);
IkReal x8298=((1.0)*sj1);
IkReal x8299=(gconst2*r20);
IkReal x8300=((1.0)*gconst1*x8295);
IkReal x8301=((1.0)*gconst1*x8296);
evalcond[0]=(r12*x8295);
evalcond[1]=((((-1.0)*r21*x8300))+((x8295*x8299)));
evalcond[2]=((((-1.0)*r01*x8300))+((x8295*x8297)));
evalcond[3]=((((-1.0)*sj2*x8298))+((x8296*x8299))+(((-1.0)*r21*x8301))+((cj1*cj2)));
evalcond[4]=(((x8296*x8297))+(((-1.0)*r01*x8301))+(((-1.0)*cj0*cj1*sj2))+(((-1.0)*cj0*cj2*x8298)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8302=(gconst2*r20);
IkReal x8303=(cj1*cj2);
IkReal x8304=(sj1*sj2);
IkReal x8305=(gconst1*r21);
CheckValue<IkReal> x8306 = IKatan2WithCheck(IkReal((((r22*x8303))+(((-1.0)*r22*x8304)))),IkReal(((((-1.0)*x8303*x8305))+(((-1.0)*x8302*x8304))+((x8304*x8305))+((x8302*x8303)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8306.valid){
continue;
}
CheckValue<IkReal> x8307=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8302*x8302)))+(((-1.0)*(x8305*x8305)))+(((2.0)*x8302*x8305))+(((-1.0)*(r22*r22))))),-1);
if(!x8307.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8306.value)+(((1.5707963267949)*(x8307.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8308=IKsin(j4);
IkReal x8309=IKcos(j4);
IkReal x8310=(gconst1*r01);
IkReal x8311=((1.0)*sj1);
IkReal x8312=(gconst1*r11);
IkReal x8313=(gconst1*r21);
IkReal x8314=((1.0)*x8309);
IkReal x8315=(gconst2*x8309);
IkReal x8316=((1.0)*x8308);
IkReal x8317=(gconst2*x8308);
IkReal x8318=((1.0)*cj1*sj2);
evalcond[0]=((((-1.0)*x8313*x8316))+((r20*x8317))+(((-1.0)*r22*x8314)));
evalcond[1]=(sj0+(((-1.0)*x8310*x8316))+((r00*x8317))+(((-1.0)*r02*x8314)));
evalcond[2]=((((-1.0)*x8312*x8316))+((r10*x8317))+(((-1.0)*r12*x8314))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x8313*x8314))+((r22*x8308))+((r20*x8315))+(((-1.0)*sj2*x8311))+((cj1*cj2)));
evalcond[4]=(((r02*x8308))+(((-1.0)*x8310*x8314))+((r00*x8315))+(((-1.0)*cj0*x8318))+(((-1.0)*cj0*cj2*x8311)));
evalcond[5]=((((-1.0)*x8312*x8314))+(((-1.0)*sj0*x8318))+((r10*x8315))+((r12*x8308))+(((-1.0)*cj2*sj0*x8311)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8319=((1.0)*gconst1);
CheckValue<IkReal> x8320=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x8319)))),-1);
if(!x8320.valid){
continue;
}
CheckValue<IkReal> x8321 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst2*r20))+(((-1.0)*cj0*r21*x8319)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8321.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8320.value)))+(x8321.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8322=IKsin(j4);
IkReal x8323=IKcos(j4);
IkReal x8324=(gconst1*r01);
IkReal x8325=((1.0)*sj1);
IkReal x8326=(gconst1*r11);
IkReal x8327=(gconst1*r21);
IkReal x8328=((1.0)*x8323);
IkReal x8329=(gconst2*x8323);
IkReal x8330=((1.0)*x8322);
IkReal x8331=(gconst2*x8322);
IkReal x8332=((1.0)*cj1*sj2);
evalcond[0]=((((-1.0)*x8327*x8330))+(((-1.0)*r22*x8328))+((r20*x8331)));
evalcond[1]=(sj0+((r00*x8331))+(((-1.0)*x8324*x8330))+(((-1.0)*r02*x8328)));
evalcond[2]=((((-1.0)*x8326*x8330))+((r10*x8331))+(((-1.0)*r12*x8328))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x8322))+((cj1*cj2))+(((-1.0)*x8327*x8328))+((r20*x8329))+(((-1.0)*sj2*x8325)));
evalcond[4]=((((-1.0)*cj0*cj2*x8325))+((r02*x8322))+((r00*x8329))+(((-1.0)*cj0*x8332))+(((-1.0)*x8324*x8328)));
evalcond[5]=(((r10*x8329))+(((-1.0)*cj2*sj0*x8325))+((r12*x8322))+(((-1.0)*sj0*x8332))+(((-1.0)*x8326*x8328)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8333=((1.0)*gconst1);
CheckValue<IkReal> x8334 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x8333))+((gconst2*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8334.valid){
continue;
}
CheckValue<IkReal> x8335=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x8333))+(((-1.0)*gconst2*r11)))),-1);
if(!x8335.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8334.value)+(((1.5707963267949)*(x8335.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8336=IKsin(j4);
IkReal x8337=IKcos(j4);
IkReal x8338=(gconst1*r01);
IkReal x8339=((1.0)*sj1);
IkReal x8340=(gconst1*r11);
IkReal x8341=(gconst1*r21);
IkReal x8342=((1.0)*x8337);
IkReal x8343=(gconst2*x8337);
IkReal x8344=((1.0)*x8336);
IkReal x8345=(gconst2*x8336);
IkReal x8346=((1.0)*cj1*sj2);
evalcond[0]=(((r20*x8345))+(((-1.0)*x8341*x8344))+(((-1.0)*r22*x8342)));
evalcond[1]=((((-1.0)*x8338*x8344))+sj0+(((-1.0)*r02*x8342))+((r00*x8345)));
evalcond[2]=((((-1.0)*x8340*x8344))+(((-1.0)*r12*x8342))+(((-1.0)*cj0))+((r10*x8345)));
evalcond[3]=((((-1.0)*sj2*x8339))+((r22*x8336))+((r20*x8343))+(((-1.0)*x8341*x8342))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x8338*x8342))+(((-1.0)*cj0*x8346))+(((-1.0)*cj0*cj2*x8339))+((r00*x8343))+((r02*x8336)));
evalcond[5]=(((r12*x8336))+(((-1.0)*x8340*x8342))+(((-1.0)*cj2*sj0*x8339))+(((-1.0)*sj0*x8346))+((r10*x8343)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8349 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8349.valid){
continue;
}
IkReal x8347=((-1.0)*(x8349.value));
IkReal x8348=x7685;
sj5=gconst1;
cj5=gconst2;
j5=x8347;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8347;
IkReal gconst1=((-1.0)*r21*x8348);
IkReal gconst2=(r20*x8348);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8352 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8352.valid){
continue;
}
IkReal x8350=((-1.0)*(x8352.value));
IkReal x8351=x7685;
sj5=gconst1;
cj5=gconst2;
j5=x8350;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8350;
IkReal gconst1=((-1.0)*r21*x8351);
IkReal gconst2=(r20*x8351);
CheckValue<IkReal> x8360=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x8360.valid){
continue;
}
IkReal x8353=x8360.value;
IkReal x8354=(cj3*x8353);
IkReal x8355=(r11*x8354);
IkReal x8356=(r01*x8354);
IkReal x8357=(r00*x8354);
IkReal x8358=(r10*x8354);
IkReal x8359=(r20*r21*x8354);
j4eval[0]=IKsign((((cj3*r02*r12))+((r10*r20*r21*x8356))+((r01*x8355*(r21*r21)))+((r10*x8357*(r20*r20)))+((r00*r20*r21*x8355))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8363 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8363.valid){
continue;
}
IkReal x8361=((-1.0)*(x8363.value));
IkReal x8362=x7685;
sj5=gconst1;
cj5=gconst2;
j5=x8361;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8361;
IkReal gconst1=((-1.0)*r21*x8362);
IkReal gconst2=(r20*x8362);
CheckValue<IkReal> x8371=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x8371.valid){
continue;
}
IkReal x8364=x8371.value;
IkReal x8365=(sj3*x8364);
IkReal x8366=(r11*x8365);
IkReal x8367=(r00*x8365);
IkReal x8368=(r01*x8365);
IkReal x8369=(r10*x8365);
IkReal x8370=(r20*r21*x8365);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*x8367*(r20*r20)))+((r01*x8366*(r21*r21)))+((r10*r20*r21*x8368))+((r00*r20*r21*x8366))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8374 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8374.valid){
continue;
}
IkReal x8372=((-1.0)*(x8374.value));
IkReal x8373=x7685;
sj5=gconst1;
cj5=gconst2;
j5=x8372;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8372;
IkReal gconst1=((-1.0)*r21*x8373);
IkReal gconst2=(r20*x8373);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x8377 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8377.valid){
continue;
}
IkReal x8375=((-1.0)*(x8377.value));
IkReal x8376=x7685;
sj5=gconst1;
cj5=gconst2;
j5=x8375;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8375;
IkReal gconst1=((-1.0)*r21*x8376);
IkReal gconst2=(r20*x8376);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8380 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8380.valid){
continue;
}
IkReal x8378=((-1.0)*(x8380.value));
IkReal x8379=x7685;
sj5=gconst1;
cj5=gconst2;
j5=x8378;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8378;
IkReal gconst1=((-1.0)*r21*x8379);
IkReal gconst2=(r20*x8379);
IkReal x8381=r22*r22;
IkReal x8382=(cj1*r02*sj2);
IkReal x8383=(cj2*r02*sj1);
CheckValue<IkReal> x8387=IKPowWithIntegerCheck(((-1.0)+x8381),-1);
if(!x8387.valid){
continue;
}
IkReal x8384=x8387.value;
if((((1.0)+(((-1.0)*x8381)))) < -0.00001)
continue;
IkReal x8385=IKsqrt(((1.0)+(((-1.0)*x8381))));
IkReal x8386=((1.0)*r22*x8384*x8385);
j4eval[0]=((IKabs((x8383+x8382)))+(IKabs(((((-1.0)*x8382*x8386))+(((-1.0)*x8383*x8386))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8388=(cj2*sj1);
IkReal x8389=(cj1*sj2);
IkReal x8390=((1.0)*gconst2);
IkReal x8391=(gconst1*r01);
CheckValue<IkReal> x8392 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x8389*x8390))+(((-1.0)*r00*x8388*x8390))+((x8389*x8391))+((x8388*x8391)))),IkReal((((r02*x8388))+((r02*x8389)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8392.valid){
continue;
}
CheckValue<IkReal> x8393=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x8390)))),-1);
if(!x8393.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8392.value)+(((1.5707963267949)*(x8393.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8394=IKsin(j4);
IkReal x8395=IKcos(j4);
IkReal x8396=(gconst1*r01);
IkReal x8397=(gconst1*r21);
IkReal x8398=(gconst1*r11);
IkReal x8399=((1.0)*x8395);
IkReal x8400=((1.0)*x8394);
IkReal x8401=(gconst2*x8394);
evalcond[0]=((((-1.0)*r22*x8399))+((r20*x8401))+(((-1.0)*x8397*x8400)));
evalcond[1]=((((-1.0)*x8398*x8400))+((r10*x8401))+(((-1.0)*r12*x8399)));
evalcond[2]=((((-1.0)*r02*x8400))+((x8395*x8396))+(((-1.0)*gconst2*r00*x8399)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8399))+((r00*x8401))+(((-1.0)*x8396*x8400)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8395*x8397))+(((-1.0)*r22*x8400))+(((-1.0)*gconst2*r20*x8399)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r10*x8399))+((x8395*x8398))+(((-1.0)*r12*x8400))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8402=(gconst1*r01);
IkReal x8403=(gconst2*r00);
CheckValue<IkReal> x8404 = IKatan2WithCheck(IkReal((x8402+(((-1.0)*x8403)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8404.valid){
continue;
}
CheckValue<IkReal> x8405=IKPowWithIntegerCheck(IKsign(((((-2.0)*x8402*x8403))+(x8403*x8403)+(r02*r02)+(x8402*x8402))),-1);
if(!x8405.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8404.value)+(((1.5707963267949)*(x8405.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8406=IKsin(j4);
IkReal x8407=IKcos(j4);
IkReal x8408=(gconst1*r01);
IkReal x8409=(gconst1*r21);
IkReal x8410=(gconst1*r11);
IkReal x8411=((1.0)*x8407);
IkReal x8412=((1.0)*x8406);
IkReal x8413=(gconst2*x8406);
evalcond[0]=((((-1.0)*x8409*x8412))+((r20*x8413))+(((-1.0)*r22*x8411)));
evalcond[1]=((((-1.0)*r12*x8411))+(((-1.0)*x8410*x8412))+((r10*x8413)));
evalcond[2]=(((x8407*x8408))+(((-1.0)*r02*x8412))+(((-1.0)*gconst2*r00*x8411)));
evalcond[3]=((1.0)+(((-1.0)*x8408*x8412))+((r00*x8413))+(((-1.0)*r02*x8411)));
evalcond[4]=(((cj2*sj1))+((x8407*x8409))+((cj1*sj2))+(((-1.0)*gconst2*r20*x8411))+(((-1.0)*r22*x8412)));
evalcond[5]=((((-1.0)*r12*x8412))+(((-1.0)*sj1*sj2))+((x8407*x8410))+(((-1.0)*gconst2*r10*x8411))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8414=((1.0)*gconst1);
CheckValue<IkReal> x8415=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r11))+(((-1.0)*r10*x8414)))),-1);
if(!x8415.valid){
continue;
}
CheckValue<IkReal> x8416 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x8414))+((gconst2*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8416.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8415.value)))+(x8416.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8417=IKsin(j4);
IkReal x8418=IKcos(j4);
IkReal x8419=(gconst1*r01);
IkReal x8420=(gconst1*r21);
IkReal x8421=(gconst1*r11);
IkReal x8422=((1.0)*x8418);
IkReal x8423=((1.0)*x8417);
IkReal x8424=(gconst2*x8417);
evalcond[0]=(((r20*x8424))+(((-1.0)*r22*x8422))+(((-1.0)*x8420*x8423)));
evalcond[1]=(((r10*x8424))+(((-1.0)*x8421*x8423))+(((-1.0)*r12*x8422)));
evalcond[2]=((((-1.0)*r02*x8423))+(((-1.0)*gconst2*r00*x8422))+((x8418*x8419)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8422))+((r00*x8424))+(((-1.0)*x8419*x8423)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8423))+(((-1.0)*gconst2*r20*x8422))+((x8418*x8420)));
evalcond[5]=((((-1.0)*sj1*sj2))+((x8418*x8421))+((cj1*cj2))+(((-1.0)*gconst2*r10*x8422))+(((-1.0)*r12*x8423)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8427 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8427.valid){
continue;
}
IkReal x8425=((-1.0)*(x8427.value));
IkReal x8426=x7685;
sj5=gconst1;
cj5=gconst2;
j5=x8425;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x8425;
IkReal gconst1=((-1.0)*r21*x8426);
IkReal gconst2=(r20*x8426);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x8430 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8430.valid){
continue;
}
IkReal x8428=((-1.0)*(x8430.value));
IkReal x8429=x7685;
sj5=gconst1;
cj5=gconst2;
j5=x8428;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x8428;
IkReal gconst1=((-1.0)*r21*x8429);
IkReal gconst2=(r20*x8429);
IkReal x8431=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8435=IKPowWithIntegerCheck(x8431,-1);
if(!x8435.valid){
continue;
}
IkReal x8432=x8435.value;
IkReal x8433=((1.0)*x8432);
IkReal x8434=((((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x8432))+(((-1.0)*x8433*(r01*r01)*(r21*r21)))+(((-1.0)*x8433*(r00*r00)*(r20*r20))));
j4eval[0]=x8434;
j4eval[1]=IKsign(x8434);
j4eval[2]=r02;
j4eval[3]=x8431;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8438 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8438.valid){
continue;
}
IkReal x8436=((-1.0)*(x8438.value));
IkReal x8437=x7685;
sj5=gconst1;
cj5=gconst2;
j5=x8436;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x8436;
IkReal gconst1=((-1.0)*r21*x8437);
IkReal gconst2=(r20*x8437);
IkReal x8439=r22*r22;
IkReal x8440=((1.0)*r02);
IkReal x8441=(cj1*sj2);
IkReal x8442=(cj2*sj1);
CheckValue<IkReal> x8446=IKPowWithIntegerCheck(((-1.0)+x8439),-1);
if(!x8446.valid){
continue;
}
IkReal x8443=x8446.value;
if((((1.0)+(((-1.0)*x8439)))) < -0.00001)
continue;
IkReal x8444=IKsqrt(((1.0)+(((-1.0)*x8439))));
IkReal x8445=(r02*r22*x8443*x8444);
j4eval[0]=((IKabs(((((-1.0)*x8440*x8441))+(((-1.0)*x8440*x8442)))))+(IKabs((((x8441*x8445))+((x8442*x8445))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8447=(cj2*sj1);
IkReal x8448=(cj1*sj2);
IkReal x8449=((1.0)*r02);
IkReal x8450=(gconst2*r00);
IkReal x8451=((1.0)*gconst1*r01);
CheckValue<IkReal> x8452 = IKatan2WithCheck(IkReal((((x8448*x8450))+(((-1.0)*x8447*x8451))+((x8447*x8450))+(((-1.0)*x8448*x8451)))),IkReal(((((-1.0)*x8447*x8449))+(((-1.0)*x8448*x8449)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8452.valid){
continue;
}
CheckValue<IkReal> x8453=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*gconst2*r11)))),-1);
if(!x8453.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8452.value)+(((1.5707963267949)*(x8453.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8454=IKcos(j4);
IkReal x8455=IKsin(j4);
IkReal x8456=(gconst1*r01);
IkReal x8457=(gconst1*r21);
IkReal x8458=(gconst1*r11);
IkReal x8459=((1.0)*x8454);
IkReal x8460=(gconst2*x8454);
IkReal x8461=((1.0)*x8455);
IkReal x8462=(gconst2*x8455);
evalcond[0]=(((r00*x8460))+((r02*x8455))+(((-1.0)*x8456*x8459)));
evalcond[1]=((((-1.0)*x8457*x8461))+(((-1.0)*r22*x8459))+((r20*x8462)));
evalcond[2]=((((-1.0)*r12*x8459))+((r10*x8462))+(((-1.0)*x8458*x8461)));
evalcond[3]=((1.0)+((r00*x8462))+(((-1.0)*r02*x8459))+(((-1.0)*x8456*x8461)));
evalcond[4]=(((cj2*sj1))+((r22*x8455))+(((-1.0)*x8457*x8459))+((cj1*sj2))+((r20*x8460)));
evalcond[5]=((((-1.0)*x8458*x8459))+(((-1.0)*sj1*sj2))+((r10*x8460))+((cj1*cj2))+((r12*x8455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8463=(gconst2*r00);
IkReal x8464=(gconst1*r01);
CheckValue<IkReal> x8465 = IKatan2WithCheck(IkReal(((((-1.0)*x8464))+x8463)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x8465.valid){
continue;
}
CheckValue<IkReal> x8466=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8463*x8463)))+(((-1.0)*(r02*r02)))+(((2.0)*x8463*x8464))+(((-1.0)*(x8464*x8464))))),-1);
if(!x8466.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8465.value)+(((1.5707963267949)*(x8466.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8467=IKcos(j4);
IkReal x8468=IKsin(j4);
IkReal x8469=(gconst1*r01);
IkReal x8470=(gconst1*r21);
IkReal x8471=(gconst1*r11);
IkReal x8472=((1.0)*x8467);
IkReal x8473=(gconst2*x8467);
IkReal x8474=((1.0)*x8468);
IkReal x8475=(gconst2*x8468);
evalcond[0]=(((r00*x8473))+((r02*x8468))+(((-1.0)*x8469*x8472)));
evalcond[1]=((((-1.0)*x8470*x8474))+(((-1.0)*r22*x8472))+((r20*x8475)));
evalcond[2]=((((-1.0)*x8471*x8474))+((r10*x8475))+(((-1.0)*r12*x8472)));
evalcond[3]=((1.0)+((r00*x8475))+(((-1.0)*r02*x8472))+(((-1.0)*x8469*x8474)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x8470*x8472))+((cj1*sj2))+((r22*x8468))+((r20*x8473)));
evalcond[5]=(((r12*x8468))+(((-1.0)*x8471*x8472))+(((-1.0)*sj1*sj2))+((r10*x8473))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8476=((1.0)*gconst1);
CheckValue<IkReal> x8477 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*r21*x8476)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8477.valid){
continue;
}
CheckValue<IkReal> x8478=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r11))+(((-1.0)*r10*x8476)))),-1);
if(!x8478.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8477.value)+(((1.5707963267949)*(x8478.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8479=IKcos(j4);
IkReal x8480=IKsin(j4);
IkReal x8481=(gconst1*r01);
IkReal x8482=(gconst1*r21);
IkReal x8483=(gconst1*r11);
IkReal x8484=((1.0)*x8479);
IkReal x8485=(gconst2*x8479);
IkReal x8486=((1.0)*x8480);
IkReal x8487=(gconst2*x8480);
evalcond[0]=((((-1.0)*x8481*x8484))+((r02*x8480))+((r00*x8485)));
evalcond[1]=((((-1.0)*x8482*x8486))+(((-1.0)*r22*x8484))+((r20*x8487)));
evalcond[2]=(((r10*x8487))+(((-1.0)*x8483*x8486))+(((-1.0)*r12*x8484)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8484))+(((-1.0)*x8481*x8486))+((r00*x8487)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8482*x8484))+((r22*x8480))+((r20*x8485)));
evalcond[5]=(((r10*x8485))+(((-1.0)*sj1*sj2))+(((-1.0)*x8483*x8484))+((r12*x8480))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x8488=((-1.0)*py);
CheckValue<IkReal> x8490 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8490.valid){
continue;
}
IkReal x8489=((-1.0)*(x8490.value));
sj5=gconst1;
cj5=gconst2;
j5=x8489;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8488);
rxp0_2=(py*r00);
rxp1_0=(r21*x8488);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8489;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x8491=((1.0)*sj3);
IkReal x8492=(r01*r21);
IkReal x8493=(r00*r20);
j4eval[0]=(x8493+x8492);
j4eval[1]=((((-1.0)*x8491*x8493))+(((-1.0)*x8491*x8492)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8494=((-1.0)*py);
CheckValue<IkReal> x8496 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8496.valid){
continue;
}
IkReal x8495=((-1.0)*(x8496.value));
sj5=gconst1;
cj5=gconst2;
j5=x8495;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8494);
rxp0_2=(py*r00);
rxp1_0=(r21*x8494);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8495;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x8497=(r00*r20);
IkReal x8498=((1.0)*cj3);
IkReal x8499=(r01*r21);
j4eval[0]=(x8497+x8499);
j4eval[1]=((((-1.0)*x8498*x8499))+(((-1.0)*x8497*x8498)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8500=((-1.0)*py);
CheckValue<IkReal> x8502 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8502.valid){
continue;
}
IkReal x8501=((-1.0)*(x8502.value));
sj5=gconst1;
cj5=gconst2;
j5=x8501;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8500);
rxp0_2=(py*r00);
rxp1_0=(r21*x8500);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8501;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x8503=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=((((-1.0)*r00*r20*x8503))+(((-1.0)*r01*r21*x8503)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8504=((1.0)*gconst2);
CheckValue<IkReal> x8505=IKPowWithIntegerCheck(cj3,-1);
if(!x8505.valid){
continue;
}
CheckValue<IkReal> x8506=IKPowWithIntegerCheck(r12,-1);
if(!x8506.valid){
continue;
}
CheckValue<IkReal> x8507=IKPowWithIntegerCheck(((((-1.0)*cj3*r00*x8504))+((cj3*gconst1*r01))),-1);
if(!x8507.valid){
continue;
}
if( IKabs(((x8505.value)*(x8506.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x8507.value)*(((((-1.0)*gconst1*r00*sj3))+(((-1.0)*r01*sj3*x8504)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x8505.value)*(x8506.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x8507.value)*(((((-1.0)*gconst1*r00*sj3))+(((-1.0)*r01*sj3*x8504))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x8505.value)*(x8506.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x8507.value)*(((((-1.0)*gconst1*r00*sj3))+(((-1.0)*r01*sj3*x8504))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8508=IKsin(j4);
IkReal x8509=IKcos(j4);
IkReal x8510=(cj1*cj2);
IkReal x8511=((1.0)*sj3);
IkReal x8512=(gconst1*sj3);
IkReal x8513=((1.0)*cj3);
IkReal x8514=((1.0)*sj1);
IkReal x8515=(cj1*sj2);
IkReal x8516=(gconst2*r01);
IkReal x8517=(gconst2*r21);
IkReal x8518=(sj2*x8514);
IkReal x8519=(r12*x8508);
IkReal x8520=(gconst2*x8509);
IkReal x8521=(gconst2*x8508);
IkReal x8522=((1.0)*gconst1*x8508);
IkReal x8523=(cj3*gconst1*x8509);
evalcond[0]=((-1.0)*r12*x8509);
evalcond[1]=(((r20*x8521))+(((-1.0)*r21*x8522)));
evalcond[2]=((1.0)+(((-1.0)*r01*x8522))+((r00*x8521)));
evalcond[3]=((((-1.0)*x8513*x8519))+x8510+(((-1.0)*x8518)));
evalcond[4]=((((-1.0)*x8515))+(((-1.0)*cj2*x8514))+(((-1.0)*x8511*x8519)));
evalcond[5]=((((-1.0)*r00*x8513*x8520))+((sj3*x8516))+((r01*x8523))+((r00*x8512)));
evalcond[6]=((((-1.0)*x8513*x8516))+(((-1.0)*r00*x8511*x8520))+(((-1.0)*gconst1*r00*x8513))+((r01*x8509*x8512)));
evalcond[7]=(((cj2*sj1))+((sj3*x8517))+((r21*x8523))+x8515+(((-1.0)*r20*x8513*x8520))+((r20*x8512)));
evalcond[8]=(((r21*x8509*x8512))+(((-1.0)*x8513*x8517))+x8510+(((-1.0)*gconst1*r20*x8513))+(((-1.0)*x8518))+(((-1.0)*r20*x8511*x8520)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8524=((1.0)*gconst2);
IkReal x8525=(gconst1*r01);
CheckValue<IkReal> x8526=IKPowWithIntegerCheck(((((-1.0)*x8525))+((gconst2*r00))),-1);
if(!x8526.valid){
continue;
}
CheckValue<IkReal> x8527=IKPowWithIntegerCheck(((((-1.0)*cj3*r00*x8524))+((cj3*x8525))),-1);
if(!x8527.valid){
continue;
}
if( IKabs(((-1.0)*(x8526.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x8527.value)*(((((-1.0)*gconst1*r00*sj3))+(((-1.0)*r01*sj3*x8524)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x8526.value)))+IKsqr(((x8527.value)*(((((-1.0)*gconst1*r00*sj3))+(((-1.0)*r01*sj3*x8524))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x8526.value)), ((x8527.value)*(((((-1.0)*gconst1*r00*sj3))+(((-1.0)*r01*sj3*x8524))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8528=IKsin(j4);
IkReal x8529=IKcos(j4);
IkReal x8530=(cj1*cj2);
IkReal x8531=((1.0)*sj3);
IkReal x8532=(gconst1*sj3);
IkReal x8533=((1.0)*cj3);
IkReal x8534=((1.0)*sj1);
IkReal x8535=(cj1*sj2);
IkReal x8536=(gconst2*r01);
IkReal x8537=(gconst2*r21);
IkReal x8538=(sj2*x8534);
IkReal x8539=(r12*x8528);
IkReal x8540=(gconst2*x8529);
IkReal x8541=(gconst2*x8528);
IkReal x8542=((1.0)*gconst1*x8528);
IkReal x8543=(cj3*gconst1*x8529);
evalcond[0]=((-1.0)*r12*x8529);
evalcond[1]=(((r20*x8541))+(((-1.0)*r21*x8542)));
evalcond[2]=((1.0)+(((-1.0)*r01*x8542))+((r00*x8541)));
evalcond[3]=((((-1.0)*x8538))+x8530+(((-1.0)*x8533*x8539)));
evalcond[4]=((((-1.0)*x8535))+(((-1.0)*x8531*x8539))+(((-1.0)*cj2*x8534)));
evalcond[5]=((((-1.0)*r00*x8533*x8540))+((r00*x8532))+((r01*x8543))+((sj3*x8536)));
evalcond[6]=((((-1.0)*x8533*x8536))+(((-1.0)*gconst1*r00*x8533))+((r01*x8529*x8532))+(((-1.0)*r00*x8531*x8540)));
evalcond[7]=(((cj2*sj1))+x8535+((r20*x8532))+(((-1.0)*r20*x8533*x8540))+((r21*x8543))+((sj3*x8537)));
evalcond[8]=((((-1.0)*x8538))+x8530+(((-1.0)*x8533*x8537))+(((-1.0)*r20*x8531*x8540))+((r21*x8529*x8532))+(((-1.0)*gconst1*r20*x8533)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8544=(gconst2*r00);
IkReal x8545=(gconst1*r01);
CheckValue<IkReal> x8546=IKPowWithIntegerCheck((x8544+(((-1.0)*x8545))),-1);
if(!x8546.valid){
continue;
}
CheckValue<IkReal> x8547=IKPowWithIntegerCheck(((((-1.0)*sj3*x8544))+((sj3*x8545))),-1);
if(!x8547.valid){
continue;
}
if( IKabs(((-1.0)*(x8546.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x8547.value)*((((cj3*gconst2*r01))+((cj3*gconst1*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x8546.value)))+IKsqr(((x8547.value)*((((cj3*gconst2*r01))+((cj3*gconst1*r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x8546.value)), ((x8547.value)*((((cj3*gconst2*r01))+((cj3*gconst1*r00))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8548=IKsin(j4);
IkReal x8549=IKcos(j4);
IkReal x8550=(cj1*cj2);
IkReal x8551=((1.0)*sj3);
IkReal x8552=(gconst1*sj3);
IkReal x8553=((1.0)*cj3);
IkReal x8554=((1.0)*sj1);
IkReal x8555=(cj1*sj2);
IkReal x8556=(gconst2*r01);
IkReal x8557=(gconst2*r21);
IkReal x8558=(sj2*x8554);
IkReal x8559=(r12*x8548);
IkReal x8560=(gconst2*x8549);
IkReal x8561=(gconst2*x8548);
IkReal x8562=((1.0)*gconst1*x8548);
IkReal x8563=(cj3*gconst1*x8549);
evalcond[0]=((-1.0)*r12*x8549);
evalcond[1]=(((r20*x8561))+(((-1.0)*r21*x8562)));
evalcond[2]=((1.0)+((r00*x8561))+(((-1.0)*r01*x8562)));
evalcond[3]=(x8550+(((-1.0)*x8553*x8559))+(((-1.0)*x8558)));
evalcond[4]=((((-1.0)*cj2*x8554))+(((-1.0)*x8551*x8559))+(((-1.0)*x8555)));
evalcond[5]=(((r00*x8552))+((sj3*x8556))+(((-1.0)*r00*x8553*x8560))+((r01*x8563)));
evalcond[6]=((((-1.0)*gconst1*r00*x8553))+(((-1.0)*r00*x8551*x8560))+(((-1.0)*x8553*x8556))+((r01*x8549*x8552)));
evalcond[7]=((((-1.0)*r20*x8553*x8560))+((cj2*sj1))+x8555+((r20*x8552))+((sj3*x8557))+((r21*x8563)));
evalcond[8]=((((-1.0)*gconst1*r20*x8553))+((r21*x8549*x8552))+x8550+(((-1.0)*r20*x8551*x8560))+(((-1.0)*x8553*x8557))+(((-1.0)*x8558)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8564=gconst2*gconst2;
IkReal x8565=gconst1*gconst1;
IkReal x8566=(r00*r11);
IkReal x8567=(gconst1*gconst2);
IkReal x8568=((1.0)*sj3);
IkReal x8569=(r01*r11);
IkReal x8570=((1.0)*cj3*r10);
IkReal x8571=((1.0)*cj3*r12);
CheckValue<IkReal> x8572=IKPowWithIntegerCheck(IKsign((((sj3*x8565*x8569))+((r02*r12*sj3))+(((-1.0)*x8566*x8567*x8568))+((r00*r10*sj3*x8564))+(((-1.0)*r01*r10*x8567*x8568)))),-1);
if(!x8572.valid){
continue;
}
CheckValue<IkReal> x8573 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*r01*x8571))+(((-1.0)*gconst1*r00*x8571)))),IkReal((((cj3*x8567*x8569))+((cj3*x8565*x8566))+(((-1.0)*r00*x8567*x8570))+(((-1.0)*r01*x8564*x8570)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8573.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8572.value)))+(x8573.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8574=IKsin(j4);
IkReal x8575=IKcos(j4);
IkReal x8576=(cj1*cj2);
IkReal x8577=(r00*sj3);
IkReal x8578=(gconst2*r20);
IkReal x8579=(cj3*gconst1);
IkReal x8580=(gconst1*r01);
IkReal x8581=((1.0)*sj1);
IkReal x8582=(cj3*gconst2);
IkReal x8583=(gconst1*r11);
IkReal x8584=(gconst1*r21);
IkReal x8585=(cj1*sj2);
IkReal x8586=(gconst1*sj3);
IkReal x8587=(gconst2*sj3);
IkReal x8588=(sj2*x8581);
IkReal x8589=((1.0)*x8575);
IkReal x8590=((1.0)*x8574);
IkReal x8591=((1.0)*x8582);
IkReal x8592=(gconst2*x8574);
IkReal x8593=(sj3*x8575);
evalcond[0]=((((-1.0)*r22*x8589))+((x8574*x8578))+(((-1.0)*x8584*x8590)));
evalcond[1]=((((-1.0)*x8583*x8590))+((r10*x8592))+(((-1.0)*r12*x8589)));
evalcond[2]=((1.0)+((r00*x8592))+(((-1.0)*r02*x8589))+(((-1.0)*x8580*x8590)));
evalcond[3]=((((-1.0)*r00*x8582*x8589))+((gconst1*x8577))+((r01*x8587))+(((-1.0)*cj3*r02*x8590))+((r01*x8575*x8579)));
evalcond[4]=((((-1.0)*r01*x8591))+(((-1.0)*r02*sj3*x8590))+(((-1.0)*r00*x8579))+((x8580*x8593))+(((-1.0)*gconst2*x8577*x8589)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*cj3*x8578*x8589))+x8585+((r21*x8587))+((r21*x8575*x8579))+(((-1.0)*cj3*r22*x8590))+((r20*x8586)));
evalcond[6]=(x8576+(((-1.0)*x8588))+((r11*x8575*x8579))+((r10*x8586))+((r11*x8587))+(((-1.0)*cj3*r12*x8590))+(((-1.0)*r10*x8582*x8589)));
evalcond[7]=((((-1.0)*sj3*x8578*x8589))+x8576+((x8584*x8593))+(((-1.0)*x8588))+(((-1.0)*r22*sj3*x8590))+(((-1.0)*r20*x8579))+(((-1.0)*r21*x8591)));
evalcond[8]=((((-1.0)*x8585))+(((-1.0)*r11*x8591))+(((-1.0)*cj2*x8581))+(((-1.0)*r10*x8579))+((x8583*x8593))+(((-1.0)*r12*sj3*x8590))+(((-1.0)*r10*x8587*x8589)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8594=gconst1*gconst1;
IkReal x8595=gconst2*gconst2;
IkReal x8596=(r00*sj3);
IkReal x8597=((1.0)*r11);
IkReal x8598=(r01*sj3);
IkReal x8599=(gconst1*gconst2);
IkReal x8600=(cj3*r01);
IkReal x8601=(cj3*r00);
IkReal x8602=(r10*x8595);
CheckValue<IkReal> x8603=IKPowWithIntegerCheck(IKsign((((cj3*r02*r12))+(((-1.0)*r10*x8599*x8600))+((x8601*x8602))+(((-1.0)*x8597*x8599*x8601))+((r11*x8594*x8600)))),-1);
if(!x8603.valid){
continue;
}
CheckValue<IkReal> x8604 = IKatan2WithCheck(IkReal((((gconst2*r12*x8598))+((gconst1*r12*x8596)))),IkReal((((x8598*x8602))+(((-1.0)*x8594*x8596*x8597))+((r10*x8596*x8599))+(((-1.0)*x8597*x8598*x8599)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8604.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8603.value)))+(x8604.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8605=IKsin(j4);
IkReal x8606=IKcos(j4);
IkReal x8607=(cj1*cj2);
IkReal x8608=(r00*sj3);
IkReal x8609=(gconst2*r20);
IkReal x8610=(cj3*gconst1);
IkReal x8611=(gconst1*r01);
IkReal x8612=((1.0)*sj1);
IkReal x8613=(cj3*gconst2);
IkReal x8614=(gconst1*r11);
IkReal x8615=(gconst1*r21);
IkReal x8616=(cj1*sj2);
IkReal x8617=(gconst1*sj3);
IkReal x8618=(gconst2*sj3);
IkReal x8619=(sj2*x8612);
IkReal x8620=((1.0)*x8606);
IkReal x8621=((1.0)*x8605);
IkReal x8622=((1.0)*x8613);
IkReal x8623=(gconst2*x8605);
IkReal x8624=(sj3*x8606);
evalcond[0]=(((x8605*x8609))+(((-1.0)*x8615*x8621))+(((-1.0)*r22*x8620)));
evalcond[1]=((((-1.0)*r12*x8620))+(((-1.0)*x8614*x8621))+((r10*x8623)));
evalcond[2]=((1.0)+(((-1.0)*x8611*x8621))+((r00*x8623))+(((-1.0)*r02*x8620)));
evalcond[3]=((((-1.0)*cj3*r02*x8621))+((r01*x8618))+((r01*x8606*x8610))+(((-1.0)*r00*x8613*x8620))+((gconst1*x8608)));
evalcond[4]=(((x8611*x8624))+(((-1.0)*r00*x8610))+(((-1.0)*r01*x8622))+(((-1.0)*gconst2*x8608*x8620))+(((-1.0)*r02*sj3*x8621)));
evalcond[5]=(((cj2*sj1))+x8616+((r20*x8617))+(((-1.0)*cj3*x8609*x8620))+((r21*x8618))+(((-1.0)*cj3*r22*x8621))+((r21*x8606*x8610)));
evalcond[6]=(x8607+(((-1.0)*r10*x8613*x8620))+((r11*x8606*x8610))+((r10*x8617))+((r11*x8618))+(((-1.0)*x8619))+(((-1.0)*cj3*r12*x8621)));
evalcond[7]=(x8607+(((-1.0)*r22*sj3*x8621))+(((-1.0)*x8619))+(((-1.0)*sj3*x8609*x8620))+(((-1.0)*r20*x8610))+(((-1.0)*r21*x8622))+((x8615*x8624)));
evalcond[8]=((((-1.0)*r11*x8622))+(((-1.0)*r10*x8618*x8620))+(((-1.0)*r10*x8610))+(((-1.0)*x8616))+(((-1.0)*r12*sj3*x8621))+(((-1.0)*cj2*x8612))+((x8614*x8624)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8625=((1.0)*gconst1);
CheckValue<IkReal> x8626 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*r21*x8625)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8626.valid){
continue;
}
CheckValue<IkReal> x8627=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x8625))+(((-1.0)*gconst2*r11)))),-1);
if(!x8627.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8626.value)+(((1.5707963267949)*(x8627.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8628=IKsin(j4);
IkReal x8629=IKcos(j4);
IkReal x8630=(cj1*cj2);
IkReal x8631=(r00*sj3);
IkReal x8632=(gconst2*r20);
IkReal x8633=(cj3*gconst1);
IkReal x8634=(gconst1*r01);
IkReal x8635=((1.0)*sj1);
IkReal x8636=(cj3*gconst2);
IkReal x8637=(gconst1*r11);
IkReal x8638=(gconst1*r21);
IkReal x8639=(cj1*sj2);
IkReal x8640=(gconst1*sj3);
IkReal x8641=(gconst2*sj3);
IkReal x8642=(sj2*x8635);
IkReal x8643=((1.0)*x8629);
IkReal x8644=((1.0)*x8628);
IkReal x8645=((1.0)*x8636);
IkReal x8646=(gconst2*x8628);
IkReal x8647=(sj3*x8629);
evalcond[0]=((((-1.0)*x8638*x8644))+(((-1.0)*r22*x8643))+((x8628*x8632)));
evalcond[1]=((((-1.0)*x8637*x8644))+((r10*x8646))+(((-1.0)*r12*x8643)));
evalcond[2]=((1.0)+((r00*x8646))+(((-1.0)*r02*x8643))+(((-1.0)*x8634*x8644)));
evalcond[3]=(((gconst1*x8631))+(((-1.0)*r00*x8636*x8643))+(((-1.0)*cj3*r02*x8644))+((r01*x8641))+((r01*x8629*x8633)));
evalcond[4]=((((-1.0)*r01*x8645))+((x8634*x8647))+(((-1.0)*r02*sj3*x8644))+(((-1.0)*r00*x8633))+(((-1.0)*gconst2*x8631*x8643)));
evalcond[5]=(((cj2*sj1))+x8639+(((-1.0)*cj3*x8632*x8643))+((r20*x8640))+((r21*x8641))+(((-1.0)*cj3*r22*x8644))+((r21*x8629*x8633)));
evalcond[6]=(((r11*x8629*x8633))+((r11*x8641))+x8630+(((-1.0)*r10*x8636*x8643))+(((-1.0)*cj3*r12*x8644))+((r10*x8640))+(((-1.0)*x8642)));
evalcond[7]=(x8630+(((-1.0)*r20*x8633))+(((-1.0)*r22*sj3*x8644))+((x8638*x8647))+(((-1.0)*x8642))+(((-1.0)*r21*x8645))+(((-1.0)*sj3*x8632*x8643)));
evalcond[8]=((((-1.0)*r10*x8641*x8643))+(((-1.0)*x8639))+(((-1.0)*r10*x8633))+(((-1.0)*cj2*x8635))+((x8637*x8647))+(((-1.0)*r11*x8645))+(((-1.0)*r12*sj3*x8644)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8650 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8650.valid){
continue;
}
IkReal x8648=((-1.0)*(x8650.value));
IkReal x8649=x7685;
sj5=gconst1;
cj5=gconst2;
j5=x8648;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8648;
IkReal gconst1=((-1.0)*r21*x8649);
IkReal gconst2=(r20*x8649);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8653 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8653.valid){
continue;
}
IkReal x8651=((-1.0)*(x8653.value));
IkReal x8652=x7685;
sj5=gconst1;
cj5=gconst2;
j5=x8651;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8651;
IkReal gconst1=((-1.0)*r21*x8652);
IkReal gconst2=(r20*x8652);
CheckValue<IkReal> x8661=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x8661.valid){
continue;
}
IkReal x8654=x8661.value;
IkReal x8655=(cj3*x8654);
IkReal x8656=(r11*x8655);
IkReal x8657=(r01*x8655);
IkReal x8658=(r00*x8655);
IkReal x8659=(r10*x8655);
IkReal x8660=(r20*r21*x8655);
j4eval[0]=IKsign((((cj3*r02*r12))+((r00*r20*r21*x8656))+((r01*x8656*(r21*r21)))+((r10*x8658*(r20*r20)))+((r10*r20*r21*x8657))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8664 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8664.valid){
continue;
}
IkReal x8662=((-1.0)*(x8664.value));
IkReal x8663=x7685;
sj5=gconst1;
cj5=gconst2;
j5=x8662;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8662;
IkReal gconst1=((-1.0)*r21*x8663);
IkReal gconst2=(r20*x8663);
CheckValue<IkReal> x8672=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x8672.valid){
continue;
}
IkReal x8665=x8672.value;
IkReal x8666=(sj3*x8665);
IkReal x8667=(r11*x8666);
IkReal x8668=(r00*x8666);
IkReal x8669=(r01*x8666);
IkReal x8670=(r10*x8666);
IkReal x8671=(r20*r21*x8666);
j4eval[0]=IKsign((((r02*r12*sj3))+((r00*r20*r21*x8667))+((r10*r20*r21*x8669))+((r01*x8667*(r21*r21)))+((r10*x8668*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8675 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8675.valid){
continue;
}
IkReal x8673=((-1.0)*(x8675.value));
IkReal x8674=x7685;
sj5=gconst1;
cj5=gconst2;
j5=x8673;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8673;
IkReal gconst1=((-1.0)*r21*x8674);
IkReal gconst2=(r20*x8674);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x8678 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8678.valid){
continue;
}
IkReal x8676=((-1.0)*(x8678.value));
IkReal x8677=x7685;
sj5=gconst1;
cj5=gconst2;
j5=x8676;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8676;
IkReal gconst1=((-1.0)*r21*x8677);
IkReal gconst2=(r20*x8677);
IkReal x8679=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8683=IKPowWithIntegerCheck(x8679,-1);
if(!x8683.valid){
continue;
}
IkReal x8680=x8683.value;
IkReal x8681=((1.0)*x8680);
IkReal x8682=((((-1.0)*x8681*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x8680))+(((-1.0)*x8681*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02))));
j4eval[0]=x8682;
j4eval[1]=IKsign(x8682);
j4eval[2]=r02;
j4eval[3]=x8679;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8686 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8686.valid){
continue;
}
IkReal x8684=((-1.0)*(x8686.value));
IkReal x8685=x7685;
sj5=gconst1;
cj5=gconst2;
j5=x8684;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8684;
IkReal gconst1=((-1.0)*r21*x8685);
IkReal gconst2=(r20*x8685);
IkReal x8687=r22*r22;
IkReal x8688=(cj1*r02*sj2);
IkReal x8689=(cj2*r02*sj1);
CheckValue<IkReal> x8693=IKPowWithIntegerCheck(((-1.0)+x8687),-1);
if(!x8693.valid){
continue;
}
IkReal x8690=x8693.value;
if((((1.0)+(((-1.0)*x8687)))) < -0.00001)
continue;
IkReal x8691=IKsqrt(((1.0)+(((-1.0)*x8687))));
IkReal x8692=((1.0)*r22*x8690*x8691);
j4eval[0]=((IKabs(((((-1.0)*x8688*x8692))+(((-1.0)*x8689*x8692)))))+(IKabs((x8688+x8689))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8694=(cj2*sj1);
IkReal x8695=(cj1*sj2);
IkReal x8696=((1.0)*gconst2);
IkReal x8697=(gconst1*r01);
CheckValue<IkReal> x8698 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x8694*x8696))+((x8695*x8697))+((x8694*x8697))+(((-1.0)*r00*x8695*x8696)))),IkReal((((r02*x8695))+((r02*x8694)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8698.valid){
continue;
}
CheckValue<IkReal> x8699=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x8696)))),-1);
if(!x8699.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8698.value)+(((1.5707963267949)*(x8699.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8700=IKsin(j4);
IkReal x8701=IKcos(j4);
IkReal x8702=(gconst1*r01);
IkReal x8703=(gconst1*r21);
IkReal x8704=(gconst1*r11);
IkReal x8705=((1.0)*x8701);
IkReal x8706=((1.0)*x8700);
IkReal x8707=(gconst2*x8700);
evalcond[0]=((((-1.0)*r22*x8705))+((r20*x8707))+(((-1.0)*x8703*x8706)));
evalcond[1]=(((r10*x8707))+(((-1.0)*x8704*x8706))+(((-1.0)*r12*x8705)));
evalcond[2]=((((-1.0)*gconst2*r00*x8705))+((x8701*x8702))+(((-1.0)*r02*x8706)));
evalcond[3]=((-1.0)+(((-1.0)*x8702*x8706))+(((-1.0)*r02*x8705))+((r00*x8707)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8701*x8703))+(((-1.0)*r22*x8706))+(((-1.0)*gconst2*r20*x8705)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r10*x8705))+((x8701*x8704))+(((-1.0)*r12*x8706)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8708=(gconst1*r01);
IkReal x8709=(gconst2*r00);
CheckValue<IkReal> x8710=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8708*x8708)))+(((-1.0)*(r02*r02)))+(((2.0)*x8708*x8709))+(((-1.0)*(x8709*x8709))))),-1);
if(!x8710.valid){
continue;
}
CheckValue<IkReal> x8711 = IKatan2WithCheck(IkReal((x8708+(((-1.0)*x8709)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8711.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8710.value)))+(x8711.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8712=IKsin(j4);
IkReal x8713=IKcos(j4);
IkReal x8714=(gconst1*r01);
IkReal x8715=(gconst1*r21);
IkReal x8716=(gconst1*r11);
IkReal x8717=((1.0)*x8713);
IkReal x8718=((1.0)*x8712);
IkReal x8719=(gconst2*x8712);
evalcond[0]=((((-1.0)*x8715*x8718))+(((-1.0)*r22*x8717))+((r20*x8719)));
evalcond[1]=((((-1.0)*x8716*x8718))+(((-1.0)*r12*x8717))+((r10*x8719)));
evalcond[2]=(((x8713*x8714))+(((-1.0)*r02*x8718))+(((-1.0)*gconst2*r00*x8717)));
evalcond[3]=((-1.0)+(((-1.0)*x8714*x8718))+(((-1.0)*r02*x8717))+((r00*x8719)));
evalcond[4]=(((cj2*sj1))+((x8713*x8715))+((cj1*sj2))+(((-1.0)*r22*x8718))+(((-1.0)*gconst2*r20*x8717)));
evalcond[5]=(((x8713*x8716))+(((-1.0)*gconst2*r10*x8717))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x8718)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8720 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8720.valid){
continue;
}
CheckValue<IkReal> x8721=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8721.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8720.value)+(((1.5707963267949)*(x8721.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8722=IKsin(j4);
IkReal x8723=IKcos(j4);
IkReal x8724=(gconst1*r01);
IkReal x8725=(gconst1*r21);
IkReal x8726=(gconst1*r11);
IkReal x8727=((1.0)*x8723);
IkReal x8728=((1.0)*x8722);
IkReal x8729=(gconst2*x8722);
evalcond[0]=(((r20*x8729))+(((-1.0)*r22*x8727))+(((-1.0)*x8725*x8728)));
evalcond[1]=(((r10*x8729))+(((-1.0)*x8726*x8728))+(((-1.0)*r12*x8727)));
evalcond[2]=(((x8723*x8724))+(((-1.0)*gconst2*r00*x8727))+(((-1.0)*r02*x8728)));
evalcond[3]=((-1.0)+(((-1.0)*x8724*x8728))+(((-1.0)*r02*x8727))+((r00*x8729)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8723*x8725))+(((-1.0)*r22*x8728))+(((-1.0)*gconst2*r20*x8727)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x8723*x8726))+(((-1.0)*gconst2*r10*x8727))+(((-1.0)*r12*x8728)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8732 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8732.valid){
continue;
}
IkReal x8730=((-1.0)*(x8732.value));
IkReal x8731=x7685;
sj5=gconst1;
cj5=gconst2;
j5=x8730;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x8730;
IkReal gconst1=((-1.0)*r21*x8731);
IkReal gconst2=(r20*x8731);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x8735 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8735.valid){
continue;
}
IkReal x8733=((-1.0)*(x8735.value));
IkReal x8734=x7685;
sj5=gconst1;
cj5=gconst2;
j5=x8733;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x8733;
IkReal gconst1=((-1.0)*r21*x8734);
IkReal gconst2=(r20*x8734);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8738 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8738.valid){
continue;
}
IkReal x8736=((-1.0)*(x8738.value));
IkReal x8737=x7685;
sj5=gconst1;
cj5=gconst2;
j5=x8736;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x8736;
IkReal gconst1=((-1.0)*r21*x8737);
IkReal gconst2=(r20*x8737);
IkReal x8739=r22*r22;
IkReal x8740=((1.0)*r02);
IkReal x8741=(cj1*sj2);
IkReal x8742=(cj2*sj1);
CheckValue<IkReal> x8746=IKPowWithIntegerCheck(((-1.0)+x8739),-1);
if(!x8746.valid){
continue;
}
IkReal x8743=x8746.value;
if((((1.0)+(((-1.0)*x8739)))) < -0.00001)
continue;
IkReal x8744=IKsqrt(((1.0)+(((-1.0)*x8739))));
IkReal x8745=(r02*r22*x8743*x8744);
j4eval[0]=((IKabs(((((-1.0)*x8740*x8742))+(((-1.0)*x8740*x8741)))))+(IKabs((((x8741*x8745))+((x8742*x8745))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8747=(cj2*sj1);
IkReal x8748=(cj1*sj2);
IkReal x8749=((1.0)*r02);
IkReal x8750=(gconst2*r00);
IkReal x8751=((1.0)*gconst1*r01);
CheckValue<IkReal> x8752=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*gconst2*r11)))),-1);
if(!x8752.valid){
continue;
}
CheckValue<IkReal> x8753 = IKatan2WithCheck(IkReal((((x8747*x8750))+((x8748*x8750))+(((-1.0)*x8748*x8751))+(((-1.0)*x8747*x8751)))),IkReal(((((-1.0)*x8748*x8749))+(((-1.0)*x8747*x8749)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8753.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8752.value)))+(x8753.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8754=IKcos(j4);
IkReal x8755=IKsin(j4);
IkReal x8756=(gconst1*r01);
IkReal x8757=(gconst1*r21);
IkReal x8758=(gconst1*r11);
IkReal x8759=((1.0)*x8754);
IkReal x8760=(gconst2*x8754);
IkReal x8761=((1.0)*x8755);
IkReal x8762=(gconst2*x8755);
evalcond[0]=(((r02*x8755))+((r00*x8760))+(((-1.0)*x8756*x8759)));
evalcond[1]=((((-1.0)*x8757*x8761))+(((-1.0)*r22*x8759))+((r20*x8762)));
evalcond[2]=(((r10*x8762))+(((-1.0)*r12*x8759))+(((-1.0)*x8758*x8761)));
evalcond[3]=((-1.0)+(((-1.0)*x8756*x8761))+((r00*x8762))+(((-1.0)*r02*x8759)));
evalcond[4]=(((r22*x8755))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8757*x8759))+((r20*x8760)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8758*x8759))+((r12*x8755))+((r10*x8760)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8763=(gconst1*r01);
IkReal x8764=(gconst2*r00);
CheckValue<IkReal> x8765 = IKatan2WithCheck(IkReal((x8764+(((-1.0)*x8763)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x8765.valid){
continue;
}
CheckValue<IkReal> x8766=IKPowWithIntegerCheck(IKsign(((x8764*x8764)+(((-2.0)*x8763*x8764))+(x8763*x8763)+(r02*r02))),-1);
if(!x8766.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8765.value)+(((1.5707963267949)*(x8766.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8767=IKcos(j4);
IkReal x8768=IKsin(j4);
IkReal x8769=(gconst1*r01);
IkReal x8770=(gconst1*r21);
IkReal x8771=(gconst1*r11);
IkReal x8772=((1.0)*x8767);
IkReal x8773=(gconst2*x8767);
IkReal x8774=((1.0)*x8768);
IkReal x8775=(gconst2*x8768);
evalcond[0]=(((r00*x8773))+(((-1.0)*x8769*x8772))+((r02*x8768)));
evalcond[1]=((((-1.0)*r22*x8772))+((r20*x8775))+(((-1.0)*x8770*x8774)));
evalcond[2]=((((-1.0)*r12*x8772))+((r10*x8775))+(((-1.0)*x8771*x8774)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8772))+((r00*x8775))+(((-1.0)*x8769*x8774)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r20*x8773))+(((-1.0)*x8770*x8772))+((r22*x8768)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x8768))+((r10*x8773))+(((-1.0)*x8771*x8772)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8776 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8776.valid){
continue;
}
CheckValue<IkReal> x8777=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8777.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8776.value)+(((1.5707963267949)*(x8777.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8778=IKcos(j4);
IkReal x8779=IKsin(j4);
IkReal x8780=(gconst1*r01);
IkReal x8781=(gconst1*r21);
IkReal x8782=(gconst1*r11);
IkReal x8783=((1.0)*x8778);
IkReal x8784=(gconst2*x8778);
IkReal x8785=((1.0)*x8779);
IkReal x8786=(gconst2*x8779);
evalcond[0]=((((-1.0)*x8780*x8783))+((r00*x8784))+((r02*x8779)));
evalcond[1]=((((-1.0)*x8781*x8785))+(((-1.0)*r22*x8783))+((r20*x8786)));
evalcond[2]=(((r10*x8786))+(((-1.0)*x8782*x8785))+(((-1.0)*r12*x8783)));
evalcond[3]=((-1.0)+(((-1.0)*x8780*x8785))+(((-1.0)*r02*x8783))+((r00*x8786)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8781*x8783))+((r20*x8784))+((r22*x8779)));
evalcond[5]=(((r10*x8784))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x8779))+(((-1.0)*x8782*x8783)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x8787=((-1.0)*py);
CheckValue<IkReal> x8789 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8789.valid){
continue;
}
IkReal x8788=((-1.0)*(x8789.value));
sj5=gconst1;
cj5=gconst2;
j5=x8788;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8787);
rxp0_2=(py*r00);
rxp1_0=(r21*x8787);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8788;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x8790=((1.0)*sj3);
IkReal x8791=(r01*r21);
IkReal x8792=(r00*r20);
j4eval[0]=(x8791+x8792);
j4eval[1]=((((-1.0)*x8790*x8792))+(((-1.0)*x8790*x8791)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8793=((-1.0)*py);
CheckValue<IkReal> x8795 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8795.valid){
continue;
}
IkReal x8794=((-1.0)*(x8795.value));
sj5=gconst1;
cj5=gconst2;
j5=x8794;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8793);
rxp0_2=(py*r00);
rxp1_0=(r21*x8793);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8794;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x8796=(r00*r20);
IkReal x8797=((1.0)*cj3);
IkReal x8798=(r01*r21);
j4eval[0]=(x8798+x8796);
j4eval[1]=((((-1.0)*x8797*x8798))+(((-1.0)*x8796*x8797)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8799=((-1.0)*py);
CheckValue<IkReal> x8801 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8801.valid){
continue;
}
IkReal x8800=((-1.0)*(x8801.value));
sj5=gconst1;
cj5=gconst2;
j5=x8800;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8799);
rxp0_2=(py*r00);
rxp1_0=(r21*x8799);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8800;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x8802=((1.0)*cj3);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((((-1.0)*r00*r20*x8802))+(((-1.0)*r01*r21*x8802)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8803=((1.0)*gconst2);
CheckValue<IkReal> x8804=IKPowWithIntegerCheck(r12,-1);
if(!x8804.valid){
continue;
}
CheckValue<IkReal> x8805=IKPowWithIntegerCheck(sj3,-1);
if(!x8805.valid){
continue;
}
CheckValue<IkReal> x8806=IKPowWithIntegerCheck(((((-1.0)*cj3*r00*x8803))+((cj3*gconst1*r01))),-1);
if(!x8806.valid){
continue;
}
if( IKabs(((x8804.value)*(x8805.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x8806.value)*(((((-1.0)*gconst1*r00*sj3))+(((-1.0)*r01*sj3*x8803)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x8804.value)*(x8805.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x8806.value)*(((((-1.0)*gconst1*r00*sj3))+(((-1.0)*r01*sj3*x8803))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x8804.value)*(x8805.value)*((((cj2*sj1))+((cj1*sj2))))), ((x8806.value)*(((((-1.0)*gconst1*r00*sj3))+(((-1.0)*r01*sj3*x8803))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8807=IKsin(j4);
IkReal x8808=IKcos(j4);
IkReal x8809=(cj2*sj1);
IkReal x8810=(cj1*sj2);
IkReal x8811=(gconst1*r01);
IkReal x8812=(r00*sj3);
IkReal x8813=(sj1*sj2);
IkReal x8814=(cj3*r20);
IkReal x8815=(cj1*cj2);
IkReal x8816=(cj3*r00);
IkReal x8817=(gconst1*r21);
IkReal x8818=(r20*sj3);
IkReal x8819=((1.0)*gconst1);
IkReal x8820=(gconst2*r01);
IkReal x8821=((1.0)*cj3);
IkReal x8822=(gconst2*r21);
IkReal x8823=((1.0)*x8807);
IkReal x8824=(gconst2*x8807);
IkReal x8825=(cj3*x8808);
IkReal x8826=(sj3*x8808);
IkReal x8827=(x8809+x8810);
IkReal x8828=((1.0)*gconst2*x8808);
evalcond[0]=((-1.0)*r12*x8808);
evalcond[1]=(((r20*x8824))+(((-1.0)*x8817*x8823)));
evalcond[2]=(x8827+(((-1.0)*r12*sj3*x8823)));
evalcond[3]=((-1.0)+((r00*x8824))+(((-1.0)*x8811*x8823)));
evalcond[4]=((((-1.0)*x8815))+(((-1.0)*r12*x8807*x8821))+x8813);
evalcond[5]=((((-1.0)*x8816*x8828))+((x8811*x8825))+((gconst1*x8812))+((sj3*x8820)));
evalcond[6]=((((-1.0)*x8816*x8819))+((x8811*x8826))+(((-1.0)*x8820*x8821))+(((-1.0)*x8812*x8828)));
evalcond[7]=(((x8817*x8825))+x8827+((gconst1*x8818))+(((-1.0)*x8814*x8828))+((sj3*x8822)));
evalcond[8]=((((-1.0)*x8821*x8822))+((x8817*x8826))+(((-1.0)*x8813))+x8815+(((-1.0)*x8814*x8819))+(((-1.0)*x8818*x8828)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8829=((1.0)*gconst2);
IkReal x8830=(gconst1*r01);
CheckValue<IkReal> x8831=IKPowWithIntegerCheck(((((-1.0)*x8830))+((gconst2*r00))),-1);
if(!x8831.valid){
continue;
}
CheckValue<IkReal> x8832=IKPowWithIntegerCheck(((((-1.0)*cj3*r00*x8829))+((cj3*x8830))),-1);
if(!x8832.valid){
continue;
}
if( IKabs(x8831.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x8832.value)*(((((-1.0)*gconst1*r00*sj3))+(((-1.0)*r01*sj3*x8829)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x8831.value)+IKsqr(((x8832.value)*(((((-1.0)*gconst1*r00*sj3))+(((-1.0)*r01*sj3*x8829))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x8831.value, ((x8832.value)*(((((-1.0)*gconst1*r00*sj3))+(((-1.0)*r01*sj3*x8829))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8833=IKsin(j4);
IkReal x8834=IKcos(j4);
IkReal x8835=(cj2*sj1);
IkReal x8836=(cj1*sj2);
IkReal x8837=(gconst1*r01);
IkReal x8838=(r00*sj3);
IkReal x8839=(sj1*sj2);
IkReal x8840=(cj3*r20);
IkReal x8841=(cj1*cj2);
IkReal x8842=(cj3*r00);
IkReal x8843=(gconst1*r21);
IkReal x8844=(r20*sj3);
IkReal x8845=((1.0)*gconst1);
IkReal x8846=(gconst2*r01);
IkReal x8847=((1.0)*cj3);
IkReal x8848=(gconst2*r21);
IkReal x8849=((1.0)*x8833);
IkReal x8850=(gconst2*x8833);
IkReal x8851=(cj3*x8834);
IkReal x8852=(sj3*x8834);
IkReal x8853=(x8835+x8836);
IkReal x8854=((1.0)*gconst2*x8834);
evalcond[0]=((-1.0)*r12*x8834);
evalcond[1]=((((-1.0)*x8843*x8849))+((r20*x8850)));
evalcond[2]=(x8853+(((-1.0)*r12*sj3*x8849)));
evalcond[3]=((-1.0)+((r00*x8850))+(((-1.0)*x8837*x8849)));
evalcond[4]=((((-1.0)*r12*x8833*x8847))+x8839+(((-1.0)*x8841)));
evalcond[5]=(((gconst1*x8838))+(((-1.0)*x8842*x8854))+((x8837*x8851))+((sj3*x8846)));
evalcond[6]=((((-1.0)*x8842*x8845))+((x8837*x8852))+(((-1.0)*x8838*x8854))+(((-1.0)*x8846*x8847)));
evalcond[7]=(((x8843*x8851))+x8853+((gconst1*x8844))+((sj3*x8848))+(((-1.0)*x8840*x8854)));
evalcond[8]=(((x8843*x8852))+(((-1.0)*x8840*x8845))+x8841+(((-1.0)*x8839))+(((-1.0)*x8847*x8848))+(((-1.0)*x8844*x8854)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8855=(gconst2*r00);
IkReal x8856=(gconst1*r01);
CheckValue<IkReal> x8857=IKPowWithIntegerCheck((x8855+(((-1.0)*x8856))),-1);
if(!x8857.valid){
continue;
}
CheckValue<IkReal> x8858=IKPowWithIntegerCheck((((sj3*x8856))+(((-1.0)*sj3*x8855))),-1);
if(!x8858.valid){
continue;
}
if( IKabs(x8857.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x8858.value)*((((cj3*gconst2*r01))+((cj3*gconst1*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x8857.value)+IKsqr(((x8858.value)*((((cj3*gconst2*r01))+((cj3*gconst1*r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x8857.value, ((x8858.value)*((((cj3*gconst2*r01))+((cj3*gconst1*r00))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8859=IKsin(j4);
IkReal x8860=IKcos(j4);
IkReal x8861=(cj2*sj1);
IkReal x8862=(cj1*sj2);
IkReal x8863=(gconst1*r01);
IkReal x8864=(r00*sj3);
IkReal x8865=(sj1*sj2);
IkReal x8866=(cj3*r20);
IkReal x8867=(cj1*cj2);
IkReal x8868=(cj3*r00);
IkReal x8869=(gconst1*r21);
IkReal x8870=(r20*sj3);
IkReal x8871=((1.0)*gconst1);
IkReal x8872=(gconst2*r01);
IkReal x8873=((1.0)*cj3);
IkReal x8874=(gconst2*r21);
IkReal x8875=((1.0)*x8859);
IkReal x8876=(gconst2*x8859);
IkReal x8877=(cj3*x8860);
IkReal x8878=(sj3*x8860);
IkReal x8879=(x8862+x8861);
IkReal x8880=((1.0)*gconst2*x8860);
evalcond[0]=((-1.0)*r12*x8860);
evalcond[1]=(((r20*x8876))+(((-1.0)*x8869*x8875)));
evalcond[2]=(x8879+(((-1.0)*r12*sj3*x8875)));
evalcond[3]=((-1.0)+((r00*x8876))+(((-1.0)*x8863*x8875)));
evalcond[4]=((((-1.0)*r12*x8859*x8873))+x8865+(((-1.0)*x8867)));
evalcond[5]=((((-1.0)*x8868*x8880))+((sj3*x8872))+((x8863*x8877))+((gconst1*x8864)));
evalcond[6]=((((-1.0)*x8868*x8871))+(((-1.0)*x8872*x8873))+((x8863*x8878))+(((-1.0)*x8864*x8880)));
evalcond[7]=(x8879+((sj3*x8874))+((gconst1*x8870))+(((-1.0)*x8866*x8880))+((x8869*x8877)));
evalcond[8]=((((-1.0)*x8873*x8874))+(((-1.0)*x8870*x8880))+x8867+(((-1.0)*x8866*x8871))+((x8869*x8878))+(((-1.0)*x8865)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8881=gconst2*gconst2;
IkReal x8882=gconst1*gconst1;
IkReal x8883=(r00*r11);
IkReal x8884=(gconst1*gconst2);
IkReal x8885=((1.0)*sj3);
IkReal x8886=(r01*r11);
IkReal x8887=((1.0)*cj3*r10);
IkReal x8888=((1.0)*cj3*r12);
CheckValue<IkReal> x8889 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*r01*x8888))+(((-1.0)*gconst1*r00*x8888)))),IkReal((((cj3*x8882*x8883))+(((-1.0)*r01*x8881*x8887))+((cj3*x8884*x8886))+(((-1.0)*r00*x8884*x8887)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8889.valid){
continue;
}
CheckValue<IkReal> x8890=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*x8883*x8884*x8885))+((sj3*x8882*x8886))+((r00*r10*sj3*x8881))+(((-1.0)*r01*r10*x8884*x8885)))),-1);
if(!x8890.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8889.value)+(((1.5707963267949)*(x8890.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8891=IKsin(j4);
IkReal x8892=IKcos(j4);
IkReal x8893=(cj2*sj1);
IkReal x8894=(cj1*sj2);
IkReal x8895=(r00*sj3);
IkReal x8896=(gconst2*r20);
IkReal x8897=(cj3*gconst1);
IkReal x8898=(gconst1*r01);
IkReal x8899=(cj1*cj2);
IkReal x8900=(sj1*sj2);
IkReal x8901=(cj3*gconst2);
IkReal x8902=(gconst1*r11);
IkReal x8903=(gconst1*r21);
IkReal x8904=(gconst1*sj3);
IkReal x8905=(gconst2*sj3);
IkReal x8906=((1.0)*x8892);
IkReal x8907=((1.0)*x8891);
IkReal x8908=((1.0)*x8901);
IkReal x8909=(gconst2*x8891);
IkReal x8910=(sj3*x8892);
IkReal x8911=(x8894+x8893);
evalcond[0]=((((-1.0)*x8903*x8907))+(((-1.0)*r22*x8906))+((x8891*x8896)));
evalcond[1]=((((-1.0)*x8902*x8907))+((r10*x8909))+(((-1.0)*r12*x8906)));
evalcond[2]=((-1.0)+((r00*x8909))+(((-1.0)*r02*x8906))+(((-1.0)*x8898*x8907)));
evalcond[3]=(((gconst1*x8895))+((r01*x8905))+(((-1.0)*r00*x8901*x8906))+((r01*x8892*x8897))+(((-1.0)*cj3*r02*x8907)));
evalcond[4]=(((x8898*x8910))+(((-1.0)*gconst2*x8895*x8906))+(((-1.0)*r00*x8897))+(((-1.0)*r01*x8908))+(((-1.0)*r02*sj3*x8907)));
evalcond[5]=(((r21*x8905))+((r21*x8892*x8897))+((r20*x8904))+x8911+(((-1.0)*cj3*x8896*x8906))+(((-1.0)*cj3*r22*x8907)));
evalcond[6]=((((-1.0)*r10*x8901*x8906))+((r11*x8905))+((r10*x8904))+(((-1.0)*x8899))+x8900+((r11*x8892*x8897))+(((-1.0)*cj3*r12*x8907)));
evalcond[7]=(((x8902*x8910))+(((-1.0)*r12*sj3*x8907))+x8911+(((-1.0)*r10*x8905*x8906))+(((-1.0)*r11*x8908))+(((-1.0)*r10*x8897)));
evalcond[8]=(x8899+(((-1.0)*x8900))+(((-1.0)*r21*x8908))+(((-1.0)*sj3*x8896*x8906))+(((-1.0)*r22*sj3*x8907))+(((-1.0)*r20*x8897))+((x8903*x8910)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8912=gconst1*gconst1;
IkReal x8913=gconst2*gconst2;
IkReal x8914=(r00*sj3);
IkReal x8915=((1.0)*r11);
IkReal x8916=(r01*sj3);
IkReal x8917=(gconst1*gconst2);
IkReal x8918=(cj3*r01);
IkReal x8919=(cj3*r00);
IkReal x8920=(r10*x8913);
CheckValue<IkReal> x8921=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8915*x8917*x8919))+((cj3*r02*r12))+(((-1.0)*r10*x8917*x8918))+((x8919*x8920))+((r11*x8912*x8918)))),-1);
if(!x8921.valid){
continue;
}
CheckValue<IkReal> x8922 = IKatan2WithCheck(IkReal((((gconst2*r12*x8916))+((gconst1*r12*x8914)))),IkReal(((((-1.0)*x8915*x8916*x8917))+((x8916*x8920))+((r10*x8914*x8917))+(((-1.0)*x8912*x8914*x8915)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8922.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8921.value)))+(x8922.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8923=IKsin(j4);
IkReal x8924=IKcos(j4);
IkReal x8925=(cj2*sj1);
IkReal x8926=(cj1*sj2);
IkReal x8927=(r00*sj3);
IkReal x8928=(gconst2*r20);
IkReal x8929=(cj3*gconst1);
IkReal x8930=(gconst1*r01);
IkReal x8931=(cj1*cj2);
IkReal x8932=(sj1*sj2);
IkReal x8933=(cj3*gconst2);
IkReal x8934=(gconst1*r11);
IkReal x8935=(gconst1*r21);
IkReal x8936=(gconst1*sj3);
IkReal x8937=(gconst2*sj3);
IkReal x8938=((1.0)*x8924);
IkReal x8939=((1.0)*x8923);
IkReal x8940=((1.0)*x8933);
IkReal x8941=(gconst2*x8923);
IkReal x8942=(sj3*x8924);
IkReal x8943=(x8926+x8925);
evalcond[0]=(((x8923*x8928))+(((-1.0)*r22*x8938))+(((-1.0)*x8935*x8939)));
evalcond[1]=((((-1.0)*r12*x8938))+((r10*x8941))+(((-1.0)*x8934*x8939)));
evalcond[2]=((-1.0)+((r00*x8941))+(((-1.0)*x8930*x8939))+(((-1.0)*r02*x8938)));
evalcond[3]=((((-1.0)*r00*x8933*x8938))+((gconst1*x8927))+((r01*x8924*x8929))+((r01*x8937))+(((-1.0)*cj3*r02*x8939)));
evalcond[4]=((((-1.0)*r01*x8940))+(((-1.0)*r00*x8929))+(((-1.0)*gconst2*x8927*x8938))+(((-1.0)*r02*sj3*x8939))+((x8930*x8942)));
evalcond[5]=(x8943+(((-1.0)*cj3*r22*x8939))+((r20*x8936))+((r21*x8924*x8929))+(((-1.0)*cj3*x8928*x8938))+((r21*x8937)));
evalcond[6]=((((-1.0)*cj3*r12*x8939))+(((-1.0)*r10*x8933*x8938))+x8932+((r11*x8924*x8929))+((r10*x8936))+(((-1.0)*x8931))+((r11*x8937)));
evalcond[7]=(((x8934*x8942))+(((-1.0)*r11*x8940))+x8943+(((-1.0)*r10*x8937*x8938))+(((-1.0)*r10*x8929))+(((-1.0)*r12*sj3*x8939)));
evalcond[8]=((((-1.0)*r20*x8929))+x8931+(((-1.0)*r22*sj3*x8939))+(((-1.0)*sj3*x8928*x8938))+(((-1.0)*x8932))+(((-1.0)*r21*x8940))+((x8935*x8942)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8944 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8944.valid){
continue;
}
CheckValue<IkReal> x8945=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8945.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8944.value)+(((1.5707963267949)*(x8945.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8946=IKsin(j4);
IkReal x8947=IKcos(j4);
IkReal x8948=(cj2*sj1);
IkReal x8949=(cj1*sj2);
IkReal x8950=(r00*sj3);
IkReal x8951=(gconst2*r20);
IkReal x8952=(cj3*gconst1);
IkReal x8953=(gconst1*r01);
IkReal x8954=(cj1*cj2);
IkReal x8955=(sj1*sj2);
IkReal x8956=(cj3*gconst2);
IkReal x8957=(gconst1*r11);
IkReal x8958=(gconst1*r21);
IkReal x8959=(gconst1*sj3);
IkReal x8960=(gconst2*sj3);
IkReal x8961=((1.0)*x8947);
IkReal x8962=((1.0)*x8946);
IkReal x8963=((1.0)*x8956);
IkReal x8964=(gconst2*x8946);
IkReal x8965=(sj3*x8947);
IkReal x8966=(x8949+x8948);
evalcond[0]=(((x8946*x8951))+(((-1.0)*r22*x8961))+(((-1.0)*x8958*x8962)));
evalcond[1]=((((-1.0)*r12*x8961))+((r10*x8964))+(((-1.0)*x8957*x8962)));
evalcond[2]=((-1.0)+((r00*x8964))+(((-1.0)*x8953*x8962))+(((-1.0)*r02*x8961)));
evalcond[3]=((((-1.0)*r00*x8956*x8961))+((gconst1*x8950))+((r01*x8960))+((r01*x8947*x8952))+(((-1.0)*cj3*r02*x8962)));
evalcond[4]=(((x8953*x8965))+(((-1.0)*gconst2*x8950*x8961))+(((-1.0)*r01*x8963))+(((-1.0)*r02*sj3*x8962))+(((-1.0)*r00*x8952)));
evalcond[5]=((((-1.0)*cj3*x8951*x8961))+x8966+((r21*x8947*x8952))+(((-1.0)*cj3*r22*x8962))+((r20*x8959))+((r21*x8960)));
evalcond[6]=(((r11*x8960))+((r11*x8947*x8952))+x8955+((r10*x8959))+(((-1.0)*x8954))+(((-1.0)*r10*x8956*x8961))+(((-1.0)*cj3*r12*x8962)));
evalcond[7]=((((-1.0)*r10*x8960*x8961))+x8966+(((-1.0)*r11*x8963))+((x8957*x8965))+(((-1.0)*r12*sj3*x8962))+(((-1.0)*r10*x8952)));
evalcond[8]=((((-1.0)*r20*x8952))+x8954+(((-1.0)*sj3*x8951*x8961))+(((-1.0)*r22*sj3*x8962))+(((-1.0)*x8955))+(((-1.0)*r21*x8963))+((x8958*x8965)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8969 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8969.valid){
continue;
}
IkReal x8967=((-1.0)*(x8969.value));
IkReal x8968=x7685;
sj5=gconst1;
cj5=gconst2;
j5=x8967;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8967;
IkReal gconst1=((-1.0)*r21*x8968);
IkReal gconst2=(r20*x8968);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8972 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8972.valid){
continue;
}
IkReal x8970=((-1.0)*(x8972.value));
IkReal x8971=x7685;
sj5=gconst1;
cj5=gconst2;
j5=x8970;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8970;
IkReal gconst1=((-1.0)*r21*x8971);
IkReal gconst2=(r20*x8971);
CheckValue<IkReal> x8980=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x8980.valid){
continue;
}
IkReal x8973=x8980.value;
IkReal x8974=(cj3*x8973);
IkReal x8975=(r11*x8974);
IkReal x8976=(r01*x8974);
IkReal x8977=(r00*x8974);
IkReal x8978=(r10*x8974);
IkReal x8979=(r20*r21*x8974);
j4eval[0]=IKsign((((r10*x8977*(r20*r20)))+((r01*x8975*(r21*r21)))+((cj3*r02*r12))+((r10*r20*r21*x8976))+((r00*r20*r21*x8975))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8983 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8983.valid){
continue;
}
IkReal x8981=((-1.0)*(x8983.value));
IkReal x8982=x7685;
sj5=gconst1;
cj5=gconst2;
j5=x8981;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8981;
IkReal gconst1=((-1.0)*r21*x8982);
IkReal gconst2=(r20*x8982);
CheckValue<IkReal> x8991=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x8991.valid){
continue;
}
IkReal x8984=x8991.value;
IkReal x8985=(sj3*x8984);
IkReal x8986=(r11*x8985);
IkReal x8987=(r00*x8985);
IkReal x8988=(r01*x8985);
IkReal x8989=(r10*x8985);
IkReal x8990=(r20*r21*x8985);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*r20*r21*x8988))+((r01*x8986*(r21*r21)))+((r00*r20*r21*x8986))+((r10*x8987*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8994 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8994.valid){
continue;
}
IkReal x8992=((-1.0)*(x8994.value));
IkReal x8993=x7685;
sj5=gconst1;
cj5=gconst2;
j5=x8992;
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8992;
IkReal gconst1=((-1.0)*r21*x8993);
IkReal gconst2=(r20*x8993);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x8997 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8997.valid){
continue;
}
IkReal x8995=((-1.0)*(x8997.value));
IkReal x8996=x7685;
sj5=gconst1;
cj5=gconst2;
j5=x8995;
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8995;
IkReal gconst1=((-1.0)*r21*x8996);
IkReal gconst2=(r20*x8996);
IkReal x8998=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9002=IKPowWithIntegerCheck(x8998,-1);
if(!x9002.valid){
continue;
}
IkReal x8999=x9002.value;
IkReal x9000=((1.0)*x8999);
IkReal x9001=((((-1.0)*x9000*(r11*r11)*(r21*r21)))+(((-1.0)*x9000*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x8999)));
j4eval[0]=x9001;
j4eval[1]=r12;
j4eval[2]=x8998;
j4eval[3]=IKsign(x9001);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9005 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9005.valid){
continue;
}
IkReal x9003=((-1.0)*(x9005.value));
IkReal x9004=x7685;
sj5=gconst1;
cj5=gconst2;
j5=x9003;
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x9003;
IkReal gconst1=((-1.0)*r21*x9004);
IkReal gconst2=(r20*x9004);
IkReal x9006=r22*r22;
IkReal x9007=(cj1*r12*sj2);
IkReal x9008=(cj2*r12*sj1);
CheckValue<IkReal> x9012=IKPowWithIntegerCheck(((-1.0)+x9006),-1);
if(!x9012.valid){
continue;
}
IkReal x9009=x9012.value;
if((((1.0)+(((-1.0)*x9006)))) < -0.00001)
continue;
IkReal x9010=IKsqrt(((1.0)+(((-1.0)*x9006))));
IkReal x9011=((1.0)*r22*x9009*x9010);
j4eval[0]=((IKabs((x9007+x9008)))+(IKabs(((((-1.0)*x9008*x9011))+(((-1.0)*x9007*x9011))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9013=(cj1*sj2);
IkReal x9014=(cj2*sj1);
IkReal x9015=(gconst1*r11);
IkReal x9016=((1.0)*gconst2*r10);
CheckValue<IkReal> x9017 = IKatan2WithCheck(IkReal(((((-1.0)*x9014*x9016))+(((-1.0)*x9013*x9016))+((x9014*x9015))+((x9013*x9015)))),IkReal((((r12*x9014))+((r12*x9013)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9017.valid){
continue;
}
CheckValue<IkReal> x9018=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9018.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9017.value)+(((1.5707963267949)*(x9018.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9019=IKsin(j4);
IkReal x9020=IKcos(j4);
IkReal x9021=(gconst1*r01);
IkReal x9022=(gconst1*r21);
IkReal x9023=(gconst1*r11);
IkReal x9024=((1.0)*x9020);
IkReal x9025=((1.0)*x9019);
IkReal x9026=(gconst2*x9019);
evalcond[0]=((((-1.0)*x9022*x9025))+(((-1.0)*r22*x9024))+((r20*x9026)));
evalcond[1]=(((r00*x9026))+(((-1.0)*x9021*x9025))+(((-1.0)*r02*x9024)));
evalcond[2]=((((-1.0)*r12*x9025))+(((-1.0)*gconst2*r10*x9024))+((x9020*x9023)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x9024))+(((-1.0)*x9023*x9025))+((r10*x9026)));
evalcond[4]=((((-1.0)*gconst2*r20*x9024))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9025))+((x9020*x9022)));
evalcond[5]=((((-1.0)*gconst2*r00*x9024))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r02*x9025))+((x9020*x9021)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9027=(gconst1*r11);
IkReal x9028=(gconst2*r10);
CheckValue<IkReal> x9029 = IKatan2WithCheck(IkReal((x9027+(((-1.0)*x9028)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9029.valid){
continue;
}
CheckValue<IkReal> x9030=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9027*x9027)))+(((-1.0)*(r12*r12)))+(((2.0)*x9027*x9028))+(((-1.0)*(x9028*x9028))))),-1);
if(!x9030.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9029.value)+(((1.5707963267949)*(x9030.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9031=IKsin(j4);
IkReal x9032=IKcos(j4);
IkReal x9033=(gconst1*r01);
IkReal x9034=(gconst1*r21);
IkReal x9035=(gconst1*r11);
IkReal x9036=((1.0)*x9032);
IkReal x9037=((1.0)*x9031);
IkReal x9038=(gconst2*x9031);
evalcond[0]=((((-1.0)*x9034*x9037))+(((-1.0)*r22*x9036))+((r20*x9038)));
evalcond[1]=(((r00*x9038))+(((-1.0)*x9033*x9037))+(((-1.0)*r02*x9036)));
evalcond[2]=((((-1.0)*r12*x9037))+(((-1.0)*gconst2*r10*x9036))+((x9032*x9035)));
evalcond[3]=((-1.0)+(((-1.0)*x9035*x9037))+(((-1.0)*r12*x9036))+((r10*x9038)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x9036))+((cj1*sj2))+(((-1.0)*r22*x9037))+((x9032*x9034)));
evalcond[5]=((((-1.0)*sj1*sj2))+((cj1*cj2))+((x9032*x9033))+(((-1.0)*r02*x9037))+(((-1.0)*gconst2*r00*x9036)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9039=((1.0)*gconst1);
CheckValue<IkReal> x9040=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x9039)))),-1);
if(!x9040.valid){
continue;
}
CheckValue<IkReal> x9041 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*r21*x9039)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9041.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9040.value)))+(x9041.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9042=IKsin(j4);
IkReal x9043=IKcos(j4);
IkReal x9044=(gconst1*r01);
IkReal x9045=(gconst1*r21);
IkReal x9046=(gconst1*r11);
IkReal x9047=((1.0)*x9043);
IkReal x9048=((1.0)*x9042);
IkReal x9049=(gconst2*x9042);
evalcond[0]=(((r20*x9049))+(((-1.0)*x9045*x9048))+(((-1.0)*r22*x9047)));
evalcond[1]=(((r00*x9049))+(((-1.0)*x9044*x9048))+(((-1.0)*r02*x9047)));
evalcond[2]=((((-1.0)*r12*x9048))+((x9043*x9046))+(((-1.0)*gconst2*r10*x9047)));
evalcond[3]=((-1.0)+(((-1.0)*x9046*x9048))+(((-1.0)*r12*x9047))+((r10*x9049)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9048))+((x9043*x9045))+(((-1.0)*gconst2*r20*x9047)));
evalcond[5]=((((-1.0)*sj1*sj2))+((x9043*x9044))+((cj1*cj2))+(((-1.0)*gconst2*r00*x9047))+(((-1.0)*r02*x9048)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9052 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9052.valid){
continue;
}
IkReal x9050=((-1.0)*(x9052.value));
IkReal x9051=x7685;
sj5=gconst1;
cj5=gconst2;
j5=x9050;
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9050;
IkReal gconst1=((-1.0)*r21*x9051);
IkReal gconst2=(r20*x9051);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x9055 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9055.valid){
continue;
}
IkReal x9053=((-1.0)*(x9055.value));
IkReal x9054=x7685;
sj5=gconst1;
cj5=gconst2;
j5=x9053;
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9053;
IkReal gconst1=((-1.0)*r21*x9054);
IkReal gconst2=(r20*x9054);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9058 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9058.valid){
continue;
}
IkReal x9056=((-1.0)*(x9058.value));
IkReal x9057=x7685;
sj5=gconst1;
cj5=gconst2;
j5=x9056;
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9056;
IkReal gconst1=((-1.0)*r21*x9057);
IkReal gconst2=(r20*x9057);
IkReal x9059=r22*r22;
IkReal x9060=(cj1*r12*sj2);
IkReal x9061=(cj2*r12*sj1);
CheckValue<IkReal> x9065=IKPowWithIntegerCheck(((-1.0)+x9059),-1);
if(!x9065.valid){
continue;
}
IkReal x9062=x9065.value;
if((((1.0)+(((-1.0)*x9059)))) < -0.00001)
continue;
IkReal x9063=IKsqrt(((1.0)+(((-1.0)*x9059))));
IkReal x9064=(r22*x9062*x9063);
j4eval[0]=((IKabs(((((-1.0)*x9061))+(((-1.0)*x9060)))))+(IKabs((((x9060*x9064))+((x9061*x9064))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9066=(cj2*sj1);
IkReal x9067=(gconst2*r10);
IkReal x9068=(cj1*sj2);
IkReal x9069=((1.0)*r12);
IkReal x9070=((1.0)*gconst1*r11);
CheckValue<IkReal> x9071=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9071.valid){
continue;
}
CheckValue<IkReal> x9072 = IKatan2WithCheck(IkReal(((((-1.0)*x9068*x9070))+(((-1.0)*x9066*x9070))+((x9066*x9067))+((x9067*x9068)))),IkReal(((((-1.0)*x9068*x9069))+(((-1.0)*x9066*x9069)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9072.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9071.value)))+(x9072.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9073=IKcos(j4);
IkReal x9074=IKsin(j4);
IkReal x9075=(gconst1*r01);
IkReal x9076=(gconst1*r21);
IkReal x9077=(gconst1*r11);
IkReal x9078=((1.0)*x9073);
IkReal x9079=(gconst2*x9073);
IkReal x9080=((1.0)*x9074);
IkReal x9081=(gconst2*x9074);
evalcond[0]=((((-1.0)*x9077*x9078))+((r12*x9074))+((r10*x9079)));
evalcond[1]=(((r20*x9081))+(((-1.0)*r22*x9078))+(((-1.0)*x9076*x9080)));
evalcond[2]=((((-1.0)*r02*x9078))+(((-1.0)*x9075*x9080))+((r00*x9081)));
evalcond[3]=((-1.0)+((r10*x9081))+(((-1.0)*r12*x9078))+(((-1.0)*x9077*x9080)));
evalcond[4]=(((cj2*sj1))+((r20*x9079))+((cj1*sj2))+(((-1.0)*x9076*x9078))+((r22*x9074)));
evalcond[5]=((((-1.0)*x9075*x9078))+(((-1.0)*sj1*sj2))+((r00*x9079))+((cj1*cj2))+((r02*x9074)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9082=(gconst1*r11);
IkReal x9083=(gconst2*r10);
CheckValue<IkReal> x9084=IKPowWithIntegerCheck(IKsign(((x9083*x9083)+(r12*r12)+(((-2.0)*x9082*x9083))+(x9082*x9082))),-1);
if(!x9084.valid){
continue;
}
CheckValue<IkReal> x9085 = IKatan2WithCheck(IkReal((x9083+(((-1.0)*x9082)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9085.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9084.value)))+(x9085.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9086=IKcos(j4);
IkReal x9087=IKsin(j4);
IkReal x9088=(gconst1*r01);
IkReal x9089=(gconst1*r21);
IkReal x9090=(gconst1*r11);
IkReal x9091=((1.0)*x9086);
IkReal x9092=(gconst2*x9086);
IkReal x9093=((1.0)*x9087);
IkReal x9094=(gconst2*x9087);
evalcond[0]=(((r10*x9092))+((r12*x9087))+(((-1.0)*x9090*x9091)));
evalcond[1]=(((r20*x9094))+(((-1.0)*r22*x9091))+(((-1.0)*x9089*x9093)));
evalcond[2]=(((r00*x9094))+(((-1.0)*r02*x9091))+(((-1.0)*x9088*x9093)));
evalcond[3]=((-1.0)+((r10*x9094))+(((-1.0)*r12*x9091))+(((-1.0)*x9090*x9093)));
evalcond[4]=(((cj2*sj1))+((r20*x9092))+((cj1*sj2))+((r22*x9087))+(((-1.0)*x9089*x9091)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r00*x9092))+((cj1*cj2))+((r02*x9087))+(((-1.0)*x9088*x9091)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9095=((1.0)*gconst1);
CheckValue<IkReal> x9096 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x9095))+((gconst2*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9096.valid){
continue;
}
CheckValue<IkReal> x9097=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x9095))+(((-1.0)*gconst2*r01)))),-1);
if(!x9097.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9096.value)+(((1.5707963267949)*(x9097.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9098=IKcos(j4);
IkReal x9099=IKsin(j4);
IkReal x9100=(gconst1*r01);
IkReal x9101=(gconst1*r21);
IkReal x9102=(gconst1*r11);
IkReal x9103=((1.0)*x9098);
IkReal x9104=(gconst2*x9098);
IkReal x9105=((1.0)*x9099);
IkReal x9106=(gconst2*x9099);
evalcond[0]=(((r10*x9104))+((r12*x9099))+(((-1.0)*x9102*x9103)));
evalcond[1]=((((-1.0)*x9101*x9105))+(((-1.0)*r22*x9103))+((r20*x9106)));
evalcond[2]=((((-1.0)*x9100*x9105))+(((-1.0)*r02*x9103))+((r00*x9106)));
evalcond[3]=((-1.0)+((r10*x9106))+(((-1.0)*r12*x9103))+(((-1.0)*x9102*x9105)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x9101*x9103))+((cj1*sj2))+((r22*x9099))+((r20*x9104)));
evalcond[5]=((((-1.0)*x9100*x9103))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r02*x9099))+((r00*x9104)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9107=((-1.0)*px);
CheckValue<IkReal> x9109 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9109.valid){
continue;
}
IkReal x9108=((-1.0)*(x9109.value));
sj5=gconst1;
cj5=gconst2;
j5=x9108;
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9107);
rxp1_1=(px*r21);
rxp1_2=(r11*x9107);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9108;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x9110=((1.0)*sj3);
IkReal x9111=(r11*r21);
IkReal x9112=(r10*r20);
j4eval[0]=(x9111+x9112);
j4eval[1]=((((-1.0)*x9110*x9112))+(((-1.0)*x9110*x9111)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9113=((-1.0)*px);
CheckValue<IkReal> x9115 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9115.valid){
continue;
}
IkReal x9114=((-1.0)*(x9115.value));
sj5=gconst1;
cj5=gconst2;
j5=x9114;
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9113);
rxp1_1=(px*r21);
rxp1_2=(r11*x9113);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9114;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x9116=(r10*r20);
IkReal x9117=((1.0)*cj3);
IkReal x9118=(r11*r21);
j4eval[0]=(x9118+x9116);
j4eval[1]=((((-1.0)*x9116*x9117))+(((-1.0)*x9117*x9118)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9119=((-1.0)*px);
CheckValue<IkReal> x9121 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9121.valid){
continue;
}
IkReal x9120=((-1.0)*(x9121.value));
sj5=gconst1;
cj5=gconst2;
j5=x9120;
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9119);
rxp1_1=(px*r21);
rxp1_2=(r11*x9119);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9120;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x9122=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r11*r21*x9122))+(((-1.0)*r10*r20*x9122)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9123=((1.0)*gconst2);
CheckValue<IkReal> x9124=IKPowWithIntegerCheck(cj3,-1);
if(!x9124.valid){
continue;
}
CheckValue<IkReal> x9125=IKPowWithIntegerCheck(r02,-1);
if(!x9125.valid){
continue;
}
CheckValue<IkReal> x9126=IKPowWithIntegerCheck(((((-1.0)*cj3*r10*x9123))+((cj3*gconst1*r11))),-1);
if(!x9126.valid){
continue;
}
if( IKabs(((x9124.value)*(x9125.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9126.value)*(((((-1.0)*gconst1*r10*sj3))+(((-1.0)*r11*sj3*x9123)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9124.value)*(x9125.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x9126.value)*(((((-1.0)*gconst1*r10*sj3))+(((-1.0)*r11*sj3*x9123))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x9124.value)*(x9125.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x9126.value)*(((((-1.0)*gconst1*r10*sj3))+(((-1.0)*r11*sj3*x9123))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9127=IKsin(j4);
IkReal x9128=IKcos(j4);
IkReal x9129=(cj1*cj2);
IkReal x9130=((1.0)*cj3);
IkReal x9131=(gconst1*r10);
IkReal x9132=(gconst1*r11);
IkReal x9133=((1.0)*sj1);
IkReal x9134=(gconst2*r21);
IkReal x9135=(gconst1*r21);
IkReal x9136=(cj1*sj2);
IkReal x9137=(gconst1*r20);
IkReal x9138=(gconst2*r11);
IkReal x9139=((1.0)*sj3);
IkReal x9140=(sj2*x9133);
IkReal x9141=(gconst2*x9127);
IkReal x9142=(gconst2*x9128);
IkReal x9143=(sj3*x9128);
IkReal x9144=((1.0)*x9127);
IkReal x9145=(cj3*x9128);
evalcond[0]=((-1.0)*r02*x9128);
evalcond[1]=(((r20*x9141))+(((-1.0)*x9135*x9144)));
evalcond[2]=((-1.0)+((r10*x9141))+(((-1.0)*x9132*x9144)));
evalcond[3]=((((-1.0)*x9140))+x9129+(((-1.0)*r02*x9127*x9130)));
evalcond[4]=((((-1.0)*x9136))+(((-1.0)*cj2*x9133))+(((-1.0)*r02*x9127*x9139)));
evalcond[5]=(((x9132*x9145))+((sj3*x9131))+((sj3*x9138))+(((-1.0)*r10*x9130*x9142)));
evalcond[6]=((((-1.0)*x9130*x9131))+(((-1.0)*x9130*x9138))+((x9132*x9143))+(((-1.0)*r10*x9139*x9142)));
evalcond[7]=(((cj2*sj1))+((x9135*x9145))+(((-1.0)*r20*x9130*x9142))+x9136+((sj3*x9134))+((sj3*x9137)));
evalcond[8]=((((-1.0)*r20*x9139*x9142))+((x9135*x9143))+(((-1.0)*x9130*x9137))+(((-1.0)*x9130*x9134))+(((-1.0)*x9140))+x9129);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9146=((1.0)*r11);
IkReal x9147=(gconst2*r10);
CheckValue<IkReal> x9148=IKPowWithIntegerCheck((x9147+(((-1.0)*gconst1*x9146))),-1);
if(!x9148.valid){
continue;
}
CheckValue<IkReal> x9149=IKPowWithIntegerCheck(((((-1.0)*cj3*x9147))+((cj3*gconst1*r11))),-1);
if(!x9149.valid){
continue;
}
if( IKabs(x9148.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9149.value)*(((((-1.0)*gconst1*r10*sj3))+(((-1.0)*gconst2*sj3*x9146)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x9148.value)+IKsqr(((x9149.value)*(((((-1.0)*gconst1*r10*sj3))+(((-1.0)*gconst2*sj3*x9146))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x9148.value, ((x9149.value)*(((((-1.0)*gconst1*r10*sj3))+(((-1.0)*gconst2*sj3*x9146))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9150=IKsin(j4);
IkReal x9151=IKcos(j4);
IkReal x9152=(cj1*cj2);
IkReal x9153=((1.0)*cj3);
IkReal x9154=(gconst1*r10);
IkReal x9155=(gconst1*r11);
IkReal x9156=((1.0)*sj1);
IkReal x9157=(gconst2*r21);
IkReal x9158=(gconst1*r21);
IkReal x9159=(cj1*sj2);
IkReal x9160=(gconst1*r20);
IkReal x9161=(gconst2*r11);
IkReal x9162=((1.0)*sj3);
IkReal x9163=(sj2*x9156);
IkReal x9164=(gconst2*x9150);
IkReal x9165=(gconst2*x9151);
IkReal x9166=(sj3*x9151);
IkReal x9167=((1.0)*x9150);
IkReal x9168=(cj3*x9151);
evalcond[0]=((-1.0)*r02*x9151);
evalcond[1]=((((-1.0)*x9158*x9167))+((r20*x9164)));
evalcond[2]=((-1.0)+(((-1.0)*x9155*x9167))+((r10*x9164)));
evalcond[3]=(x9152+(((-1.0)*r02*x9150*x9153))+(((-1.0)*x9163)));
evalcond[4]=((((-1.0)*cj2*x9156))+(((-1.0)*x9159))+(((-1.0)*r02*x9150*x9162)));
evalcond[5]=(((sj3*x9154))+((sj3*x9161))+(((-1.0)*r10*x9153*x9165))+((x9155*x9168)));
evalcond[6]=((((-1.0)*x9153*x9154))+(((-1.0)*r10*x9162*x9165))+(((-1.0)*x9153*x9161))+((x9155*x9166)));
evalcond[7]=((((-1.0)*r20*x9153*x9165))+((cj2*sj1))+x9159+((sj3*x9157))+((sj3*x9160))+((x9158*x9168)));
evalcond[8]=((((-1.0)*x9153*x9157))+x9152+(((-1.0)*r20*x9162*x9165))+(((-1.0)*x9153*x9160))+((x9158*x9166))+(((-1.0)*x9163)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9169=(gconst1*r11);
IkReal x9170=(gconst2*r10);
CheckValue<IkReal> x9171=IKPowWithIntegerCheck(((((-1.0)*x9169))+x9170),-1);
if(!x9171.valid){
continue;
}
CheckValue<IkReal> x9172=IKPowWithIntegerCheck(((((-1.0)*sj3*x9170))+((sj3*x9169))),-1);
if(!x9172.valid){
continue;
}
if( IKabs(x9171.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9172.value)*((((cj3*gconst2*r11))+((cj3*gconst1*r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x9171.value)+IKsqr(((x9172.value)*((((cj3*gconst2*r11))+((cj3*gconst1*r10))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x9171.value, ((x9172.value)*((((cj3*gconst2*r11))+((cj3*gconst1*r10))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9173=IKsin(j4);
IkReal x9174=IKcos(j4);
IkReal x9175=(cj1*cj2);
IkReal x9176=((1.0)*cj3);
IkReal x9177=(gconst1*r10);
IkReal x9178=(gconst1*r11);
IkReal x9179=((1.0)*sj1);
IkReal x9180=(gconst2*r21);
IkReal x9181=(gconst1*r21);
IkReal x9182=(cj1*sj2);
IkReal x9183=(gconst1*r20);
IkReal x9184=(gconst2*r11);
IkReal x9185=((1.0)*sj3);
IkReal x9186=(sj2*x9179);
IkReal x9187=(gconst2*x9173);
IkReal x9188=(gconst2*x9174);
IkReal x9189=(sj3*x9174);
IkReal x9190=((1.0)*x9173);
IkReal x9191=(cj3*x9174);
evalcond[0]=((-1.0)*r02*x9174);
evalcond[1]=(((r20*x9187))+(((-1.0)*x9181*x9190)));
evalcond[2]=((-1.0)+(((-1.0)*x9178*x9190))+((r10*x9187)));
evalcond[3]=(x9175+(((-1.0)*x9186))+(((-1.0)*r02*x9173*x9176)));
evalcond[4]=((((-1.0)*cj2*x9179))+(((-1.0)*r02*x9173*x9185))+(((-1.0)*x9182)));
evalcond[5]=(((sj3*x9177))+((x9178*x9191))+((sj3*x9184))+(((-1.0)*r10*x9176*x9188)));
evalcond[6]=(((x9178*x9189))+(((-1.0)*x9176*x9184))+(((-1.0)*x9176*x9177))+(((-1.0)*r10*x9185*x9188)));
evalcond[7]=(((cj2*sj1))+((sj3*x9180))+((sj3*x9183))+x9182+((x9181*x9191))+(((-1.0)*r20*x9176*x9188)));
evalcond[8]=((((-1.0)*r20*x9185*x9188))+((x9181*x9189))+x9175+(((-1.0)*x9186))+(((-1.0)*x9176*x9183))+(((-1.0)*x9176*x9180)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9192=gconst2*gconst2;
IkReal x9193=gconst1*gconst1;
IkReal x9194=(r11*sj3);
IkReal x9195=(gconst1*gconst2);
IkReal x9196=((1.0)*r00);
IkReal x9197=(cj3*r11);
IkReal x9198=(cj3*r10);
IkReal x9199=((1.0)*r02);
IkReal x9200=(r10*sj3);
IkReal x9201=(r01*x9193);
CheckValue<IkReal> x9202 = IKatan2WithCheck(IkReal(((((-1.0)*gconst1*x9198*x9199))+(((-1.0)*gconst2*x9197*x9199)))),IkReal(((((-1.0)*x9195*x9196*x9198))+(((-1.0)*x9192*x9196*x9197))+((x9198*x9201))+((r01*x9195*x9197)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9202.valid){
continue;
}
CheckValue<IkReal> x9203=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*r01*x9195*x9200))+(((-1.0)*x9194*x9195*x9196))+((x9194*x9201))+((r00*x9192*x9200)))),-1);
if(!x9203.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9202.value)+(((1.5707963267949)*(x9203.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9204=IKsin(j4);
IkReal x9205=IKcos(j4);
IkReal x9206=(cj1*cj2);
IkReal x9207=(gconst1*r01);
IkReal x9208=(gconst2*sj3);
IkReal x9209=(cj3*gconst1);
IkReal x9210=(cj3*gconst2);
IkReal x9211=(cj2*sj1);
IkReal x9212=((1.0)*sj2);
IkReal x9213=(gconst1*r11);
IkReal x9214=(gconst1*r21);
IkReal x9215=(gconst1*sj3);
IkReal x9216=(sj1*x9212);
IkReal x9217=((1.0)*x9205);
IkReal x9218=((1.0)*x9204);
IkReal x9219=(sj3*x9205);
IkReal x9220=(gconst2*x9204);
evalcond[0]=(((r20*x9220))+(((-1.0)*x9214*x9218))+(((-1.0)*r22*x9217)));
evalcond[1]=(((r00*x9220))+(((-1.0)*r02*x9217))+(((-1.0)*x9207*x9218)));
evalcond[2]=((-1.0)+(((-1.0)*x9213*x9218))+(((-1.0)*r12*x9217))+((r10*x9220)));
evalcond[3]=(((r10*x9215))+(((-1.0)*r10*x9210*x9217))+((r11*x9208))+((r11*x9205*x9209))+(((-1.0)*cj3*r12*x9218)));
evalcond[4]=((((-1.0)*r12*sj3*x9218))+(((-1.0)*r10*x9208*x9217))+(((-1.0)*r11*x9210))+(((-1.0)*r10*x9209))+((x9213*x9219)));
evalcond[5]=(((r21*x9205*x9209))+(((-1.0)*cj3*r22*x9218))+((r20*x9215))+x9211+((cj1*sj2))+((r21*x9208))+(((-1.0)*r20*x9210*x9217)));
evalcond[6]=(((r00*x9215))+((r01*x9208))+(((-1.0)*r00*x9210*x9217))+x9206+(((-1.0)*cj3*r02*x9218))+(((-1.0)*x9216))+((cj3*x9205*x9207)));
evalcond[7]=((((-1.0)*r22*sj3*x9218))+(((-1.0)*r21*x9210))+((x9214*x9219))+x9206+(((-1.0)*r20*x9209))+(((-1.0)*r20*x9208*x9217))+(((-1.0)*x9216)));
evalcond[8]=((((-1.0)*r00*x9209))+(((-1.0)*r01*x9210))+(((-1.0)*r00*x9208*x9217))+((x9207*x9219))+(((-1.0)*r02*sj3*x9218))+(((-1.0)*x9211))+(((-1.0)*cj1*x9212)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9221=gconst1*gconst1;
IkReal x9222=gconst2*gconst2;
IkReal x9223=(r01*r11);
IkReal x9224=(r00*r10);
IkReal x9225=(gconst2*r11);
IkReal x9226=(r02*sj3);
IkReal x9227=(r01*r10);
IkReal x9228=(gconst1*gconst2*sj3);
IkReal x9229=((1.0)*cj3*gconst1);
CheckValue<IkReal> x9230=IKPowWithIntegerCheck(IKsign((((cj3*r02*r12))+((cj3*x9222*x9224))+(((-1.0)*r00*x9225*x9229))+(((-1.0)*gconst2*x9227*x9229))+((cj3*x9221*x9223)))),-1);
if(!x9230.valid){
continue;
}
CheckValue<IkReal> x9231 = IKatan2WithCheck(IkReal((((gconst1*r10*x9226))+((x9225*x9226)))),IkReal(((((-1.0)*sj3*x9221*x9227))+(((-1.0)*x9223*x9228))+((x9224*x9228))+((r00*r11*sj3*x9222)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9231.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9230.value)))+(x9231.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9232=IKsin(j4);
IkReal x9233=IKcos(j4);
IkReal x9234=(cj1*cj2);
IkReal x9235=(gconst1*r01);
IkReal x9236=(gconst2*sj3);
IkReal x9237=(cj3*gconst1);
IkReal x9238=(cj3*gconst2);
IkReal x9239=(cj2*sj1);
IkReal x9240=((1.0)*sj2);
IkReal x9241=(gconst1*r11);
IkReal x9242=(gconst1*r21);
IkReal x9243=(gconst1*sj3);
IkReal x9244=(sj1*x9240);
IkReal x9245=((1.0)*x9233);
IkReal x9246=((1.0)*x9232);
IkReal x9247=(sj3*x9233);
IkReal x9248=(gconst2*x9232);
evalcond[0]=((((-1.0)*r22*x9245))+((r20*x9248))+(((-1.0)*x9242*x9246)));
evalcond[1]=((((-1.0)*x9235*x9246))+((r00*x9248))+(((-1.0)*r02*x9245)));
evalcond[2]=((-1.0)+(((-1.0)*x9241*x9246))+(((-1.0)*r12*x9245))+((r10*x9248)));
evalcond[3]=(((r11*x9233*x9237))+(((-1.0)*cj3*r12*x9246))+((r10*x9243))+(((-1.0)*r10*x9238*x9245))+((r11*x9236)));
evalcond[4]=(((x9241*x9247))+(((-1.0)*r10*x9237))+(((-1.0)*r10*x9236*x9245))+(((-1.0)*r11*x9238))+(((-1.0)*r12*sj3*x9246)));
evalcond[5]=((((-1.0)*cj3*r22*x9246))+((r21*x9233*x9237))+x9239+((cj1*sj2))+((r21*x9236))+(((-1.0)*r20*x9238*x9245))+((r20*x9243)));
evalcond[6]=(x9234+(((-1.0)*x9244))+(((-1.0)*cj3*r02*x9246))+((r00*x9243))+((cj3*x9233*x9235))+(((-1.0)*r00*x9238*x9245))+((r01*x9236)));
evalcond[7]=((((-1.0)*r21*x9238))+x9234+(((-1.0)*r22*sj3*x9246))+((x9242*x9247))+(((-1.0)*x9244))+(((-1.0)*r20*x9236*x9245))+(((-1.0)*r20*x9237)));
evalcond[8]=((((-1.0)*r00*x9236*x9245))+(((-1.0)*r01*x9238))+(((-1.0)*cj1*x9240))+(((-1.0)*r00*x9237))+((x9235*x9247))+(((-1.0)*x9239))+(((-1.0)*r02*sj3*x9246)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9249=((1.0)*gconst1);
CheckValue<IkReal> x9250=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x9249)))),-1);
if(!x9250.valid){
continue;
}
CheckValue<IkReal> x9251 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x9249))+((gconst2*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9251.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9250.value)))+(x9251.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9252=IKsin(j4);
IkReal x9253=IKcos(j4);
IkReal x9254=(cj1*cj2);
IkReal x9255=(gconst1*r01);
IkReal x9256=(gconst2*sj3);
IkReal x9257=(cj3*gconst1);
IkReal x9258=(cj3*gconst2);
IkReal x9259=(cj2*sj1);
IkReal x9260=((1.0)*sj2);
IkReal x9261=(gconst1*r11);
IkReal x9262=(gconst1*r21);
IkReal x9263=(gconst1*sj3);
IkReal x9264=(sj1*x9260);
IkReal x9265=((1.0)*x9253);
IkReal x9266=((1.0)*x9252);
IkReal x9267=(sj3*x9253);
IkReal x9268=(gconst2*x9252);
evalcond[0]=((((-1.0)*r22*x9265))+((r20*x9268))+(((-1.0)*x9262*x9266)));
evalcond[1]=((((-1.0)*x9255*x9266))+((r00*x9268))+(((-1.0)*r02*x9265)));
evalcond[2]=((-1.0)+(((-1.0)*x9261*x9266))+((r10*x9268))+(((-1.0)*r12*x9265)));
evalcond[3]=((((-1.0)*cj3*r12*x9266))+(((-1.0)*r10*x9258*x9265))+((r10*x9263))+((r11*x9256))+((r11*x9253*x9257)));
evalcond[4]=((((-1.0)*r10*x9257))+(((-1.0)*r12*sj3*x9266))+(((-1.0)*r11*x9258))+(((-1.0)*r10*x9256*x9265))+((x9261*x9267)));
evalcond[5]=(x9259+((cj1*sj2))+(((-1.0)*cj3*r22*x9266))+((r20*x9263))+((r21*x9256))+(((-1.0)*r20*x9258*x9265))+((r21*x9253*x9257)));
evalcond[6]=((((-1.0)*x9264))+(((-1.0)*cj3*r02*x9266))+x9254+((r00*x9263))+((r01*x9256))+(((-1.0)*r00*x9258*x9265))+((cj3*x9253*x9255)));
evalcond[7]=(((x9262*x9267))+(((-1.0)*r20*x9256*x9265))+(((-1.0)*x9264))+(((-1.0)*r22*sj3*x9266))+(((-1.0)*r21*x9258))+x9254+(((-1.0)*r20*x9257)));
evalcond[8]=((((-1.0)*cj1*x9260))+(((-1.0)*r00*x9257))+(((-1.0)*r02*sj3*x9266))+(((-1.0)*r01*x9258))+(((-1.0)*r00*x9256*x9265))+(((-1.0)*x9259))+((x9255*x9267)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9271 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9271.valid){
continue;
}
IkReal x9269=((-1.0)*(x9271.value));
IkReal x9270=x7685;
sj5=gconst1;
cj5=gconst2;
j5=x9269;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9269;
IkReal gconst1=((-1.0)*r21*x9270);
IkReal gconst2=(r20*x9270);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9274 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9274.valid){
continue;
}
IkReal x9272=((-1.0)*(x9274.value));
IkReal x9273=x7685;
sj5=gconst1;
cj5=gconst2;
j5=x9272;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9272;
IkReal gconst1=((-1.0)*r21*x9273);
IkReal gconst2=(r20*x9273);
CheckValue<IkReal> x9282=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9282.valid){
continue;
}
IkReal x9275=x9282.value;
IkReal x9276=(cj3*x9275);
IkReal x9277=(r11*x9276);
IkReal x9278=(r01*x9276);
IkReal x9279=(r00*x9276);
IkReal x9280=(r10*x9276);
IkReal x9281=(r20*r21*x9276);
j4eval[0]=IKsign((((cj3*r02*r12))+((r10*r20*r21*x9278))+((r01*x9277*(r21*r21)))+((r00*r20*r21*x9277))+((r10*x9279*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9285 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9285.valid){
continue;
}
IkReal x9283=((-1.0)*(x9285.value));
IkReal x9284=x7685;
sj5=gconst1;
cj5=gconst2;
j5=x9283;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9283;
IkReal gconst1=((-1.0)*r21*x9284);
IkReal gconst2=(r20*x9284);
CheckValue<IkReal> x9293=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9293.valid){
continue;
}
IkReal x9286=x9293.value;
IkReal x9287=(sj3*x9286);
IkReal x9288=(r11*x9287);
IkReal x9289=(r00*x9287);
IkReal x9290=(r01*x9287);
IkReal x9291=(r10*x9287);
IkReal x9292=(r20*r21*x9287);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*r20*r21*x9290))+((r00*r20*r21*x9288))+((r01*x9288*(r21*r21)))+((r10*x9289*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9296 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9296.valid){
continue;
}
IkReal x9294=((-1.0)*(x9296.value));
IkReal x9295=x7685;
sj5=gconst1;
cj5=gconst2;
j5=x9294;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x9294;
IkReal gconst1=((-1.0)*r21*x9295);
IkReal gconst2=(r20*x9295);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x9299 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9299.valid){
continue;
}
IkReal x9297=((-1.0)*(x9299.value));
IkReal x9298=x7685;
sj5=gconst1;
cj5=gconst2;
j5=x9297;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x9297;
IkReal gconst1=((-1.0)*r21*x9298);
IkReal gconst2=(r20*x9298);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9302 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9302.valid){
continue;
}
IkReal x9300=((-1.0)*(x9302.value));
IkReal x9301=x7685;
sj5=gconst1;
cj5=gconst2;
j5=x9300;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x9300;
IkReal gconst1=((-1.0)*r21*x9301);
IkReal gconst2=(r20*x9301);
IkReal x9303=r22*r22;
IkReal x9304=(cj1*r12*sj2);
IkReal x9305=(cj2*r12*sj1);
CheckValue<IkReal> x9309=IKPowWithIntegerCheck(((-1.0)+x9303),-1);
if(!x9309.valid){
continue;
}
IkReal x9306=x9309.value;
if((((1.0)+(((-1.0)*x9303)))) < -0.00001)
continue;
IkReal x9307=IKsqrt(((1.0)+(((-1.0)*x9303))));
IkReal x9308=((1.0)*r22*x9306*x9307);
j4eval[0]=((IKabs((x9304+x9305)))+(IKabs(((((-1.0)*x9305*x9308))+(((-1.0)*x9304*x9308))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9310=(cj1*sj2);
IkReal x9311=(cj2*sj1);
IkReal x9312=(gconst1*r11);
IkReal x9313=((1.0)*gconst2*r10);
CheckValue<IkReal> x9314=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9314.valid){
continue;
}
CheckValue<IkReal> x9315 = IKatan2WithCheck(IkReal((((x9311*x9312))+(((-1.0)*x9310*x9313))+(((-1.0)*x9311*x9313))+((x9310*x9312)))),IkReal((((r12*x9311))+((r12*x9310)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9315.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9314.value)))+(x9315.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9316=IKsin(j4);
IkReal x9317=IKcos(j4);
IkReal x9318=(gconst1*r01);
IkReal x9319=(gconst1*r21);
IkReal x9320=(gconst1*r11);
IkReal x9321=((1.0)*x9317);
IkReal x9322=((1.0)*x9316);
IkReal x9323=(gconst2*x9316);
evalcond[0]=(((r20*x9323))+(((-1.0)*r22*x9321))+(((-1.0)*x9319*x9322)));
evalcond[1]=((((-1.0)*r02*x9321))+((r00*x9323))+(((-1.0)*x9318*x9322)));
evalcond[2]=(((x9317*x9320))+(((-1.0)*r12*x9322))+(((-1.0)*gconst2*r10*x9321)));
evalcond[3]=((1.0)+(((-1.0)*r12*x9321))+((r10*x9323))+(((-1.0)*x9320*x9322)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x9322))+((cj1*sj2))+(((-1.0)*gconst2*r20*x9321))+((x9317*x9319)));
evalcond[5]=((((-1.0)*r02*x9322))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r00*x9321))+((x9317*x9318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9324=(gconst2*r10);
IkReal x9325=(gconst1*r11);
CheckValue<IkReal> x9326 = IKatan2WithCheck(IkReal(((((-1.0)*x9324))+x9325)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9326.valid){
continue;
}
CheckValue<IkReal> x9327=IKPowWithIntegerCheck(IKsign(((x9324*x9324)+(r12*r12)+(((-2.0)*x9324*x9325))+(x9325*x9325))),-1);
if(!x9327.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9326.value)+(((1.5707963267949)*(x9327.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9328=IKsin(j4);
IkReal x9329=IKcos(j4);
IkReal x9330=(gconst1*r01);
IkReal x9331=(gconst1*r21);
IkReal x9332=(gconst1*r11);
IkReal x9333=((1.0)*x9329);
IkReal x9334=((1.0)*x9328);
IkReal x9335=(gconst2*x9328);
evalcond[0]=(((r20*x9335))+(((-1.0)*r22*x9333))+(((-1.0)*x9331*x9334)));
evalcond[1]=((((-1.0)*r02*x9333))+((r00*x9335))+(((-1.0)*x9330*x9334)));
evalcond[2]=((((-1.0)*gconst2*r10*x9333))+((x9329*x9332))+(((-1.0)*r12*x9334)));
evalcond[3]=((1.0)+(((-1.0)*r12*x9333))+(((-1.0)*x9332*x9334))+((r10*x9335)));
evalcond[4]=(((cj2*sj1))+((x9329*x9331))+(((-1.0)*r22*x9334))+((cj1*sj2))+(((-1.0)*gconst2*r20*x9333)));
evalcond[5]=(((x9329*x9330))+(((-1.0)*r02*x9334))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r00*x9333)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9336 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9336.valid){
continue;
}
CheckValue<IkReal> x9337=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9337.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9336.value)+(((1.5707963267949)*(x9337.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9338=IKsin(j4);
IkReal x9339=IKcos(j4);
IkReal x9340=(gconst1*r01);
IkReal x9341=(gconst1*r21);
IkReal x9342=(gconst1*r11);
IkReal x9343=((1.0)*x9339);
IkReal x9344=((1.0)*x9338);
IkReal x9345=(gconst2*x9338);
evalcond[0]=((((-1.0)*r22*x9343))+((r20*x9345))+(((-1.0)*x9341*x9344)));
evalcond[1]=((((-1.0)*x9340*x9344))+((r00*x9345))+(((-1.0)*r02*x9343)));
evalcond[2]=(((x9339*x9342))+(((-1.0)*r12*x9344))+(((-1.0)*gconst2*r10*x9343)));
evalcond[3]=((1.0)+((r10*x9345))+(((-1.0)*r12*x9343))+(((-1.0)*x9342*x9344)));
evalcond[4]=(((cj2*sj1))+((x9339*x9341))+(((-1.0)*r22*x9344))+((cj1*sj2))+(((-1.0)*gconst2*r20*x9343)));
evalcond[5]=(((x9339*x9340))+(((-1.0)*r02*x9344))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r00*x9343)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9348 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9348.valid){
continue;
}
IkReal x9346=((-1.0)*(x9348.value));
IkReal x9347=x7685;
sj5=gconst1;
cj5=gconst2;
j5=x9346;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9346;
IkReal gconst1=((-1.0)*r21*x9347);
IkReal gconst2=(r20*x9347);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x9351 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9351.valid){
continue;
}
IkReal x9349=((-1.0)*(x9351.value));
IkReal x9350=x7685;
sj5=gconst1;
cj5=gconst2;
j5=x9349;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9349;
IkReal gconst1=((-1.0)*r21*x9350);
IkReal gconst2=(r20*x9350);
IkReal x9352=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9356=IKPowWithIntegerCheck(x9352,-1);
if(!x9356.valid){
continue;
}
IkReal x9353=x9356.value;
IkReal x9354=((1.0)*x9353);
IkReal x9355=((((-1.0)*x9354*(r11*r11)*(r21*r21)))+(((-1.0)*x9354*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x9353)));
j4eval[0]=x9355;
j4eval[1]=IKsign(x9355);
j4eval[2]=r12;
j4eval[3]=x9352;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9359 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9359.valid){
continue;
}
IkReal x9357=((-1.0)*(x9359.value));
IkReal x9358=x7685;
sj5=gconst1;
cj5=gconst2;
j5=x9357;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9357;
IkReal gconst1=((-1.0)*r21*x9358);
IkReal gconst2=(r20*x9358);
IkReal x9360=r22*r22;
IkReal x9361=(cj1*r12*sj2);
IkReal x9362=(cj2*r12*sj1);
CheckValue<IkReal> x9366=IKPowWithIntegerCheck(((-1.0)+x9360),-1);
if(!x9366.valid){
continue;
}
IkReal x9363=x9366.value;
if((((1.0)+(((-1.0)*x9360)))) < -0.00001)
continue;
IkReal x9364=IKsqrt(((1.0)+(((-1.0)*x9360))));
IkReal x9365=(r22*x9363*x9364);
j4eval[0]=((IKabs((((x9361*x9365))+((x9362*x9365)))))+(IKabs(((((-1.0)*x9362))+(((-1.0)*x9361))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9367=(cj2*sj1);
IkReal x9368=(gconst2*r10);
IkReal x9369=(cj1*sj2);
IkReal x9370=((1.0)*r12);
IkReal x9371=((1.0)*gconst1*r11);
CheckValue<IkReal> x9372 = IKatan2WithCheck(IkReal(((((-1.0)*x9369*x9371))+((x9368*x9369))+(((-1.0)*x9367*x9371))+((x9367*x9368)))),IkReal(((((-1.0)*x9369*x9370))+(((-1.0)*x9367*x9370)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9372.valid){
continue;
}
CheckValue<IkReal> x9373=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9373.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9372.value)+(((1.5707963267949)*(x9373.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9374=IKcos(j4);
IkReal x9375=IKsin(j4);
IkReal x9376=(gconst1*r01);
IkReal x9377=(gconst1*r21);
IkReal x9378=(gconst1*r11);
IkReal x9379=((1.0)*x9374);
IkReal x9380=(gconst2*x9374);
IkReal x9381=((1.0)*x9375);
IkReal x9382=(gconst2*x9375);
evalcond[0]=((((-1.0)*x9378*x9379))+((r10*x9380))+((r12*x9375)));
evalcond[1]=((((-1.0)*x9377*x9381))+(((-1.0)*r22*x9379))+((r20*x9382)));
evalcond[2]=((((-1.0)*x9376*x9381))+(((-1.0)*r02*x9379))+((r00*x9382)));
evalcond[3]=((1.0)+((r10*x9382))+(((-1.0)*x9378*x9381))+(((-1.0)*r12*x9379)));
evalcond[4]=(((cj2*sj1))+((r22*x9375))+((cj1*sj2))+(((-1.0)*x9377*x9379))+((r20*x9380)));
evalcond[5]=((((-1.0)*x9376*x9379))+((r02*x9375))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r00*x9380)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9383=(gconst1*r11);
IkReal x9384=(gconst2*r10);
CheckValue<IkReal> x9385 = IKatan2WithCheck(IkReal((x9384+(((-1.0)*x9383)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9385.valid){
continue;
}
CheckValue<IkReal> x9386=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9383*x9383)))+(((2.0)*x9383*x9384))+(((-1.0)*(x9384*x9384)))+(((-1.0)*(r12*r12))))),-1);
if(!x9386.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9385.value)+(((1.5707963267949)*(x9386.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9387=IKcos(j4);
IkReal x9388=IKsin(j4);
IkReal x9389=(gconst1*r01);
IkReal x9390=(gconst1*r21);
IkReal x9391=(gconst1*r11);
IkReal x9392=((1.0)*x9387);
IkReal x9393=(gconst2*x9387);
IkReal x9394=((1.0)*x9388);
IkReal x9395=(gconst2*x9388);
evalcond[0]=(((r10*x9393))+(((-1.0)*x9391*x9392))+((r12*x9388)));
evalcond[1]=((((-1.0)*x9390*x9394))+((r20*x9395))+(((-1.0)*r22*x9392)));
evalcond[2]=((((-1.0)*x9389*x9394))+(((-1.0)*r02*x9392))+((r00*x9395)));
evalcond[3]=((1.0)+(((-1.0)*r12*x9392))+((r10*x9395))+(((-1.0)*x9391*x9394)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x9390*x9392))+((r20*x9393))+((cj1*sj2))+((r22*x9388)));
evalcond[5]=(((r02*x9388))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x9389*x9392))+((r00*x9393)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9396 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9396.valid){
continue;
}
CheckValue<IkReal> x9397=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9397.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9396.value)+(((1.5707963267949)*(x9397.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9398=IKcos(j4);
IkReal x9399=IKsin(j4);
IkReal x9400=(gconst1*r01);
IkReal x9401=(gconst1*r21);
IkReal x9402=(gconst1*r11);
IkReal x9403=((1.0)*x9398);
IkReal x9404=(gconst2*x9398);
IkReal x9405=((1.0)*x9399);
IkReal x9406=(gconst2*x9399);
evalcond[0]=(((r12*x9399))+((r10*x9404))+(((-1.0)*x9402*x9403)));
evalcond[1]=((((-1.0)*r22*x9403))+((r20*x9406))+(((-1.0)*x9401*x9405)));
evalcond[2]=((((-1.0)*r02*x9403))+(((-1.0)*x9400*x9405))+((r00*x9406)));
evalcond[3]=((1.0)+(((-1.0)*r12*x9403))+((r10*x9406))+(((-1.0)*x9402*x9405)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r20*x9404))+((r22*x9399))+(((-1.0)*x9401*x9403)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x9399))+(((-1.0)*x9400*x9403))+((r00*x9404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9407=((-1.0)*px);
CheckValue<IkReal> x9409 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9409.valid){
continue;
}
IkReal x9408=((-1.0)*(x9409.value));
sj5=gconst1;
cj5=gconst2;
j5=x9408;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9407);
rxp1_1=(px*r21);
rxp1_2=(r11*x9407);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9408;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x9410=((1.0)*sj3);
IkReal x9411=(r11*r21);
IkReal x9412=(r10*r20);
j4eval[0]=(x9411+x9412);
j4eval[1]=((((-1.0)*x9410*x9412))+(((-1.0)*x9410*x9411)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9413=((-1.0)*px);
CheckValue<IkReal> x9415 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9415.valid){
continue;
}
IkReal x9414=((-1.0)*(x9415.value));
sj5=gconst1;
cj5=gconst2;
j5=x9414;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9413);
rxp1_1=(px*r21);
rxp1_2=(r11*x9413);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9414;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x9416=(r10*r20);
IkReal x9417=((1.0)*cj3);
IkReal x9418=(r11*r21);
j4eval[0]=(x9416+x9418);
j4eval[1]=((((-1.0)*x9416*x9417))+(((-1.0)*x9417*x9418)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9419=((-1.0)*px);
CheckValue<IkReal> x9421 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9421.valid){
continue;
}
IkReal x9420=((-1.0)*(x9421.value));
sj5=gconst1;
cj5=gconst2;
j5=x9420;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9419);
rxp1_1=(px*r21);
rxp1_2=(r11*x9419);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9420;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x9422=((1.0)*cj3);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((((-1.0)*r10*r20*x9422))+(((-1.0)*r11*r21*x9422)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9423=((1.0)*gconst2);
CheckValue<IkReal> x9424=IKPowWithIntegerCheck(r02,-1);
if(!x9424.valid){
continue;
}
CheckValue<IkReal> x9425=IKPowWithIntegerCheck(sj3,-1);
if(!x9425.valid){
continue;
}
CheckValue<IkReal> x9426=IKPowWithIntegerCheck(((((-1.0)*cj3*r10*x9423))+((cj3*gconst1*r11))),-1);
if(!x9426.valid){
continue;
}
if( IKabs(((x9424.value)*(x9425.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9426.value)*(((((-1.0)*gconst1*r10*sj3))+(((-1.0)*r11*sj3*x9423)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9424.value)*(x9425.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x9426.value)*(((((-1.0)*gconst1*r10*sj3))+(((-1.0)*r11*sj3*x9423))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x9424.value)*(x9425.value)*((((cj2*sj1))+((cj1*sj2))))), ((x9426.value)*(((((-1.0)*gconst1*r10*sj3))+(((-1.0)*r11*sj3*x9423))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9427=IKsin(j4);
IkReal x9428=IKcos(j4);
IkReal x9429=(cj2*sj1);
IkReal x9430=(cj1*sj2);
IkReal x9431=(sj1*sj2);
IkReal x9432=((1.0)*cj3);
IkReal x9433=(gconst1*r10);
IkReal x9434=(cj1*cj2);
IkReal x9435=(gconst2*r21);
IkReal x9436=(gconst1*sj3);
IkReal x9437=(gconst2*r11);
IkReal x9438=(cj3*gconst1);
IkReal x9439=((1.0)*sj3);
IkReal x9440=(gconst2*x9427);
IkReal x9441=(gconst2*x9428);
IkReal x9442=(r11*x9428);
IkReal x9443=(r02*x9427);
IkReal x9444=(r21*x9428);
IkReal x9445=(x9430+x9429);
IkReal x9446=((1.0)*gconst1*x9427);
evalcond[0]=((-1.0)*r02*x9428);
evalcond[1]=(((r20*x9440))+(((-1.0)*r21*x9446)));
evalcond[2]=((((-1.0)*x9439*x9443))+x9445);
evalcond[3]=((1.0)+((r10*x9440))+(((-1.0)*r11*x9446)));
evalcond[4]=((((-1.0)*x9434))+(((-1.0)*x9432*x9443))+x9431);
evalcond[5]=(((sj3*x9437))+((sj3*x9433))+(((-1.0)*r10*x9432*x9441))+((x9438*x9442)));
evalcond[6]=((((-1.0)*r10*x9439*x9441))+(((-1.0)*x9432*x9437))+(((-1.0)*x9432*x9433))+((x9436*x9442)));
evalcond[7]=((((-1.0)*r20*x9432*x9441))+((sj3*x9435))+((r20*x9436))+x9445+((x9438*x9444)));
evalcond[8]=((((-1.0)*r20*x9439*x9441))+(((-1.0)*x9431))+(((-1.0)*gconst1*r20*x9432))+(((-1.0)*x9432*x9435))+x9434+((x9436*x9444)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9447=((1.0)*r11);
IkReal x9448=(gconst2*r10);
CheckValue<IkReal> x9449=IKPowWithIntegerCheck(((((-1.0)*gconst1*x9447))+x9448),-1);
if(!x9449.valid){
continue;
}
CheckValue<IkReal> x9450=IKPowWithIntegerCheck(((((-1.0)*cj3*x9448))+((cj3*gconst1*r11))),-1);
if(!x9450.valid){
continue;
}
if( IKabs(((-1.0)*(x9449.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9450.value)*(((((-1.0)*gconst1*r10*sj3))+(((-1.0)*gconst2*sj3*x9447)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x9449.value)))+IKsqr(((x9450.value)*(((((-1.0)*gconst1*r10*sj3))+(((-1.0)*gconst2*sj3*x9447))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x9449.value)), ((x9450.value)*(((((-1.0)*gconst1*r10*sj3))+(((-1.0)*gconst2*sj3*x9447))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9451=IKsin(j4);
IkReal x9452=IKcos(j4);
IkReal x9453=(cj2*sj1);
IkReal x9454=(cj1*sj2);
IkReal x9455=(sj1*sj2);
IkReal x9456=((1.0)*cj3);
IkReal x9457=(gconst1*r10);
IkReal x9458=(cj1*cj2);
IkReal x9459=(gconst2*r21);
IkReal x9460=(gconst1*sj3);
IkReal x9461=(gconst2*r11);
IkReal x9462=(cj3*gconst1);
IkReal x9463=((1.0)*sj3);
IkReal x9464=(gconst2*x9451);
IkReal x9465=(gconst2*x9452);
IkReal x9466=(r11*x9452);
IkReal x9467=(r02*x9451);
IkReal x9468=(r21*x9452);
IkReal x9469=(x9454+x9453);
IkReal x9470=((1.0)*gconst1*x9451);
evalcond[0]=((-1.0)*r02*x9452);
evalcond[1]=(((r20*x9464))+(((-1.0)*r21*x9470)));
evalcond[2]=(x9469+(((-1.0)*x9463*x9467)));
evalcond[3]=((1.0)+((r10*x9464))+(((-1.0)*r11*x9470)));
evalcond[4]=((((-1.0)*x9456*x9467))+(((-1.0)*x9458))+x9455);
evalcond[5]=(((sj3*x9461))+((sj3*x9457))+((x9462*x9466))+(((-1.0)*r10*x9456*x9465)));
evalcond[6]=((((-1.0)*x9456*x9461))+(((-1.0)*x9456*x9457))+(((-1.0)*r10*x9463*x9465))+((x9460*x9466)));
evalcond[7]=((((-1.0)*r20*x9456*x9465))+((sj3*x9459))+((r20*x9460))+x9469+((x9462*x9468)));
evalcond[8]=((((-1.0)*r20*x9463*x9465))+(((-1.0)*x9456*x9459))+(((-1.0)*gconst1*r20*x9456))+((x9460*x9468))+(((-1.0)*x9455))+x9458);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9471=(gconst1*r11);
IkReal x9472=(gconst2*r10);
CheckValue<IkReal> x9473=IKPowWithIntegerCheck(((((-1.0)*x9471))+x9472),-1);
if(!x9473.valid){
continue;
}
CheckValue<IkReal> x9474=IKPowWithIntegerCheck((((sj3*x9471))+(((-1.0)*sj3*x9472))),-1);
if(!x9474.valid){
continue;
}
if( IKabs(((-1.0)*(x9473.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9474.value)*((((cj3*gconst2*r11))+((cj3*gconst1*r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x9473.value)))+IKsqr(((x9474.value)*((((cj3*gconst2*r11))+((cj3*gconst1*r10))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x9473.value)), ((x9474.value)*((((cj3*gconst2*r11))+((cj3*gconst1*r10))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9475=IKsin(j4);
IkReal x9476=IKcos(j4);
IkReal x9477=(cj2*sj1);
IkReal x9478=(cj1*sj2);
IkReal x9479=(sj1*sj2);
IkReal x9480=((1.0)*cj3);
IkReal x9481=(gconst1*r10);
IkReal x9482=(cj1*cj2);
IkReal x9483=(gconst2*r21);
IkReal x9484=(gconst1*sj3);
IkReal x9485=(gconst2*r11);
IkReal x9486=(cj3*gconst1);
IkReal x9487=((1.0)*sj3);
IkReal x9488=(gconst2*x9475);
IkReal x9489=(gconst2*x9476);
IkReal x9490=(r11*x9476);
IkReal x9491=(r02*x9475);
IkReal x9492=(r21*x9476);
IkReal x9493=(x9478+x9477);
IkReal x9494=((1.0)*gconst1*x9475);
evalcond[0]=((-1.0)*r02*x9476);
evalcond[1]=(((r20*x9488))+(((-1.0)*r21*x9494)));
evalcond[2]=(x9493+(((-1.0)*x9487*x9491)));
evalcond[3]=((1.0)+(((-1.0)*r11*x9494))+((r10*x9488)));
evalcond[4]=((((-1.0)*x9482))+x9479+(((-1.0)*x9480*x9491)));
evalcond[5]=((((-1.0)*r10*x9480*x9489))+((sj3*x9481))+((sj3*x9485))+((x9486*x9490)));
evalcond[6]=((((-1.0)*x9480*x9485))+(((-1.0)*x9480*x9481))+(((-1.0)*r10*x9487*x9489))+((x9484*x9490)));
evalcond[7]=((((-1.0)*r20*x9480*x9489))+((sj3*x9483))+((r20*x9484))+x9493+((x9486*x9492)));
evalcond[8]=((((-1.0)*x9480*x9483))+(((-1.0)*r20*x9487*x9489))+((x9484*x9492))+(((-1.0)*x9479))+x9482+(((-1.0)*gconst1*r20*x9480)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9495=gconst2*gconst2;
IkReal x9496=gconst1*gconst1;
IkReal x9497=(r11*sj3);
IkReal x9498=(gconst1*gconst2);
IkReal x9499=((1.0)*r00);
IkReal x9500=(cj3*r11);
IkReal x9501=(cj3*r10);
IkReal x9502=((1.0)*r02);
IkReal x9503=(r10*sj3);
IkReal x9504=(r01*x9496);
CheckValue<IkReal> x9505 = IKatan2WithCheck(IkReal(((((-1.0)*gconst1*x9501*x9502))+(((-1.0)*gconst2*x9500*x9502)))),IkReal(((((-1.0)*x9498*x9499*x9501))+((r01*x9498*x9500))+(((-1.0)*x9495*x9499*x9500))+((x9501*x9504)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9505.valid){
continue;
}
CheckValue<IkReal> x9506=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x9498*x9503))+((r02*r12*sj3))+((r00*x9495*x9503))+(((-1.0)*x9497*x9498*x9499))+((x9497*x9504)))),-1);
if(!x9506.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9505.value)+(((1.5707963267949)*(x9506.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9507=IKsin(j4);
IkReal x9508=IKcos(j4);
IkReal x9509=(cj2*sj1);
IkReal x9510=(cj1*sj2);
IkReal x9511=(gconst1*r01);
IkReal x9512=(gconst2*sj3);
IkReal x9513=(sj1*sj2);
IkReal x9514=(cj3*gconst1);
IkReal x9515=(cj3*gconst2);
IkReal x9516=(cj1*cj2);
IkReal x9517=(gconst1*r11);
IkReal x9518=(gconst1*r21);
IkReal x9519=(gconst1*sj3);
IkReal x9520=((1.0)*x9508);
IkReal x9521=((1.0)*x9507);
IkReal x9522=(sj3*x9508);
IkReal x9523=(gconst2*x9507);
IkReal x9524=(x9509+x9510);
evalcond[0]=(((r20*x9523))+(((-1.0)*r22*x9520))+(((-1.0)*x9518*x9521)));
evalcond[1]=((((-1.0)*r02*x9520))+(((-1.0)*x9511*x9521))+((r00*x9523)));
evalcond[2]=((1.0)+(((-1.0)*r12*x9520))+((r10*x9523))+(((-1.0)*x9517*x9521)));
evalcond[3]=((((-1.0)*cj3*r12*x9521))+(((-1.0)*r10*x9515*x9520))+((r11*x9508*x9514))+((r11*x9512))+((r10*x9519)));
evalcond[4]=(((x9517*x9522))+(((-1.0)*r11*x9515))+(((-1.0)*r10*x9512*x9520))+(((-1.0)*r12*sj3*x9521))+(((-1.0)*r10*x9514)));
evalcond[5]=(((r21*x9512))+x9524+(((-1.0)*r20*x9515*x9520))+(((-1.0)*cj3*r22*x9521))+((r21*x9508*x9514))+((r20*x9519)));
evalcond[6]=((((-1.0)*x9516))+((r00*x9519))+((r01*x9512))+(((-1.0)*r00*x9515*x9520))+(((-1.0)*cj3*r02*x9521))+x9513+((cj3*x9508*x9511)));
evalcond[7]=((((-1.0)*r00*x9514))+(((-1.0)*r01*x9515))+x9524+(((-1.0)*r02*sj3*x9521))+(((-1.0)*r00*x9512*x9520))+((x9511*x9522)));
evalcond[8]=((((-1.0)*x9513))+((x9518*x9522))+(((-1.0)*r21*x9515))+(((-1.0)*r20*x9512*x9520))+(((-1.0)*r22*sj3*x9521))+x9516+(((-1.0)*r20*x9514)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9525=gconst1*gconst1;
IkReal x9526=gconst2*gconst2;
IkReal x9527=(r01*r11);
IkReal x9528=(r00*r10);
IkReal x9529=(gconst2*r11);
IkReal x9530=(r02*sj3);
IkReal x9531=(r01*r10);
IkReal x9532=(gconst1*gconst2*sj3);
IkReal x9533=((1.0)*cj3*gconst1);
CheckValue<IkReal> x9534=IKPowWithIntegerCheck(IKsign((((cj3*r02*r12))+((cj3*x9526*x9528))+(((-1.0)*gconst2*x9531*x9533))+((cj3*x9525*x9527))+(((-1.0)*r00*x9529*x9533)))),-1);
if(!x9534.valid){
continue;
}
CheckValue<IkReal> x9535 = IKatan2WithCheck(IkReal((((x9529*x9530))+((gconst1*r10*x9530)))),IkReal(((((-1.0)*sj3*x9525*x9531))+(((-1.0)*x9527*x9532))+((r00*r11*sj3*x9526))+((x9528*x9532)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9535.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9534.value)))+(x9535.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9536=IKsin(j4);
IkReal x9537=IKcos(j4);
IkReal x9538=(cj2*sj1);
IkReal x9539=(cj1*sj2);
IkReal x9540=(gconst1*r01);
IkReal x9541=(gconst2*sj3);
IkReal x9542=(sj1*sj2);
IkReal x9543=(cj3*gconst1);
IkReal x9544=(cj3*gconst2);
IkReal x9545=(cj1*cj2);
IkReal x9546=(gconst1*r11);
IkReal x9547=(gconst1*r21);
IkReal x9548=(gconst1*sj3);
IkReal x9549=((1.0)*x9537);
IkReal x9550=((1.0)*x9536);
IkReal x9551=(sj3*x9537);
IkReal x9552=(gconst2*x9536);
IkReal x9553=(x9539+x9538);
evalcond[0]=((((-1.0)*r22*x9549))+((r20*x9552))+(((-1.0)*x9547*x9550)));
evalcond[1]=((((-1.0)*r02*x9549))+(((-1.0)*x9540*x9550))+((r00*x9552)));
evalcond[2]=((1.0)+(((-1.0)*r12*x9549))+(((-1.0)*x9546*x9550))+((r10*x9552)));
evalcond[3]=(((r11*x9537*x9543))+((r11*x9541))+(((-1.0)*cj3*r12*x9550))+((r10*x9548))+(((-1.0)*r10*x9544*x9549)));
evalcond[4]=((((-1.0)*r12*sj3*x9550))+(((-1.0)*r10*x9541*x9549))+(((-1.0)*r11*x9544))+((x9546*x9551))+(((-1.0)*r10*x9543)));
evalcond[5]=(((r20*x9548))+(((-1.0)*r20*x9544*x9549))+((r21*x9541))+x9553+((r21*x9537*x9543))+(((-1.0)*cj3*r22*x9550)));
evalcond[6]=(((cj3*x9537*x9540))+((r01*x9541))+(((-1.0)*r00*x9544*x9549))+x9542+((r00*x9548))+(((-1.0)*x9545))+(((-1.0)*cj3*r02*x9550)));
evalcond[7]=((((-1.0)*r00*x9541*x9549))+(((-1.0)*r02*sj3*x9550))+x9553+(((-1.0)*r00*x9543))+((x9540*x9551))+(((-1.0)*r01*x9544)));
evalcond[8]=((((-1.0)*r20*x9543))+((x9547*x9551))+(((-1.0)*r22*sj3*x9550))+(((-1.0)*r20*x9541*x9549))+x9545+(((-1.0)*r21*x9544))+(((-1.0)*x9542)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9554 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9554.valid){
continue;
}
CheckValue<IkReal> x9555=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9555.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9554.value)+(((1.5707963267949)*(x9555.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9556=IKsin(j4);
IkReal x9557=IKcos(j4);
IkReal x9558=(cj2*sj1);
IkReal x9559=(cj1*sj2);
IkReal x9560=(gconst1*r01);
IkReal x9561=(gconst2*sj3);
IkReal x9562=(sj1*sj2);
IkReal x9563=(cj3*gconst1);
IkReal x9564=(cj3*gconst2);
IkReal x9565=(cj1*cj2);
IkReal x9566=(gconst1*r11);
IkReal x9567=(gconst1*r21);
IkReal x9568=(gconst1*sj3);
IkReal x9569=((1.0)*x9557);
IkReal x9570=((1.0)*x9556);
IkReal x9571=(sj3*x9557);
IkReal x9572=(gconst2*x9556);
IkReal x9573=(x9559+x9558);
evalcond[0]=((((-1.0)*x9567*x9570))+(((-1.0)*r22*x9569))+((r20*x9572)));
evalcond[1]=(((r00*x9572))+(((-1.0)*x9560*x9570))+(((-1.0)*r02*x9569)));
evalcond[2]=((1.0)+(((-1.0)*x9566*x9570))+(((-1.0)*r12*x9569))+((r10*x9572)));
evalcond[3]=((((-1.0)*r10*x9564*x9569))+((r11*x9557*x9563))+(((-1.0)*cj3*r12*x9570))+((r11*x9561))+((r10*x9568)));
evalcond[4]=((((-1.0)*r10*x9561*x9569))+(((-1.0)*r11*x9564))+(((-1.0)*r10*x9563))+((x9566*x9571))+(((-1.0)*r12*sj3*x9570)));
evalcond[5]=(((r21*x9561))+(((-1.0)*r20*x9564*x9569))+((r21*x9557*x9563))+x9573+((r20*x9568))+(((-1.0)*cj3*r22*x9570)));
evalcond[6]=((((-1.0)*x9565))+((r01*x9561))+((r00*x9568))+(((-1.0)*r00*x9564*x9569))+x9562+(((-1.0)*cj3*r02*x9570))+((cj3*x9557*x9560)));
evalcond[7]=((((-1.0)*r01*x9564))+(((-1.0)*r02*sj3*x9570))+(((-1.0)*r00*x9561*x9569))+((x9560*x9571))+x9573+(((-1.0)*r00*x9563)));
evalcond[8]=(((x9567*x9571))+(((-1.0)*x9562))+(((-1.0)*r22*sj3*x9570))+(((-1.0)*r21*x9564))+x9565+(((-1.0)*r20*x9563))+(((-1.0)*r20*x9561*x9569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9574=((-1.0)*py);
CheckValue<IkReal> x9576 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9576.valid){
continue;
}
IkReal x9575=((-1.0)*(x9576.value));
sj5=gconst1;
cj5=gconst2;
j5=x9575;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x9574);
rxp0_2=(py*r00);
rxp1_0=(r21*x9574);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9575;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
j4eval[0]=(((r00*r20))+((r01*r21)));
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9577=((-1.0)*py);
CheckValue<IkReal> x9579 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9579.valid){
continue;
}
IkReal x9578=((-1.0)*(x9579.value));
sj5=gconst1;
cj5=gconst2;
j5=x9578;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x9577);
rxp0_2=(py*r00);
rxp1_0=(r21*x9577);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9578;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x9580=((1.0)*cj3);
j4eval[0]=(((r00*r20))+((r01*r21)));
j4eval[1]=(((cj3*(r00*r00)))+(((-1.0)*x9580*(r21*r21)))+(((-1.0)*x9580)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9581=((-1.0)*py);
CheckValue<IkReal> x9583 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9583.valid){
continue;
}
IkReal x9582=((-1.0)*(x9583.value));
sj5=gconst1;
cj5=gconst2;
j5=x9582;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x9581);
rxp0_2=(py*r00);
rxp1_0=(r21*x9581);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9582;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
j4eval[0]=cj3;
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9585=IKPowWithIntegerCheck(r12,-1);
if(!x9585.valid){
continue;
}
IkReal x9584=x9585.value;
CheckValue<IkReal> x9586=IKPowWithIntegerCheck(cj3,-1);
if(!x9586.valid){
continue;
}
if( IKabs((x9584*(x9586.value)*((((cj1*cj2*sj0))+(((-1.0)*sj0*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x9584)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x9584*(x9586.value)*((((cj1*cj2*sj0))+(((-1.0)*sj0*sj1*sj2))))))+IKsqr(((-1.0)*cj0*x9584))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x9584*(x9586.value)*((((cj1*cj2*sj0))+(((-1.0)*sj0*sj1*sj2))))), ((-1.0)*cj0*x9584));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9587=IKsin(j4);
IkReal x9588=IKcos(j4);
IkReal x9589=(gconst1*r01);
IkReal x9590=(cj2*sj0);
IkReal x9591=((1.0)*gconst2);
IkReal x9592=((1.0)*sj1);
IkReal x9593=(gconst1*r21);
IkReal x9594=(gconst1*r20);
IkReal x9595=(cj0*cj2);
IkReal x9596=((1.0)*cj3);
IkReal x9597=(gconst1*r00);
IkReal x9598=(cj1*sj2);
IkReal x9599=((1.0)*cj0);
IkReal x9600=(gconst2*sj3);
IkReal x9601=((1.0)*x9587);
IkReal x9602=(sj3*x9588);
IkReal x9603=(cj3*x9588);
IkReal x9604=(gconst2*x9587);
evalcond[0]=((((-1.0)*r12*x9588))+(((-1.0)*x9599)));
evalcond[1]=(((r20*x9604))+(((-1.0)*x9593*x9601)));
evalcond[2]=((((-1.0)*x9589*x9601))+sj0+((r00*x9604)));
evalcond[3]=((((-1.0)*sj0*sj2*x9592))+((cj1*x9590))+(((-1.0)*r12*x9587*x9596)));
evalcond[4]=((((-1.0)*x9590*x9592))+(((-1.0)*sj0*x9598))+(((-1.0)*r12*sj3*x9601)));
evalcond[5]=(((cj2*sj1))+((r21*x9600))+(((-1.0)*r20*x9591*x9603))+((sj3*x9594))+x9598+((x9593*x9603)));
evalcond[6]=((((-1.0)*sj2*x9592))+(((-1.0)*x9594*x9596))+(((-1.0)*r20*x9591*x9602))+(((-1.0)*cj3*r21*x9591))+((cj1*cj2))+((x9593*x9602)));
evalcond[7]=(((cj1*x9595))+((x9589*x9603))+(((-1.0)*cj0*sj2*x9592))+(((-1.0)*r00*x9591*x9603))+((r01*x9600))+((sj3*x9597)));
evalcond[8]=((((-1.0)*x9598*x9599))+((x9589*x9602))+(((-1.0)*x9592*x9595))+(((-1.0)*x9596*x9597))+(((-1.0)*r00*x9591*x9602))+(((-1.0)*cj3*r01*x9591)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9605=((1.0)*sj3);
CheckValue<IkReal> x9606=IKPowWithIntegerCheck(((((-1.0)*gconst1*r01))+((gconst2*r00))),-1);
if(!x9606.valid){
continue;
}
CheckValue<IkReal> x9607=IKPowWithIntegerCheck((((cj3*gconst1*r21))+(((-1.0)*cj3*gconst2*r20))),-1);
if(!x9607.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x9606.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9607.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r20*x9605))+(((-1.0)*gconst2*r21*x9605)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x9606.value)))+IKsqr(((x9607.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r20*x9605))+(((-1.0)*gconst2*r21*x9605))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x9606.value)), ((x9607.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r20*x9605))+(((-1.0)*gconst2*r21*x9605))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9608=IKsin(j4);
IkReal x9609=IKcos(j4);
IkReal x9610=(gconst1*r01);
IkReal x9611=(cj2*sj0);
IkReal x9612=((1.0)*gconst2);
IkReal x9613=((1.0)*sj1);
IkReal x9614=(gconst1*r21);
IkReal x9615=(gconst1*r20);
IkReal x9616=(cj0*cj2);
IkReal x9617=((1.0)*cj3);
IkReal x9618=(gconst1*r00);
IkReal x9619=(cj1*sj2);
IkReal x9620=((1.0)*cj0);
IkReal x9621=(gconst2*sj3);
IkReal x9622=((1.0)*x9608);
IkReal x9623=(sj3*x9609);
IkReal x9624=(cj3*x9609);
IkReal x9625=(gconst2*x9608);
evalcond[0]=((((-1.0)*r12*x9609))+(((-1.0)*x9620)));
evalcond[1]=(((r20*x9625))+(((-1.0)*x9614*x9622)));
evalcond[2]=(sj0+((r00*x9625))+(((-1.0)*x9610*x9622)));
evalcond[3]=((((-1.0)*r12*x9608*x9617))+((cj1*x9611))+(((-1.0)*sj0*sj2*x9613)));
evalcond[4]=((((-1.0)*r12*sj3*x9622))+(((-1.0)*x9611*x9613))+(((-1.0)*sj0*x9619)));
evalcond[5]=(((x9614*x9624))+((cj2*sj1))+((r21*x9621))+x9619+(((-1.0)*r20*x9612*x9624))+((sj3*x9615)));
evalcond[6]=(((x9614*x9623))+(((-1.0)*x9615*x9617))+(((-1.0)*cj3*r21*x9612))+(((-1.0)*sj2*x9613))+((cj1*cj2))+(((-1.0)*r20*x9612*x9623)));
evalcond[7]=(((r01*x9621))+(((-1.0)*cj0*sj2*x9613))+((cj1*x9616))+(((-1.0)*r00*x9612*x9624))+((x9610*x9624))+((sj3*x9618)));
evalcond[8]=((((-1.0)*x9613*x9616))+(((-1.0)*x9617*x9618))+(((-1.0)*cj3*r01*x9612))+(((-1.0)*r00*x9612*x9623))+((x9610*x9623))+(((-1.0)*x9619*x9620)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9626=IKPowWithIntegerCheck(((((-1.0)*gconst1*r01))+((gconst2*r00))),-1);
if(!x9626.valid){
continue;
}
CheckValue<IkReal> x9627=IKPowWithIntegerCheck(r12,-1);
if(!x9627.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x9626.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x9627.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x9626.value)))+IKsqr(((-1.0)*cj0*(x9627.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x9626.value)), ((-1.0)*cj0*(x9627.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9628=IKsin(j4);
IkReal x9629=IKcos(j4);
IkReal x9630=(gconst1*r01);
IkReal x9631=(cj2*sj0);
IkReal x9632=((1.0)*gconst2);
IkReal x9633=((1.0)*sj1);
IkReal x9634=(gconst1*r21);
IkReal x9635=(gconst1*r20);
IkReal x9636=(cj0*cj2);
IkReal x9637=((1.0)*cj3);
IkReal x9638=(gconst1*r00);
IkReal x9639=(cj1*sj2);
IkReal x9640=((1.0)*cj0);
IkReal x9641=(gconst2*sj3);
IkReal x9642=((1.0)*x9628);
IkReal x9643=(sj3*x9629);
IkReal x9644=(cj3*x9629);
IkReal x9645=(gconst2*x9628);
evalcond[0]=((((-1.0)*x9640))+(((-1.0)*r12*x9629)));
evalcond[1]=((((-1.0)*x9634*x9642))+((r20*x9645)));
evalcond[2]=((((-1.0)*x9630*x9642))+sj0+((r00*x9645)));
evalcond[3]=(((cj1*x9631))+(((-1.0)*sj0*sj2*x9633))+(((-1.0)*r12*x9628*x9637)));
evalcond[4]=((((-1.0)*sj0*x9639))+(((-1.0)*x9631*x9633))+(((-1.0)*r12*sj3*x9642)));
evalcond[5]=(((cj2*sj1))+((x9634*x9644))+x9639+((r21*x9641))+(((-1.0)*r20*x9632*x9644))+((sj3*x9635)));
evalcond[6]=((((-1.0)*x9635*x9637))+((x9634*x9643))+(((-1.0)*cj3*r21*x9632))+((cj1*cj2))+(((-1.0)*sj2*x9633))+(((-1.0)*r20*x9632*x9643)));
evalcond[7]=((((-1.0)*cj0*sj2*x9633))+((cj1*x9636))+((r01*x9641))+((x9630*x9644))+(((-1.0)*r00*x9632*x9644))+((sj3*x9638)));
evalcond[8]=((((-1.0)*x9637*x9638))+(((-1.0)*x9639*x9640))+(((-1.0)*x9633*x9636))+(((-1.0)*cj3*r01*x9632))+((x9630*x9643))+(((-1.0)*r00*x9632*x9643)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9646=gconst1*gconst1;
IkReal x9647=r21*r21;
IkReal x9648=gconst2*gconst2;
IkReal x9649=r20*r20;
IkReal x9650=(gconst2*sj3);
IkReal x9651=((1.0)*gconst1);
IkReal x9652=(cj2*sj1);
IkReal x9653=(gconst2*r20);
IkReal x9654=(cj1*sj2);
IkReal x9655=(r20*r21*sj3);
CheckValue<IkReal> x9656=IKPowWithIntegerCheck(IKsign(((((-2.0)*cj3*gconst1*r21*x9653))+((cj3*(r22*r22)))+((cj3*x9646*x9647))+((cj3*x9648*x9649)))),-1);
if(!x9656.valid){
continue;
}
CheckValue<IkReal> x9657 = IKatan2WithCheck(IkReal((((gconst1*r20*r22*sj3))+((r22*x9654))+((r22*x9652))+((r21*r22*x9650)))),IkReal(((((-1.0)*x9647*x9650*x9651))+((gconst1*x9649*x9650))+(((-1.0)*r21*x9651*x9654))+(((-1.0)*r21*x9651*x9652))+((x9648*x9655))+((x9652*x9653))+((x9653*x9654))+(((-1.0)*x9646*x9655)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9657.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9656.value)))+(x9657.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9658=IKsin(j4);
IkReal x9659=IKcos(j4);
IkReal x9660=(gconst1*r01);
IkReal x9661=(cj2*sj0);
IkReal x9662=(gconst2*sj3);
IkReal x9663=(cj3*gconst1);
IkReal x9664=(cj3*gconst2);
IkReal x9665=((1.0)*sj1);
IkReal x9666=(gconst1*r11);
IkReal x9667=(cj0*cj2);
IkReal x9668=(gconst1*r21);
IkReal x9669=(gconst1*sj3);
IkReal x9670=(cj1*sj2);
IkReal x9671=((1.0)*cj0);
IkReal x9672=((1.0)*x9659);
IkReal x9673=((1.0)*x9658);
IkReal x9674=(sj3*x9659);
IkReal x9675=((1.0)*x9664);
IkReal x9676=(gconst2*x9658);
evalcond[0]=(((r20*x9676))+(((-1.0)*x9668*x9673))+(((-1.0)*r22*x9672)));
evalcond[1]=((((-1.0)*x9660*x9673))+sj0+((r00*x9676))+(((-1.0)*r02*x9672)));
evalcond[2]=((((-1.0)*x9666*x9673))+(((-1.0)*x9671))+((r10*x9676))+(((-1.0)*r12*x9672)));
evalcond[3]=(((cj2*sj1))+((r21*x9662))+((r20*x9669))+x9670+(((-1.0)*cj3*r22*x9673))+((r21*x9659*x9663))+(((-1.0)*r20*x9664*x9672)));
evalcond[4]=((((-1.0)*r20*x9663))+(((-1.0)*r21*x9675))+(((-1.0)*r22*sj3*x9673))+(((-1.0)*r20*x9662*x9672))+((cj1*cj2))+((x9668*x9674))+(((-1.0)*sj2*x9665)));
evalcond[5]=((((-1.0)*cj3*r02*x9673))+((r00*x9669))+((r01*x9662))+((cj3*x9659*x9660))+(((-1.0)*r00*x9664*x9672))+((cj1*x9667))+(((-1.0)*cj0*sj2*x9665)));
evalcond[6]=((((-1.0)*sj0*sj2*x9665))+(((-1.0)*cj3*r12*x9673))+((r11*x9662))+(((-1.0)*r10*x9664*x9672))+((r10*x9669))+((r11*x9659*x9663))+((cj1*x9661)));
evalcond[7]=((((-1.0)*r00*x9663))+((x9660*x9674))+(((-1.0)*r02*sj3*x9673))+(((-1.0)*x9665*x9667))+(((-1.0)*x9670*x9671))+(((-1.0)*r00*x9662*x9672))+(((-1.0)*r01*x9675)));
evalcond[8]=((((-1.0)*x9661*x9665))+((x9666*x9674))+(((-1.0)*sj0*x9670))+(((-1.0)*r12*sj3*x9673))+(((-1.0)*r11*x9675))+(((-1.0)*r10*x9662*x9672))+(((-1.0)*r10*x9663)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9677=((1.0)*gconst1);
CheckValue<IkReal> x9678=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x9677))+(((-1.0)*gconst2*r01)))),-1);
if(!x9678.valid){
continue;
}
CheckValue<IkReal> x9679 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst2*r20))+(((-1.0)*cj0*r21*x9677)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9679.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9678.value)))+(x9679.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9680=IKsin(j4);
IkReal x9681=IKcos(j4);
IkReal x9682=(gconst1*r01);
IkReal x9683=(cj2*sj0);
IkReal x9684=(gconst2*sj3);
IkReal x9685=(cj3*gconst1);
IkReal x9686=(cj3*gconst2);
IkReal x9687=((1.0)*sj1);
IkReal x9688=(gconst1*r11);
IkReal x9689=(cj0*cj2);
IkReal x9690=(gconst1*r21);
IkReal x9691=(gconst1*sj3);
IkReal x9692=(cj1*sj2);
IkReal x9693=((1.0)*cj0);
IkReal x9694=((1.0)*x9681);
IkReal x9695=((1.0)*x9680);
IkReal x9696=(sj3*x9681);
IkReal x9697=((1.0)*x9686);
IkReal x9698=(gconst2*x9680);
evalcond[0]=((((-1.0)*x9690*x9695))+(((-1.0)*r22*x9694))+((r20*x9698)));
evalcond[1]=(sj0+(((-1.0)*r02*x9694))+(((-1.0)*x9682*x9695))+((r00*x9698)));
evalcond[2]=((((-1.0)*r12*x9694))+(((-1.0)*x9688*x9695))+(((-1.0)*x9693))+((r10*x9698)));
evalcond[3]=(((cj2*sj1))+((r21*x9681*x9685))+(((-1.0)*cj3*r22*x9695))+((r21*x9684))+x9692+(((-1.0)*r20*x9686*x9694))+((r20*x9691)));
evalcond[4]=((((-1.0)*r20*x9684*x9694))+(((-1.0)*r22*sj3*x9695))+(((-1.0)*sj2*x9687))+((x9690*x9696))+((cj1*cj2))+(((-1.0)*r21*x9697))+(((-1.0)*r20*x9685)));
evalcond[5]=(((cj1*x9689))+((cj3*x9681*x9682))+(((-1.0)*cj0*sj2*x9687))+(((-1.0)*r00*x9686*x9694))+((r01*x9684))+((r00*x9691))+(((-1.0)*cj3*r02*x9695)));
evalcond[6]=((((-1.0)*r10*x9686*x9694))+((cj1*x9683))+(((-1.0)*cj3*r12*x9695))+(((-1.0)*sj0*sj2*x9687))+((r11*x9681*x9685))+((r10*x9691))+((r11*x9684)));
evalcond[7]=(((x9682*x9696))+(((-1.0)*r00*x9685))+(((-1.0)*x9692*x9693))+(((-1.0)*r02*sj3*x9695))+(((-1.0)*r01*x9697))+(((-1.0)*x9687*x9689))+(((-1.0)*r00*x9684*x9694)));
evalcond[8]=((((-1.0)*r10*x9684*x9694))+(((-1.0)*r11*x9697))+(((-1.0)*r10*x9685))+((x9688*x9696))+(((-1.0)*sj0*x9692))+(((-1.0)*x9683*x9687))+(((-1.0)*r12*sj3*x9695)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9699=((1.0)*gconst1);
CheckValue<IkReal> x9700 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x9699))+((gconst2*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9700.valid){
continue;
}
CheckValue<IkReal> x9701=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x9699))+(((-1.0)*gconst2*r11)))),-1);
if(!x9701.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9700.value)+(((1.5707963267949)*(x9701.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9702=IKsin(j4);
IkReal x9703=IKcos(j4);
IkReal x9704=(gconst1*r01);
IkReal x9705=(cj2*sj0);
IkReal x9706=(gconst2*sj3);
IkReal x9707=(cj3*gconst1);
IkReal x9708=(cj3*gconst2);
IkReal x9709=((1.0)*sj1);
IkReal x9710=(gconst1*r11);
IkReal x9711=(cj0*cj2);
IkReal x9712=(gconst1*r21);
IkReal x9713=(gconst1*sj3);
IkReal x9714=(cj1*sj2);
IkReal x9715=((1.0)*cj0);
IkReal x9716=((1.0)*x9703);
IkReal x9717=((1.0)*x9702);
IkReal x9718=(sj3*x9703);
IkReal x9719=((1.0)*x9708);
IkReal x9720=(gconst2*x9702);
evalcond[0]=(((r20*x9720))+(((-1.0)*r22*x9716))+(((-1.0)*x9712*x9717)));
evalcond[1]=((((-1.0)*r02*x9716))+sj0+(((-1.0)*x9704*x9717))+((r00*x9720)));
evalcond[2]=((((-1.0)*r12*x9716))+(((-1.0)*x9715))+(((-1.0)*x9710*x9717))+((r10*x9720)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*cj3*r22*x9717))+(((-1.0)*r20*x9708*x9716))+((r21*x9706))+x9714+((r20*x9713))+((r21*x9703*x9707)));
evalcond[4]=((((-1.0)*r20*x9706*x9716))+(((-1.0)*r21*x9719))+(((-1.0)*sj2*x9709))+(((-1.0)*r22*sj3*x9717))+((x9712*x9718))+((cj1*cj2))+(((-1.0)*r20*x9707)));
evalcond[5]=(((cj1*x9711))+(((-1.0)*cj0*sj2*x9709))+((r01*x9706))+(((-1.0)*cj3*r02*x9717))+(((-1.0)*r00*x9708*x9716))+((r00*x9713))+((cj3*x9703*x9704)));
evalcond[6]=((((-1.0)*cj3*r12*x9717))+((cj1*x9705))+((r11*x9706))+(((-1.0)*r10*x9708*x9716))+((r10*x9713))+((r11*x9703*x9707))+(((-1.0)*sj0*sj2*x9709)));
evalcond[7]=((((-1.0)*r01*x9719))+(((-1.0)*x9709*x9711))+(((-1.0)*r02*sj3*x9717))+(((-1.0)*x9714*x9715))+(((-1.0)*r00*x9707))+(((-1.0)*r00*x9706*x9716))+((x9704*x9718)));
evalcond[8]=((((-1.0)*r12*sj3*x9717))+(((-1.0)*sj0*x9714))+(((-1.0)*r10*x9706*x9716))+(((-1.0)*r10*x9707))+(((-1.0)*r11*x9719))+(((-1.0)*x9705*x9709))+((x9710*x9718)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9722 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x9722)==0){
continue;
}
IkReal x9721=pow(x9722,-0.5);
CheckValue<IkReal> x9723 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9723.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x9723.value))));
IkReal gconst4=((1.0)*r21*x9721);
IkReal gconst5=((-1.0)*r20*x9721);
CheckValue<IkReal> x9724 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9724.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x9724.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9727 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9727.valid){
continue;
}
IkReal x9725=((1.0)*(x9727.value));
IkReal x9726=x9721;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9725)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9725)));
IkReal gconst4=((1.0)*r21*x9726);
IkReal gconst5=((-1.0)*r20*x9726);
IkReal x9728=r22*r22;
IkReal x9729=((1.0)*x9728);
CheckValue<IkReal> x9733=IKPowWithIntegerCheck(((-1.0)+x9728),-1);
if(!x9733.valid){
continue;
}
IkReal x9730=x9733.value;
if((((1.0)+(((-1.0)*x9729)))) < -0.00001)
continue;
IkReal x9731=IKsqrt(((1.0)+(((-1.0)*x9729))));
IkReal x9732=(sj0*x9730*x9731);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x9729*x9732))+x9732))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9736 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9736.valid){
continue;
}
IkReal x9734=((1.0)*(x9736.value));
IkReal x9735=x9721;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9734)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9734)));
IkReal gconst4=((1.0)*r21*x9735);
IkReal gconst5=((-1.0)*r20*x9735);
IkReal x9737=r22*r22;
IkReal x9738=((1.0)*x9737);
CheckValue<IkReal> x9742=IKPowWithIntegerCheck(((-1.0)+x9737),-1);
if(!x9742.valid){
continue;
}
IkReal x9739=x9742.value;
if((((1.0)+(((-1.0)*x9738)))) < -0.00001)
continue;
IkReal x9740=IKsqrt(((1.0)+(((-1.0)*x9738))));
IkReal x9741=(cj0*x9739*x9740);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x9741+(((-1.0)*x9738*x9741))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x9745 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9745.valid){
continue;
}
IkReal x9743=((1.0)*(x9745.value));
IkReal x9744=x9721;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9743)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9743)));
IkReal gconst4=((1.0)*r21*x9744);
IkReal gconst5=((-1.0)*r20*x9744);
IkReal x9746=r22*r22;
IkReal x9747=(cj0*r02);
IkReal x9748=(r12*sj0);
CheckValue<IkReal> x9752=IKPowWithIntegerCheck(((-1.0)+x9746),-1);
if(!x9752.valid){
continue;
}
IkReal x9749=x9752.value;
if((((1.0)+(((-1.0)*x9746)))) < -0.00001)
continue;
IkReal x9750=IKsqrt(((1.0)+(((-1.0)*x9746))));
IkReal x9751=((1.0)*r22*x9749*x9750);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((x9747+x9748)))+(IKabs(((((-1.0)*x9747*x9751))+(((-1.0)*x9748*x9751))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x9755 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9755.valid){
continue;
}
IkReal x9753=((1.0)*(x9755.value));
IkReal x9754=x9721;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9753)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9753)));
IkReal gconst4=((1.0)*r21*x9754);
IkReal gconst5=((-1.0)*r20*x9754);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9758 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9758.valid){
continue;
}
IkReal x9756=((1.0)*(x9758.value));
IkReal x9757=x9721;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9756)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9756)));
IkReal gconst4=((1.0)*r21*x9757);
IkReal gconst5=((-1.0)*r20*x9757);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x9761 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9761.valid){
continue;
}
IkReal x9759=((1.0)*(x9761.value));
IkReal x9760=x9721;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9759)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9759)));
IkReal gconst4=((1.0)*r21*x9760);
IkReal gconst5=((-1.0)*r20*x9760);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x9764 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9764.valid){
continue;
}
IkReal x9762=((1.0)*(x9764.value));
IkReal x9763=x9721;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9762)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9762)));
IkReal gconst4=((1.0)*r21*x9763);
IkReal gconst5=((-1.0)*r20*x9763);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9767 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9767.valid){
continue;
}
IkReal x9765=((1.0)*(x9767.value));
IkReal x9766=x9721;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9765)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9765)));
IkReal gconst4=((1.0)*r21*x9766);
IkReal gconst5=((-1.0)*r20*x9766);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x9770 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9770.valid){
continue;
}
IkReal x9768=((1.0)*(x9770.value));
IkReal x9769=x9721;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9768)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9768)));
IkReal gconst4=((1.0)*r21*x9769);
IkReal gconst5=((-1.0)*r20*x9769);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9771=(gconst4*r01);
IkReal x9772=(gconst5*r00);
CheckValue<IkReal> x9773=IKPowWithIntegerCheck(IKsign(((x9771*x9771)+(((-2.0)*x9771*x9772))+(x9772*x9772)+(r02*r02))),-1);
if(!x9773.valid){
continue;
}
CheckValue<IkReal> x9774 = IKatan2WithCheck(IkReal(((((-1.0)*x9772))+x9771)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9774.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9773.value)))+(x9774.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9775=IKsin(j4);
IkReal x9776=IKcos(j4);
IkReal x9777=(gconst4*r21);
IkReal x9778=(gconst5*r10);
IkReal x9779=((1.0)*sj1);
IkReal x9780=(gconst4*r11);
IkReal x9781=(gconst4*r01);
IkReal x9782=((1.0)*x9776);
IkReal x9783=((1.0)*x9775);
IkReal x9784=(gconst5*x9775);
evalcond[0]=((((-1.0)*r22*x9782))+(((-1.0)*x9777*x9783))+((r20*x9784)));
evalcond[1]=((((-1.0)*r12*x9782))+(((-1.0)*x9780*x9783))+((x9775*x9778)));
evalcond[2]=(((x9776*x9781))+(((-1.0)*gconst5*r00*x9782))+(((-1.0)*r02*x9783)));
evalcond[3]=((1.0)+((r00*x9784))+(((-1.0)*x9781*x9783))+(((-1.0)*r02*x9782)));
evalcond[4]=((((-1.0)*r22*x9783))+(((-1.0)*gconst5*r20*x9782))+(((-1.0)*sj2*x9779))+((cj1*cj2))+((x9776*x9777)));
evalcond[5]=((((-1.0)*r12*x9783))+((x9776*x9780))+(((-1.0)*cj1*sj2))+(((-1.0)*x9778*x9782))+(((-1.0)*cj2*x9779)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9785=((1.0)*gconst4);
CheckValue<IkReal> x9786 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x9785))+((gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9786.valid){
continue;
}
CheckValue<IkReal> x9787=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst5*r11))+(((-1.0)*r10*x9785)))),-1);
if(!x9787.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9786.value)+(((1.5707963267949)*(x9787.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9788=IKsin(j4);
IkReal x9789=IKcos(j4);
IkReal x9790=(gconst4*r21);
IkReal x9791=(gconst5*r10);
IkReal x9792=((1.0)*sj1);
IkReal x9793=(gconst4*r11);
IkReal x9794=(gconst4*r01);
IkReal x9795=((1.0)*x9789);
IkReal x9796=((1.0)*x9788);
IkReal x9797=(gconst5*x9788);
evalcond[0]=((((-1.0)*x9790*x9796))+((r20*x9797))+(((-1.0)*r22*x9795)));
evalcond[1]=(((x9788*x9791))+(((-1.0)*x9793*x9796))+(((-1.0)*r12*x9795)));
evalcond[2]=((((-1.0)*r02*x9796))+(((-1.0)*gconst5*r00*x9795))+((x9789*x9794)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9795))+((r00*x9797))+(((-1.0)*x9794*x9796)));
evalcond[4]=(((x9789*x9790))+((cj1*cj2))+(((-1.0)*gconst5*r20*x9795))+(((-1.0)*r22*x9796))+(((-1.0)*sj2*x9792)));
evalcond[5]=((((-1.0)*x9791*x9795))+(((-1.0)*cj1*sj2))+((x9789*x9793))+(((-1.0)*r12*x9796))+(((-1.0)*cj2*x9792)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9798 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst5*r10))+(((-1.0)*gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9798.valid){
continue;
}
CheckValue<IkReal> x9799=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x9799.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9798.value)+(((1.5707963267949)*(x9799.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9800=IKsin(j4);
IkReal x9801=IKcos(j4);
IkReal x9802=(gconst4*r21);
IkReal x9803=(gconst5*r10);
IkReal x9804=((1.0)*sj1);
IkReal x9805=(gconst4*r11);
IkReal x9806=(gconst4*r01);
IkReal x9807=((1.0)*x9801);
IkReal x9808=((1.0)*x9800);
IkReal x9809=(gconst5*x9800);
evalcond[0]=((((-1.0)*r22*x9807))+(((-1.0)*x9802*x9808))+((r20*x9809)));
evalcond[1]=(((x9800*x9803))+(((-1.0)*x9805*x9808))+(((-1.0)*r12*x9807)));
evalcond[2]=((((-1.0)*gconst5*r00*x9807))+(((-1.0)*r02*x9808))+((x9801*x9806)));
evalcond[3]=((1.0)+((r00*x9809))+(((-1.0)*r02*x9807))+(((-1.0)*x9806*x9808)));
evalcond[4]=((((-1.0)*gconst5*r20*x9807))+(((-1.0)*r22*x9808))+((cj1*cj2))+(((-1.0)*sj2*x9804))+((x9801*x9802)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*x9803*x9807))+(((-1.0)*r12*x9808))+((x9801*x9805))+(((-1.0)*cj2*x9804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x9812 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9812.valid){
continue;
}
IkReal x9810=((1.0)*(x9812.value));
IkReal x9811=x9721;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9810)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9810)));
IkReal gconst4=((1.0)*r21*x9811);
IkReal gconst5=((-1.0)*r20*x9811);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9815 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9815.valid){
continue;
}
IkReal x9813=((1.0)*(x9815.value));
IkReal x9814=x9721;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9813)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9813)));
IkReal gconst4=((1.0)*r21*x9814);
IkReal gconst5=((-1.0)*r20*x9814);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x9818 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9818.valid){
continue;
}
IkReal x9816=((1.0)*(x9818.value));
IkReal x9817=x9721;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9816)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9816)));
IkReal gconst4=((1.0)*r21*x9817);
IkReal gconst5=((-1.0)*r20*x9817);
IkReal x9819=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9823=IKPowWithIntegerCheck(x9819,-1);
if(!x9823.valid){
continue;
}
IkReal x9820=x9823.value;
IkReal x9821=((1.0)*x9820);
IkReal x9822=((((-1.0)*x9821*(r00*r00)*(r20*r20)))+(((-1.0)*x9821*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x9820)));
j4eval[0]=x9822;
j4eval[1]=r02;
j4eval[2]=x9819;
j4eval[3]=IKsign(x9822);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9824=(gconst5*r00);
IkReal x9825=(gconst4*r01);
CheckValue<IkReal> x9826 = IKatan2WithCheck(IkReal((x9824+(((-1.0)*x9825)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9826.valid){
continue;
}
CheckValue<IkReal> x9827=IKPowWithIntegerCheck(IKsign(((((2.0)*x9824*x9825))+(((-1.0)*(r02*r02)))+(((-1.0)*(x9825*x9825)))+(((-1.0)*(x9824*x9824))))),-1);
if(!x9827.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9826.value)+(((1.5707963267949)*(x9827.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9828=IKcos(j4);
IkReal x9829=IKsin(j4);
IkReal x9830=((1.0)*sj1);
IkReal x9831=((1.0)*x9828);
IkReal x9832=(gconst5*x9828);
IkReal x9833=(gconst5*x9829);
IkReal x9834=((1.0)*gconst4*x9829);
evalcond[0]=(((r00*x9832))+(((-1.0)*gconst4*r01*x9831))+((r02*x9829)));
evalcond[1]=((((-1.0)*r21*x9834))+(((-1.0)*r22*x9831))+((r20*x9833)));
evalcond[2]=(((r10*x9833))+(((-1.0)*r12*x9831))+(((-1.0)*r11*x9834)));
evalcond[3]=((1.0)+((r00*x9833))+(((-1.0)*r02*x9831))+(((-1.0)*r01*x9834)));
evalcond[4]=(((r22*x9829))+(((-1.0)*sj2*x9830))+((cj1*cj2))+(((-1.0)*gconst4*r21*x9831))+((r20*x9832)));
evalcond[5]=(((r10*x9832))+((r12*x9829))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r11*x9831))+(((-1.0)*cj2*x9830)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9835=((1.0)*gconst4);
CheckValue<IkReal> x9836 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x9835))+((gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9836.valid){
continue;
}
CheckValue<IkReal> x9837=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x9835))+(((-1.0)*gconst5*r11)))),-1);
if(!x9837.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9836.value)+(((1.5707963267949)*(x9837.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9838=IKcos(j4);
IkReal x9839=IKsin(j4);
IkReal x9840=((1.0)*sj1);
IkReal x9841=((1.0)*x9838);
IkReal x9842=(gconst5*x9838);
IkReal x9843=(gconst5*x9839);
IkReal x9844=((1.0)*gconst4*x9839);
evalcond[0]=(((r02*x9839))+((r00*x9842))+(((-1.0)*gconst4*r01*x9841)));
evalcond[1]=(((r20*x9843))+(((-1.0)*r22*x9841))+(((-1.0)*r21*x9844)));
evalcond[2]=((((-1.0)*r12*x9841))+((r10*x9843))+(((-1.0)*r11*x9844)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9841))+(((-1.0)*r01*x9844))+((r00*x9843)));
evalcond[4]=(((r22*x9839))+((r20*x9842))+(((-1.0)*sj2*x9840))+(((-1.0)*gconst4*r21*x9841))+((cj1*cj2)));
evalcond[5]=(((r10*x9842))+((r12*x9839))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r11*x9841))+(((-1.0)*cj2*x9840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9845 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst5*r10))+(((-1.0)*gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9845.valid){
continue;
}
CheckValue<IkReal> x9846=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x9846.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9845.value)+(((1.5707963267949)*(x9846.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9847=IKcos(j4);
IkReal x9848=IKsin(j4);
IkReal x9849=((1.0)*sj1);
IkReal x9850=((1.0)*x9847);
IkReal x9851=(gconst5*x9847);
IkReal x9852=(gconst5*x9848);
IkReal x9853=((1.0)*gconst4*x9848);
evalcond[0]=(((r02*x9848))+(((-1.0)*gconst4*r01*x9850))+((r00*x9851)));
evalcond[1]=(((r20*x9852))+(((-1.0)*r22*x9850))+(((-1.0)*r21*x9853)));
evalcond[2]=(((r10*x9852))+(((-1.0)*r11*x9853))+(((-1.0)*r12*x9850)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9850))+((r00*x9852))+(((-1.0)*r01*x9853)));
evalcond[4]=((((-1.0)*sj2*x9849))+((r20*x9851))+(((-1.0)*gconst4*r21*x9850))+((cj1*cj2))+((r22*x9848)));
evalcond[5]=(((r10*x9851))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r11*x9850))+(((-1.0)*cj2*x9849))+((r12*x9848)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x9856 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9856.valid){
continue;
}
IkReal x9854=((1.0)*(x9856.value));
IkReal x9855=x9721;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9854)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9854)));
IkReal gconst4=((1.0)*r21*x9855);
IkReal gconst5=((-1.0)*r20*x9855);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9859 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9859.valid){
continue;
}
IkReal x9857=((1.0)*(x9859.value));
IkReal x9858=x9721;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9857)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9857)));
IkReal gconst4=((1.0)*r21*x9858);
IkReal gconst5=((-1.0)*r20*x9858);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x9862 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9862.valid){
continue;
}
IkReal x9860=((1.0)*(x9862.value));
IkReal x9861=x9721;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9860)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9860)));
IkReal gconst4=((1.0)*r21*x9861);
IkReal gconst5=((-1.0)*r20*x9861);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9863=(gconst4*r01);
IkReal x9864=(gconst5*r00);
CheckValue<IkReal> x9865=IKPowWithIntegerCheck(IKsign(((x9864*x9864)+(((-2.0)*x9863*x9864))+(r02*r02)+(x9863*x9863))),-1);
if(!x9865.valid){
continue;
}
CheckValue<IkReal> x9866 = IKatan2WithCheck(IkReal(((((-1.0)*x9864))+x9863)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9866.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9865.value)))+(x9866.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9867=IKsin(j4);
IkReal x9868=IKcos(j4);
IkReal x9869=(gconst4*r21);
IkReal x9870=(gconst5*r10);
IkReal x9871=(gconst4*r11);
IkReal x9872=(gconst4*r01);
IkReal x9873=((1.0)*x9868);
IkReal x9874=((1.0)*x9867);
IkReal x9875=(gconst5*x9867);
evalcond[0]=(((r20*x9875))+(((-1.0)*r22*x9873))+(((-1.0)*x9869*x9874)));
evalcond[1]=((((-1.0)*x9871*x9874))+((x9867*x9870))+(((-1.0)*r12*x9873)));
evalcond[2]=((((-1.0)*r02*x9874))+((x9868*x9872))+(((-1.0)*gconst5*r00*x9873)));
evalcond[3]=((1.0)+(((-1.0)*x9872*x9874))+(((-1.0)*r02*x9873))+((r00*x9875)));
evalcond[4]=(((cj2*sj1))+((x9868*x9869))+(((-1.0)*gconst5*r20*x9873))+((cj1*sj2))+(((-1.0)*r22*x9874)));
evalcond[5]=((((-1.0)*sj1*sj2))+((x9868*x9871))+((cj1*cj2))+(((-1.0)*x9870*x9873))+(((-1.0)*r12*x9874)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9876=((1.0)*gconst4);
CheckValue<IkReal> x9877 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x9876))+((gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9877.valid){
continue;
}
CheckValue<IkReal> x9878=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x9876))+(((-1.0)*gconst5*r11)))),-1);
if(!x9878.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9877.value)+(((1.5707963267949)*(x9878.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9879=IKsin(j4);
IkReal x9880=IKcos(j4);
IkReal x9881=(gconst4*r21);
IkReal x9882=(gconst5*r10);
IkReal x9883=(gconst4*r11);
IkReal x9884=(gconst4*r01);
IkReal x9885=((1.0)*x9880);
IkReal x9886=((1.0)*x9879);
IkReal x9887=(gconst5*x9879);
evalcond[0]=((((-1.0)*r22*x9885))+((r20*x9887))+(((-1.0)*x9881*x9886)));
evalcond[1]=((((-1.0)*x9883*x9886))+((x9879*x9882))+(((-1.0)*r12*x9885)));
evalcond[2]=(((x9880*x9884))+(((-1.0)*gconst5*r00*x9885))+(((-1.0)*r02*x9886)));
evalcond[3]=((1.0)+(((-1.0)*x9884*x9886))+((r00*x9887))+(((-1.0)*r02*x9885)));
evalcond[4]=((((-1.0)*r22*x9886))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst5*r20*x9885))+((x9880*x9881)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x9882*x9885))+((x9880*x9883))+((cj1*cj2))+(((-1.0)*r12*x9886)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9888 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst5*r10))+(((-1.0)*gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9888.valid){
continue;
}
CheckValue<IkReal> x9889=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x9889.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9888.value)+(((1.5707963267949)*(x9889.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9890=IKsin(j4);
IkReal x9891=IKcos(j4);
IkReal x9892=(gconst4*r21);
IkReal x9893=(gconst5*r10);
IkReal x9894=(gconst4*r11);
IkReal x9895=(gconst4*r01);
IkReal x9896=((1.0)*x9891);
IkReal x9897=((1.0)*x9890);
IkReal x9898=(gconst5*x9890);
evalcond[0]=((((-1.0)*x9892*x9897))+((r20*x9898))+(((-1.0)*r22*x9896)));
evalcond[1]=(((x9890*x9893))+(((-1.0)*r12*x9896))+(((-1.0)*x9894*x9897)));
evalcond[2]=((((-1.0)*gconst5*r00*x9896))+(((-1.0)*r02*x9897))+((x9891*x9895)));
evalcond[3]=((1.0)+((r00*x9898))+(((-1.0)*x9895*x9897))+(((-1.0)*r02*x9896)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst5*r20*x9896))+(((-1.0)*r22*x9897))+((x9891*x9892)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r12*x9897))+(((-1.0)*x9893*x9896))+((cj1*cj2))+((x9891*x9894)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x9901 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9901.valid){
continue;
}
IkReal x9899=((1.0)*(x9901.value));
IkReal x9900=x9721;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9899)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9899)));
IkReal gconst4=((1.0)*r21*x9900);
IkReal gconst5=((-1.0)*r20*x9900);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9904 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9904.valid){
continue;
}
IkReal x9902=((1.0)*(x9904.value));
IkReal x9903=x9721;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9902)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9902)));
IkReal gconst4=((1.0)*r21*x9903);
IkReal gconst5=((-1.0)*r20*x9903);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x9907 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9907.valid){
continue;
}
IkReal x9905=((1.0)*(x9907.value));
IkReal x9906=x9721;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9905)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9905)));
IkReal gconst4=((1.0)*r21*x9906);
IkReal gconst5=((-1.0)*r20*x9906);
IkReal x9908=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9912=IKPowWithIntegerCheck(x9908,-1);
if(!x9912.valid){
continue;
}
IkReal x9909=x9912.value;
IkReal x9910=((1.0)*x9909);
IkReal x9911=((((-2.0)*r00*r01*r20*r21*x9909))+(((-1.0)*x9910*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-1.0)*x9910*(r01*r01)*(r21*r21))));
j4eval[0]=x9911;
j4eval[1]=r02;
j4eval[2]=x9908;
j4eval[3]=IKsign(x9911);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9913=(gconst5*r00);
IkReal x9914=(gconst4*r01);
CheckValue<IkReal> x9915=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9914*x9914)))+(((2.0)*x9913*x9914))+(((-1.0)*(r02*r02)))+(((-1.0)*(x9913*x9913))))),-1);
if(!x9915.valid){
continue;
}
CheckValue<IkReal> x9916 = IKatan2WithCheck(IkReal(((((-1.0)*x9914))+x9913)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9916.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9915.value)))+(x9916.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9917=IKcos(j4);
IkReal x9918=IKsin(j4);
IkReal x9919=((1.0)*x9917);
IkReal x9920=(gconst5*x9917);
IkReal x9921=(gconst5*x9918);
IkReal x9922=((1.0)*gconst4*x9918);
evalcond[0]=((((-1.0)*gconst4*r01*x9919))+((r00*x9920))+((r02*x9918)));
evalcond[1]=((((-1.0)*r21*x9922))+((r20*x9921))+(((-1.0)*r22*x9919)));
evalcond[2]=(((r10*x9921))+(((-1.0)*r12*x9919))+(((-1.0)*r11*x9922)));
evalcond[3]=((1.0)+(((-1.0)*r01*x9922))+(((-1.0)*r02*x9919))+((r00*x9921)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r20*x9920))+((r22*x9918))+(((-1.0)*gconst4*r21*x9919)));
evalcond[5]=(((r10*x9920))+((r12*x9918))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*gconst4*r11*x9919)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9923=((1.0)*gconst4);
CheckValue<IkReal> x9924 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x9923))+((gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9924.valid){
continue;
}
CheckValue<IkReal> x9925=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x9923))+(((-1.0)*gconst5*r11)))),-1);
if(!x9925.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9924.value)+(((1.5707963267949)*(x9925.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9926=IKcos(j4);
IkReal x9927=IKsin(j4);
IkReal x9928=((1.0)*x9926);
IkReal x9929=(gconst5*x9926);
IkReal x9930=(gconst5*x9927);
IkReal x9931=((1.0)*gconst4*x9927);
evalcond[0]=((((-1.0)*gconst4*r01*x9928))+((r02*x9927))+((r00*x9929)));
evalcond[1]=((((-1.0)*r22*x9928))+(((-1.0)*r21*x9931))+((r20*x9930)));
evalcond[2]=(((r10*x9930))+(((-1.0)*r12*x9928))+(((-1.0)*r11*x9931)));
evalcond[3]=((1.0)+((r00*x9930))+(((-1.0)*r01*x9931))+(((-1.0)*r02*x9928)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst4*r21*x9928))+((cj1*sj2))+((r20*x9929))+((r22*x9927)));
evalcond[5]=(((r10*x9929))+(((-1.0)*sj1*sj2))+((r12*x9927))+((cj1*cj2))+(((-1.0)*gconst4*r11*x9928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9932 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst5*r10))+(((-1.0)*gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9932.valid){
continue;
}
CheckValue<IkReal> x9933=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x9933.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9932.value)+(((1.5707963267949)*(x9933.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9934=IKcos(j4);
IkReal x9935=IKsin(j4);
IkReal x9936=((1.0)*x9934);
IkReal x9937=(gconst5*x9934);
IkReal x9938=(gconst5*x9935);
IkReal x9939=((1.0)*gconst4*x9935);
evalcond[0]=(((r00*x9937))+(((-1.0)*gconst4*r01*x9936))+((r02*x9935)));
evalcond[1]=((((-1.0)*r22*x9936))+(((-1.0)*r21*x9939))+((r20*x9938)));
evalcond[2]=(((r10*x9938))+(((-1.0)*r12*x9936))+(((-1.0)*r11*x9939)));
evalcond[3]=((1.0)+((r00*x9938))+(((-1.0)*r01*x9939))+(((-1.0)*r02*x9936)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst4*r21*x9936))+((cj1*sj2))+((r22*x9935))+((r20*x9937)));
evalcond[5]=((((-1.0)*gconst4*r11*x9936))+((r10*x9937))+((r12*x9935))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r12);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9940=gconst4*gconst4;
IkReal x9941=gconst5*gconst5;
IkReal x9942=(cj3*r20);
IkReal x9943=(r00*sj3);
IkReal x9944=(r01*sj3);
IkReal x9945=(gconst4*gconst5);
IkReal x9946=(r21*x9940);
IkReal x9947=((1.0)*r01*x9945);
CheckValue<IkReal> x9948=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj3*r00*r21*x9945))+((r00*x9941*x9942))+((cj3*r01*x9946))+((cj3*r02*r22))+(((-1.0)*x9942*x9947)))),-1);
if(!x9948.valid){
continue;
}
CheckValue<IkReal> x9949 = IKatan2WithCheck(IkReal((((gconst5*r22*x9944))+((gconst4*r22*x9943)))),IkReal((((r20*x9941*x9944))+((r20*x9943*x9945))+(((-1.0)*x9943*x9946))+(((-1.0)*r21*x9944*x9945)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9949.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9948.value)))+(x9949.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9950=IKsin(j4);
IkReal x9951=IKcos(j4);
IkReal x9952=(cj1*cj2);
IkReal x9953=(gconst5*sj3);
IkReal x9954=((1.0)*r21);
IkReal x9955=(cj3*gconst5);
IkReal x9956=((1.0)*sj2);
IkReal x9957=((1.0)*r11);
IkReal x9958=((1.0)*cj3);
IkReal x9959=(gconst4*r20);
IkReal x9960=(cj2*sj1);
IkReal x9961=(gconst4*r10);
IkReal x9962=(gconst4*r00);
IkReal x9963=((1.0)*r01);
IkReal x9964=((1.0)*sj3);
IkReal x9965=(sj1*x9956);
IkReal x9966=((1.0)*x9951);
IkReal x9967=(gconst4*x9950);
IkReal x9968=(r22*x9950);
IkReal x9969=(gconst5*x9950);
IkReal x9970=(r02*x9950);
IkReal x9971=(r12*x9950);
IkReal x9972=(gconst4*sj3*x9951);
IkReal x9973=(cj3*gconst4*x9951);
evalcond[0]=((((-1.0)*x9954*x9967))+(((-1.0)*r22*x9966))+((r20*x9969)));
evalcond[1]=((((-1.0)*x9957*x9967))+(((-1.0)*r12*x9966))+((r10*x9969)));
evalcond[2]=((1.0)+((r00*x9969))+(((-1.0)*x9963*x9967))+(((-1.0)*r02*x9966)));
evalcond[3]=((((-1.0)*x9958*x9970))+(((-1.0)*r00*x9955*x9966))+((r01*x9973))+((sj3*x9962))+((r01*x9953)));
evalcond[4]=((((-1.0)*x9955*x9963))+(((-1.0)*x9958*x9962))+(((-1.0)*r00*x9953*x9966))+((r01*x9972))+(((-1.0)*x9964*x9970)));
evalcond[5]=(((sj3*x9959))+((cj1*sj2))+(((-1.0)*x9958*x9968))+((r21*x9973))+(((-1.0)*r20*x9955*x9966))+x9960+((r21*x9953)));
evalcond[6]=((((-1.0)*x9965))+(((-1.0)*x9958*x9971))+((r11*x9953))+((r11*x9973))+(((-1.0)*r10*x9955*x9966))+x9952+((sj3*x9961)));
evalcond[7]=((((-1.0)*r20*x9953*x9966))+(((-1.0)*x9965))+(((-1.0)*x9958*x9959))+(((-1.0)*x9964*x9968))+(((-1.0)*x9954*x9955))+((r21*x9972))+x9952);
evalcond[8]=((((-1.0)*x9955*x9957))+(((-1.0)*r10*x9953*x9966))+((r11*x9972))+(((-1.0)*x9958*x9961))+(((-1.0)*x9964*x9971))+(((-1.0)*x9960))+(((-1.0)*cj1*x9956)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9974=((1.0)*gconst4);
CheckValue<IkReal> x9975=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x9974))+(((-1.0)*gconst5*r11)))),-1);
if(!x9975.valid){
continue;
}
CheckValue<IkReal> x9976 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x9974))+((gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9976.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9975.value)))+(x9976.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9977=IKsin(j4);
IkReal x9978=IKcos(j4);
IkReal x9979=(cj1*cj2);
IkReal x9980=(gconst5*sj3);
IkReal x9981=((1.0)*r21);
IkReal x9982=(cj3*gconst5);
IkReal x9983=((1.0)*sj2);
IkReal x9984=((1.0)*r11);
IkReal x9985=((1.0)*cj3);
IkReal x9986=(gconst4*r20);
IkReal x9987=(cj2*sj1);
IkReal x9988=(gconst4*r10);
IkReal x9989=(gconst4*r00);
IkReal x9990=((1.0)*r01);
IkReal x9991=((1.0)*sj3);
IkReal x9992=(sj1*x9983);
IkReal x9993=((1.0)*x9978);
IkReal x9994=(gconst4*x9977);
IkReal x9995=(r22*x9977);
IkReal x9996=(gconst5*x9977);
IkReal x9997=(r02*x9977);
IkReal x9998=(r12*x9977);
IkReal x9999=(gconst4*sj3*x9978);
IkReal x10000=(cj3*gconst4*x9978);
evalcond[0]=((((-1.0)*r22*x9993))+(((-1.0)*x9981*x9994))+((r20*x9996)));
evalcond[1]=((((-1.0)*x9984*x9994))+((r10*x9996))+(((-1.0)*r12*x9993)));
evalcond[2]=((1.0)+((r00*x9996))+(((-1.0)*x9990*x9994))+(((-1.0)*r02*x9993)));
evalcond[3]=(((r01*x9980))+((sj3*x9989))+((r01*x10000))+(((-1.0)*x9985*x9997))+(((-1.0)*r00*x9982*x9993)));
evalcond[4]=(((r01*x9999))+(((-1.0)*x9991*x9997))+(((-1.0)*r00*x9980*x9993))+(((-1.0)*x9982*x9990))+(((-1.0)*x9985*x9989)));
evalcond[5]=((((-1.0)*r20*x9982*x9993))+((cj1*sj2))+((sj3*x9986))+((r21*x9980))+x9987+(((-1.0)*x9985*x9995))+((r21*x10000)));
evalcond[6]=((((-1.0)*r10*x9982*x9993))+((r11*x9980))+((r11*x10000))+((sj3*x9988))+x9979+(((-1.0)*x9992))+(((-1.0)*x9985*x9998)));
evalcond[7]=((((-1.0)*x9981*x9982))+(((-1.0)*x9991*x9995))+((r21*x9999))+(((-1.0)*r20*x9980*x9993))+x9979+(((-1.0)*x9985*x9986))+(((-1.0)*x9992)));
evalcond[8]=((((-1.0)*cj1*x9983))+((r11*x9999))+(((-1.0)*x9991*x9998))+(((-1.0)*x9987))+(((-1.0)*r10*x9980*x9993))+(((-1.0)*x9985*x9988))+(((-1.0)*x9982*x9984)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10001 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst5*r10))+(((-1.0)*gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10001.valid){
continue;
}
CheckValue<IkReal> x10002=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10002.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10001.value)+(((1.5707963267949)*(x10002.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10003=IKsin(j4);
IkReal x10004=IKcos(j4);
IkReal x10005=(cj1*cj2);
IkReal x10006=(gconst5*sj3);
IkReal x10007=((1.0)*r21);
IkReal x10008=(cj3*gconst5);
IkReal x10009=((1.0)*sj2);
IkReal x10010=((1.0)*r11);
IkReal x10011=((1.0)*cj3);
IkReal x10012=(gconst4*r20);
IkReal x10013=(cj2*sj1);
IkReal x10014=(gconst4*r10);
IkReal x10015=(gconst4*r00);
IkReal x10016=((1.0)*r01);
IkReal x10017=((1.0)*sj3);
IkReal x10018=(sj1*x10009);
IkReal x10019=((1.0)*x10004);
IkReal x10020=(gconst4*x10003);
IkReal x10021=(r22*x10003);
IkReal x10022=(gconst5*x10003);
IkReal x10023=(r02*x10003);
IkReal x10024=(r12*x10003);
IkReal x10025=(gconst4*sj3*x10004);
IkReal x10026=(cj3*gconst4*x10004);
evalcond[0]=((((-1.0)*x10007*x10020))+((r20*x10022))+(((-1.0)*r22*x10019)));
evalcond[1]=((((-1.0)*r12*x10019))+((r10*x10022))+(((-1.0)*x10010*x10020)));
evalcond[2]=((1.0)+(((-1.0)*x10016*x10020))+(((-1.0)*r02*x10019))+((r00*x10022)));
evalcond[3]=((((-1.0)*r00*x10008*x10019))+(((-1.0)*x10011*x10023))+((r01*x10026))+((r01*x10006))+((sj3*x10015)));
evalcond[4]=((((-1.0)*x10017*x10023))+(((-1.0)*x10008*x10016))+(((-1.0)*r00*x10006*x10019))+(((-1.0)*x10011*x10015))+((r01*x10025)));
evalcond[5]=(((cj1*sj2))+((r21*x10026))+(((-1.0)*x10011*x10021))+x10013+((sj3*x10012))+((r21*x10006))+(((-1.0)*r20*x10008*x10019)));
evalcond[6]=(((r11*x10006))+(((-1.0)*x10011*x10024))+x10005+(((-1.0)*r10*x10008*x10019))+((r11*x10026))+((sj3*x10014))+(((-1.0)*x10018)));
evalcond[7]=((((-1.0)*r20*x10006*x10019))+(((-1.0)*x10017*x10021))+((r21*x10025))+(((-1.0)*x10011*x10012))+(((-1.0)*x10007*x10008))+x10005+(((-1.0)*x10018)));
evalcond[8]=((((-1.0)*x10017*x10024))+(((-1.0)*x10008*x10010))+(((-1.0)*x10013))+(((-1.0)*x10011*x10014))+((r11*x10025))+(((-1.0)*r10*x10006*x10019))+(((-1.0)*cj1*x10009)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10029 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10029.valid){
continue;
}
IkReal x10027=((1.0)*(x10029.value));
IkReal x10028=x9721;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10027)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10027)));
IkReal gconst4=((1.0)*r21*x10028);
IkReal gconst5=((-1.0)*r20*x10028);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10032 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10032.valid){
continue;
}
IkReal x10030=((1.0)*(x10032.value));
IkReal x10031=x9721;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10030)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10030)));
IkReal gconst4=((1.0)*r21*x10031);
IkReal gconst5=((-1.0)*r20*x10031);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x10035 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10035.valid){
continue;
}
IkReal x10033=((1.0)*(x10035.value));
IkReal x10034=x9721;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10033)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10033)));
IkReal gconst4=((1.0)*r21*x10034);
IkReal gconst5=((-1.0)*r20*x10034);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10038 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10038.valid){
continue;
}
IkReal x10036=((1.0)*(x10038.value));
IkReal x10037=x9721;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10036)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10036)));
IkReal gconst4=((1.0)*r21*x10037);
IkReal gconst5=((-1.0)*r20*x10037);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10041 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10041.valid){
continue;
}
IkReal x10039=((1.0)*(x10041.value));
IkReal x10040=x9721;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10039)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10039)));
IkReal gconst4=((1.0)*r21*x10040);
IkReal gconst5=((-1.0)*r20*x10040);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10044 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10044.valid){
continue;
}
IkReal x10042=((1.0)*(x10044.value));
IkReal x10043=x9721;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10042)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10042)));
IkReal gconst4=((1.0)*r21*x10043);
IkReal gconst5=((-1.0)*r20*x10043);
IkReal x10045=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10049=IKPowWithIntegerCheck(x10045,-1);
if(!x10049.valid){
continue;
}
IkReal x10046=x10049.value;
IkReal x10047=((1.0)*x10046);
IkReal x10048=((((-1.0)*x10047*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-1.0)*x10047*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x10046)));
j4eval[0]=x10048;
j4eval[1]=r02;
j4eval[2]=x10045;
j4eval[3]=IKsign(x10048);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10050=(gconst4*r01);
IkReal x10051=(gconst5*r00);
CheckValue<IkReal> x10052 = IKatan2WithCheck(IkReal(((((-1.0)*x10051))+x10050)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10052.valid){
continue;
}
CheckValue<IkReal> x10053=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10050*x10050)))+(((2.0)*x10050*x10051))+(((-1.0)*(r02*r02)))+(((-1.0)*(x10051*x10051))))),-1);
if(!x10053.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10052.value)+(((1.5707963267949)*(x10053.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10054=IKsin(j4);
IkReal x10055=IKcos(j4);
IkReal x10056=(gconst4*r21);
IkReal x10057=(gconst5*r10);
IkReal x10058=(gconst4*r11);
IkReal x10059=(gconst4*r01);
IkReal x10060=((1.0)*x10055);
IkReal x10061=((1.0)*x10054);
IkReal x10062=(gconst5*x10054);
evalcond[0]=(((r20*x10062))+(((-1.0)*x10056*x10061))+(((-1.0)*r22*x10060)));
evalcond[1]=(((x10054*x10057))+(((-1.0)*r12*x10060))+(((-1.0)*x10058*x10061)));
evalcond[2]=((((-1.0)*gconst5*r00*x10060))+((x10055*x10059))+(((-1.0)*r02*x10061)));
evalcond[3]=((-1.0)+(((-1.0)*x10059*x10061))+((r00*x10062))+(((-1.0)*r02*x10060)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10057*x10060))+(((-1.0)*r12*x10061))+((x10055*x10058)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*gconst5*r20*x10060))+((x10055*x10056))+((cj1*cj2))+(((-1.0)*r22*x10061)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10063=((1.0)*gconst4);
CheckValue<IkReal> x10064=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x10063))+(((-1.0)*gconst5*r21)))),-1);
if(!x10064.valid){
continue;
}
CheckValue<IkReal> x10065 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst5*r10))+(((-1.0)*r11*x10063)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10065.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10064.value)))+(x10065.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10066=IKsin(j4);
IkReal x10067=IKcos(j4);
IkReal x10068=(gconst4*r21);
IkReal x10069=(gconst5*r10);
IkReal x10070=(gconst4*r11);
IkReal x10071=(gconst4*r01);
IkReal x10072=((1.0)*x10067);
IkReal x10073=((1.0)*x10066);
IkReal x10074=(gconst5*x10066);
evalcond[0]=((((-1.0)*x10068*x10073))+((r20*x10074))+(((-1.0)*r22*x10072)));
evalcond[1]=(((x10066*x10069))+(((-1.0)*r12*x10072))+(((-1.0)*x10070*x10073)));
evalcond[2]=(((x10067*x10071))+(((-1.0)*gconst5*r00*x10072))+(((-1.0)*r02*x10073)));
evalcond[3]=((-1.0)+((r00*x10074))+(((-1.0)*r02*x10072))+(((-1.0)*x10071*x10073)));
evalcond[4]=(((cj2*sj1))+((x10067*x10070))+((cj1*sj2))+(((-1.0)*r12*x10073))+(((-1.0)*x10069*x10072)));
evalcond[5]=(((x10067*x10068))+(((-1.0)*sj1*sj2))+(((-1.0)*gconst5*r20*x10072))+((cj1*cj2))+(((-1.0)*r22*x10073)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10075=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10075.valid){
continue;
}
CheckValue<IkReal> x10076 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10076.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10075.value)))+(x10076.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10077=IKsin(j4);
IkReal x10078=IKcos(j4);
IkReal x10079=(gconst4*r21);
IkReal x10080=(gconst5*r10);
IkReal x10081=(gconst4*r11);
IkReal x10082=(gconst4*r01);
IkReal x10083=((1.0)*x10078);
IkReal x10084=((1.0)*x10077);
IkReal x10085=(gconst5*x10077);
evalcond[0]=((((-1.0)*x10079*x10084))+((r20*x10085))+(((-1.0)*r22*x10083)));
evalcond[1]=((((-1.0)*x10081*x10084))+(((-1.0)*r12*x10083))+((x10077*x10080)));
evalcond[2]=(((x10078*x10082))+(((-1.0)*gconst5*r00*x10083))+(((-1.0)*r02*x10084)));
evalcond[3]=((-1.0)+((r00*x10085))+(((-1.0)*r02*x10083))+(((-1.0)*x10082*x10084)));
evalcond[4]=((((-1.0)*x10080*x10083))+((cj2*sj1))+((cj1*sj2))+((x10078*x10081))+(((-1.0)*r12*x10084)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*gconst5*r20*x10083))+((x10078*x10079))+((cj1*cj2))+(((-1.0)*r22*x10084)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10088 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10088.valid){
continue;
}
IkReal x10086=((1.0)*(x10088.value));
IkReal x10087=x9721;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10086)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10086)));
IkReal gconst4=((1.0)*r21*x10087);
IkReal gconst5=((-1.0)*r20*x10087);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10091 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10091.valid){
continue;
}
IkReal x10089=((1.0)*(x10091.value));
IkReal x10090=x9721;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10089)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10089)));
IkReal gconst4=((1.0)*r21*x10090);
IkReal gconst5=((-1.0)*r20*x10090);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x10094 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10094.valid){
continue;
}
IkReal x10092=((1.0)*(x10094.value));
IkReal x10093=x9721;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10092)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10092)));
IkReal gconst4=((1.0)*r21*x10093);
IkReal gconst5=((-1.0)*r20*x10093);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10095=(gconst5*r00);
IkReal x10096=(gconst4*r01);
CheckValue<IkReal> x10097 = IKatan2WithCheck(IkReal((x10095+(((-1.0)*x10096)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10097.valid){
continue;
}
CheckValue<IkReal> x10098=IKPowWithIntegerCheck(IKsign(((x10095*x10095)+(x10096*x10096)+(((-2.0)*x10095*x10096))+(r02*r02))),-1);
if(!x10098.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10097.value)+(((1.5707963267949)*(x10098.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10099=IKcos(j4);
IkReal x10100=IKsin(j4);
IkReal x10101=((1.0)*x10099);
IkReal x10102=(gconst5*x10099);
IkReal x10103=(gconst5*x10100);
IkReal x10104=((1.0)*gconst4*x10100);
evalcond[0]=((((-1.0)*gconst4*r01*x10101))+((r00*x10102))+((r02*x10100)));
evalcond[1]=(((r20*x10103))+(((-1.0)*r22*x10101))+(((-1.0)*r21*x10104)));
evalcond[2]=((((-1.0)*r11*x10104))+(((-1.0)*r12*x10101))+((r10*x10103)));
evalcond[3]=((-1.0)+((r00*x10103))+(((-1.0)*r01*x10104))+(((-1.0)*r02*x10101)));
evalcond[4]=((((-1.0)*gconst4*r11*x10101))+((cj2*sj1))+((cj1*sj2))+((r10*x10102))+((r12*x10100)));
evalcond[5]=((((-1.0)*gconst4*r21*x10101))+((r20*x10102))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r22*x10100)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10105=((1.0)*gconst4);
CheckValue<IkReal> x10106 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r11*x10105))+((gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10106.valid){
continue;
}
CheckValue<IkReal> x10107=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst5*r21))+(((-1.0)*r20*x10105)))),-1);
if(!x10107.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10106.value)+(((1.5707963267949)*(x10107.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10108=IKcos(j4);
IkReal x10109=IKsin(j4);
IkReal x10110=((1.0)*x10108);
IkReal x10111=(gconst5*x10108);
IkReal x10112=(gconst5*x10109);
IkReal x10113=((1.0)*gconst4*x10109);
evalcond[0]=(((r00*x10111))+(((-1.0)*gconst4*r01*x10110))+((r02*x10109)));
evalcond[1]=(((r20*x10112))+(((-1.0)*r22*x10110))+(((-1.0)*r21*x10113)));
evalcond[2]=((((-1.0)*r12*x10110))+((r10*x10112))+(((-1.0)*r11*x10113)));
evalcond[3]=((-1.0)+((r00*x10112))+(((-1.0)*r01*x10113))+(((-1.0)*r02*x10110)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst4*r11*x10110))+((cj1*sj2))+((r12*x10109))+((r10*x10111)));
evalcond[5]=((((-1.0)*gconst4*r21*x10110))+((r20*x10111))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r22*x10109)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10114=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10114.valid){
continue;
}
CheckValue<IkReal> x10115 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10115.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10114.value)))+(x10115.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10116=IKcos(j4);
IkReal x10117=IKsin(j4);
IkReal x10118=((1.0)*x10116);
IkReal x10119=(gconst5*x10116);
IkReal x10120=(gconst5*x10117);
IkReal x10121=((1.0)*gconst4*x10117);
evalcond[0]=(((r00*x10119))+(((-1.0)*gconst4*r01*x10118))+((r02*x10117)));
evalcond[1]=(((r20*x10120))+(((-1.0)*r22*x10118))+(((-1.0)*r21*x10121)));
evalcond[2]=((((-1.0)*r12*x10118))+((r10*x10120))+(((-1.0)*r11*x10121)));
evalcond[3]=((-1.0)+((r00*x10120))+(((-1.0)*r01*x10121))+(((-1.0)*r02*x10118)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst4*r11*x10118))+((cj1*sj2))+((r12*x10117))+((r10*x10119)));
evalcond[5]=((((-1.0)*gconst4*r21*x10118))+((r20*x10119))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r22*x10117)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10124 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10124.valid){
continue;
}
IkReal x10122=((1.0)*(x10124.value));
IkReal x10123=x9721;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10122)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10122)));
IkReal gconst4=((1.0)*r21*x10123);
IkReal gconst5=((-1.0)*r20*x10123);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10127 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10127.valid){
continue;
}
IkReal x10125=((1.0)*(x10127.value));
IkReal x10126=x9721;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10125)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10125)));
IkReal gconst4=((1.0)*r21*x10126);
IkReal gconst5=((-1.0)*r20*x10126);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10130 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10130.valid){
continue;
}
IkReal x10128=((1.0)*(x10130.value));
IkReal x10129=x9721;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10128)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10128)));
IkReal gconst4=((1.0)*r21*x10129);
IkReal gconst5=((-1.0)*r20*x10129);
IkReal x10131=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10135=IKPowWithIntegerCheck(x10131,-1);
if(!x10135.valid){
continue;
}
IkReal x10132=x10135.value;
IkReal x10133=((1.0)*x10132);
IkReal x10134=((((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x10132))+(((-1.0)*x10133*(r01*r01)*(r21*r21)))+(((-1.0)*x10133*(r00*r00)*(r20*r20))));
j4eval[0]=x10134;
j4eval[1]=r02;
j4eval[2]=x10131;
j4eval[3]=IKsign(x10134);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10136=(gconst4*r01);
IkReal x10137=(gconst5*r00);
CheckValue<IkReal> x10138 = IKatan2WithCheck(IkReal((x10136+(((-1.0)*x10137)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10138.valid){
continue;
}
CheckValue<IkReal> x10139=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10137*x10137)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x10136*x10136)))+(((2.0)*x10136*x10137)))),-1);
if(!x10139.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10138.value)+(((1.5707963267949)*(x10139.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10140=IKsin(j4);
IkReal x10141=IKcos(j4);
IkReal x10142=(gconst4*r21);
IkReal x10143=(gconst5*r10);
IkReal x10144=(gconst4*r11);
IkReal x10145=(gconst4*r01);
IkReal x10146=((1.0)*x10141);
IkReal x10147=((1.0)*x10140);
IkReal x10148=(gconst5*x10140);
evalcond[0]=((((-1.0)*x10142*x10147))+(((-1.0)*r22*x10146))+((r20*x10148)));
evalcond[1]=((((-1.0)*x10144*x10147))+(((-1.0)*r12*x10146))+((x10140*x10143)));
evalcond[2]=((((-1.0)*r02*x10147))+(((-1.0)*gconst5*r00*x10146))+((x10141*x10145)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10146))+(((-1.0)*x10145*x10147))+((r00*x10148)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x10147))+((x10141*x10142))+(((-1.0)*gconst5*r20*x10146)));
evalcond[5]=((((-1.0)*x10143*x10146))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x10147))+((x10141*x10144)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10149=((1.0)*gconst4);
CheckValue<IkReal> x10150=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x10149))+(((-1.0)*gconst5*r21)))),-1);
if(!x10150.valid){
continue;
}
CheckValue<IkReal> x10151 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst5*r10))+(((-1.0)*r11*x10149)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10151.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10150.value)))+(x10151.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10152=IKsin(j4);
IkReal x10153=IKcos(j4);
IkReal x10154=(gconst4*r21);
IkReal x10155=(gconst5*r10);
IkReal x10156=(gconst4*r11);
IkReal x10157=(gconst4*r01);
IkReal x10158=((1.0)*x10153);
IkReal x10159=((1.0)*x10152);
IkReal x10160=(gconst5*x10152);
evalcond[0]=((((-1.0)*x10154*x10159))+((r20*x10160))+(((-1.0)*r22*x10158)));
evalcond[1]=(((x10152*x10155))+(((-1.0)*x10156*x10159))+(((-1.0)*r12*x10158)));
evalcond[2]=(((x10153*x10157))+(((-1.0)*r02*x10159))+(((-1.0)*gconst5*r00*x10158)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10158))+((r00*x10160))+(((-1.0)*x10157*x10159)));
evalcond[4]=(((cj2*sj1))+((x10153*x10154))+((cj1*sj2))+(((-1.0)*r22*x10159))+(((-1.0)*gconst5*r20*x10158)));
evalcond[5]=(((x10153*x10156))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x10159))+(((-1.0)*x10155*x10158)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10161=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10161.valid){
continue;
}
CheckValue<IkReal> x10162 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10162.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10161.value)))+(x10162.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10163=IKsin(j4);
IkReal x10164=IKcos(j4);
IkReal x10165=(gconst4*r21);
IkReal x10166=(gconst5*r10);
IkReal x10167=(gconst4*r11);
IkReal x10168=(gconst4*r01);
IkReal x10169=((1.0)*x10164);
IkReal x10170=((1.0)*x10163);
IkReal x10171=(gconst5*x10163);
evalcond[0]=((((-1.0)*r22*x10169))+(((-1.0)*x10165*x10170))+((r20*x10171)));
evalcond[1]=((((-1.0)*r12*x10169))+(((-1.0)*x10167*x10170))+((x10163*x10166)));
evalcond[2]=(((x10164*x10168))+(((-1.0)*gconst5*r00*x10169))+(((-1.0)*r02*x10170)));
evalcond[3]=((-1.0)+((r00*x10171))+(((-1.0)*r02*x10169))+(((-1.0)*x10168*x10170)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x10170))+(((-1.0)*gconst5*r20*x10169))+((cj1*sj2))+((x10164*x10165)));
evalcond[5]=(((x10164*x10167))+(((-1.0)*x10166*x10169))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x10170)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10174 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10174.valid){
continue;
}
IkReal x10172=((1.0)*(x10174.value));
IkReal x10173=x9721;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10172)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10172)));
IkReal gconst4=((1.0)*r21*x10173);
IkReal gconst5=((-1.0)*r20*x10173);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10177 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10177.valid){
continue;
}
IkReal x10175=((1.0)*(x10177.value));
IkReal x10176=x9721;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10175)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10175)));
IkReal gconst4=((1.0)*r21*x10176);
IkReal gconst5=((-1.0)*r20*x10176);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x10180 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10180.valid){
continue;
}
IkReal x10178=((1.0)*(x10180.value));
IkReal x10179=x9721;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10178)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10178)));
IkReal gconst4=((1.0)*r21*x10179);
IkReal gconst5=((-1.0)*r20*x10179);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10181=(gconst5*r00);
IkReal x10182=(gconst4*r01);
CheckValue<IkReal> x10183 = IKatan2WithCheck(IkReal(((((-1.0)*x10182))+x10181)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10183.valid){
continue;
}
CheckValue<IkReal> x10184=IKPowWithIntegerCheck(IKsign(((x10182*x10182)+(r02*r02)+(((-2.0)*x10181*x10182))+(x10181*x10181))),-1);
if(!x10184.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10183.value)+(((1.5707963267949)*(x10184.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10185=IKcos(j4);
IkReal x10186=IKsin(j4);
IkReal x10187=((1.0)*x10185);
IkReal x10188=(gconst5*x10185);
IkReal x10189=(gconst5*x10186);
IkReal x10190=((1.0)*gconst4*x10186);
evalcond[0]=(((r02*x10186))+(((-1.0)*gconst4*r01*x10187))+((r00*x10188)));
evalcond[1]=((((-1.0)*r21*x10190))+((r20*x10189))+(((-1.0)*r22*x10187)));
evalcond[2]=(((r10*x10189))+(((-1.0)*r12*x10187))+(((-1.0)*r11*x10190)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10187))+((r00*x10189))+(((-1.0)*r01*x10190)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x10186))+(((-1.0)*gconst4*r21*x10187))+((r20*x10188)));
evalcond[5]=(((r10*x10188))+(((-1.0)*gconst4*r11*x10187))+((r12*x10186))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10191=((1.0)*gconst4);
CheckValue<IkReal> x10192 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst5*r10))+(((-1.0)*r11*x10191)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10192.valid){
continue;
}
CheckValue<IkReal> x10193=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x10191))+(((-1.0)*gconst5*r21)))),-1);
if(!x10193.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10192.value)+(((1.5707963267949)*(x10193.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10194=IKcos(j4);
IkReal x10195=IKsin(j4);
IkReal x10196=((1.0)*x10194);
IkReal x10197=(gconst5*x10194);
IkReal x10198=(gconst5*x10195);
IkReal x10199=((1.0)*gconst4*x10195);
evalcond[0]=(((r02*x10195))+(((-1.0)*gconst4*r01*x10196))+((r00*x10197)));
evalcond[1]=((((-1.0)*r21*x10199))+((r20*x10198))+(((-1.0)*r22*x10196)));
evalcond[2]=(((r10*x10198))+(((-1.0)*r11*x10199))+(((-1.0)*r12*x10196)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10196))+((r00*x10198))+(((-1.0)*r01*x10199)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x10195))+(((-1.0)*gconst4*r21*x10196))+((r20*x10197)));
evalcond[5]=(((r10*x10197))+((r12*x10195))+(((-1.0)*gconst4*r11*x10196))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10200=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10200.valid){
continue;
}
CheckValue<IkReal> x10201 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10201.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10200.value)))+(x10201.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10202=IKcos(j4);
IkReal x10203=IKsin(j4);
IkReal x10204=((1.0)*x10202);
IkReal x10205=(gconst5*x10202);
IkReal x10206=(gconst5*x10203);
IkReal x10207=((1.0)*gconst4*x10203);
evalcond[0]=(((r02*x10203))+((r00*x10205))+(((-1.0)*gconst4*r01*x10204)));
evalcond[1]=((((-1.0)*r22*x10204))+(((-1.0)*r21*x10207))+((r20*x10206)));
evalcond[2]=((((-1.0)*r11*x10207))+((r10*x10206))+(((-1.0)*r12*x10204)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x10207))+(((-1.0)*r02*x10204))+((r00*x10206)));
evalcond[4]=(((cj2*sj1))+((r22*x10203))+((cj1*sj2))+(((-1.0)*gconst4*r21*x10204))+((r20*x10205)));
evalcond[5]=(((r10*x10205))+(((-1.0)*gconst4*r11*x10204))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x10203)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
CheckValue<IkReal> x10210 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10210.valid){
continue;
}
IkReal x10208=((1.0)*(x10210.value));
IkReal x10209=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10208)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x10209);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10208)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x10209;
IkReal x10211=((1.0)*r01*r21);
IkReal x10212=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x10211))+(((-1.0)*x10212)));
j4eval[1]=(((sj3*x10211))+((sj3*x10212)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x10215 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10215.valid){
continue;
}
IkReal x10213=((1.0)*(x10215.value));
IkReal x10214=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10213)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x10214);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10213)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x10214;
IkReal x10216=((1.0)*r01*r21);
IkReal x10217=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x10216))+(((-1.0)*x10217)));
j4eval[1]=(((cj3*x10216))+((cj3*x10217)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x10220 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10220.valid){
continue;
}
IkReal x10218=((1.0)*(x10220.value));
IkReal x10219=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10218)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x10219);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10218)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x10219;
IkReal x10221=((1.0)*cj3);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=(((r01*r21*x10221))+((r00*r20*x10221)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10222=((1.0)*gconst5);
CheckValue<IkReal> x10223=IKPowWithIntegerCheck(r12,-1);
if(!x10223.valid){
continue;
}
CheckValue<IkReal> x10224=IKPowWithIntegerCheck(sj3,-1);
if(!x10224.valid){
continue;
}
CheckValue<IkReal> x10225=IKPowWithIntegerCheck(((((-1.0)*cj3*r00*x10222))+((cj3*gconst4*r01))),-1);
if(!x10225.valid){
continue;
}
if( IKabs(((x10223.value)*(x10224.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10225.value)*(((((-1.0)*r01*sj3*x10222))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10223.value)*(x10224.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x10225.value)*(((((-1.0)*r01*sj3*x10222))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10223.value)*(x10224.value)*((((cj2*sj1))+((cj1*sj2))))), ((x10225.value)*(((((-1.0)*r01*sj3*x10222))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10226=IKsin(j4);
IkReal x10227=IKcos(j4);
IkReal x10228=(cj2*sj1);
IkReal x10229=(cj1*sj2);
IkReal x10230=((1.0)*sj3);
IkReal x10231=((1.0)*r21);
IkReal x10232=(cj3*gconst5);
IkReal x10233=(gconst5*r20);
IkReal x10234=(sj1*sj2);
IkReal x10235=(cj1*cj2);
IkReal x10236=(cj3*gconst4);
IkReal x10237=((1.0)*r20);
IkReal x10238=(gconst5*sj3);
IkReal x10239=(gconst5*r00);
IkReal x10240=(gconst4*sj3);
IkReal x10241=((1.0)*r01);
IkReal x10242=((1.0)*r00);
IkReal x10243=(r12*x10226);
IkReal x10244=(gconst4*x10226);
IkReal x10245=(x10228+x10229);
IkReal x10246=(x10227*x10240);
evalcond[0]=((-1.0)*r12*x10227);
evalcond[1]=((((-1.0)*x10231*x10244))+((x10226*x10233)));
evalcond[2]=(x10245+(((-1.0)*x10230*x10243)));
evalcond[3]=((-1.0)+(((-1.0)*x10241*x10244))+((x10226*x10239)));
evalcond[4]=(x10234+(((-1.0)*x10235))+(((-1.0)*cj3*x10243)));
evalcond[5]=((((-1.0)*x10227*x10232*x10242))+((r01*x10227*x10236))+((r01*x10238))+((r00*x10240)));
evalcond[6]=((((-1.0)*x10232*x10241))+(((-1.0)*x10227*x10230*x10239))+(((-1.0)*x10236*x10242))+((r01*x10246)));
evalcond[7]=(((r21*x10238))+((r21*x10227*x10236))+(((-1.0)*x10227*x10232*x10237))+x10245+((r20*x10240)));
evalcond[8]=(((r21*x10246))+x10235+(((-1.0)*x10234))+(((-1.0)*x10236*x10237))+(((-1.0)*x10227*x10230*x10233))+(((-1.0)*x10231*x10232)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10247=((1.0)*gconst5);
IkReal x10248=(gconst4*r01);
CheckValue<IkReal> x10249=IKPowWithIntegerCheck((((gconst5*r00))+(((-1.0)*x10248))),-1);
if(!x10249.valid){
continue;
}
CheckValue<IkReal> x10250=IKPowWithIntegerCheck(((((-1.0)*cj3*r00*x10247))+((cj3*x10248))),-1);
if(!x10250.valid){
continue;
}
if( IKabs(x10249.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10250.value)*(((((-1.0)*r01*sj3*x10247))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10249.value)+IKsqr(((x10250.value)*(((((-1.0)*r01*sj3*x10247))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10249.value, ((x10250.value)*(((((-1.0)*r01*sj3*x10247))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10251=IKsin(j4);
IkReal x10252=IKcos(j4);
IkReal x10253=(cj2*sj1);
IkReal x10254=(cj1*sj2);
IkReal x10255=((1.0)*sj3);
IkReal x10256=((1.0)*r21);
IkReal x10257=(cj3*gconst5);
IkReal x10258=(gconst5*r20);
IkReal x10259=(sj1*sj2);
IkReal x10260=(cj1*cj2);
IkReal x10261=(cj3*gconst4);
IkReal x10262=((1.0)*r20);
IkReal x10263=(gconst5*sj3);
IkReal x10264=(gconst5*r00);
IkReal x10265=(gconst4*sj3);
IkReal x10266=((1.0)*r01);
IkReal x10267=((1.0)*r00);
IkReal x10268=(r12*x10251);
IkReal x10269=(gconst4*x10251);
IkReal x10270=(x10253+x10254);
IkReal x10271=(x10252*x10265);
evalcond[0]=((-1.0)*r12*x10252);
evalcond[1]=(((x10251*x10258))+(((-1.0)*x10256*x10269)));
evalcond[2]=((((-1.0)*x10255*x10268))+x10270);
evalcond[3]=((-1.0)+(((-1.0)*x10266*x10269))+((x10251*x10264)));
evalcond[4]=((((-1.0)*cj3*x10268))+(((-1.0)*x10260))+x10259);
evalcond[5]=((((-1.0)*x10252*x10257*x10267))+((r00*x10265))+((r01*x10263))+((r01*x10252*x10261)));
evalcond[6]=((((-1.0)*x10257*x10266))+(((-1.0)*x10261*x10267))+((r01*x10271))+(((-1.0)*x10252*x10255*x10264)));
evalcond[7]=((((-1.0)*x10252*x10257*x10262))+((r21*x10252*x10261))+((r20*x10265))+x10270+((r21*x10263)));
evalcond[8]=((((-1.0)*x10261*x10262))+(((-1.0)*x10256*x10257))+((r21*x10271))+x10260+(((-1.0)*x10259))+(((-1.0)*x10252*x10255*x10258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10272=(gconst5*r00);
IkReal x10273=(gconst4*r01);
CheckValue<IkReal> x10274=IKPowWithIntegerCheck((x10272+(((-1.0)*x10273))),-1);
if(!x10274.valid){
continue;
}
CheckValue<IkReal> x10275=IKPowWithIntegerCheck(((((-1.0)*sj3*x10272))+((sj3*x10273))),-1);
if(!x10275.valid){
continue;
}
if( IKabs(x10274.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10275.value)*((((cj3*gconst5*r01))+((cj3*gconst4*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10274.value)+IKsqr(((x10275.value)*((((cj3*gconst5*r01))+((cj3*gconst4*r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10274.value, ((x10275.value)*((((cj3*gconst5*r01))+((cj3*gconst4*r00))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10276=IKsin(j4);
IkReal x10277=IKcos(j4);
IkReal x10278=(cj2*sj1);
IkReal x10279=(cj1*sj2);
IkReal x10280=((1.0)*sj3);
IkReal x10281=((1.0)*r21);
IkReal x10282=(cj3*gconst5);
IkReal x10283=(gconst5*r20);
IkReal x10284=(sj1*sj2);
IkReal x10285=(cj1*cj2);
IkReal x10286=(cj3*gconst4);
IkReal x10287=((1.0)*r20);
IkReal x10288=(gconst5*sj3);
IkReal x10289=(gconst5*r00);
IkReal x10290=(gconst4*sj3);
IkReal x10291=((1.0)*r01);
IkReal x10292=((1.0)*r00);
IkReal x10293=(r12*x10276);
IkReal x10294=(gconst4*x10276);
IkReal x10295=(x10279+x10278);
IkReal x10296=(x10277*x10290);
evalcond[0]=((-1.0)*r12*x10277);
evalcond[1]=((((-1.0)*x10281*x10294))+((x10276*x10283)));
evalcond[2]=((((-1.0)*x10280*x10293))+x10295);
evalcond[3]=((-1.0)+(((-1.0)*x10291*x10294))+((x10276*x10289)));
evalcond[4]=((((-1.0)*cj3*x10293))+x10284+(((-1.0)*x10285)));
evalcond[5]=(((r01*x10288))+(((-1.0)*x10277*x10282*x10292))+((r00*x10290))+((r01*x10277*x10286)));
evalcond[6]=((((-1.0)*x10282*x10291))+(((-1.0)*x10286*x10292))+((r01*x10296))+(((-1.0)*x10277*x10280*x10289)));
evalcond[7]=(((r20*x10290))+(((-1.0)*x10277*x10282*x10287))+x10295+((r21*x10288))+((r21*x10277*x10286)));
evalcond[8]=((((-1.0)*x10281*x10282))+((r21*x10296))+x10285+(((-1.0)*x10284))+(((-1.0)*x10286*x10287))+(((-1.0)*x10277*x10280*x10283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10297=gconst4*gconst4;
IkReal x10298=gconst5*gconst5;
IkReal x10299=(cj3*r20);
IkReal x10300=(r00*sj3);
IkReal x10301=(r01*sj3);
IkReal x10302=(gconst4*gconst5);
IkReal x10303=(r21*x10297);
IkReal x10304=((1.0)*r01*x10302);
CheckValue<IkReal> x10305=IKPowWithIntegerCheck(IKsign((((cj3*r01*x10303))+((r00*x10298*x10299))+((cj3*r02*r22))+(((-1.0)*cj3*r00*r21*x10302))+(((-1.0)*x10299*x10304)))),-1);
if(!x10305.valid){
continue;
}
CheckValue<IkReal> x10306 = IKatan2WithCheck(IkReal((((gconst5*r22*x10301))+((gconst4*r22*x10300)))),IkReal((((r20*x10298*x10301))+(((-1.0)*x10300*x10303))+((r20*x10300*x10302))+(((-1.0)*r21*x10301*x10302)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10306.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10305.value)))+(x10306.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10307=IKsin(j4);
IkReal x10308=IKcos(j4);
IkReal x10309=(cj2*sj1);
IkReal x10310=(cj1*sj2);
IkReal x10311=(gconst5*sj3);
IkReal x10312=((1.0)*r21);
IkReal x10313=(cj3*gconst5);
IkReal x10314=(sj1*sj2);
IkReal x10315=(cj1*cj2);
IkReal x10316=(gconst4*r11);
IkReal x10317=(gconst4*sj3);
IkReal x10318=((1.0)*x10308);
IkReal x10319=((1.0)*x10307);
IkReal x10320=((1.0)*cj3*gconst4);
IkReal x10321=(gconst5*x10307);
IkReal x10322=(x10310+x10309);
IkReal x10323=(x10308*x10317);
IkReal x10324=(cj3*gconst4*x10308);
evalcond[0]=(((r20*x10321))+(((-1.0)*gconst4*x10307*x10312))+(((-1.0)*r22*x10318)));
evalcond[1]=((((-1.0)*x10316*x10319))+(((-1.0)*r12*x10318))+((r10*x10321)));
evalcond[2]=((-1.0)+((r00*x10321))+(((-1.0)*r02*x10318))+(((-1.0)*gconst4*r01*x10319)));
evalcond[3]=(((r01*x10311))+((r01*x10324))+(((-1.0)*r00*x10313*x10318))+(((-1.0)*cj3*r02*x10319))+((r00*x10317)));
evalcond[4]=((((-1.0)*r01*x10313))+(((-1.0)*r00*x10320))+((r01*x10323))+(((-1.0)*r00*x10311*x10318))+(((-1.0)*r02*sj3*x10319)));
evalcond[5]=((((-1.0)*r20*x10313*x10318))+((r21*x10311))+(((-1.0)*cj3*r22*x10319))+((r21*x10324))+x10322+((r20*x10317)));
evalcond[6]=(((r11*x10311))+((r10*x10317))+x10314+(((-1.0)*x10315))+(((-1.0)*r10*x10313*x10318))+((cj3*x10308*x10316))+(((-1.0)*cj3*r12*x10319)));
evalcond[7]=(((sj3*x10308*x10316))+x10322+(((-1.0)*r12*sj3*x10319))+(((-1.0)*r10*x10311*x10318))+(((-1.0)*r10*x10320))+(((-1.0)*r11*x10313)));
evalcond[8]=((((-1.0)*x10312*x10313))+(((-1.0)*r22*sj3*x10319))+((r21*x10323))+x10315+(((-1.0)*x10314))+(((-1.0)*r20*x10311*x10318))+(((-1.0)*r20*x10320)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10325=((1.0)*gconst4);
CheckValue<IkReal> x10326=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst5*r21))+(((-1.0)*r20*x10325)))),-1);
if(!x10326.valid){
continue;
}
CheckValue<IkReal> x10327 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r11*x10325))+((gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10327.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10326.value)))+(x10327.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10328=IKsin(j4);
IkReal x10329=IKcos(j4);
IkReal x10330=(cj2*sj1);
IkReal x10331=(cj1*sj2);
IkReal x10332=(gconst5*sj3);
IkReal x10333=((1.0)*r21);
IkReal x10334=(cj3*gconst5);
IkReal x10335=(sj1*sj2);
IkReal x10336=(cj1*cj2);
IkReal x10337=(gconst4*r11);
IkReal x10338=(gconst4*sj3);
IkReal x10339=((1.0)*x10329);
IkReal x10340=((1.0)*x10328);
IkReal x10341=((1.0)*cj3*gconst4);
IkReal x10342=(gconst5*x10328);
IkReal x10343=(x10330+x10331);
IkReal x10344=(x10329*x10338);
IkReal x10345=(cj3*gconst4*x10329);
evalcond[0]=(((r20*x10342))+(((-1.0)*gconst4*x10328*x10333))+(((-1.0)*r22*x10339)));
evalcond[1]=((((-1.0)*x10337*x10340))+(((-1.0)*r12*x10339))+((r10*x10342)));
evalcond[2]=((-1.0)+((r00*x10342))+(((-1.0)*gconst4*r01*x10340))+(((-1.0)*r02*x10339)));
evalcond[3]=(((r01*x10345))+((r01*x10332))+((r00*x10338))+(((-1.0)*r00*x10334*x10339))+(((-1.0)*cj3*r02*x10340)));
evalcond[4]=(((r01*x10344))+(((-1.0)*r02*sj3*x10340))+(((-1.0)*r01*x10334))+(((-1.0)*r00*x10341))+(((-1.0)*r00*x10332*x10339)));
evalcond[5]=(((r20*x10338))+((r21*x10332))+x10343+(((-1.0)*r20*x10334*x10339))+((r21*x10345))+(((-1.0)*cj3*r22*x10340)));
evalcond[6]=((((-1.0)*x10336))+(((-1.0)*cj3*r12*x10340))+(((-1.0)*r10*x10334*x10339))+((cj3*x10329*x10337))+x10335+((r11*x10332))+((r10*x10338)));
evalcond[7]=((((-1.0)*r10*x10332*x10339))+(((-1.0)*r10*x10341))+(((-1.0)*r12*sj3*x10340))+(((-1.0)*r11*x10334))+((sj3*x10329*x10337))+x10343);
evalcond[8]=((((-1.0)*x10335))+(((-1.0)*x10333*x10334))+(((-1.0)*r20*x10332*x10339))+(((-1.0)*r22*sj3*x10340))+x10336+((r21*x10344))+(((-1.0)*r20*x10341)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10346=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10346.valid){
continue;
}
CheckValue<IkReal> x10347 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10347.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10346.value)))+(x10347.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10348=IKsin(j4);
IkReal x10349=IKcos(j4);
IkReal x10350=(cj2*sj1);
IkReal x10351=(cj1*sj2);
IkReal x10352=(gconst5*sj3);
IkReal x10353=((1.0)*r21);
IkReal x10354=(cj3*gconst5);
IkReal x10355=(sj1*sj2);
IkReal x10356=(cj1*cj2);
IkReal x10357=(gconst4*r11);
IkReal x10358=(gconst4*sj3);
IkReal x10359=((1.0)*x10349);
IkReal x10360=((1.0)*x10348);
IkReal x10361=((1.0)*cj3*gconst4);
IkReal x10362=(gconst5*x10348);
IkReal x10363=(x10350+x10351);
IkReal x10364=(x10349*x10358);
IkReal x10365=(cj3*gconst4*x10349);
evalcond[0]=((((-1.0)*r22*x10359))+(((-1.0)*gconst4*x10348*x10353))+((r20*x10362)));
evalcond[1]=((((-1.0)*x10357*x10360))+((r10*x10362))+(((-1.0)*r12*x10359)));
evalcond[2]=((-1.0)+((r00*x10362))+(((-1.0)*gconst4*r01*x10360))+(((-1.0)*r02*x10359)));
evalcond[3]=((((-1.0)*cj3*r02*x10360))+((r01*x10365))+((r00*x10358))+((r01*x10352))+(((-1.0)*r00*x10354*x10359)));
evalcond[4]=((((-1.0)*r02*sj3*x10360))+((r01*x10364))+(((-1.0)*r01*x10354))+(((-1.0)*r00*x10361))+(((-1.0)*r00*x10352*x10359)));
evalcond[5]=(((r21*x10352))+((r21*x10365))+((r20*x10358))+(((-1.0)*cj3*r22*x10360))+(((-1.0)*r20*x10354*x10359))+x10363);
evalcond[6]=((((-1.0)*r10*x10354*x10359))+((cj3*x10349*x10357))+x10355+((r11*x10352))+(((-1.0)*cj3*r12*x10360))+((r10*x10358))+(((-1.0)*x10356)));
evalcond[7]=(((sj3*x10349*x10357))+(((-1.0)*r12*sj3*x10360))+x10363+(((-1.0)*r11*x10354))+(((-1.0)*r10*x10361))+(((-1.0)*r10*x10352*x10359)));
evalcond[8]=((((-1.0)*r20*x10352*x10359))+((r21*x10364))+(((-1.0)*r22*sj3*x10360))+x10356+(((-1.0)*r20*x10361))+(((-1.0)*x10353*x10354))+(((-1.0)*x10355)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x10368 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10368.valid){
continue;
}
IkReal x10366=((1.0)*(x10368.value));
IkReal x10367=x9721;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10366)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10366)));
IkReal gconst4=((1.0)*r21*x10367);
IkReal gconst5=((-1.0)*r20*x10367);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10371 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10371.valid){
continue;
}
IkReal x10369=((1.0)*(x10371.value));
IkReal x10370=x9721;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10369)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10369)));
IkReal gconst4=((1.0)*r21*x10370);
IkReal gconst5=((-1.0)*r20*x10370);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x10374 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10374.valid){
continue;
}
IkReal x10372=((1.0)*(x10374.value));
IkReal x10373=x9721;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10372)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10372)));
IkReal gconst4=((1.0)*r21*x10373);
IkReal gconst5=((-1.0)*r20*x10373);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x10377 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10377.valid){
continue;
}
IkReal x10375=((1.0)*(x10377.value));
IkReal x10376=x9721;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10375)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10375)));
IkReal gconst4=((1.0)*r21*x10376);
IkReal gconst5=((-1.0)*r20*x10376);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10380 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10380.valid){
continue;
}
IkReal x10378=((1.0)*(x10380.value));
IkReal x10379=x9721;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10378)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10378)));
IkReal gconst4=((1.0)*r21*x10379);
IkReal gconst5=((-1.0)*r20*x10379);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10383 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10383.valid){
continue;
}
IkReal x10381=((1.0)*(x10383.value));
IkReal x10382=x9721;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10381)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10381)));
IkReal gconst4=((1.0)*r21*x10382);
IkReal gconst5=((-1.0)*r20*x10382);
IkReal x10384=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10388=IKPowWithIntegerCheck(x10384,-1);
if(!x10388.valid){
continue;
}
IkReal x10385=x10388.value;
IkReal x10386=((1.0)*x10385);
IkReal x10387=((((-1.0)*x10386*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x10385))+(((-1.0)*(r12*r12)))+(((-1.0)*x10386*(r11*r11)*(r21*r21))));
j4eval[0]=x10387;
j4eval[1]=r12;
j4eval[2]=x10384;
j4eval[3]=IKsign(x10387);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10389=(gconst5*r10);
IkReal x10390=(gconst4*r11);
CheckValue<IkReal> x10391 = IKatan2WithCheck(IkReal(((((-1.0)*x10389))+x10390)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10391.valid){
continue;
}
CheckValue<IkReal> x10392=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10390*x10390)))+(((2.0)*x10389*x10390))+(((-1.0)*(x10389*x10389)))+(((-1.0)*(r12*r12))))),-1);
if(!x10392.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10391.value)+(((1.5707963267949)*(x10392.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10393=IKsin(j4);
IkReal x10394=IKcos(j4);
IkReal x10395=(gconst4*r21);
IkReal x10396=(gconst5*r10);
IkReal x10397=((1.0)*sj1);
IkReal x10398=(gconst4*r11);
IkReal x10399=(gconst4*r01);
IkReal x10400=((1.0)*x10394);
IkReal x10401=((1.0)*x10393);
IkReal x10402=(gconst5*x10393);
evalcond[0]=((((-1.0)*r22*x10400))+((r20*x10402))+(((-1.0)*x10395*x10401)));
evalcond[1]=(((r00*x10402))+(((-1.0)*x10399*x10401))+(((-1.0)*r02*x10400)));
evalcond[2]=(((x10394*x10398))+(((-1.0)*x10396*x10400))+(((-1.0)*r12*x10401)));
evalcond[3]=((-1.0)+((x10393*x10396))+(((-1.0)*x10398*x10401))+(((-1.0)*r12*x10400)));
evalcond[4]=(((x10394*x10395))+(((-1.0)*gconst5*r20*x10400))+(((-1.0)*r22*x10401))+(((-1.0)*sj2*x10397))+((cj1*cj2)));
evalcond[5]=(((x10394*x10399))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x10397))+(((-1.0)*r02*x10401))+(((-1.0)*gconst5*r00*x10400)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10403=((1.0)*gconst4);
CheckValue<IkReal> x10404=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x10403))+(((-1.0)*gconst5*r01)))),-1);
if(!x10404.valid){
continue;
}
CheckValue<IkReal> x10405 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x10403))+((gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10405.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10404.value)))+(x10405.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10406=IKsin(j4);
IkReal x10407=IKcos(j4);
IkReal x10408=(gconst4*r21);
IkReal x10409=(gconst5*r10);
IkReal x10410=((1.0)*sj1);
IkReal x10411=(gconst4*r11);
IkReal x10412=(gconst4*r01);
IkReal x10413=((1.0)*x10407);
IkReal x10414=((1.0)*x10406);
IkReal x10415=(gconst5*x10406);
evalcond[0]=((((-1.0)*r22*x10413))+((r20*x10415))+(((-1.0)*x10408*x10414)));
evalcond[1]=((((-1.0)*r02*x10413))+((r00*x10415))+(((-1.0)*x10412*x10414)));
evalcond[2]=((((-1.0)*x10409*x10413))+((x10407*x10411))+(((-1.0)*r12*x10414)));
evalcond[3]=((-1.0)+((x10406*x10409))+(((-1.0)*r12*x10413))+(((-1.0)*x10411*x10414)));
evalcond[4]=(((x10407*x10408))+(((-1.0)*sj2*x10410))+(((-1.0)*gconst5*r20*x10413))+(((-1.0)*r22*x10414))+((cj1*cj2)));
evalcond[5]=((((-1.0)*r02*x10414))+((x10407*x10412))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst5*r00*x10413))+(((-1.0)*cj2*x10410)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10416 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst4*r01))+((gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10416.valid){
continue;
}
CheckValue<IkReal> x10417=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10417.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10416.value)+(((1.5707963267949)*(x10417.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10418=IKsin(j4);
IkReal x10419=IKcos(j4);
IkReal x10420=(gconst4*r21);
IkReal x10421=(gconst5*r10);
IkReal x10422=((1.0)*sj1);
IkReal x10423=(gconst4*r11);
IkReal x10424=(gconst4*r01);
IkReal x10425=((1.0)*x10419);
IkReal x10426=((1.0)*x10418);
IkReal x10427=(gconst5*x10418);
evalcond[0]=((((-1.0)*x10420*x10426))+(((-1.0)*r22*x10425))+((r20*x10427)));
evalcond[1]=(((r00*x10427))+(((-1.0)*r02*x10425))+(((-1.0)*x10424*x10426)));
evalcond[2]=((((-1.0)*x10421*x10425))+((x10419*x10423))+(((-1.0)*r12*x10426)));
evalcond[3]=((-1.0)+(((-1.0)*x10423*x10426))+(((-1.0)*r12*x10425))+((x10418*x10421)));
evalcond[4]=(((x10419*x10420))+(((-1.0)*sj2*x10422))+(((-1.0)*gconst5*r20*x10425))+(((-1.0)*r22*x10426))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj2*x10422))+(((-1.0)*gconst5*r00*x10425))+(((-1.0)*cj1*sj2))+((x10419*x10424))+(((-1.0)*r02*x10426)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x10430 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10430.valid){
continue;
}
IkReal x10428=((1.0)*(x10430.value));
IkReal x10429=x9721;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10428)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10428)));
IkReal gconst4=((1.0)*r21*x10429);
IkReal gconst5=((-1.0)*r20*x10429);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10433 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10433.valid){
continue;
}
IkReal x10431=((1.0)*(x10433.value));
IkReal x10432=x9721;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10431)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10431)));
IkReal gconst4=((1.0)*r21*x10432);
IkReal gconst5=((-1.0)*r20*x10432);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x10436 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10436.valid){
continue;
}
IkReal x10434=((1.0)*(x10436.value));
IkReal x10435=x9721;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10434)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10434)));
IkReal gconst4=((1.0)*r21*x10435);
IkReal gconst5=((-1.0)*r20*x10435);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10437=(gconst5*r10);
IkReal x10438=(gconst4*r11);
CheckValue<IkReal> x10439=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10438*x10438)+(x10437*x10437)+(((-2.0)*x10437*x10438)))),-1);
if(!x10439.valid){
continue;
}
CheckValue<IkReal> x10440 = IKatan2WithCheck(IkReal(((((-1.0)*x10438))+x10437)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10440.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10439.value)))+(x10440.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10441=IKcos(j4);
IkReal x10442=IKsin(j4);
IkReal x10443=((1.0)*sj1);
IkReal x10444=((1.0)*x10441);
IkReal x10445=(gconst5*x10442);
IkReal x10446=(gconst5*x10441);
IkReal x10447=((1.0)*gconst4*x10442);
evalcond[0]=((((-1.0)*gconst4*r11*x10444))+((r12*x10442))+((r10*x10446)));
evalcond[1]=((((-1.0)*r21*x10447))+((r20*x10445))+(((-1.0)*r22*x10444)));
evalcond[2]=((((-1.0)*r02*x10444))+((r00*x10445))+(((-1.0)*r01*x10447)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10444))+(((-1.0)*r11*x10447))+((r10*x10445)));
evalcond[4]=(((r22*x10442))+((r20*x10446))+(((-1.0)*gconst4*r21*x10444))+(((-1.0)*sj2*x10443))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r02*x10442))+(((-1.0)*gconst4*r01*x10444))+((r00*x10446))+(((-1.0)*cj2*x10443)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10448=((1.0)*gconst4);
CheckValue<IkReal> x10449=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x10448))+(((-1.0)*gconst5*r01)))),-1);
if(!x10449.valid){
continue;
}
CheckValue<IkReal> x10450 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x10448))+((gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10450.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10449.value)))+(x10450.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10451=IKcos(j4);
IkReal x10452=IKsin(j4);
IkReal x10453=((1.0)*sj1);
IkReal x10454=((1.0)*x10451);
IkReal x10455=(gconst5*x10452);
IkReal x10456=(gconst5*x10451);
IkReal x10457=((1.0)*gconst4*x10452);
evalcond[0]=(((r10*x10456))+((r12*x10452))+(((-1.0)*gconst4*r11*x10454)));
evalcond[1]=((((-1.0)*r22*x10454))+(((-1.0)*r21*x10457))+((r20*x10455)));
evalcond[2]=((((-1.0)*r02*x10454))+(((-1.0)*r01*x10457))+((r00*x10455)));
evalcond[3]=((-1.0)+((r10*x10455))+(((-1.0)*r12*x10454))+(((-1.0)*r11*x10457)));
evalcond[4]=(((r22*x10452))+(((-1.0)*sj2*x10453))+((cj1*cj2))+(((-1.0)*gconst4*r21*x10454))+((r20*x10456)));
evalcond[5]=((((-1.0)*gconst4*r01*x10454))+(((-1.0)*cj1*sj2))+((r00*x10456))+(((-1.0)*cj2*x10453))+((r02*x10452)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10458 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst4*r01))+((gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10458.valid){
continue;
}
CheckValue<IkReal> x10459=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10459.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10458.value)+(((1.5707963267949)*(x10459.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10460=IKcos(j4);
IkReal x10461=IKsin(j4);
IkReal x10462=((1.0)*sj1);
IkReal x10463=((1.0)*x10460);
IkReal x10464=(gconst5*x10461);
IkReal x10465=(gconst5*x10460);
IkReal x10466=((1.0)*gconst4*x10461);
evalcond[0]=(((r12*x10461))+(((-1.0)*gconst4*r11*x10463))+((r10*x10465)));
evalcond[1]=(((r20*x10464))+(((-1.0)*r22*x10463))+(((-1.0)*r21*x10466)));
evalcond[2]=((((-1.0)*r02*x10463))+(((-1.0)*r01*x10466))+((r00*x10464)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x10466))+((r10*x10464))+(((-1.0)*r12*x10463)));
evalcond[4]=(((r20*x10465))+((r22*x10461))+(((-1.0)*gconst4*r21*x10463))+((cj1*cj2))+(((-1.0)*sj2*x10462)));
evalcond[5]=((((-1.0)*gconst4*r01*x10463))+((r00*x10465))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x10462))+((r02*x10461)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x10469 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10469.valid){
continue;
}
IkReal x10467=((1.0)*(x10469.value));
IkReal x10468=x9721;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10467)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10467)));
IkReal gconst4=((1.0)*r21*x10468);
IkReal gconst5=((-1.0)*r20*x10468);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10472 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10472.valid){
continue;
}
IkReal x10470=((1.0)*(x10472.value));
IkReal x10471=x9721;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10470)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10470)));
IkReal gconst4=((1.0)*r21*x10471);
IkReal gconst5=((-1.0)*r20*x10471);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10475 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10475.valid){
continue;
}
IkReal x10473=((1.0)*(x10475.value));
IkReal x10474=x9721;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10473)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10473)));
IkReal gconst4=((1.0)*r21*x10474);
IkReal gconst5=((-1.0)*r20*x10474);
IkReal x10476=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10480=IKPowWithIntegerCheck(x10476,-1);
if(!x10480.valid){
continue;
}
IkReal x10477=x10480.value;
IkReal x10478=((1.0)*x10477);
IkReal x10479=((((-1.0)*x10478*(r11*r11)*(r21*r21)))+(((-1.0)*x10478*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x10477)));
j4eval[0]=x10479;
j4eval[1]=r12;
j4eval[2]=x10476;
j4eval[3]=IKsign(x10479);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10481=(gconst5*r10);
IkReal x10482=(gconst4*r11);
CheckValue<IkReal> x10483 = IKatan2WithCheck(IkReal(((((-1.0)*x10481))+x10482)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10483.valid){
continue;
}
CheckValue<IkReal> x10484=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10481*x10481)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10482*x10482)))+(((2.0)*x10481*x10482)))),-1);
if(!x10484.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10483.value)+(((1.5707963267949)*(x10484.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10485=IKsin(j4);
IkReal x10486=IKcos(j4);
IkReal x10487=(gconst4*r21);
IkReal x10488=(gconst5*r10);
IkReal x10489=(gconst4*r11);
IkReal x10490=(gconst4*r01);
IkReal x10491=((1.0)*x10486);
IkReal x10492=((1.0)*x10485);
IkReal x10493=(gconst5*x10485);
evalcond[0]=((((-1.0)*r22*x10491))+((r20*x10493))+(((-1.0)*x10487*x10492)));
evalcond[1]=((((-1.0)*x10490*x10492))+(((-1.0)*r02*x10491))+((r00*x10493)));
evalcond[2]=((((-1.0)*x10488*x10491))+(((-1.0)*r12*x10492))+((x10486*x10489)));
evalcond[3]=((-1.0)+(((-1.0)*x10489*x10492))+(((-1.0)*r12*x10491))+((x10485*x10488)));
evalcond[4]=((((-1.0)*gconst5*r20*x10491))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x10492))+((x10486*x10487)));
evalcond[5]=((((-1.0)*sj1*sj2))+((x10486*x10490))+(((-1.0)*r02*x10492))+((cj1*cj2))+(((-1.0)*gconst5*r00*x10491)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10494=((1.0)*gconst4);
CheckValue<IkReal> x10495=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x10494))+(((-1.0)*gconst5*r01)))),-1);
if(!x10495.valid){
continue;
}
CheckValue<IkReal> x10496 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x10494))+((gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10496.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10495.value)))+(x10496.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10497=IKsin(j4);
IkReal x10498=IKcos(j4);
IkReal x10499=(gconst4*r21);
IkReal x10500=(gconst5*r10);
IkReal x10501=(gconst4*r11);
IkReal x10502=(gconst4*r01);
IkReal x10503=((1.0)*x10498);
IkReal x10504=((1.0)*x10497);
IkReal x10505=(gconst5*x10497);
evalcond[0]=(((r20*x10505))+(((-1.0)*r22*x10503))+(((-1.0)*x10499*x10504)));
evalcond[1]=((((-1.0)*x10502*x10504))+((r00*x10505))+(((-1.0)*r02*x10503)));
evalcond[2]=(((x10498*x10501))+(((-1.0)*r12*x10504))+(((-1.0)*x10500*x10503)));
evalcond[3]=((-1.0)+(((-1.0)*x10501*x10504))+((x10497*x10500))+(((-1.0)*r12*x10503)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x10504))+((cj1*sj2))+((x10498*x10499))+(((-1.0)*gconst5*r20*x10503)));
evalcond[5]=(((x10498*x10502))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r02*x10504))+(((-1.0)*gconst5*r00*x10503)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10506 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst4*r01))+((gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10506.valid){
continue;
}
CheckValue<IkReal> x10507=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10507.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10506.value)+(((1.5707963267949)*(x10507.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10508=IKsin(j4);
IkReal x10509=IKcos(j4);
IkReal x10510=(gconst4*r21);
IkReal x10511=(gconst5*r10);
IkReal x10512=(gconst4*r11);
IkReal x10513=(gconst4*r01);
IkReal x10514=((1.0)*x10509);
IkReal x10515=((1.0)*x10508);
IkReal x10516=(gconst5*x10508);
evalcond[0]=((((-1.0)*x10510*x10515))+(((-1.0)*r22*x10514))+((r20*x10516)));
evalcond[1]=((((-1.0)*r02*x10514))+(((-1.0)*x10513*x10515))+((r00*x10516)));
evalcond[2]=(((x10509*x10512))+(((-1.0)*x10511*x10514))+(((-1.0)*r12*x10515)));
evalcond[3]=((-1.0)+(((-1.0)*x10512*x10515))+(((-1.0)*r12*x10514))+((x10508*x10511)));
evalcond[4]=(((cj2*sj1))+((x10509*x10510))+(((-1.0)*r22*x10515))+((cj1*sj2))+(((-1.0)*gconst5*r20*x10514)));
evalcond[5]=(((x10509*x10513))+(((-1.0)*r02*x10515))+(((-1.0)*sj1*sj2))+(((-1.0)*gconst5*r00*x10514))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x10519 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10519.valid){
continue;
}
IkReal x10517=((1.0)*(x10519.value));
IkReal x10518=x9721;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10517)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10517)));
IkReal gconst4=((1.0)*r21*x10518);
IkReal gconst5=((-1.0)*r20*x10518);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10522 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10522.valid){
continue;
}
IkReal x10520=((1.0)*(x10522.value));
IkReal x10521=x9721;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10520)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10520)));
IkReal gconst4=((1.0)*r21*x10521);
IkReal gconst5=((-1.0)*r20*x10521);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x10525 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10525.valid){
continue;
}
IkReal x10523=((1.0)*(x10525.value));
IkReal x10524=x9721;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10523)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10523)));
IkReal gconst4=((1.0)*r21*x10524);
IkReal gconst5=((-1.0)*r20*x10524);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10526=(gconst5*r10);
IkReal x10527=(gconst4*r11);
CheckValue<IkReal> x10528 = IKatan2WithCheck(IkReal(((((-1.0)*x10527))+x10526)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10528.valid){
continue;
}
CheckValue<IkReal> x10529=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x10526*x10527))+(x10527*x10527)+(x10526*x10526))),-1);
if(!x10529.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10528.value)+(((1.5707963267949)*(x10529.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10530=IKcos(j4);
IkReal x10531=IKsin(j4);
IkReal x10532=((1.0)*x10530);
IkReal x10533=(gconst5*x10531);
IkReal x10534=(gconst5*x10530);
IkReal x10535=((1.0)*gconst4*x10531);
evalcond[0]=(((r10*x10534))+((r12*x10531))+(((-1.0)*gconst4*r11*x10532)));
evalcond[1]=((((-1.0)*r22*x10532))+(((-1.0)*r21*x10535))+((r20*x10533)));
evalcond[2]=((((-1.0)*r02*x10532))+(((-1.0)*r01*x10535))+((r00*x10533)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x10535))+((r10*x10533))+(((-1.0)*r12*x10532)));
evalcond[4]=(((cj2*sj1))+((r22*x10531))+((cj1*sj2))+((r20*x10534))+(((-1.0)*gconst4*r21*x10532)));
evalcond[5]=((((-1.0)*gconst4*r01*x10532))+((r02*x10531))+(((-1.0)*sj1*sj2))+((r00*x10534))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10536=((1.0)*gconst4);
CheckValue<IkReal> x10537 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x10536))+((gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10537.valid){
continue;
}
CheckValue<IkReal> x10538=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x10536))+(((-1.0)*gconst5*r01)))),-1);
if(!x10538.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10537.value)+(((1.5707963267949)*(x10538.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10539=IKcos(j4);
IkReal x10540=IKsin(j4);
IkReal x10541=((1.0)*x10539);
IkReal x10542=(gconst5*x10540);
IkReal x10543=(gconst5*x10539);
IkReal x10544=((1.0)*gconst4*x10540);
evalcond[0]=((((-1.0)*gconst4*r11*x10541))+((r12*x10540))+((r10*x10543)));
evalcond[1]=((((-1.0)*r22*x10541))+((r20*x10542))+(((-1.0)*r21*x10544)));
evalcond[2]=((((-1.0)*r01*x10544))+(((-1.0)*r02*x10541))+((r00*x10542)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10541))+(((-1.0)*r11*x10544))+((r10*x10542)));
evalcond[4]=(((cj2*sj1))+((r22*x10540))+((cj1*sj2))+(((-1.0)*gconst4*r21*x10541))+((r20*x10543)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r02*x10540))+((r00*x10543))+(((-1.0)*gconst4*r01*x10541))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10545 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst4*r01))+((gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10545.valid){
continue;
}
CheckValue<IkReal> x10546=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10546.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10545.value)+(((1.5707963267949)*(x10546.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10547=IKcos(j4);
IkReal x10548=IKsin(j4);
IkReal x10549=((1.0)*x10547);
IkReal x10550=(gconst5*x10548);
IkReal x10551=(gconst5*x10547);
IkReal x10552=((1.0)*gconst4*x10548);
evalcond[0]=((((-1.0)*gconst4*r11*x10549))+((r12*x10548))+((r10*x10551)));
evalcond[1]=((((-1.0)*r21*x10552))+(((-1.0)*r22*x10549))+((r20*x10550)));
evalcond[2]=((((-1.0)*r02*x10549))+(((-1.0)*r01*x10552))+((r00*x10550)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x10552))+((r10*x10550))+(((-1.0)*r12*x10549)));
evalcond[4]=(((cj2*sj1))+((r22*x10548))+((cj1*sj2))+(((-1.0)*gconst4*r21*x10549))+((r20*x10551)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r02*x10548))+(((-1.0)*gconst4*r01*x10549))+((cj1*cj2))+((r00*x10551)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((-1.0)+r12);
op[1]=((((-2.0)*gconst4*r11))+(((2.0)*gconst5*r10)));
op[2]=((-1.0)+(((-1.0)*r12)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10553=gconst5*gconst5;
IkReal x10554=gconst4*gconst4;
IkReal x10555=(cj3*r10);
IkReal x10556=(r11*sj3);
IkReal x10557=(r10*sj3);
IkReal x10558=(cj3*r11);
IkReal x10559=(r21*x10554);
IkReal x10560=(gconst4*gconst5*r20);
IkReal x10561=(r20*x10553);
IkReal x10562=((1.0)*gconst4*gconst5*r21);
CheckValue<IkReal> x10563=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+(((-1.0)*x10555*x10562))+((x10555*x10561))+((x10558*x10559))+(((-1.0)*x10558*x10560)))),-1);
if(!x10563.valid){
continue;
}
CheckValue<IkReal> x10564 = IKatan2WithCheck(IkReal((((gconst4*r22*x10557))+((gconst5*r22*x10556)))),IkReal(((((-1.0)*x10556*x10562))+(((-1.0)*x10557*x10559))+((x10556*x10561))+((x10557*x10560)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10564.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10563.value)))+(x10564.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10565=IKsin(j4);
IkReal x10566=IKcos(j4);
IkReal x10567=(cj1*cj2);
IkReal x10568=(cj3*gconst5);
IkReal x10569=(gconst5*sj3);
IkReal x10570=(gconst4*r21);
IkReal x10571=((1.0)*sj2);
IkReal x10572=(gconst4*r11);
IkReal x10573=(gconst4*r01);
IkReal x10574=(cj2*sj1);
IkReal x10575=(gconst4*sj3);
IkReal x10576=(sj1*x10571);
IkReal x10577=((1.0)*x10566);
IkReal x10578=((1.0)*x10565);
IkReal x10579=(sj3*x10566);
IkReal x10580=((1.0)*cj3*gconst4);
IkReal x10581=(cj3*x10566);
IkReal x10582=(gconst5*x10565);
evalcond[0]=((((-1.0)*r22*x10577))+(((-1.0)*x10570*x10578))+((r20*x10582)));
evalcond[1]=((((-1.0)*x10573*x10578))+(((-1.0)*r02*x10577))+((r00*x10582)));
evalcond[2]=((-1.0)+((r10*x10582))+(((-1.0)*r12*x10577))+(((-1.0)*x10572*x10578)));
evalcond[3]=((((-1.0)*cj3*r12*x10578))+((r10*x10575))+((x10572*x10581))+((r11*x10569))+(((-1.0)*r10*x10568*x10577)));
evalcond[4]=((((-1.0)*r11*x10568))+((x10572*x10579))+(((-1.0)*r12*sj3*x10578))+(((-1.0)*r10*x10580))+(((-1.0)*r10*x10569*x10577)));
evalcond[5]=(((r20*x10575))+(((-1.0)*cj3*r22*x10578))+((cj1*sj2))+(((-1.0)*r20*x10568*x10577))+((r21*x10569))+((x10570*x10581))+x10574);
evalcond[6]=(((r01*x10569))+((r00*x10575))+((x10573*x10581))+(((-1.0)*x10576))+(((-1.0)*cj3*r02*x10578))+x10567+(((-1.0)*r00*x10568*x10577)));
evalcond[7]=((((-1.0)*r20*x10569*x10577))+(((-1.0)*r20*x10580))+(((-1.0)*r22*sj3*x10578))+(((-1.0)*r21*x10568))+(((-1.0)*x10576))+((x10570*x10579))+x10567);
evalcond[8]=((((-1.0)*r00*x10580))+(((-1.0)*r01*x10568))+((x10573*x10579))+(((-1.0)*r02*sj3*x10578))+(((-1.0)*x10574))+(((-1.0)*r00*x10569*x10577))+(((-1.0)*cj1*x10571)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10583=((1.0)*gconst4);
CheckValue<IkReal> x10584 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x10583))+((gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10584.valid){
continue;
}
CheckValue<IkReal> x10585=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x10583))+(((-1.0)*gconst5*r01)))),-1);
if(!x10585.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10584.value)+(((1.5707963267949)*(x10585.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10586=IKsin(j4);
IkReal x10587=IKcos(j4);
IkReal x10588=(cj1*cj2);
IkReal x10589=(cj3*gconst5);
IkReal x10590=(gconst5*sj3);
IkReal x10591=(gconst4*r21);
IkReal x10592=((1.0)*sj2);
IkReal x10593=(gconst4*r11);
IkReal x10594=(gconst4*r01);
IkReal x10595=(cj2*sj1);
IkReal x10596=(gconst4*sj3);
IkReal x10597=(sj1*x10592);
IkReal x10598=((1.0)*x10587);
IkReal x10599=((1.0)*x10586);
IkReal x10600=(sj3*x10587);
IkReal x10601=((1.0)*cj3*gconst4);
IkReal x10602=(cj3*x10587);
IkReal x10603=(gconst5*x10586);
evalcond[0]=((((-1.0)*r22*x10598))+(((-1.0)*x10591*x10599))+((r20*x10603)));
evalcond[1]=(((r00*x10603))+(((-1.0)*r02*x10598))+(((-1.0)*x10594*x10599)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x10598))+((r10*x10603))+(((-1.0)*x10593*x10599)));
evalcond[3]=((((-1.0)*r10*x10589*x10598))+(((-1.0)*cj3*r12*x10599))+((r11*x10590))+((x10593*x10602))+((r10*x10596)));
evalcond[4]=(((x10593*x10600))+(((-1.0)*r12*sj3*x10599))+(((-1.0)*r11*x10589))+(((-1.0)*r10*x10590*x10598))+(((-1.0)*r10*x10601)));
evalcond[5]=(((r21*x10590))+((x10591*x10602))+(((-1.0)*cj3*r22*x10599))+((cj1*sj2))+((r20*x10596))+(((-1.0)*r20*x10589*x10598))+x10595);
evalcond[6]=((((-1.0)*x10597))+((x10594*x10602))+((r00*x10596))+((r01*x10590))+x10588+(((-1.0)*cj3*r02*x10599))+(((-1.0)*r00*x10589*x10598)));
evalcond[7]=((((-1.0)*x10597))+((x10591*x10600))+(((-1.0)*r20*x10590*x10598))+(((-1.0)*r22*sj3*x10599))+(((-1.0)*r21*x10589))+(((-1.0)*r20*x10601))+x10588);
evalcond[8]=((((-1.0)*r00*x10590*x10598))+(((-1.0)*r02*sj3*x10599))+((x10594*x10600))+(((-1.0)*x10595))+(((-1.0)*cj1*x10592))+(((-1.0)*r00*x10601))+(((-1.0)*r01*x10589)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10604 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst4*r01))+((gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10604.valid){
continue;
}
CheckValue<IkReal> x10605=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10605.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10604.value)+(((1.5707963267949)*(x10605.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10606=IKsin(j4);
IkReal x10607=IKcos(j4);
IkReal x10608=(cj1*cj2);
IkReal x10609=(cj3*gconst5);
IkReal x10610=(gconst5*sj3);
IkReal x10611=(gconst4*r21);
IkReal x10612=((1.0)*sj2);
IkReal x10613=(gconst4*r11);
IkReal x10614=(gconst4*r01);
IkReal x10615=(cj2*sj1);
IkReal x10616=(gconst4*sj3);
IkReal x10617=(sj1*x10612);
IkReal x10618=((1.0)*x10607);
IkReal x10619=((1.0)*x10606);
IkReal x10620=(sj3*x10607);
IkReal x10621=((1.0)*cj3*gconst4);
IkReal x10622=(cj3*x10607);
IkReal x10623=(gconst5*x10606);
evalcond[0]=(((r20*x10623))+(((-1.0)*x10611*x10619))+(((-1.0)*r22*x10618)));
evalcond[1]=(((r00*x10623))+(((-1.0)*x10614*x10619))+(((-1.0)*r02*x10618)));
evalcond[2]=((-1.0)+((r10*x10623))+(((-1.0)*r12*x10618))+(((-1.0)*x10613*x10619)));
evalcond[3]=(((x10613*x10622))+((r10*x10616))+(((-1.0)*cj3*r12*x10619))+(((-1.0)*r10*x10609*x10618))+((r11*x10610)));
evalcond[4]=(((x10613*x10620))+(((-1.0)*r12*sj3*x10619))+(((-1.0)*r10*x10621))+(((-1.0)*r11*x10609))+(((-1.0)*r10*x10610*x10618)));
evalcond[5]=((((-1.0)*r20*x10609*x10618))+((cj1*sj2))+((x10611*x10622))+((r20*x10616))+x10615+(((-1.0)*cj3*r22*x10619))+((r21*x10610)));
evalcond[6]=((((-1.0)*r00*x10609*x10618))+(((-1.0)*x10617))+((r01*x10610))+((r00*x10616))+(((-1.0)*cj3*r02*x10619))+((x10614*x10622))+x10608);
evalcond[7]=((((-1.0)*r21*x10609))+((x10611*x10620))+(((-1.0)*x10617))+(((-1.0)*r20*x10610*x10618))+(((-1.0)*r20*x10621))+x10608+(((-1.0)*r22*sj3*x10619)));
evalcond[8]=((((-1.0)*r00*x10621))+(((-1.0)*r02*sj3*x10619))+(((-1.0)*r00*x10610*x10618))+(((-1.0)*r01*x10609))+(((-1.0)*cj1*x10612))+(((-1.0)*x10615))+((x10614*x10620)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10626 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10626.valid){
continue;
}
IkReal x10624=((1.0)*(x10626.value));
IkReal x10625=x9721;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10624)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10624)));
IkReal gconst4=((1.0)*r21*x10625);
IkReal gconst5=((-1.0)*r20*x10625);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10629 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10629.valid){
continue;
}
IkReal x10627=((1.0)*(x10629.value));
IkReal x10628=x9721;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10627)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10627)));
IkReal gconst4=((1.0)*r21*x10628);
IkReal gconst5=((-1.0)*r20*x10628);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x10632 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10632.valid){
continue;
}
IkReal x10630=((1.0)*(x10632.value));
IkReal x10631=x9721;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10630)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10630)));
IkReal gconst4=((1.0)*r21*x10631);
IkReal gconst5=((-1.0)*r20*x10631);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10635 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10635.valid){
continue;
}
IkReal x10633=((1.0)*(x10635.value));
IkReal x10634=x9721;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10633)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10633)));
IkReal gconst4=((1.0)*r21*x10634);
IkReal gconst5=((-1.0)*r20*x10634);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10638 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10638.valid){
continue;
}
IkReal x10636=((1.0)*(x10638.value));
IkReal x10637=x9721;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10636)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10636)));
IkReal gconst4=((1.0)*r21*x10637);
IkReal gconst5=((-1.0)*r20*x10637);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x10641 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10641.valid){
continue;
}
IkReal x10639=((1.0)*(x10641.value));
IkReal x10640=x9721;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10639)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10639)));
IkReal gconst4=((1.0)*r21*x10640);
IkReal gconst5=((-1.0)*r20*x10640);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10642=(gconst5*r10);
IkReal x10643=(gconst4*r11);
CheckValue<IkReal> x10644 = IKatan2WithCheck(IkReal(((((-1.0)*x10642))+x10643)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10644.valid){
continue;
}
CheckValue<IkReal> x10645=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10643*x10643)+(x10642*x10642)+(((-2.0)*x10642*x10643)))),-1);
if(!x10645.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10644.value)+(((1.5707963267949)*(x10645.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10646=IKsin(j4);
IkReal x10647=IKcos(j4);
IkReal x10648=(gconst4*r21);
IkReal x10649=(gconst5*r10);
IkReal x10650=(gconst4*r11);
IkReal x10651=(gconst4*r01);
IkReal x10652=((1.0)*x10647);
IkReal x10653=((1.0)*x10646);
IkReal x10654=(gconst5*x10646);
evalcond[0]=((((-1.0)*r22*x10652))+((r20*x10654))+(((-1.0)*x10648*x10653)));
evalcond[1]=(((r00*x10654))+(((-1.0)*r02*x10652))+(((-1.0)*x10651*x10653)));
evalcond[2]=((((-1.0)*r12*x10653))+((x10647*x10650))+(((-1.0)*x10649*x10652)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10652))+((x10646*x10649))+(((-1.0)*x10650*x10653)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x10647*x10651))+(((-1.0)*gconst5*r00*x10652))+(((-1.0)*r02*x10653)));
evalcond[5]=(((x10647*x10648))+(((-1.0)*r22*x10653))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*gconst5*r20*x10652)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10655=((1.0)*gconst4);
CheckValue<IkReal> x10656=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst5*r21))+(((-1.0)*r20*x10655)))),-1);
if(!x10656.valid){
continue;
}
CheckValue<IkReal> x10657 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x10655))+((gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10657.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10656.value)))+(x10657.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10658=IKsin(j4);
IkReal x10659=IKcos(j4);
IkReal x10660=(gconst4*r21);
IkReal x10661=(gconst5*r10);
IkReal x10662=(gconst4*r11);
IkReal x10663=(gconst4*r01);
IkReal x10664=((1.0)*x10659);
IkReal x10665=((1.0)*x10658);
IkReal x10666=(gconst5*x10658);
evalcond[0]=((((-1.0)*x10660*x10665))+((r20*x10666))+(((-1.0)*r22*x10664)));
evalcond[1]=((((-1.0)*r02*x10664))+((r00*x10666))+(((-1.0)*x10663*x10665)));
evalcond[2]=((((-1.0)*x10661*x10664))+((x10659*x10662))+(((-1.0)*r12*x10665)));
evalcond[3]=((1.0)+((x10658*x10661))+(((-1.0)*r12*x10664))+(((-1.0)*x10662*x10665)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst5*r00*x10664))+((cj1*sj2))+(((-1.0)*r02*x10665))+((x10659*x10663)));
evalcond[5]=((((-1.0)*gconst5*r20*x10664))+(((-1.0)*sj1*sj2))+(((-1.0)*r22*x10665))+((x10659*x10660))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10667 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10667.valid){
continue;
}
CheckValue<IkReal> x10668=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10668.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10667.value)+(((1.5707963267949)*(x10668.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10669=IKsin(j4);
IkReal x10670=IKcos(j4);
IkReal x10671=(gconst4*r21);
IkReal x10672=(gconst5*r10);
IkReal x10673=(gconst4*r11);
IkReal x10674=(gconst4*r01);
IkReal x10675=((1.0)*x10670);
IkReal x10676=((1.0)*x10669);
IkReal x10677=(gconst5*x10669);
evalcond[0]=((((-1.0)*x10671*x10676))+((r20*x10677))+(((-1.0)*r22*x10675)));
evalcond[1]=((((-1.0)*r02*x10675))+((r00*x10677))+(((-1.0)*x10674*x10676)));
evalcond[2]=(((x10670*x10673))+(((-1.0)*x10672*x10675))+(((-1.0)*r12*x10676)));
evalcond[3]=((1.0)+((x10669*x10672))+(((-1.0)*x10673*x10676))+(((-1.0)*r12*x10675)));
evalcond[4]=(((cj2*sj1))+((x10670*x10674))+(((-1.0)*r02*x10676))+((cj1*sj2))+(((-1.0)*gconst5*r00*x10675)));
evalcond[5]=(((x10670*x10671))+(((-1.0)*gconst5*r20*x10675))+(((-1.0)*sj1*sj2))+(((-1.0)*r22*x10676))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10680 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10680.valid){
continue;
}
IkReal x10678=((1.0)*(x10680.value));
IkReal x10679=x9721;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10678)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10678)));
IkReal gconst4=((1.0)*r21*x10679);
IkReal gconst5=((-1.0)*r20*x10679);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10683 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10683.valid){
continue;
}
IkReal x10681=((1.0)*(x10683.value));
IkReal x10682=x9721;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10681)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10681)));
IkReal gconst4=((1.0)*r21*x10682);
IkReal gconst5=((-1.0)*r20*x10682);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10686 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10686.valid){
continue;
}
IkReal x10684=((1.0)*(x10686.value));
IkReal x10685=x9721;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10684)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10684)));
IkReal gconst4=((1.0)*r21*x10685);
IkReal gconst5=((-1.0)*r20*x10685);
IkReal x10687=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10691=IKPowWithIntegerCheck(x10687,-1);
if(!x10691.valid){
continue;
}
IkReal x10688=x10691.value;
IkReal x10689=((1.0)*x10688);
IkReal x10690=((((-2.0)*r10*r11*r20*r21*x10688))+(((-1.0)*(r12*r12)))+(((-1.0)*x10689*(r10*r10)*(r20*r20)))+(((-1.0)*x10689*(r11*r11)*(r21*r21))));
j4eval[0]=x10690;
j4eval[1]=r12;
j4eval[2]=x10687;
j4eval[3]=IKsign(x10690);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10692=(gconst5*r10);
IkReal x10693=(gconst4*r11);
CheckValue<IkReal> x10694 = IKatan2WithCheck(IkReal(((((-1.0)*x10693))+x10692)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10694.valid){
continue;
}
CheckValue<IkReal> x10695=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10693*x10693)))+(((2.0)*x10692*x10693))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10692*x10692))))),-1);
if(!x10695.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10694.value)+(((1.5707963267949)*(x10695.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10696=IKcos(j4);
IkReal x10697=IKsin(j4);
IkReal x10698=((1.0)*x10696);
IkReal x10699=(gconst5*x10697);
IkReal x10700=(gconst5*x10696);
IkReal x10701=((1.0)*gconst4*x10697);
evalcond[0]=(((r10*x10700))+((r12*x10697))+(((-1.0)*gconst4*r11*x10698)));
evalcond[1]=((((-1.0)*r22*x10698))+(((-1.0)*r21*x10701))+((r20*x10699)));
evalcond[2]=((((-1.0)*r02*x10698))+((r00*x10699))+(((-1.0)*r01*x10701)));
evalcond[3]=((1.0)+((r10*x10699))+(((-1.0)*r12*x10698))+(((-1.0)*r11*x10701)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r00*x10700))+((r02*x10697))+(((-1.0)*gconst4*r01*x10698)));
evalcond[5]=((((-1.0)*gconst4*r21*x10698))+(((-1.0)*sj1*sj2))+((r22*x10697))+((cj1*cj2))+((r20*x10700)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10702=((1.0)*gconst4);
CheckValue<IkReal> x10703=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst5*r21))+(((-1.0)*r20*x10702)))),-1);
if(!x10703.valid){
continue;
}
CheckValue<IkReal> x10704 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst5*r00))+(((-1.0)*r01*x10702)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10704.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10703.value)))+(x10704.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10705=IKcos(j4);
IkReal x10706=IKsin(j4);
IkReal x10707=((1.0)*x10705);
IkReal x10708=(gconst5*x10706);
IkReal x10709=(gconst5*x10705);
IkReal x10710=((1.0)*gconst4*x10706);
evalcond[0]=(((r12*x10706))+((r10*x10709))+(((-1.0)*gconst4*r11*x10707)));
evalcond[1]=((((-1.0)*r21*x10710))+(((-1.0)*r22*x10707))+((r20*x10708)));
evalcond[2]=(((r00*x10708))+(((-1.0)*r01*x10710))+(((-1.0)*r02*x10707)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10707))+(((-1.0)*r11*x10710))+((r10*x10708)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r00*x10709))+(((-1.0)*gconst4*r01*x10707))+((r02*x10706)));
evalcond[5]=((((-1.0)*gconst4*r21*x10707))+(((-1.0)*sj1*sj2))+((r22*x10706))+((cj1*cj2))+((r20*x10709)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10711 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10711.valid){
continue;
}
CheckValue<IkReal> x10712=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10712.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10711.value)+(((1.5707963267949)*(x10712.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10713=IKcos(j4);
IkReal x10714=IKsin(j4);
IkReal x10715=((1.0)*x10713);
IkReal x10716=(gconst5*x10714);
IkReal x10717=(gconst5*x10713);
IkReal x10718=((1.0)*gconst4*x10714);
evalcond[0]=(((r12*x10714))+(((-1.0)*gconst4*r11*x10715))+((r10*x10717)));
evalcond[1]=((((-1.0)*r21*x10718))+((r20*x10716))+(((-1.0)*r22*x10715)));
evalcond[2]=((((-1.0)*r01*x10718))+((r00*x10716))+(((-1.0)*r02*x10715)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10715))+(((-1.0)*r11*x10718))+((r10*x10716)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r00*x10717))+(((-1.0)*gconst4*r01*x10715))+((r02*x10714)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r20*x10717))+((r22*x10714))+((cj1*cj2))+(((-1.0)*gconst4*r21*x10715)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10721 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10721.valid){
continue;
}
IkReal x10719=((1.0)*(x10721.value));
IkReal x10720=x9721;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10719)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10719)));
IkReal gconst4=((1.0)*r21*x10720);
IkReal gconst5=((-1.0)*r20*x10720);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10724 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10724.valid){
continue;
}
IkReal x10722=((1.0)*(x10724.value));
IkReal x10723=x9721;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10722)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10722)));
IkReal gconst4=((1.0)*r21*x10723);
IkReal gconst5=((-1.0)*r20*x10723);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x10727 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10727.valid){
continue;
}
IkReal x10725=((1.0)*(x10727.value));
IkReal x10726=x9721;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10725)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10725)));
IkReal gconst4=((1.0)*r21*x10726);
IkReal gconst5=((-1.0)*r20*x10726);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10728=(gconst5*r10);
IkReal x10729=(gconst4*r11);
CheckValue<IkReal> x10730=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x10728*x10729))+(x10728*x10728)+(x10729*x10729))),-1);
if(!x10730.valid){
continue;
}
CheckValue<IkReal> x10731 = IKatan2WithCheck(IkReal(((((-1.0)*x10728))+x10729)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10731.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10730.value)))+(x10731.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10732=IKsin(j4);
IkReal x10733=IKcos(j4);
IkReal x10734=(gconst4*r21);
IkReal x10735=(gconst5*r10);
IkReal x10736=(gconst4*r11);
IkReal x10737=(gconst4*r01);
IkReal x10738=((1.0)*x10733);
IkReal x10739=((1.0)*x10732);
IkReal x10740=(gconst5*x10732);
evalcond[0]=((((-1.0)*r22*x10738))+(((-1.0)*x10734*x10739))+((r20*x10740)));
evalcond[1]=((((-1.0)*r02*x10738))+(((-1.0)*x10737*x10739))+((r00*x10740)));
evalcond[2]=((((-1.0)*x10735*x10738))+((x10733*x10736))+(((-1.0)*r12*x10739)));
evalcond[3]=((1.0)+((x10732*x10735))+(((-1.0)*r12*x10738))+(((-1.0)*x10736*x10739)));
evalcond[4]=((((-1.0)*r22*x10739))+((cj2*sj1))+((cj1*sj2))+((x10733*x10734))+(((-1.0)*gconst5*r20*x10738)));
evalcond[5]=((((-1.0)*r02*x10739))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10733*x10737))+(((-1.0)*gconst5*r00*x10738)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10741=((1.0)*gconst4);
CheckValue<IkReal> x10742 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x10741))+((gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10742.valid){
continue;
}
CheckValue<IkReal> x10743=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x10741))+(((-1.0)*gconst5*r21)))),-1);
if(!x10743.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10742.value)+(((1.5707963267949)*(x10743.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10744=IKsin(j4);
IkReal x10745=IKcos(j4);
IkReal x10746=(gconst4*r21);
IkReal x10747=(gconst5*r10);
IkReal x10748=(gconst4*r11);
IkReal x10749=(gconst4*r01);
IkReal x10750=((1.0)*x10745);
IkReal x10751=((1.0)*x10744);
IkReal x10752=(gconst5*x10744);
evalcond[0]=((((-1.0)*x10746*x10751))+((r20*x10752))+(((-1.0)*r22*x10750)));
evalcond[1]=((((-1.0)*r02*x10750))+(((-1.0)*x10749*x10751))+((r00*x10752)));
evalcond[2]=(((x10745*x10748))+(((-1.0)*x10747*x10750))+(((-1.0)*r12*x10751)));
evalcond[3]=((1.0)+(((-1.0)*x10748*x10751))+(((-1.0)*r12*x10750))+((x10744*x10747)));
evalcond[4]=(((cj2*sj1))+((x10745*x10746))+((cj1*sj2))+(((-1.0)*gconst5*r20*x10750))+(((-1.0)*r22*x10751)));
evalcond[5]=(((x10745*x10749))+(((-1.0)*gconst5*r00*x10750))+(((-1.0)*r02*x10751))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10753 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10753.valid){
continue;
}
CheckValue<IkReal> x10754=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10754.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10753.value)+(((1.5707963267949)*(x10754.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10755=IKsin(j4);
IkReal x10756=IKcos(j4);
IkReal x10757=(gconst4*r21);
IkReal x10758=(gconst5*r10);
IkReal x10759=(gconst4*r11);
IkReal x10760=(gconst4*r01);
IkReal x10761=((1.0)*x10756);
IkReal x10762=((1.0)*x10755);
IkReal x10763=(gconst5*x10755);
evalcond[0]=((((-1.0)*x10757*x10762))+((r20*x10763))+(((-1.0)*r22*x10761)));
evalcond[1]=(((r00*x10763))+(((-1.0)*x10760*x10762))+(((-1.0)*r02*x10761)));
evalcond[2]=(((x10756*x10759))+(((-1.0)*r12*x10762))+(((-1.0)*x10758*x10761)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10761))+(((-1.0)*x10759*x10762))+((x10755*x10758)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst5*r20*x10761))+((x10756*x10757))+(((-1.0)*r22*x10762)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst5*r00*x10761))+((x10756*x10760))+(((-1.0)*r02*x10762)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10766 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10766.valid){
continue;
}
IkReal x10764=((1.0)*(x10766.value));
IkReal x10765=x9721;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10764)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10764)));
IkReal gconst4=((1.0)*r21*x10765);
IkReal gconst5=((-1.0)*r20*x10765);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10769 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10769.valid){
continue;
}
IkReal x10767=((1.0)*(x10769.value));
IkReal x10768=x9721;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10767)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10767)));
IkReal gconst4=((1.0)*r21*x10768);
IkReal gconst5=((-1.0)*r20*x10768);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10772 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10772.valid){
continue;
}
IkReal x10770=((1.0)*(x10772.value));
IkReal x10771=x9721;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10770)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10770)));
IkReal gconst4=((1.0)*r21*x10771);
IkReal gconst5=((-1.0)*r20*x10771);
IkReal x10773=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10777=IKPowWithIntegerCheck(x10773,-1);
if(!x10777.valid){
continue;
}
IkReal x10774=x10777.value;
IkReal x10775=((1.0)*x10774);
IkReal x10776=((((-1.0)*x10775*(r10*r10)*(r20*r20)))+(((-1.0)*x10775*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x10774)));
j4eval[0]=x10776;
j4eval[1]=r12;
j4eval[2]=x10773;
j4eval[3]=IKsign(x10776);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10778=(gconst5*r10);
IkReal x10779=(gconst4*r11);
CheckValue<IkReal> x10780 = IKatan2WithCheck(IkReal(((((-1.0)*x10779))+x10778)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10780.valid){
continue;
}
CheckValue<IkReal> x10781=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10778*x10778)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10779*x10779)))+(((2.0)*x10778*x10779)))),-1);
if(!x10781.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10780.value)+(((1.5707963267949)*(x10781.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10782=IKcos(j4);
IkReal x10783=IKsin(j4);
IkReal x10784=((1.0)*x10782);
IkReal x10785=(gconst5*x10783);
IkReal x10786=(gconst5*x10782);
IkReal x10787=((1.0)*gconst4*x10783);
evalcond[0]=((((-1.0)*gconst4*r11*x10784))+((r12*x10783))+((r10*x10786)));
evalcond[1]=((((-1.0)*r21*x10787))+((r20*x10785))+(((-1.0)*r22*x10784)));
evalcond[2]=((((-1.0)*r01*x10787))+((r00*x10785))+(((-1.0)*r02*x10784)));
evalcond[3]=((1.0)+(((-1.0)*r11*x10787))+(((-1.0)*r12*x10784))+((r10*x10785)));
evalcond[4]=(((cj2*sj1))+((r22*x10783))+((cj1*sj2))+((r20*x10786))+(((-1.0)*gconst4*r21*x10784)));
evalcond[5]=(((r02*x10783))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst4*r01*x10784))+((r00*x10786)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10788=((1.0)*gconst4);
CheckValue<IkReal> x10789=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x10788))+(((-1.0)*gconst5*r21)))),-1);
if(!x10789.valid){
continue;
}
CheckValue<IkReal> x10790 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x10788))+((gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10790.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10789.value)))+(x10790.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10791=IKcos(j4);
IkReal x10792=IKsin(j4);
IkReal x10793=((1.0)*x10791);
IkReal x10794=(gconst5*x10792);
IkReal x10795=(gconst5*x10791);
IkReal x10796=((1.0)*gconst4*x10792);
evalcond[0]=(((r10*x10795))+((r12*x10792))+(((-1.0)*gconst4*r11*x10793)));
evalcond[1]=((((-1.0)*r21*x10796))+((r20*x10794))+(((-1.0)*r22*x10793)));
evalcond[2]=((((-1.0)*r02*x10793))+(((-1.0)*r01*x10796))+((r00*x10794)));
evalcond[3]=((1.0)+((r10*x10794))+(((-1.0)*r12*x10793))+(((-1.0)*r11*x10796)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r20*x10795))+(((-1.0)*gconst4*r21*x10793))+((r22*x10792)));
evalcond[5]=(((r02*x10792))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst4*r01*x10793))+((r00*x10795)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10797 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10797.valid){
continue;
}
CheckValue<IkReal> x10798=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10798.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10797.value)+(((1.5707963267949)*(x10798.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10799=IKcos(j4);
IkReal x10800=IKsin(j4);
IkReal x10801=((1.0)*x10799);
IkReal x10802=(gconst5*x10800);
IkReal x10803=(gconst5*x10799);
IkReal x10804=((1.0)*gconst4*x10800);
evalcond[0]=(((r10*x10803))+(((-1.0)*gconst4*r11*x10801))+((r12*x10800)));
evalcond[1]=(((r20*x10802))+(((-1.0)*r21*x10804))+(((-1.0)*r22*x10801)));
evalcond[2]=((((-1.0)*r02*x10801))+((r00*x10802))+(((-1.0)*r01*x10804)));
evalcond[3]=((1.0)+((r10*x10802))+(((-1.0)*r11*x10804))+(((-1.0)*r12*x10801)));
evalcond[4]=(((cj2*sj1))+((r20*x10803))+((cj1*sj2))+((r22*x10800))+(((-1.0)*gconst4*r21*x10801)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r00*x10803))+((r02*x10800))+(((-1.0)*gconst4*r01*x10801)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
CheckValue<IkReal> x10807 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10807.valid){
continue;
}
IkReal x10805=((1.0)*(x10807.value));
IkReal x10806=((-1.0)*px);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10805)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10806);
rxp1_1=(px*r21);
rxp1_2=(r11*x10806);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10805)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=((-1.0)*r20);
IkReal x10808=((1.0)*r11*r21);
IkReal x10809=((1.0)*r10*r20);
j4eval[0]=((((-1.0)*x10809))+(((-1.0)*x10808)));
j4eval[1]=(((sj3*x10809))+((sj3*x10808)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x10812 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10812.valid){
continue;
}
IkReal x10810=((1.0)*(x10812.value));
IkReal x10811=((-1.0)*px);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10810)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10811);
rxp1_1=(px*r21);
rxp1_2=(r11*x10811);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10810)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=((-1.0)*r20);
IkReal x10813=((1.0)*cj3);
IkReal x10814=(r10*r20);
IkReal x10815=(r11*r21);
j4eval[0]=((((-1.0)*x10815))+(((-1.0)*x10814)));
j4eval[1]=(((x10813*x10815))+((x10813*x10814)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x10818 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10818.valid){
continue;
}
IkReal x10816=((1.0)*(x10818.value));
IkReal x10817=((-1.0)*px);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10816)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10817);
rxp1_1=(px*r21);
rxp1_2=(r11*x10817);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10816)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=((-1.0)*r20);
IkReal x10819=((1.0)*cj3);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=(((r11*r21*x10819))+((r10*r20*x10819)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10820=((1.0)*sj3);
CheckValue<IkReal> x10821=IKPowWithIntegerCheck(r02,-1);
if(!x10821.valid){
continue;
}
CheckValue<IkReal> x10822=IKPowWithIntegerCheck(sj3,-1);
if(!x10822.valid){
continue;
}
CheckValue<IkReal> x10823=IKPowWithIntegerCheck(((((-1.0)*cj3*gconst5*r10))+((cj3*gconst4*r11))),-1);
if(!x10823.valid){
continue;
}
if( IKabs(((x10821.value)*(x10822.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10823.value)*(((((-1.0)*gconst4*r10*x10820))+(((-1.0)*gconst5*r11*x10820)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10821.value)*(x10822.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x10823.value)*(((((-1.0)*gconst4*r10*x10820))+(((-1.0)*gconst5*r11*x10820))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10821.value)*(x10822.value)*((((cj2*sj1))+((cj1*sj2))))), ((x10823.value)*(((((-1.0)*gconst4*r10*x10820))+(((-1.0)*gconst5*r11*x10820))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10824=IKsin(j4);
IkReal x10825=IKcos(j4);
IkReal x10826=(cj2*sj1);
IkReal x10827=(cj1*sj2);
IkReal x10828=(gconst5*sj3);
IkReal x10829=(gconst4*r21);
IkReal x10830=(sj1*sj2);
IkReal x10831=(cj3*gconst5);
IkReal x10832=(cj1*cj2);
IkReal x10833=(gconst4*r11);
IkReal x10834=(gconst4*sj3);
IkReal x10835=((1.0)*x10825);
IkReal x10836=((1.0)*x10824);
IkReal x10837=(sj3*x10825);
IkReal x10838=((1.0)*cj3*gconst4);
IkReal x10839=(cj3*x10825);
IkReal x10840=(gconst5*x10824);
IkReal x10841=(x10826+x10827);
evalcond[0]=((-1.0)*r02*x10825);
evalcond[1]=((((-1.0)*x10829*x10836))+((r20*x10840)));
evalcond[2]=((((-1.0)*r02*sj3*x10836))+x10841);
evalcond[3]=((1.0)+(((-1.0)*x10833*x10836))+((r10*x10840)));
evalcond[4]=((((-1.0)*x10832))+(((-1.0)*cj3*r02*x10836))+x10830);
evalcond[5]=((((-1.0)*r10*x10831*x10835))+((x10833*x10839))+((r10*x10834))+((r11*x10828)));
evalcond[6]=((((-1.0)*r10*x10838))+((x10833*x10837))+(((-1.0)*r10*x10828*x10835))+(((-1.0)*r11*x10831)));
evalcond[7]=(((r21*x10828))+(((-1.0)*r20*x10831*x10835))+((r20*x10834))+((x10829*x10839))+x10841);
evalcond[8]=((((-1.0)*x10830))+(((-1.0)*r21*x10831))+(((-1.0)*r20*x10828*x10835))+(((-1.0)*r20*x10838))+((x10829*x10837))+x10832);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10842=(gconst5*r10);
IkReal x10843=((1.0)*sj3);
IkReal x10844=(gconst4*r11);
CheckValue<IkReal> x10845=IKPowWithIntegerCheck(((((-1.0)*x10844))+x10842),-1);
if(!x10845.valid){
continue;
}
CheckValue<IkReal> x10846=IKPowWithIntegerCheck((((cj3*x10844))+(((-1.0)*cj3*x10842))),-1);
if(!x10846.valid){
continue;
}
if( IKabs(((-1.0)*(x10845.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10846.value)*(((((-1.0)*gconst4*r10*x10843))+(((-1.0)*gconst5*r11*x10843)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x10845.value)))+IKsqr(((x10846.value)*(((((-1.0)*gconst4*r10*x10843))+(((-1.0)*gconst5*r11*x10843))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x10845.value)), ((x10846.value)*(((((-1.0)*gconst4*r10*x10843))+(((-1.0)*gconst5*r11*x10843))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10847=IKsin(j4);
IkReal x10848=IKcos(j4);
IkReal x10849=(cj2*sj1);
IkReal x10850=(cj1*sj2);
IkReal x10851=(gconst5*sj3);
IkReal x10852=(gconst4*r21);
IkReal x10853=(sj1*sj2);
IkReal x10854=(cj3*gconst5);
IkReal x10855=(cj1*cj2);
IkReal x10856=(gconst4*r11);
IkReal x10857=(gconst4*sj3);
IkReal x10858=((1.0)*x10848);
IkReal x10859=((1.0)*x10847);
IkReal x10860=(sj3*x10848);
IkReal x10861=((1.0)*cj3*gconst4);
IkReal x10862=(cj3*x10848);
IkReal x10863=(gconst5*x10847);
IkReal x10864=(x10849+x10850);
evalcond[0]=((-1.0)*r02*x10848);
evalcond[1]=((((-1.0)*x10852*x10859))+((r20*x10863)));
evalcond[2]=((((-1.0)*r02*sj3*x10859))+x10864);
evalcond[3]=((1.0)+((r10*x10863))+(((-1.0)*x10856*x10859)));
evalcond[4]=((((-1.0)*cj3*r02*x10859))+(((-1.0)*x10855))+x10853);
evalcond[5]=(((r11*x10851))+((x10856*x10862))+((r10*x10857))+(((-1.0)*r10*x10854*x10858)));
evalcond[6]=((((-1.0)*r11*x10854))+((x10856*x10860))+(((-1.0)*r10*x10851*x10858))+(((-1.0)*r10*x10861)));
evalcond[7]=((((-1.0)*r20*x10854*x10858))+((r21*x10851))+((r20*x10857))+((x10852*x10862))+x10864);
evalcond[8]=((((-1.0)*r20*x10851*x10858))+(((-1.0)*r20*x10861))+((x10852*x10860))+(((-1.0)*r21*x10854))+(((-1.0)*x10853))+x10855);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10865=(gconst5*r10);
IkReal x10866=(gconst4*r11);
CheckValue<IkReal> x10867=IKPowWithIntegerCheck(((((-1.0)*x10866))+x10865),-1);
if(!x10867.valid){
continue;
}
CheckValue<IkReal> x10868=IKPowWithIntegerCheck((((sj3*x10866))+(((-1.0)*sj3*x10865))),-1);
if(!x10868.valid){
continue;
}
if( IKabs(((-1.0)*(x10867.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10868.value)*((((cj3*gconst5*r11))+((cj3*gconst4*r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x10867.value)))+IKsqr(((x10868.value)*((((cj3*gconst5*r11))+((cj3*gconst4*r10))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x10867.value)), ((x10868.value)*((((cj3*gconst5*r11))+((cj3*gconst4*r10))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10869=IKsin(j4);
IkReal x10870=IKcos(j4);
IkReal x10871=(cj2*sj1);
IkReal x10872=(cj1*sj2);
IkReal x10873=(gconst5*sj3);
IkReal x10874=(gconst4*r21);
IkReal x10875=(sj1*sj2);
IkReal x10876=(cj3*gconst5);
IkReal x10877=(cj1*cj2);
IkReal x10878=(gconst4*r11);
IkReal x10879=(gconst4*sj3);
IkReal x10880=((1.0)*x10870);
IkReal x10881=((1.0)*x10869);
IkReal x10882=(sj3*x10870);
IkReal x10883=((1.0)*cj3*gconst4);
IkReal x10884=(cj3*x10870);
IkReal x10885=(gconst5*x10869);
IkReal x10886=(x10872+x10871);
evalcond[0]=((-1.0)*r02*x10870);
evalcond[1]=((((-1.0)*x10874*x10881))+((r20*x10885)));
evalcond[2]=((((-1.0)*r02*sj3*x10881))+x10886);
evalcond[3]=((1.0)+(((-1.0)*x10878*x10881))+((r10*x10885)));
evalcond[4]=((((-1.0)*cj3*r02*x10881))+(((-1.0)*x10877))+x10875);
evalcond[5]=(((r11*x10873))+((r10*x10879))+(((-1.0)*r10*x10876*x10880))+((x10878*x10884)));
evalcond[6]=((((-1.0)*r11*x10876))+(((-1.0)*r10*x10883))+(((-1.0)*r10*x10873*x10880))+((x10878*x10882)));
evalcond[7]=(((r21*x10873))+((r20*x10879))+((x10874*x10884))+(((-1.0)*r20*x10876*x10880))+x10886);
evalcond[8]=((((-1.0)*r21*x10876))+(((-1.0)*r20*x10873*x10880))+((x10874*x10882))+(((-1.0)*x10875))+(((-1.0)*r20*x10883))+x10877);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10887=gconst5*gconst5;
IkReal x10888=gconst4*gconst4;
IkReal x10889=(cj3*r10);
IkReal x10890=(r11*sj3);
IkReal x10891=(r10*sj3);
IkReal x10892=(cj3*r11);
IkReal x10893=(r21*x10888);
IkReal x10894=(gconst4*gconst5*r20);
IkReal x10895=(r20*x10887);
IkReal x10896=((1.0)*gconst4*gconst5*r21);
CheckValue<IkReal> x10897=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+(((-1.0)*x10889*x10896))+(((-1.0)*x10892*x10894))+((x10892*x10893))+((x10889*x10895)))),-1);
if(!x10897.valid){
continue;
}
CheckValue<IkReal> x10898 = IKatan2WithCheck(IkReal((((gconst4*r22*x10891))+((gconst5*r22*x10890)))),IkReal(((((-1.0)*x10890*x10896))+((x10891*x10894))+((x10890*x10895))+(((-1.0)*x10891*x10893)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10898.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10897.value)))+(x10898.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10899=IKsin(j4);
IkReal x10900=IKcos(j4);
IkReal x10901=(cj2*sj1);
IkReal x10902=(cj1*sj2);
IkReal x10903=(cj3*gconst5);
IkReal x10904=(gconst5*sj3);
IkReal x10905=(gconst4*r21);
IkReal x10906=(sj1*sj2);
IkReal x10907=(cj1*cj2);
IkReal x10908=(gconst4*r11);
IkReal x10909=(gconst4*r01);
IkReal x10910=(gconst4*sj3);
IkReal x10911=((1.0)*x10900);
IkReal x10912=((1.0)*x10899);
IkReal x10913=(sj3*x10900);
IkReal x10914=((1.0)*cj3*gconst4);
IkReal x10915=(cj3*x10900);
IkReal x10916=(gconst5*x10899);
IkReal x10917=(x10902+x10901);
evalcond[0]=((((-1.0)*r22*x10911))+(((-1.0)*x10905*x10912))+((r20*x10916)));
evalcond[1]=((((-1.0)*r02*x10911))+((r00*x10916))+(((-1.0)*x10909*x10912)));
evalcond[2]=((1.0)+(((-1.0)*x10908*x10912))+(((-1.0)*r12*x10911))+((r10*x10916)));
evalcond[3]=((((-1.0)*cj3*r12*x10912))+(((-1.0)*r10*x10903*x10911))+((x10908*x10915))+((r11*x10904))+((r10*x10910)));
evalcond[4]=((((-1.0)*r10*x10904*x10911))+(((-1.0)*r10*x10914))+(((-1.0)*r12*sj3*x10912))+((x10908*x10913))+(((-1.0)*r11*x10903)));
evalcond[5]=((((-1.0)*r20*x10903*x10911))+(((-1.0)*cj3*r22*x10912))+((r21*x10904))+((x10905*x10915))+x10917+((r20*x10910)));
evalcond[6]=(((x10909*x10915))+((r01*x10904))+((r00*x10910))+(((-1.0)*cj3*r02*x10912))+(((-1.0)*r00*x10903*x10911))+(((-1.0)*x10907))+x10906);
evalcond[7]=((((-1.0)*r01*x10903))+((x10909*x10913))+(((-1.0)*r00*x10904*x10911))+(((-1.0)*r02*sj3*x10912))+(((-1.0)*r00*x10914))+x10917);
evalcond[8]=((((-1.0)*r20*x10904*x10911))+(((-1.0)*r20*x10914))+(((-1.0)*r21*x10903))+(((-1.0)*x10906))+((x10905*x10913))+x10907+(((-1.0)*r22*sj3*x10912)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10918=((1.0)*gconst4);
CheckValue<IkReal> x10919=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x10918))+(((-1.0)*gconst5*r21)))),-1);
if(!x10919.valid){
continue;
}
CheckValue<IkReal> x10920 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst5*r00))+(((-1.0)*r01*x10918)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10920.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10919.value)))+(x10920.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10921=IKsin(j4);
IkReal x10922=IKcos(j4);
IkReal x10923=(cj2*sj1);
IkReal x10924=(cj1*sj2);
IkReal x10925=(cj3*gconst5);
IkReal x10926=(gconst5*sj3);
IkReal x10927=(gconst4*r21);
IkReal x10928=(sj1*sj2);
IkReal x10929=(cj1*cj2);
IkReal x10930=(gconst4*r11);
IkReal x10931=(gconst4*r01);
IkReal x10932=(gconst4*sj3);
IkReal x10933=((1.0)*x10922);
IkReal x10934=((1.0)*x10921);
IkReal x10935=(sj3*x10922);
IkReal x10936=((1.0)*cj3*gconst4);
IkReal x10937=(cj3*x10922);
IkReal x10938=(gconst5*x10921);
IkReal x10939=(x10923+x10924);
evalcond[0]=((((-1.0)*r22*x10933))+(((-1.0)*x10927*x10934))+((r20*x10938)));
evalcond[1]=((((-1.0)*x10931*x10934))+(((-1.0)*r02*x10933))+((r00*x10938)));
evalcond[2]=((1.0)+(((-1.0)*r12*x10933))+((r10*x10938))+(((-1.0)*x10930*x10934)));
evalcond[3]=(((x10930*x10937))+(((-1.0)*r10*x10925*x10933))+((r10*x10932))+(((-1.0)*cj3*r12*x10934))+((r11*x10926)));
evalcond[4]=(((x10930*x10935))+(((-1.0)*r10*x10936))+(((-1.0)*r10*x10926*x10933))+(((-1.0)*r11*x10925))+(((-1.0)*r12*sj3*x10934)));
evalcond[5]=(((x10927*x10937))+((r21*x10926))+(((-1.0)*cj3*r22*x10934))+((r20*x10932))+(((-1.0)*r20*x10925*x10933))+x10939);
evalcond[6]=((((-1.0)*x10929))+((x10931*x10937))+(((-1.0)*r00*x10925*x10933))+((r01*x10926))+(((-1.0)*cj3*r02*x10934))+((r00*x10932))+x10928);
evalcond[7]=(((x10931*x10935))+(((-1.0)*r01*x10925))+(((-1.0)*r02*sj3*x10934))+(((-1.0)*r00*x10926*x10933))+(((-1.0)*r00*x10936))+x10939);
evalcond[8]=((((-1.0)*r22*sj3*x10934))+(((-1.0)*x10928))+((x10927*x10935))+(((-1.0)*r20*x10926*x10933))+(((-1.0)*r20*x10936))+x10929+(((-1.0)*r21*x10925)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10940 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10940.valid){
continue;
}
CheckValue<IkReal> x10941=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10941.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10940.value)+(((1.5707963267949)*(x10941.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10942=IKsin(j4);
IkReal x10943=IKcos(j4);
IkReal x10944=(cj2*sj1);
IkReal x10945=(cj1*sj2);
IkReal x10946=(cj3*gconst5);
IkReal x10947=(gconst5*sj3);
IkReal x10948=(gconst4*r21);
IkReal x10949=(sj1*sj2);
IkReal x10950=(cj1*cj2);
IkReal x10951=(gconst4*r11);
IkReal x10952=(gconst4*r01);
IkReal x10953=(gconst4*sj3);
IkReal x10954=((1.0)*x10943);
IkReal x10955=((1.0)*x10942);
IkReal x10956=(sj3*x10943);
IkReal x10957=((1.0)*cj3*gconst4);
IkReal x10958=(cj3*x10943);
IkReal x10959=(gconst5*x10942);
IkReal x10960=(x10945+x10944);
evalcond[0]=((((-1.0)*x10948*x10955))+(((-1.0)*r22*x10954))+((r20*x10959)));
evalcond[1]=(((r00*x10959))+(((-1.0)*x10952*x10955))+(((-1.0)*r02*x10954)));
evalcond[2]=((1.0)+((r10*x10959))+(((-1.0)*x10951*x10955))+(((-1.0)*r12*x10954)));
evalcond[3]=(((r11*x10947))+(((-1.0)*cj3*r12*x10955))+(((-1.0)*r10*x10946*x10954))+((r10*x10953))+((x10951*x10958)));
evalcond[4]=((((-1.0)*r11*x10946))+(((-1.0)*r12*sj3*x10955))+(((-1.0)*r10*x10947*x10954))+(((-1.0)*r10*x10957))+((x10951*x10956)));
evalcond[5]=((((-1.0)*r20*x10946*x10954))+((r21*x10947))+((r20*x10953))+(((-1.0)*cj3*r22*x10955))+x10960+((x10948*x10958)));
evalcond[6]=(((r01*x10947))+((r00*x10953))+(((-1.0)*cj3*r02*x10955))+(((-1.0)*r00*x10946*x10954))+(((-1.0)*x10950))+x10949+((x10952*x10958)));
evalcond[7]=((((-1.0)*r02*sj3*x10955))+(((-1.0)*r00*x10947*x10954))+(((-1.0)*r01*x10946))+x10960+((x10952*x10956))+(((-1.0)*r00*x10957)));
evalcond[8]=((((-1.0)*r20*x10957))+(((-1.0)*r21*x10946))+(((-1.0)*x10949))+(((-1.0)*r22*sj3*x10955))+x10950+((x10948*x10956))+(((-1.0)*r20*x10947*x10954)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
CheckValue<IkReal> x10963 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10963.valid){
continue;
}
IkReal x10961=((1.0)*(x10963.value));
IkReal x10962=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10961)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x10962);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10961)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x10962;
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x10966 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10966.valid){
continue;
}
IkReal x10964=((1.0)*(x10966.value));
IkReal x10965=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10964)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x10965);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10964)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x10965;
IkReal x10967=((1.0)*cj3);
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
j4eval[1]=(((x10967*(r21*r21)))+(((-1.0)*x10967*(r00*r00)))+x10967);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x10970 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10970.valid){
continue;
}
IkReal x10968=((1.0)*(x10970.value));
IkReal x10969=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10968)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x10969);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10968)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x10969;
j4eval[0]=cj3;
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10973 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10973.valid){
continue;
}
IkReal x10971=((1.0)*(x10973.value));
IkReal x10972=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10971)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x10972);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10971)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x10972;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10976 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10976.valid){
continue;
}
IkReal x10974=((1.0)*(x10976.value));
IkReal x10975=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10974)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x10975);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10974)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x10975;
j4eval[0]=((1.0)+(((1.0)*(r21*r21)))+(((-1.0)*(r00*r00))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10979 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10979.valid){
continue;
}
IkReal x10977=((1.0)*(x10979.value));
IkReal x10978=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10977)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x10978);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10977)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x10978;
j4eval[0]=((((1.0)*r01*r21))+(((1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10982=IKPowWithIntegerCheck((((gconst4*r01))+(((-1.0)*gconst5*r00))),-1);
if(!x10982.valid){
continue;
}
IkReal x10980=x10982.value;
IkReal x10981=(cj0*x10980);
cj4array[0]=(((cj1*sj2*x10981))+((cj2*sj1*x10981)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10983=IKsin(j4);
IkReal x10984=IKcos(j4);
IkReal x10985=(gconst4*r21);
IkReal x10986=(gconst5*x10983);
IkReal x10987=((1.0)*x10983);
IkReal x10988=((1.0)*x10984);
evalcond[0]=((-1.0)*r12*x10983);
evalcond[1]=((((-1.0)*r12*x10988))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*x10985*x10987))+((r20*x10986)));
evalcond[3]=(((r00*x10986))+(((-1.0)*gconst4*r01*x10987)));
evalcond[4]=((((-1.0)*sj1*sj2))+(((-1.0)*gconst5*r20*x10988))+((cj1*cj2))+((x10984*x10985)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10990=IKPowWithIntegerCheck((((gconst4*r21))+(((-1.0)*gconst5*r20))),-1);
if(!x10990.valid){
continue;
}
IkReal x10989=x10990.value;
cj4array[0]=((((-1.0)*cj1*cj2*x10989))+((sj1*sj2*x10989)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10991=IKsin(j4);
IkReal x10992=IKcos(j4);
IkReal x10993=((1.0)*cj0);
IkReal x10994=(gconst5*x10991);
IkReal x10995=((1.0)*x10992);
IkReal x10996=((1.0)*gconst4*x10991);
evalcond[0]=((-1.0)*r12*x10991);
evalcond[1]=((((-1.0)*r12*x10995))+(((-1.0)*x10993)));
evalcond[2]=((((-1.0)*r21*x10996))+((r20*x10994)));
evalcond[3]=(((r00*x10994))+(((-1.0)*r01*x10996)));
evalcond[4]=(((gconst4*r01*x10992))+(((-1.0)*cj2*sj1*x10993))+(((-1.0)*gconst5*r00*x10995))+(((-1.0)*cj1*sj2*x10993)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10997=IKPowWithIntegerCheck(r12,-1);
if(!x10997.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x10997.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10998=IKsin(j4);
IkReal x10999=IKcos(j4);
IkReal x11000=(gconst4*r21);
IkReal x11001=(gconst4*r01);
IkReal x11002=((1.0)*cj0);
IkReal x11003=(gconst5*x10998);
IkReal x11004=((1.0)*x10998);
IkReal x11005=((1.0)*gconst5*x10999);
evalcond[0]=((-1.0)*r12*x10998);
evalcond[1]=(((r20*x11003))+(((-1.0)*x11000*x11004)));
evalcond[2]=((((-1.0)*x11001*x11004))+((r00*x11003)));
evalcond[3]=((((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r20*x11005))+((x10999*x11000)));
evalcond[4]=((((-1.0)*r00*x11005))+(((-1.0)*cj2*sj1*x11002))+(((-1.0)*cj1*sj2*x11002))+((x10999*x11001)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11008 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11008.valid){
continue;
}
IkReal x11006=((1.0)*(x11008.value));
IkReal x11007=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11006)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11007);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11006)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x11007;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11011 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11011.valid){
continue;
}
IkReal x11009=((1.0)*(x11011.value));
IkReal x11010=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11009)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11010);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11009)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x11010;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(((1.0)*(r00*r00))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11014 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11014.valid){
continue;
}
IkReal x11012=((1.0)*(x11014.value));
IkReal x11013=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11012)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11013);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11012)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x11013;
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11017=IKPowWithIntegerCheck(((((-1.0)*gconst4*r01))+((gconst5*r00))),-1);
if(!x11017.valid){
continue;
}
IkReal x11015=x11017.value;
IkReal x11016=(cj0*x11015);
cj4array[0]=(((cj2*sj1*x11016))+((cj1*sj2*x11016)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11018=IKsin(j4);
IkReal x11019=IKcos(j4);
IkReal x11020=(gconst5*r20);
IkReal x11021=((1.0)*gconst4*r21);
evalcond[0]=(r12*x11018);
evalcond[1]=((((-1.0)*r12*x11019))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*x11018*x11021))+((x11018*x11020)));
evalcond[3]=((((-1.0)*gconst4*r01*x11018))+((gconst5*r00*x11018)));
evalcond[4]=((((-1.0)*sj1*sj2))+((x11019*x11020))+((cj1*cj2))+(((-1.0)*x11019*x11021)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11023=IKPowWithIntegerCheck((((gconst5*r20))+(((-1.0)*gconst4*r21))),-1);
if(!x11023.valid){
continue;
}
IkReal x11022=x11023.value;
cj4array[0]=((((-1.0)*cj1*cj2*x11022))+((sj1*sj2*x11022)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11024=IKsin(j4);
IkReal x11025=IKcos(j4);
IkReal x11026=((1.0)*gconst4);
IkReal x11027=((1.0)*cj0);
IkReal x11028=(gconst5*x11024);
evalcond[0]=(r12*x11024);
evalcond[1]=((((-1.0)*r12*x11025))+(((-1.0)*x11027)));
evalcond[2]=(((r20*x11028))+(((-1.0)*r21*x11024*x11026)));
evalcond[3]=(((r00*x11028))+(((-1.0)*r01*x11024*x11026)));
evalcond[4]=((((-1.0)*cj2*sj1*x11027))+(((-1.0)*r01*x11025*x11026))+((gconst5*r00*x11025))+(((-1.0)*cj1*sj2*x11027)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11029=IKPowWithIntegerCheck(r12,-1);
if(!x11029.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x11029.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11030=IKsin(j4);
IkReal x11031=IKcos(j4);
IkReal x11032=(gconst5*r20);
IkReal x11033=((1.0)*gconst4);
IkReal x11034=(gconst5*r00);
IkReal x11035=((1.0)*cj0);
evalcond[0]=(r12*x11030);
evalcond[1]=(((x11030*x11032))+(((-1.0)*r21*x11030*x11033)));
evalcond[2]=(((x11030*x11034))+(((-1.0)*r01*x11030*x11033)));
evalcond[3]=((((-1.0)*sj1*sj2))+(((-1.0)*r21*x11031*x11033))+((cj1*cj2))+((x11031*x11032)));
evalcond[4]=((((-1.0)*cj2*sj1*x11035))+(((-1.0)*r01*x11031*x11033))+(((-1.0)*cj1*sj2*x11035))+((x11031*x11034)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11037=IKPowWithIntegerCheck(r12,-1);
if(!x11037.valid){
continue;
}
IkReal x11036=x11037.value;
CheckValue<IkReal> x11038=IKPowWithIntegerCheck(cj3,-1);
if(!x11038.valid){
continue;
}
if( IKabs((x11036*(x11038.value)*((((cj1*cj2*sj0))+(((-1.0)*sj0*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x11036)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x11036*(x11038.value)*((((cj1*cj2*sj0))+(((-1.0)*sj0*sj1*sj2))))))+IKsqr(((-1.0)*cj0*x11036))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x11036*(x11038.value)*((((cj1*cj2*sj0))+(((-1.0)*sj0*sj1*sj2))))), ((-1.0)*cj0*x11036));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11039=IKsin(j4);
IkReal x11040=IKcos(j4);
IkReal x11041=(cj2*sj0);
IkReal x11042=(gconst4*r21);
IkReal x11043=((1.0)*sj1);
IkReal x11044=((1.0)*r20);
IkReal x11045=(cj3*gconst4);
IkReal x11046=((1.0)*gconst5);
IkReal x11047=(cj1*sj2);
IkReal x11048=((1.0)*cj0);
IkReal x11049=(cj0*cj2);
IkReal x11050=(gconst5*sj3);
IkReal x11051=(gconst4*sj3);
IkReal x11052=(gconst4*r01);
IkReal x11053=((1.0)*x11039);
IkReal x11054=(sj3*x11040);
IkReal x11055=(cj3*x11040);
IkReal x11056=(gconst5*x11039);
evalcond[0]=((((-1.0)*x11048))+(((-1.0)*r12*x11040)));
evalcond[1]=(((r20*x11056))+(((-1.0)*x11042*x11053)));
evalcond[2]=(sj0+(((-1.0)*x11052*x11053))+((r00*x11056)));
evalcond[3]=((((-1.0)*sj0*sj2*x11043))+((cj1*x11041))+(((-1.0)*cj3*r12*x11053)));
evalcond[4]=((((-1.0)*r12*sj3*x11053))+(((-1.0)*x11041*x11043))+(((-1.0)*sj0*x11047)));
evalcond[5]=(((r20*x11051))+((cj2*sj1))+(((-1.0)*gconst5*x11044*x11055))+x11047+((x11042*x11055))+((r21*x11050)));
evalcond[6]=((((-1.0)*x11040*x11044*x11050))+(((-1.0)*cj3*r21*x11046))+((x11042*x11054))+(((-1.0)*sj2*x11043))+((cj1*cj2))+(((-1.0)*x11044*x11045)));
evalcond[7]=((((-1.0)*cj0*sj2*x11043))+((r00*x11051))+((r01*x11050))+(((-1.0)*r00*x11046*x11055))+((cj1*x11049))+((r01*x11040*x11045)));
evalcond[8]=((((-1.0)*r00*x11045))+(((-1.0)*cj3*r01*x11046))+(((-1.0)*x11043*x11049))+(((-1.0)*r00*x11046*x11054))+(((-1.0)*x11047*x11048))+((r01*x11040*x11051)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11057=((1.0)*gconst5);
IkReal x11058=((1.0)*gconst4);
CheckValue<IkReal> x11059=IKPowWithIntegerCheck(((((-1.0)*r01*x11058))+((gconst5*r00))),-1);
if(!x11059.valid){
continue;
}
CheckValue<IkReal> x11060=IKPowWithIntegerCheck(((((-1.0)*cj3*r20*x11057))+((cj3*gconst4*r21))),-1);
if(!x11060.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x11059.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11060.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*r20*sj3*x11058))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj3*x11057)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x11059.value)))+IKsqr(((x11060.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*r20*sj3*x11058))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj3*x11057))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x11059.value)), ((x11060.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*r20*sj3*x11058))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj3*x11057))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11061=IKsin(j4);
IkReal x11062=IKcos(j4);
IkReal x11063=(cj2*sj0);
IkReal x11064=(gconst4*r21);
IkReal x11065=((1.0)*sj1);
IkReal x11066=((1.0)*r20);
IkReal x11067=(cj3*gconst4);
IkReal x11068=((1.0)*gconst5);
IkReal x11069=(cj1*sj2);
IkReal x11070=((1.0)*cj0);
IkReal x11071=(cj0*cj2);
IkReal x11072=(gconst5*sj3);
IkReal x11073=(gconst4*sj3);
IkReal x11074=(gconst4*r01);
IkReal x11075=((1.0)*x11061);
IkReal x11076=(sj3*x11062);
IkReal x11077=(cj3*x11062);
IkReal x11078=(gconst5*x11061);
evalcond[0]=((((-1.0)*x11070))+(((-1.0)*r12*x11062)));
evalcond[1]=((((-1.0)*x11064*x11075))+((r20*x11078)));
evalcond[2]=(sj0+(((-1.0)*x11074*x11075))+((r00*x11078)));
evalcond[3]=((((-1.0)*cj3*r12*x11075))+((cj1*x11063))+(((-1.0)*sj0*sj2*x11065)));
evalcond[4]=((((-1.0)*r12*sj3*x11075))+(((-1.0)*sj0*x11069))+(((-1.0)*x11063*x11065)));
evalcond[5]=(((cj2*sj1))+((r21*x11072))+x11069+((r20*x11073))+((x11064*x11077))+(((-1.0)*gconst5*x11066*x11077)));
evalcond[6]=((((-1.0)*cj3*r21*x11068))+(((-1.0)*x11062*x11066*x11072))+(((-1.0)*sj2*x11065))+((x11064*x11076))+(((-1.0)*x11066*x11067))+((cj1*cj2)));
evalcond[7]=((((-1.0)*cj0*sj2*x11065))+((cj1*x11071))+((r01*x11062*x11067))+(((-1.0)*r00*x11068*x11077))+((r00*x11073))+((r01*x11072)));
evalcond[8]=((((-1.0)*x11065*x11071))+(((-1.0)*cj3*r01*x11068))+(((-1.0)*r00*x11068*x11076))+((r01*x11062*x11073))+(((-1.0)*r00*x11067))+(((-1.0)*x11069*x11070)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11079=IKPowWithIntegerCheck(((((-1.0)*gconst4*r01))+((gconst5*r00))),-1);
if(!x11079.valid){
continue;
}
CheckValue<IkReal> x11080=IKPowWithIntegerCheck(r12,-1);
if(!x11080.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x11079.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x11080.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x11079.value)))+IKsqr(((-1.0)*cj0*(x11080.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x11079.value)), ((-1.0)*cj0*(x11080.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11081=IKsin(j4);
IkReal x11082=IKcos(j4);
IkReal x11083=(cj2*sj0);
IkReal x11084=(gconst4*r21);
IkReal x11085=((1.0)*sj1);
IkReal x11086=((1.0)*r20);
IkReal x11087=(cj3*gconst4);
IkReal x11088=((1.0)*gconst5);
IkReal x11089=(cj1*sj2);
IkReal x11090=((1.0)*cj0);
IkReal x11091=(cj0*cj2);
IkReal x11092=(gconst5*sj3);
IkReal x11093=(gconst4*sj3);
IkReal x11094=(gconst4*r01);
IkReal x11095=((1.0)*x11081);
IkReal x11096=(sj3*x11082);
IkReal x11097=(cj3*x11082);
IkReal x11098=(gconst5*x11081);
evalcond[0]=((((-1.0)*x11090))+(((-1.0)*r12*x11082)));
evalcond[1]=(((r20*x11098))+(((-1.0)*x11084*x11095)));
evalcond[2]=(sj0+(((-1.0)*x11094*x11095))+((r00*x11098)));
evalcond[3]=((((-1.0)*sj0*sj2*x11085))+((cj1*x11083))+(((-1.0)*cj3*r12*x11095)));
evalcond[4]=((((-1.0)*r12*sj3*x11095))+(((-1.0)*x11083*x11085))+(((-1.0)*sj0*x11089)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*gconst5*x11086*x11097))+((x11084*x11097))+((r20*x11093))+x11089+((r21*x11092)));
evalcond[6]=((((-1.0)*cj3*r21*x11088))+(((-1.0)*sj2*x11085))+((x11084*x11096))+(((-1.0)*x11086*x11087))+((cj1*cj2))+(((-1.0)*x11082*x11086*x11092)));
evalcond[7]=(((r01*x11082*x11087))+((r00*x11093))+((r01*x11092))+((cj1*x11091))+(((-1.0)*cj0*sj2*x11085))+(((-1.0)*r00*x11088*x11097)));
evalcond[8]=((((-1.0)*cj3*r01*x11088))+(((-1.0)*x11085*x11091))+(((-1.0)*r00*x11087))+((r01*x11082*x11093))+(((-1.0)*r00*x11088*x11096))+(((-1.0)*x11089*x11090)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11099=((1.0)*gconst4);
CheckValue<IkReal> x11100=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11100.valid){
continue;
}
CheckValue<IkReal> x11101 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x11099))+((cj0*gconst5*r00))+((gconst5*r10*sj0))+(((-1.0)*r11*sj0*x11099)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11101.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11100.value)))+(x11101.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11102=IKsin(j4);
IkReal x11103=IKcos(j4);
IkReal x11104=(gconst5*sj3);
IkReal x11105=(gconst4*r21);
IkReal x11106=(cj3*gconst5);
IkReal x11107=(gconst4*r11);
IkReal x11108=(gconst4*r01);
IkReal x11109=(cj2*sj0);
IkReal x11110=(cj2*sj1);
IkReal x11111=((1.0)*cj0);
IkReal x11112=(gconst4*sj3);
IkReal x11113=(cj1*sj2);
IkReal x11114=(cj1*cj2);
IkReal x11115=((1.0)*x11103);
IkReal x11116=((1.0)*x11102);
IkReal x11117=((1.0)*sj1*sj2);
IkReal x11118=(sj3*x11103);
IkReal x11119=((1.0)*cj3*gconst4);
IkReal x11120=(cj3*x11103);
IkReal x11121=(gconst5*x11102);
evalcond[0]=((((-1.0)*x11105*x11116))+(((-1.0)*r22*x11115))+((r20*x11121)));
evalcond[1]=((((-1.0)*x11108*x11116))+sj0+(((-1.0)*r02*x11115))+((r00*x11121)));
evalcond[2]=(((r10*x11121))+(((-1.0)*x11107*x11116))+(((-1.0)*r12*x11115))+(((-1.0)*x11111)));
evalcond[3]=(((x11105*x11120))+x11113+x11110+(((-1.0)*cj3*r22*x11116))+((r21*x11104))+(((-1.0)*r20*x11106*x11115))+((r20*x11112)));
evalcond[4]=(((x11105*x11118))+x11114+(((-1.0)*r22*sj3*x11116))+(((-1.0)*r20*x11104*x11115))+(((-1.0)*r21*x11106))+(((-1.0)*x11117))+(((-1.0)*r20*x11119)));
evalcond[5]=(((cj0*x11114))+(((-1.0)*r00*x11106*x11115))+((x11108*x11120))+(((-1.0)*cj3*r02*x11116))+((r00*x11112))+(((-1.0)*sj1*sj2*x11111))+((r01*x11104)));
evalcond[6]=(((x11107*x11120))+((r10*x11112))+((cj1*x11109))+(((-1.0)*r10*x11106*x11115))+(((-1.0)*sj0*x11117))+((r11*x11104))+(((-1.0)*cj3*r12*x11116)));
evalcond[7]=((((-1.0)*r02*sj3*x11116))+(((-1.0)*x11111*x11113))+(((-1.0)*r01*x11106))+(((-1.0)*x11110*x11111))+(((-1.0)*r00*x11119))+(((-1.0)*r00*x11104*x11115))+((x11108*x11118)));
evalcond[8]=((((-1.0)*r10*x11119))+(((-1.0)*r12*sj3*x11116))+(((-1.0)*sj0*x11113))+((x11107*x11118))+(((-1.0)*sj1*x11109))+(((-1.0)*r11*x11106))+(((-1.0)*r10*x11104*x11115)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11122=((1.0)*gconst4);
CheckValue<IkReal> x11123 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x11122))+((cj0*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11123.valid){
continue;
}
CheckValue<IkReal> x11124=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x11122))+(((-1.0)*gconst5*r01)))),-1);
if(!x11124.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11123.value)+(((1.5707963267949)*(x11124.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11125=IKsin(j4);
IkReal x11126=IKcos(j4);
IkReal x11127=(gconst5*sj3);
IkReal x11128=(gconst4*r21);
IkReal x11129=(cj3*gconst5);
IkReal x11130=(gconst4*r11);
IkReal x11131=(gconst4*r01);
IkReal x11132=(cj2*sj0);
IkReal x11133=(cj2*sj1);
IkReal x11134=((1.0)*cj0);
IkReal x11135=(gconst4*sj3);
IkReal x11136=(cj1*sj2);
IkReal x11137=(cj1*cj2);
IkReal x11138=((1.0)*x11126);
IkReal x11139=((1.0)*x11125);
IkReal x11140=((1.0)*sj1*sj2);
IkReal x11141=(sj3*x11126);
IkReal x11142=((1.0)*cj3*gconst4);
IkReal x11143=(cj3*x11126);
IkReal x11144=(gconst5*x11125);
evalcond[0]=((((-1.0)*r22*x11138))+(((-1.0)*x11128*x11139))+((r20*x11144)));
evalcond[1]=((((-1.0)*x11131*x11139))+((r00*x11144))+sj0+(((-1.0)*r02*x11138)));
evalcond[2]=((((-1.0)*r12*x11138))+(((-1.0)*x11134))+((r10*x11144))+(((-1.0)*x11130*x11139)));
evalcond[3]=(((r21*x11127))+(((-1.0)*r20*x11129*x11138))+x11136+x11133+(((-1.0)*cj3*r22*x11139))+((r20*x11135))+((x11128*x11143)));
evalcond[4]=((((-1.0)*r21*x11129))+(((-1.0)*r20*x11127*x11138))+(((-1.0)*r20*x11142))+x11137+(((-1.0)*r22*sj3*x11139))+((x11128*x11141))+(((-1.0)*x11140)));
evalcond[5]=((((-1.0)*sj1*sj2*x11134))+(((-1.0)*r00*x11129*x11138))+((cj0*x11137))+((x11131*x11143))+(((-1.0)*cj3*r02*x11139))+((r01*x11127))+((r00*x11135)));
evalcond[6]=((((-1.0)*cj3*r12*x11139))+(((-1.0)*sj0*x11140))+(((-1.0)*r10*x11129*x11138))+((r10*x11135))+((r11*x11127))+((x11130*x11143))+((cj1*x11132)));
evalcond[7]=((((-1.0)*r02*sj3*x11139))+(((-1.0)*x11134*x11136))+(((-1.0)*r00*x11127*x11138))+(((-1.0)*x11133*x11134))+(((-1.0)*r00*x11142))+((x11131*x11141))+(((-1.0)*r01*x11129)));
evalcond[8]=((((-1.0)*sj0*x11136))+(((-1.0)*r12*sj3*x11139))+(((-1.0)*sj1*x11132))+(((-1.0)*r11*x11129))+((x11130*x11141))+(((-1.0)*r10*x11142))+(((-1.0)*r10*x11127*x11138)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11145=((1.0)*gconst4);
CheckValue<IkReal> x11146 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x11145))+((gconst5*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11146.valid){
continue;
}
CheckValue<IkReal> x11147=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x11145))+(((-1.0)*gconst5*r11)))),-1);
if(!x11147.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11146.value)+(((1.5707963267949)*(x11147.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11148=IKsin(j4);
IkReal x11149=IKcos(j4);
IkReal x11150=(gconst5*sj3);
IkReal x11151=(gconst4*r21);
IkReal x11152=(cj3*gconst5);
IkReal x11153=(gconst4*r11);
IkReal x11154=(gconst4*r01);
IkReal x11155=(cj2*sj0);
IkReal x11156=(cj2*sj1);
IkReal x11157=((1.0)*cj0);
IkReal x11158=(gconst4*sj3);
IkReal x11159=(cj1*sj2);
IkReal x11160=(cj1*cj2);
IkReal x11161=((1.0)*x11149);
IkReal x11162=((1.0)*x11148);
IkReal x11163=((1.0)*sj1*sj2);
IkReal x11164=(sj3*x11149);
IkReal x11165=((1.0)*cj3*gconst4);
IkReal x11166=(cj3*x11149);
IkReal x11167=(gconst5*x11148);
evalcond[0]=((((-1.0)*x11151*x11162))+((r20*x11167))+(((-1.0)*r22*x11161)));
evalcond[1]=((((-1.0)*x11154*x11162))+sj0+((r00*x11167))+(((-1.0)*r02*x11161)));
evalcond[2]=((((-1.0)*r12*x11161))+((r10*x11167))+(((-1.0)*x11153*x11162))+(((-1.0)*x11157)));
evalcond[3]=(((r21*x11150))+(((-1.0)*cj3*r22*x11162))+x11156+x11159+(((-1.0)*r20*x11152*x11161))+((r20*x11158))+((x11151*x11166)));
evalcond[4]=((((-1.0)*x11163))+x11160+(((-1.0)*r20*x11165))+((x11151*x11164))+(((-1.0)*r20*x11150*x11161))+(((-1.0)*r21*x11152))+(((-1.0)*r22*sj3*x11162)));
evalcond[5]=(((r00*x11158))+((r01*x11150))+(((-1.0)*r00*x11152*x11161))+((cj0*x11160))+(((-1.0)*cj3*r02*x11162))+(((-1.0)*sj1*sj2*x11157))+((x11154*x11166)));
evalcond[6]=((((-1.0)*r10*x11152*x11161))+(((-1.0)*cj3*r12*x11162))+((r11*x11150))+((r10*x11158))+((x11153*x11166))+((cj1*x11155))+(((-1.0)*sj0*x11163)));
evalcond[7]=((((-1.0)*r00*x11165))+(((-1.0)*x11156*x11157))+(((-1.0)*r02*sj3*x11162))+(((-1.0)*r00*x11150*x11161))+(((-1.0)*x11157*x11159))+(((-1.0)*r01*x11152))+((x11154*x11164)));
evalcond[8]=((((-1.0)*r10*x11150*x11161))+(((-1.0)*sj0*x11159))+(((-1.0)*r10*x11165))+(((-1.0)*r11*x11152))+(((-1.0)*r12*sj3*x11162))+((x11153*x11164))+(((-1.0)*sj1*x11155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11168=((-1.0)*r00);
IkReal x11170 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x11170)==0){
continue;
}
IkReal x11169=pow(x11170,-0.5);
CheckValue<IkReal> x11171 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x11168),IKFAST_ATAN2_MAGTHRESH);
if(!x11171.valid){
continue;
}
IkReal gconst6=((-1.0)*(x11171.value));
IkReal gconst7=(r01*x11169);
IkReal gconst8=(x11168*x11169);
CheckValue<IkReal> x11172 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x11172.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x11172.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11173=((-1.0)*r00);
IkReal x11174=x11169;
CheckValue<IkReal> x11176 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x11173),IKFAST_ATAN2_MAGTHRESH);
if(!x11176.valid){
continue;
}
IkReal x11175=((-1.0)*(x11176.value));
sj5=gconst7;
cj5=gconst8;
j5=x11175;
IkReal gconst6=x11175;
IkReal gconst7=(r01*x11174);
IkReal gconst8=(x11173*x11174);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11177=((1.0)*gconst7);
CheckValue<IkReal> x11178 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst8*r10*sj0))+(((-1.0)*cj0*r01*x11177))+(((-1.0)*r11*sj0*x11177))+((cj0*gconst8*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11178.valid){
continue;
}
CheckValue<IkReal> x11179=IKPowWithIntegerCheck(IKsign((((gconst7*r20))+((gconst8*r21)))),-1);
if(!x11179.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11178.value)+(((1.5707963267949)*(x11179.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11180=IKsin(j4);
IkReal x11181=IKcos(j4);
IkReal x11182=(gconst7*sj3);
IkReal x11183=(cj2*sj0);
IkReal x11184=(cj3*gconst7);
IkReal x11185=(gconst8*sj3);
IkReal x11186=((1.0)*sj2);
IkReal x11187=(cj3*gconst8);
IkReal x11188=(cj2*sj1);
IkReal x11189=(cj0*cj1);
IkReal x11190=((1.0)*cj0);
IkReal x11191=((1.0)*x11181);
IkReal x11192=(gconst8*x11180);
IkReal x11193=(r01*x11181);
IkReal x11194=(r11*x11181);
IkReal x11195=((1.0)*x11180);
IkReal x11196=(r21*x11181);
evalcond[0]=((((-1.0)*gconst7*r21*x11195))+((r20*x11192))+(((-1.0)*r22*x11191)));
evalcond[1]=((((-1.0)*gconst7*r01*x11195))+sj0+(((-1.0)*r02*x11191))+((r00*x11192)));
evalcond[2]=((((-1.0)*r12*x11191))+(((-1.0)*x11190))+(((-1.0)*gconst7*r11*x11195))+((r10*x11192)));
evalcond[3]=(((r20*x11182))+(((-1.0)*cj3*r22*x11195))+((cj1*sj2))+x11188+((x11184*x11196))+(((-1.0)*r20*x11187*x11191))+((r21*x11185)));
evalcond[4]=((((-1.0)*sj1*x11186))+(((-1.0)*r20*x11184))+(((-1.0)*r20*x11185*x11191))+(((-1.0)*r22*sj3*x11195))+((x11182*x11196))+(((-1.0)*r21*x11187))+((cj1*cj2)));
evalcond[5]=((((-1.0)*r00*x11187*x11191))+((cj2*x11189))+((r01*x11185))+(((-1.0)*cj3*r02*x11195))+((r00*x11182))+((x11184*x11193))+(((-1.0)*cj0*sj1*x11186)));
evalcond[6]=((((-1.0)*r10*x11187*x11191))+((cj1*x11183))+((r11*x11185))+(((-1.0)*sj0*sj1*x11186))+(((-1.0)*cj3*r12*x11195))+((x11184*x11194))+((r10*x11182)));
evalcond[7]=((((-1.0)*x11186*x11189))+((x11182*x11193))+(((-1.0)*r02*sj3*x11195))+(((-1.0)*x11188*x11190))+(((-1.0)*r00*x11185*x11191))+(((-1.0)*r01*x11187))+(((-1.0)*r00*x11184)));
evalcond[8]=((((-1.0)*sj1*x11183))+(((-1.0)*r11*x11187))+((x11182*x11194))+(((-1.0)*r10*x11185*x11191))+(((-1.0)*r12*sj3*x11195))+(((-1.0)*r10*x11184))+(((-1.0)*cj1*sj0*x11186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11197=((1.0)*gconst7);
CheckValue<IkReal> x11198 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x11197))+((gconst8*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11198.valid){
continue;
}
CheckValue<IkReal> x11199=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x11197))+(((-1.0)*gconst8*r11)))),-1);
if(!x11199.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11198.value)+(((1.5707963267949)*(x11199.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11200=IKsin(j4);
IkReal x11201=IKcos(j4);
IkReal x11202=(gconst7*sj3);
IkReal x11203=(cj2*sj0);
IkReal x11204=(cj3*gconst7);
IkReal x11205=(gconst8*sj3);
IkReal x11206=((1.0)*sj2);
IkReal x11207=(cj3*gconst8);
IkReal x11208=(cj2*sj1);
IkReal x11209=(cj0*cj1);
IkReal x11210=((1.0)*cj0);
IkReal x11211=((1.0)*x11201);
IkReal x11212=(gconst8*x11200);
IkReal x11213=(r01*x11201);
IkReal x11214=(r11*x11201);
IkReal x11215=((1.0)*x11200);
IkReal x11216=(r21*x11201);
evalcond[0]=(((r20*x11212))+(((-1.0)*gconst7*r21*x11215))+(((-1.0)*r22*x11211)));
evalcond[1]=(sj0+(((-1.0)*gconst7*r01*x11215))+((r00*x11212))+(((-1.0)*r02*x11211)));
evalcond[2]=((((-1.0)*x11210))+(((-1.0)*gconst7*r11*x11215))+(((-1.0)*r12*x11211))+((r10*x11212)));
evalcond[3]=((((-1.0)*cj3*r22*x11215))+((r21*x11205))+x11208+((r20*x11202))+((cj1*sj2))+((x11204*x11216))+(((-1.0)*r20*x11207*x11211)));
evalcond[4]=((((-1.0)*r22*sj3*x11215))+((x11202*x11216))+(((-1.0)*r20*x11204))+((cj1*cj2))+(((-1.0)*r21*x11207))+(((-1.0)*r20*x11205*x11211))+(((-1.0)*sj1*x11206)));
evalcond[5]=(((cj2*x11209))+(((-1.0)*r00*x11207*x11211))+((x11204*x11213))+(((-1.0)*cj0*sj1*x11206))+((r00*x11202))+((r01*x11205))+(((-1.0)*cj3*r02*x11215)));
evalcond[6]=((((-1.0)*cj3*r12*x11215))+((x11204*x11214))+((r11*x11205))+(((-1.0)*sj0*sj1*x11206))+((r10*x11202))+((cj1*x11203))+(((-1.0)*r10*x11207*x11211)));
evalcond[7]=((((-1.0)*x11206*x11209))+(((-1.0)*r01*x11207))+(((-1.0)*r00*x11204))+((x11202*x11213))+(((-1.0)*r02*sj3*x11215))+(((-1.0)*r00*x11205*x11211))+(((-1.0)*x11208*x11210)));
evalcond[8]=((((-1.0)*r12*sj3*x11215))+(((-1.0)*r11*x11207))+((x11202*x11214))+(((-1.0)*sj1*x11203))+(((-1.0)*r10*x11205*x11211))+(((-1.0)*cj1*sj0*x11206))+(((-1.0)*r10*x11204)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11217=((-1.0)*r01);
IkReal x11219 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x11219)==0){
continue;
}
IkReal x11218=pow(x11219,-0.5);
CheckValue<IkReal> x11220 = IKatan2WithCheck(IkReal(x11217),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x11220.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x11220.value))));
IkReal gconst10=(x11217*x11218);
IkReal gconst11=((1.0)*r00*x11218);
CheckValue<IkReal> x11221 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x11221.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x11221.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11222=((-1.0)*r01);
CheckValue<IkReal> x11225 = IKatan2WithCheck(IkReal(x11222),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x11225.valid){
continue;
}
IkReal x11223=((1.0)*(x11225.value));
IkReal x11224=x11218;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11223)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11223)));
IkReal gconst10=(x11222*x11224);
IkReal gconst11=((1.0)*r00*x11224);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x11226=((-1.0)*r01);
CheckValue<IkReal> x11229 = IKatan2WithCheck(IkReal(x11226),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x11229.valid){
continue;
}
IkReal x11227=((1.0)*(x11229.value));
IkReal x11228=x11218;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11227)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11227)));
IkReal gconst10=(x11226*x11228);
IkReal gconst11=((1.0)*r00*x11228);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11230=((-1.0)*r01);
CheckValue<IkReal> x11233 = IKatan2WithCheck(IkReal(x11230),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x11233.valid){
continue;
}
IkReal x11231=((1.0)*(x11233.value));
IkReal x11232=x11218;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11231)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11231)));
IkReal gconst10=(x11230*x11232);
IkReal gconst11=((1.0)*r00*x11232);
IkReal x11234=r02*r02;
IkReal x11235=(r12*sj0);
IkReal x11236=x11218;
IkReal x11237=(cj0*x11236);
j4eval[0]=((IKabs((x11235+((cj0*r02)))))+(IKabs(((((-1.0)*x11237))+((x11234*x11237))+((r02*x11235*x11236))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11238=((-1.0)*r01);
CheckValue<IkReal> x11241 = IKatan2WithCheck(IkReal(x11238),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x11241.valid){
continue;
}
IkReal x11239=((1.0)*(x11241.value));
IkReal x11240=x11218;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11239)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11239)));
IkReal gconst10=(x11238*x11240);
IkReal gconst11=((1.0)*r00*x11240);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11242=((-1.0)*r01);
CheckValue<IkReal> x11245 = IKatan2WithCheck(IkReal(x11242),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x11245.valid){
continue;
}
IkReal x11243=((1.0)*(x11245.value));
IkReal x11244=x11218;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11243)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11243)));
IkReal gconst10=(x11242*x11244);
IkReal gconst11=((1.0)*r00*x11244);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11246=gconst11*gconst11;
IkReal x11247=gconst10*gconst10;
IkReal x11248=(cj3*r10);
IkReal x11249=(cj3*r11);
IkReal x11250=(r10*sj3);
IkReal x11251=(gconst11*r11*sj3);
IkReal x11252=((1.0)*gconst10*r21);
IkReal x11253=(r21*x11247);
IkReal x11254=(r20*x11246);
IkReal x11255=(gconst10*gconst11*r20);
CheckValue<IkReal> x11256=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+(((-1.0)*x11249*x11255))+((x11249*x11253))+(((-1.0)*gconst11*x11248*x11252))+((x11248*x11254)))),-1);
if(!x11256.valid){
continue;
}
CheckValue<IkReal> x11257 = IKatan2WithCheck(IkReal((((r22*x11251))+((gconst10*r22*x11250)))),IkReal(((((-1.0)*x11251*x11252))+((x11250*x11255))+(((-1.0)*x11250*x11253))+((r11*sj3*x11254)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11257.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11256.value)))+(x11257.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11258=IKsin(j4);
IkReal x11259=IKcos(j4);
IkReal x11260=(cj1*cj2);
IkReal x11261=(cj3*r10);
IkReal x11262=(cj3*r01);
IkReal x11263=((1.0)*gconst10);
IkReal x11264=(r21*sj3);
IkReal x11265=(cj3*gconst11);
IkReal x11266=(r01*sj3);
IkReal x11267=((1.0)*sj2);
IkReal x11268=(r11*sj3);
IkReal x11269=(r00*sj3);
IkReal x11270=(gconst10*sj3);
IkReal x11271=(cj2*sj1);
IkReal x11272=(gconst11*sj3);
IkReal x11273=(sj1*x11267);
IkReal x11274=((1.0)*x11259);
IkReal x11275=((1.0)*x11258);
IkReal x11276=(gconst10*x11259);
IkReal x11277=(gconst11*x11258);
evalcond[0]=((((-1.0)*r21*x11258*x11263))+(((-1.0)*r22*x11274))+((r20*x11277)));
evalcond[1]=(((r00*x11277))+(((-1.0)*r02*x11274))+(((-1.0)*r01*x11258*x11263)));
evalcond[2]=((-1.0)+((r10*x11277))+(((-1.0)*r12*x11274))+(((-1.0)*r11*x11258*x11263)));
evalcond[3]=(((r10*x11270))+(((-1.0)*gconst11*x11261*x11274))+((cj3*r11*x11276))+(((-1.0)*cj3*r12*x11275))+((gconst11*x11268)));
evalcond[4]=((((-1.0)*r12*sj3*x11275))+((x11268*x11276))+(((-1.0)*x11261*x11263))+(((-1.0)*r10*x11272*x11274))+(((-1.0)*r11*x11265)));
evalcond[5]=(x11271+((cj1*sj2))+(((-1.0)*r20*x11265*x11274))+(((-1.0)*cj3*r22*x11275))+((cj3*r21*x11276))+((gconst11*x11264))+((r20*x11270)));
evalcond[6]=(((x11262*x11276))+x11260+((gconst10*x11269))+(((-1.0)*cj3*r02*x11275))+(((-1.0)*x11273))+((gconst11*x11266))+(((-1.0)*r00*x11265*x11274)));
evalcond[7]=(x11260+(((-1.0)*cj3*r20*x11263))+((x11264*x11276))+(((-1.0)*x11273))+(((-1.0)*r20*x11272*x11274))+(((-1.0)*r21*x11265))+(((-1.0)*r22*sj3*x11275)));
evalcond[8]=((((-1.0)*x11271))+(((-1.0)*cj3*r00*x11263))+(((-1.0)*gconst11*x11269*x11274))+((x11266*x11276))+(((-1.0)*gconst11*x11262))+(((-1.0)*cj1*x11267))+(((-1.0)*r02*sj3*x11275)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11278=((1.0)*gconst10);
CheckValue<IkReal> x11279 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x11278))+((gconst11*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11279.valid){
continue;
}
CheckValue<IkReal> x11280=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x11278))+(((-1.0)*gconst11*r01)))),-1);
if(!x11280.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11279.value)+(((1.5707963267949)*(x11280.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11281=IKsin(j4);
IkReal x11282=IKcos(j4);
IkReal x11283=(cj1*cj2);
IkReal x11284=(cj3*r10);
IkReal x11285=(cj3*r01);
IkReal x11286=((1.0)*gconst10);
IkReal x11287=(r21*sj3);
IkReal x11288=(cj3*gconst11);
IkReal x11289=(r01*sj3);
IkReal x11290=((1.0)*sj2);
IkReal x11291=(r11*sj3);
IkReal x11292=(r00*sj3);
IkReal x11293=(gconst10*sj3);
IkReal x11294=(cj2*sj1);
IkReal x11295=(gconst11*sj3);
IkReal x11296=(sj1*x11290);
IkReal x11297=((1.0)*x11282);
IkReal x11298=((1.0)*x11281);
IkReal x11299=(gconst10*x11282);
IkReal x11300=(gconst11*x11281);
evalcond[0]=(((r20*x11300))+(((-1.0)*r22*x11297))+(((-1.0)*r21*x11281*x11286)));
evalcond[1]=((((-1.0)*r02*x11297))+((r00*x11300))+(((-1.0)*r01*x11281*x11286)));
evalcond[2]=((-1.0)+(((-1.0)*r11*x11281*x11286))+((r10*x11300))+(((-1.0)*r12*x11297)));
evalcond[3]=(((gconst11*x11291))+((r10*x11293))+(((-1.0)*gconst11*x11284*x11297))+((cj3*r11*x11299))+(((-1.0)*cj3*r12*x11298)));
evalcond[4]=((((-1.0)*r12*sj3*x11298))+(((-1.0)*x11284*x11286))+(((-1.0)*r10*x11295*x11297))+((x11291*x11299))+(((-1.0)*r11*x11288)));
evalcond[5]=(x11294+((cj3*r21*x11299))+((cj1*sj2))+(((-1.0)*r20*x11288*x11297))+(((-1.0)*cj3*r22*x11298))+((r20*x11293))+((gconst11*x11287)));
evalcond[6]=(x11283+(((-1.0)*r00*x11288*x11297))+(((-1.0)*x11296))+((x11285*x11299))+(((-1.0)*cj3*r02*x11298))+((gconst10*x11292))+((gconst11*x11289)));
evalcond[7]=(((x11287*x11299))+(((-1.0)*r22*sj3*x11298))+x11283+(((-1.0)*r20*x11295*x11297))+(((-1.0)*x11296))+(((-1.0)*r21*x11288))+(((-1.0)*cj3*r20*x11286)));
evalcond[8]=((((-1.0)*cj3*r00*x11286))+(((-1.0)*r02*sj3*x11298))+(((-1.0)*gconst11*x11292*x11297))+(((-1.0)*cj1*x11290))+(((-1.0)*x11294))+((x11289*x11299))+(((-1.0)*gconst11*x11285)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11301 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst10*r01))+((gconst11*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11301.valid){
continue;
}
CheckValue<IkReal> x11302=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11302.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11301.value)+(((1.5707963267949)*(x11302.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11303=IKsin(j4);
IkReal x11304=IKcos(j4);
IkReal x11305=(cj1*cj2);
IkReal x11306=(cj3*r10);
IkReal x11307=(cj3*r01);
IkReal x11308=((1.0)*gconst10);
IkReal x11309=(r21*sj3);
IkReal x11310=(cj3*gconst11);
IkReal x11311=(r01*sj3);
IkReal x11312=((1.0)*sj2);
IkReal x11313=(r11*sj3);
IkReal x11314=(r00*sj3);
IkReal x11315=(gconst10*sj3);
IkReal x11316=(cj2*sj1);
IkReal x11317=(gconst11*sj3);
IkReal x11318=(sj1*x11312);
IkReal x11319=((1.0)*x11304);
IkReal x11320=((1.0)*x11303);
IkReal x11321=(gconst10*x11304);
IkReal x11322=(gconst11*x11303);
evalcond[0]=((((-1.0)*r22*x11319))+(((-1.0)*r21*x11303*x11308))+((r20*x11322)));
evalcond[1]=((((-1.0)*r02*x11319))+(((-1.0)*r01*x11303*x11308))+((r00*x11322)));
evalcond[2]=((-1.0)+((r10*x11322))+(((-1.0)*r12*x11319))+(((-1.0)*r11*x11303*x11308)));
evalcond[3]=((((-1.0)*gconst11*x11306*x11319))+((cj3*r11*x11321))+((gconst11*x11313))+((r10*x11315))+(((-1.0)*cj3*r12*x11320)));
evalcond[4]=((((-1.0)*r12*sj3*x11320))+(((-1.0)*r10*x11317*x11319))+(((-1.0)*r11*x11310))+(((-1.0)*x11306*x11308))+((x11313*x11321)));
evalcond[5]=((((-1.0)*cj3*r22*x11320))+(((-1.0)*r20*x11310*x11319))+((cj1*sj2))+x11316+((r20*x11315))+((gconst11*x11309))+((cj3*r21*x11321)));
evalcond[6]=(x11305+((gconst11*x11311))+((gconst10*x11314))+((x11307*x11321))+(((-1.0)*cj3*r02*x11320))+(((-1.0)*x11318))+(((-1.0)*r00*x11310*x11319)));
evalcond[7]=(x11305+(((-1.0)*r20*x11317*x11319))+((x11309*x11321))+(((-1.0)*r21*x11310))+(((-1.0)*x11318))+(((-1.0)*r22*sj3*x11320))+(((-1.0)*cj3*r20*x11308)));
evalcond[8]=(((x11311*x11321))+(((-1.0)*cj3*r00*x11308))+(((-1.0)*r02*sj3*x11320))+(((-1.0)*cj1*x11312))+(((-1.0)*gconst11*x11307))+(((-1.0)*gconst11*x11314*x11319))+(((-1.0)*x11316)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x11323=((-1.0)*r01);
CheckValue<IkReal> x11326 = IKatan2WithCheck(IkReal(x11323),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x11326.valid){
continue;
}
IkReal x11324=((1.0)*(x11326.value));
IkReal x11325=x11218;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11324)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11324)));
IkReal gconst10=(x11323*x11325);
IkReal gconst11=((1.0)*r00*x11325);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11327=((-1.0)*r01);
CheckValue<IkReal> x11330 = IKatan2WithCheck(IkReal(x11327),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x11330.valid){
continue;
}
IkReal x11328=((1.0)*(x11330.value));
IkReal x11329=x11218;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11328)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11328)));
IkReal gconst10=(x11327*x11329);
IkReal gconst11=((1.0)*r00*x11329);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11331=gconst11*gconst11;
IkReal x11332=gconst10*gconst10;
IkReal x11333=(cj3*r10);
IkReal x11334=(cj3*r11);
IkReal x11335=(r10*sj3);
IkReal x11336=(gconst11*r11*sj3);
IkReal x11337=((1.0)*gconst10*r21);
IkReal x11338=(r21*x11332);
IkReal x11339=(r20*x11331);
IkReal x11340=(gconst10*gconst11*r20);
CheckValue<IkReal> x11341 = IKatan2WithCheck(IkReal((((gconst10*r22*x11335))+((r22*x11336)))),IkReal(((((-1.0)*x11336*x11337))+((x11335*x11340))+((r11*sj3*x11339))+(((-1.0)*x11335*x11338)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11341.valid){
continue;
}
CheckValue<IkReal> x11342=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+((x11334*x11338))+(((-1.0)*x11334*x11340))+(((-1.0)*gconst11*x11333*x11337))+((x11333*x11339)))),-1);
if(!x11342.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11341.value)+(((1.5707963267949)*(x11342.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11343=IKsin(j4);
IkReal x11344=IKcos(j4);
IkReal x11345=(cj2*sj1);
IkReal x11346=(cj1*sj2);
IkReal x11347=(cj3*r10);
IkReal x11348=(cj3*r01);
IkReal x11349=((1.0)*gconst10);
IkReal x11350=(r21*sj3);
IkReal x11351=(cj3*gconst11);
IkReal x11352=(r01*sj3);
IkReal x11353=(cj1*cj2);
IkReal x11354=(gconst11*sj3);
IkReal x11355=(gconst10*sj3);
IkReal x11356=(sj1*sj2);
IkReal x11357=((1.0)*x11344);
IkReal x11358=((1.0)*x11343);
IkReal x11359=(gconst10*x11344);
IkReal x11360=(gconst11*x11343);
IkReal x11361=(x11346+x11345);
evalcond[0]=((((-1.0)*r21*x11343*x11349))+(((-1.0)*r22*x11357))+((r20*x11360)));
evalcond[1]=(((r00*x11360))+(((-1.0)*r02*x11357))+(((-1.0)*r01*x11343*x11349)));
evalcond[2]=((1.0)+(((-1.0)*r12*x11357))+(((-1.0)*r11*x11343*x11349))+((r10*x11360)));
evalcond[3]=(((r10*x11355))+(((-1.0)*cj3*r12*x11358))+((r11*x11354))+(((-1.0)*gconst11*x11347*x11357))+((cj3*r11*x11359)));
evalcond[4]=((((-1.0)*r10*x11354*x11357))+((r11*x11344*x11355))+(((-1.0)*x11347*x11349))+(((-1.0)*r11*x11351))+(((-1.0)*r12*sj3*x11358)));
evalcond[5]=(((gconst11*x11350))+(((-1.0)*r20*x11351*x11357))+x11361+((r20*x11355))+(((-1.0)*cj3*r22*x11358))+((cj3*r21*x11359)));
evalcond[6]=(((gconst11*x11352))+x11356+(((-1.0)*cj3*r02*x11358))+(((-1.0)*x11353))+(((-1.0)*r00*x11351*x11357))+((r00*x11355))+((x11348*x11359)));
evalcond[7]=(x11361+((x11352*x11359))+(((-1.0)*r00*x11354*x11357))+(((-1.0)*cj3*r00*x11349))+(((-1.0)*gconst11*x11348))+(((-1.0)*r02*sj3*x11358)));
evalcond[8]=((((-1.0)*r20*x11354*x11357))+x11353+(((-1.0)*r22*sj3*x11358))+(((-1.0)*x11356))+(((-1.0)*r21*x11351))+((x11350*x11359))+(((-1.0)*cj3*r20*x11349)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11362=((1.0)*gconst10);
CheckValue<IkReal> x11363=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11362))+(((-1.0)*gconst11*r21)))),-1);
if(!x11363.valid){
continue;
}
CheckValue<IkReal> x11364 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x11362))+((gconst11*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11364.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11363.value)))+(x11364.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11365=IKsin(j4);
IkReal x11366=IKcos(j4);
IkReal x11367=(cj2*sj1);
IkReal x11368=(cj1*sj2);
IkReal x11369=(cj3*r10);
IkReal x11370=(cj3*r01);
IkReal x11371=((1.0)*gconst10);
IkReal x11372=(r21*sj3);
IkReal x11373=(cj3*gconst11);
IkReal x11374=(r01*sj3);
IkReal x11375=(cj1*cj2);
IkReal x11376=(gconst11*sj3);
IkReal x11377=(gconst10*sj3);
IkReal x11378=(sj1*sj2);
IkReal x11379=((1.0)*x11366);
IkReal x11380=((1.0)*x11365);
IkReal x11381=(gconst10*x11366);
IkReal x11382=(gconst11*x11365);
IkReal x11383=(x11368+x11367);
evalcond[0]=((((-1.0)*r22*x11379))+((r20*x11382))+(((-1.0)*r21*x11365*x11371)));
evalcond[1]=((((-1.0)*r02*x11379))+(((-1.0)*r01*x11365*x11371))+((r00*x11382)));
evalcond[2]=((1.0)+((r10*x11382))+(((-1.0)*r11*x11365*x11371))+(((-1.0)*r12*x11379)));
evalcond[3]=((((-1.0)*gconst11*x11369*x11379))+(((-1.0)*cj3*r12*x11380))+((r10*x11377))+((r11*x11376))+((cj3*r11*x11381)));
evalcond[4]=((((-1.0)*r11*x11373))+(((-1.0)*r12*sj3*x11380))+(((-1.0)*x11369*x11371))+((r11*x11366*x11377))+(((-1.0)*r10*x11376*x11379)));
evalcond[5]=(((r20*x11377))+((cj3*r21*x11381))+x11383+(((-1.0)*r20*x11373*x11379))+((gconst11*x11372))+(((-1.0)*cj3*r22*x11380)));
evalcond[6]=(((r00*x11377))+(((-1.0)*x11375))+(((-1.0)*cj3*r02*x11380))+x11378+((gconst11*x11374))+((x11370*x11381))+(((-1.0)*r00*x11373*x11379)));
evalcond[7]=((((-1.0)*r02*sj3*x11380))+x11383+(((-1.0)*gconst11*x11370))+(((-1.0)*r00*x11376*x11379))+(((-1.0)*cj3*r00*x11371))+((x11374*x11381)));
evalcond[8]=((((-1.0)*x11378))+(((-1.0)*r21*x11373))+x11375+(((-1.0)*cj3*r20*x11371))+(((-1.0)*r20*x11376*x11379))+(((-1.0)*r22*sj3*x11380))+((x11372*x11381)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11384=IKPowWithIntegerCheck(IKsign((((gconst10*r00))+((gconst11*r01)))),-1);
if(!x11384.valid){
continue;
}
CheckValue<IkReal> x11385 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst11*r20))+(((-1.0)*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11385.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11384.value)))+(x11385.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11386=IKsin(j4);
IkReal x11387=IKcos(j4);
IkReal x11388=(cj2*sj1);
IkReal x11389=(cj1*sj2);
IkReal x11390=(cj3*r10);
IkReal x11391=(cj3*r01);
IkReal x11392=((1.0)*gconst10);
IkReal x11393=(r21*sj3);
IkReal x11394=(cj3*gconst11);
IkReal x11395=(r01*sj3);
IkReal x11396=(cj1*cj2);
IkReal x11397=(gconst11*sj3);
IkReal x11398=(gconst10*sj3);
IkReal x11399=(sj1*sj2);
IkReal x11400=((1.0)*x11387);
IkReal x11401=((1.0)*x11386);
IkReal x11402=(gconst10*x11387);
IkReal x11403=(gconst11*x11386);
IkReal x11404=(x11388+x11389);
evalcond[0]=(((r20*x11403))+(((-1.0)*r22*x11400))+(((-1.0)*r21*x11386*x11392)));
evalcond[1]=((((-1.0)*r02*x11400))+(((-1.0)*r01*x11386*x11392))+((r00*x11403)));
evalcond[2]=((1.0)+((r10*x11403))+(((-1.0)*r11*x11386*x11392))+(((-1.0)*r12*x11400)));
evalcond[3]=(((r11*x11397))+((cj3*r11*x11402))+(((-1.0)*gconst11*x11390*x11400))+((r10*x11398))+(((-1.0)*cj3*r12*x11401)));
evalcond[4]=(((r11*x11387*x11398))+(((-1.0)*x11390*x11392))+(((-1.0)*r10*x11397*x11400))+(((-1.0)*r12*sj3*x11401))+(((-1.0)*r11*x11394)));
evalcond[5]=(x11404+((r20*x11398))+((cj3*r21*x11402))+(((-1.0)*cj3*r22*x11401))+((gconst11*x11393))+(((-1.0)*r20*x11394*x11400)));
evalcond[6]=((((-1.0)*r00*x11394*x11400))+((r00*x11398))+x11399+(((-1.0)*x11396))+(((-1.0)*cj3*r02*x11401))+((gconst11*x11395))+((x11391*x11402)));
evalcond[7]=(x11404+(((-1.0)*cj3*r00*x11392))+(((-1.0)*r02*sj3*x11401))+((x11395*x11402))+(((-1.0)*r00*x11397*x11400))+(((-1.0)*gconst11*x11391)));
evalcond[8]=((((-1.0)*r22*sj3*x11401))+x11396+(((-1.0)*x11399))+(((-1.0)*r21*x11394))+(((-1.0)*r20*x11397*x11400))+(((-1.0)*cj3*r20*x11392))+((x11393*x11402)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11405=((-1.0)*r01);
IkReal x11406=((-1.0)*py);
CheckValue<IkReal> x11408 = IKatan2WithCheck(IkReal(x11405),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x11408.valid){
continue;
}
IkReal x11407=((1.0)*(x11408.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11407)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11406);
rxp0_2=(py*r00);
rxp1_0=(r21*x11406);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11407)));
IkReal gconst10=x11405;
IkReal gconst11=((1.0)*r00);
j4eval[0]=1.0;
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11409=((-1.0)*r01);
IkReal x11410=((-1.0)*py);
CheckValue<IkReal> x11412 = IKatan2WithCheck(IkReal(x11409),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x11412.valid){
continue;
}
IkReal x11411=((1.0)*(x11412.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11411)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11410);
rxp0_2=(py*r00);
rxp1_0=(r21*x11410);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11411)));
IkReal gconst10=x11409;
IkReal gconst11=((1.0)*r00);
IkReal x11413=((1.0)*cj3);
j4eval[0]=1.0;
j4eval[1]=((((-1.0)*r01*r21*x11413))+(((-1.0)*r00*r20*x11413)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11414=((-1.0)*r01);
IkReal x11415=((-1.0)*py);
CheckValue<IkReal> x11417 = IKatan2WithCheck(IkReal(x11414),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x11417.valid){
continue;
}
IkReal x11416=((1.0)*(x11417.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11416)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11415);
rxp0_2=(py*r00);
rxp1_0=(r21*x11415);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11416)));
IkReal gconst10=x11414;
IkReal gconst11=((1.0)*r00);
j4eval[0]=cj3;
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11418=((-1.0)*r01);
IkReal x11419=((-1.0)*py);
CheckValue<IkReal> x11421 = IKatan2WithCheck(IkReal(x11418),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x11421.valid){
continue;
}
IkReal x11420=((1.0)*(x11421.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11420)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11419);
rxp0_2=(py*r00);
rxp1_0=(r21*x11419);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11420)));
IkReal gconst10=x11418;
IkReal gconst11=((1.0)*r00);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11422=((-1.0)*r01);
IkReal x11423=((-1.0)*py);
CheckValue<IkReal> x11425 = IKatan2WithCheck(IkReal(x11422),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x11425.valid){
continue;
}
IkReal x11424=((1.0)*(x11425.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11424)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11423);
rxp0_2=(py*r00);
rxp1_0=(r21*x11423);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11424)));
IkReal gconst10=x11422;
IkReal gconst11=((1.0)*r00);
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11426=((-1.0)*r01);
IkReal x11427=((-1.0)*py);
CheckValue<IkReal> x11429 = IKatan2WithCheck(IkReal(x11426),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x11429.valid){
continue;
}
IkReal x11428=((1.0)*(x11429.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11428)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11427);
rxp0_2=(py*r00);
rxp1_0=(r21*x11427);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11428)));
IkReal gconst10=x11426;
IkReal gconst11=((1.0)*r00);
j4eval[0]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11432=IKPowWithIntegerCheck((((gconst10*r01))+(((-1.0)*gconst11*r00))),-1);
if(!x11432.valid){
continue;
}
IkReal x11430=x11432.value;
IkReal x11431=(cj0*x11430);
cj4array[0]=(((cj1*sj2*x11431))+((cj2*sj1*x11431)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11433=IKsin(j4);
IkReal x11434=IKcos(j4);
IkReal x11435=(gconst10*r21);
IkReal x11436=(gconst11*r20);
IkReal x11437=((1.0)*x11434);
IkReal x11438=((1.0)*x11433);
evalcond[0]=((-1.0)*r12*x11433);
evalcond[1]=((((-1.0)*r12*x11437))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*x11435*x11438))+((x11433*x11436)));
evalcond[3]=(((gconst11*r00*x11433))+(((-1.0)*gconst10*r01*x11438)));
evalcond[4]=(((x11434*x11435))+(((-1.0)*sj1*sj2))+(((-1.0)*x11436*x11437))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11440=IKPowWithIntegerCheck((((gconst10*r21))+(((-1.0)*gconst11*r20))),-1);
if(!x11440.valid){
continue;
}
IkReal x11439=x11440.value;
cj4array[0]=((((-1.0)*cj1*cj2*x11439))+((sj1*sj2*x11439)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11441=IKsin(j4);
IkReal x11442=IKcos(j4);
IkReal x11443=(gconst10*r01);
IkReal x11444=((1.0)*cj0);
IkReal x11445=(gconst11*x11441);
IkReal x11446=((1.0)*x11442);
IkReal x11447=((1.0)*x11441);
evalcond[0]=((-1.0)*r12*x11441);
evalcond[1]=((((-1.0)*r12*x11446))+(((-1.0)*x11444)));
evalcond[2]=(((r20*x11445))+(((-1.0)*gconst10*r21*x11447)));
evalcond[3]=(((r00*x11445))+(((-1.0)*x11443*x11447)));
evalcond[4]=((((-1.0)*cj1*sj2*x11444))+(((-1.0)*gconst11*r00*x11446))+((x11442*x11443))+(((-1.0)*cj2*sj1*x11444)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11448=IKPowWithIntegerCheck(r12,-1);
if(!x11448.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x11448.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11449=IKsin(j4);
IkReal x11450=IKcos(j4);
IkReal x11451=((1.0)*sj1);
IkReal x11452=(gconst11*r20);
IkReal x11453=(gconst11*r00);
IkReal x11454=(gconst10*x11450);
IkReal x11455=((1.0)*x11450);
IkReal x11456=((1.0)*gconst10*x11449);
evalcond[0]=((-1.0)*r12*x11449);
evalcond[1]=(((x11449*x11452))+(((-1.0)*r21*x11456)));
evalcond[2]=(((x11449*x11453))+(((-1.0)*r01*x11456)));
evalcond[3]=((((-1.0)*sj2*x11451))+(((-1.0)*x11452*x11455))+((r21*x11454))+((cj1*cj2)));
evalcond[4]=((((-1.0)*cj0*cj1*sj2))+(((-1.0)*x11453*x11455))+((r01*x11454))+(((-1.0)*cj0*cj2*x11451)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11457=((-1.0)*r01);
IkReal x11458=((-1.0)*py);
CheckValue<IkReal> x11460 = IKatan2WithCheck(IkReal(x11457),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x11460.valid){
continue;
}
IkReal x11459=((1.0)*(x11460.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11459)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11458);
rxp0_2=(py*r00);
rxp1_0=(r21*x11458);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11459)));
IkReal gconst10=x11457;
IkReal gconst11=((1.0)*r00);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11461=((-1.0)*r01);
IkReal x11462=((-1.0)*py);
CheckValue<IkReal> x11464 = IKatan2WithCheck(IkReal(x11461),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x11464.valid){
continue;
}
IkReal x11463=((1.0)*(x11464.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11463)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11462);
rxp0_2=(py*r00);
rxp1_0=(r21*x11462);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11463)));
IkReal gconst10=x11461;
IkReal gconst11=((1.0)*r00);
j4eval[0]=((((1.0)*r01*r21))+(((1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11465=((-1.0)*r01);
IkReal x11466=((-1.0)*py);
CheckValue<IkReal> x11468 = IKatan2WithCheck(IkReal(x11465),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x11468.valid){
continue;
}
IkReal x11467=((1.0)*(x11468.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11467)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11466);
rxp0_2=(py*r00);
rxp1_0=(r21*x11466);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11467)));
IkReal gconst10=x11465;
IkReal gconst11=((1.0)*r00);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11471=IKPowWithIntegerCheck(((((-1.0)*gconst10*r01))+((gconst11*r00))),-1);
if(!x11471.valid){
continue;
}
IkReal x11469=x11471.value;
IkReal x11470=(cj0*x11469);
cj4array[0]=(((cj1*sj2*x11470))+((cj2*sj1*x11470)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11472=IKsin(j4);
IkReal x11473=IKcos(j4);
IkReal x11474=(gconst11*r20);
IkReal x11475=((1.0)*x11473);
IkReal x11476=((1.0)*gconst10*x11472);
evalcond[0]=(r12*x11472);
evalcond[1]=((((-1.0)*r12*x11475))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r21*x11476))+((x11472*x11474)));
evalcond[3]=(((gconst11*r00*x11472))+(((-1.0)*r01*x11476)));
evalcond[4]=(((x11473*x11474))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*gconst10*r21*x11475)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11478=IKPowWithIntegerCheck((((gconst11*r20))+(((-1.0)*gconst10*r21))),-1);
if(!x11478.valid){
continue;
}
IkReal x11477=x11478.value;
cj4array[0]=(((sj1*sj2*x11477))+(((-1.0)*cj1*cj2*x11477)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11479=IKsin(j4);
IkReal x11480=IKcos(j4);
IkReal x11481=((1.0)*cj0);
IkReal x11482=((1.0)*gconst10*r01);
IkReal x11483=(gconst11*x11479);
evalcond[0]=(r12*x11479);
evalcond[1]=((((-1.0)*r12*x11480))+(((-1.0)*x11481)));
evalcond[2]=(((r20*x11483))+(((-1.0)*gconst10*r21*x11479)));
evalcond[3]=((((-1.0)*x11479*x11482))+((r00*x11483)));
evalcond[4]=((((-1.0)*cj1*sj2*x11481))+(((-1.0)*x11480*x11482))+(((-1.0)*cj2*sj1*x11481))+((gconst11*r00*x11480)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11484=IKPowWithIntegerCheck(r12,-1);
if(!x11484.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x11484.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11485=IKsin(j4);
IkReal x11486=IKcos(j4);
IkReal x11487=((1.0)*sj1);
IkReal x11488=(gconst11*r20);
IkReal x11489=(gconst11*r00);
IkReal x11490=((1.0)*gconst10*r01);
IkReal x11491=((1.0)*gconst10*r21);
evalcond[0]=(r12*x11485);
evalcond[1]=((((-1.0)*x11485*x11491))+((x11485*x11488)));
evalcond[2]=((((-1.0)*x11485*x11490))+((x11485*x11489)));
evalcond[3]=(((x11486*x11488))+(((-1.0)*sj2*x11487))+((cj1*cj2))+(((-1.0)*x11486*x11491)));
evalcond[4]=(((x11486*x11489))+(((-1.0)*cj0*cj1*sj2))+(((-1.0)*cj0*cj2*x11487))+(((-1.0)*x11486*x11490)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11493=IKPowWithIntegerCheck(r12,-1);
if(!x11493.valid){
continue;
}
IkReal x11492=x11493.value;
CheckValue<IkReal> x11494=IKPowWithIntegerCheck(cj3,-1);
if(!x11494.valid){
continue;
}
if( IKabs((x11492*(x11494.value)*((((cj1*cj2*sj0))+(((-1.0)*sj0*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x11492)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x11492*(x11494.value)*((((cj1*cj2*sj0))+(((-1.0)*sj0*sj1*sj2))))))+IKsqr(((-1.0)*cj0*x11492))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x11492*(x11494.value)*((((cj1*cj2*sj0))+(((-1.0)*sj0*sj1*sj2))))), ((-1.0)*cj0*x11492));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11495=IKsin(j4);
IkReal x11496=IKcos(j4);
IkReal x11497=((1.0)*sj3);
IkReal x11498=(cj1*cj2);
IkReal x11499=(cj3*r01);
IkReal x11500=(r21*sj3);
IkReal x11501=((1.0)*cj3);
IkReal x11502=(r01*sj3);
IkReal x11503=((1.0)*sj1);
IkReal x11504=(gconst10*sj3);
IkReal x11505=(cj1*sj2);
IkReal x11506=((1.0)*cj0);
IkReal x11507=(r12*x11495);
IkReal x11508=(gconst10*x11496);
IkReal x11509=(gconst11*x11496);
IkReal x11510=(gconst11*x11495);
IkReal x11511=((1.0)*gconst10*x11495);
evalcond[0]=((((-1.0)*x11506))+(((-1.0)*r12*x11496)));
evalcond[1]=(((r20*x11510))+(((-1.0)*r21*x11511)));
evalcond[2]=(sj0+(((-1.0)*r01*x11511))+((r00*x11510)));
evalcond[3]=((((-1.0)*x11501*x11507))+(((-1.0)*sj0*sj2*x11503))+((sj0*x11498)));
evalcond[4]=((((-1.0)*cj2*sj0*x11503))+(((-1.0)*sj0*x11505))+(((-1.0)*x11497*x11507)));
evalcond[5]=(((cj2*sj1))+x11505+((cj3*r21*x11508))+((gconst11*x11500))+((r20*x11504))+(((-1.0)*r20*x11501*x11509)));
evalcond[6]=((((-1.0)*r20*x11497*x11509))+(((-1.0)*gconst11*r21*x11501))+x11498+(((-1.0)*gconst10*r20*x11501))+((x11500*x11508))+(((-1.0)*sj2*x11503)));
evalcond[7]=((((-1.0)*cj0*sj2*x11503))+(((-1.0)*r00*x11501*x11509))+((r00*x11504))+((cj0*x11498))+((gconst11*x11502))+((x11499*x11508)));
evalcond[8]=((((-1.0)*gconst11*x11499))+((x11502*x11508))+(((-1.0)*x11505*x11506))+(((-1.0)*cj0*cj2*x11503))+(((-1.0)*r00*x11497*x11509))+(((-1.0)*gconst10*r00*x11501)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11512=((1.0)*r20);
CheckValue<IkReal> x11513=IKPowWithIntegerCheck(((((-1.0)*gconst10*r01))+((gconst11*r00))),-1);
if(!x11513.valid){
continue;
}
CheckValue<IkReal> x11514=IKPowWithIntegerCheck((((cj3*gconst10*r21))+(((-1.0)*cj3*gconst11*x11512))),-1);
if(!x11514.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x11513.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11514.value)*(((((-1.0)*gconst10*sj3*x11512))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst11*r21*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x11513.value)))+IKsqr(((x11514.value)*(((((-1.0)*gconst10*sj3*x11512))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst11*r21*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x11513.value)), ((x11514.value)*(((((-1.0)*gconst10*sj3*x11512))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst11*r21*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11515=IKsin(j4);
IkReal x11516=IKcos(j4);
IkReal x11517=((1.0)*sj3);
IkReal x11518=(cj1*cj2);
IkReal x11519=(cj3*r01);
IkReal x11520=(r21*sj3);
IkReal x11521=((1.0)*cj3);
IkReal x11522=(r01*sj3);
IkReal x11523=((1.0)*sj1);
IkReal x11524=(gconst10*sj3);
IkReal x11525=(cj1*sj2);
IkReal x11526=((1.0)*cj0);
IkReal x11527=(r12*x11515);
IkReal x11528=(gconst10*x11516);
IkReal x11529=(gconst11*x11516);
IkReal x11530=(gconst11*x11515);
IkReal x11531=((1.0)*gconst10*x11515);
evalcond[0]=((((-1.0)*r12*x11516))+(((-1.0)*x11526)));
evalcond[1]=(((r20*x11530))+(((-1.0)*r21*x11531)));
evalcond[2]=(sj0+((r00*x11530))+(((-1.0)*r01*x11531)));
evalcond[3]=((((-1.0)*x11521*x11527))+((sj0*x11518))+(((-1.0)*sj0*sj2*x11523)));
evalcond[4]=((((-1.0)*cj2*sj0*x11523))+(((-1.0)*x11517*x11527))+(((-1.0)*sj0*x11525)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r20*x11521*x11529))+x11525+((cj3*r21*x11528))+((r20*x11524))+((gconst11*x11520)));
evalcond[6]=(x11518+(((-1.0)*r20*x11517*x11529))+(((-1.0)*gconst10*r20*x11521))+((x11520*x11528))+(((-1.0)*gconst11*r21*x11521))+(((-1.0)*sj2*x11523)));
evalcond[7]=((((-1.0)*cj0*sj2*x11523))+(((-1.0)*r00*x11521*x11529))+((cj0*x11518))+((x11519*x11528))+((r00*x11524))+((gconst11*x11522)));
evalcond[8]=((((-1.0)*r00*x11517*x11529))+(((-1.0)*gconst10*r00*x11521))+((x11522*x11528))+(((-1.0)*cj0*cj2*x11523))+(((-1.0)*gconst11*x11519))+(((-1.0)*x11525*x11526)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11532=IKPowWithIntegerCheck(((((-1.0)*gconst10*r01))+((gconst11*r00))),-1);
if(!x11532.valid){
continue;
}
CheckValue<IkReal> x11533=IKPowWithIntegerCheck(r12,-1);
if(!x11533.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x11532.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x11533.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x11532.value)))+IKsqr(((-1.0)*cj0*(x11533.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x11532.value)), ((-1.0)*cj0*(x11533.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11534=IKsin(j4);
IkReal x11535=IKcos(j4);
IkReal x11536=((1.0)*sj3);
IkReal x11537=(cj1*cj2);
IkReal x11538=(cj3*r01);
IkReal x11539=(r21*sj3);
IkReal x11540=((1.0)*cj3);
IkReal x11541=(r01*sj3);
IkReal x11542=((1.0)*sj1);
IkReal x11543=(gconst10*sj3);
IkReal x11544=(cj1*sj2);
IkReal x11545=((1.0)*cj0);
IkReal x11546=(r12*x11534);
IkReal x11547=(gconst10*x11535);
IkReal x11548=(gconst11*x11535);
IkReal x11549=(gconst11*x11534);
IkReal x11550=((1.0)*gconst10*x11534);
evalcond[0]=((((-1.0)*r12*x11535))+(((-1.0)*x11545)));
evalcond[1]=((((-1.0)*r21*x11550))+((r20*x11549)));
evalcond[2]=(sj0+((r00*x11549))+(((-1.0)*r01*x11550)));
evalcond[3]=((((-1.0)*x11540*x11546))+(((-1.0)*sj0*sj2*x11542))+((sj0*x11537)));
evalcond[4]=((((-1.0)*cj2*sj0*x11542))+(((-1.0)*x11536*x11546))+(((-1.0)*sj0*x11544)));
evalcond[5]=(((cj2*sj1))+((cj3*r21*x11547))+(((-1.0)*r20*x11540*x11548))+x11544+((r20*x11543))+((gconst11*x11539)));
evalcond[6]=(x11537+((x11539*x11547))+(((-1.0)*gconst10*r20*x11540))+(((-1.0)*sj2*x11542))+(((-1.0)*r20*x11536*x11548))+(((-1.0)*gconst11*r21*x11540)));
evalcond[7]=(((r00*x11543))+((x11538*x11547))+((gconst11*x11541))+(((-1.0)*cj0*sj2*x11542))+(((-1.0)*r00*x11540*x11548))+((cj0*x11537)));
evalcond[8]=((((-1.0)*gconst10*r00*x11540))+(((-1.0)*gconst11*x11538))+(((-1.0)*cj0*cj2*x11542))+((x11541*x11547))+(((-1.0)*r00*x11536*x11548))+(((-1.0)*x11544*x11545)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11551=((-1.0)*r01);
CheckValue<IkReal> x11554 = IKatan2WithCheck(IkReal(x11551),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x11554.valid){
continue;
}
IkReal x11552=((1.0)*(x11554.value));
IkReal x11553=x11218;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11552)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11552)));
IkReal gconst10=(x11551*x11553);
IkReal gconst11=((1.0)*r00*x11553);
IkReal x11555=r02*r02;
IkReal x11556=(r12*sj0);
IkReal x11557=x11218;
IkReal x11558=(cj0*x11557);
j4eval[0]=((IKabs((((r02*x11556*x11557))+((x11555*x11558))+(((-1.0)*x11558)))))+(IKabs((x11556+((cj0*r02))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11559=(sj1*sj2);
IkReal x11560=((1.0)*r21*sj3);
IkReal x11561=(gconst11*r20*sj3);
IkReal x11562=(gconst10*r21*sj3);
IkReal x11563=(cj3*gconst10*r20);
IkReal x11564=(cj3*gconst11*r21);
IkReal x11565=((1.0)*cj1*cj2);
CheckValue<IkReal> x11566=IKPowWithIntegerCheck(((((-1.0)*gconst11*r00*x11561))+((gconst10*r01*x11561))+(((-1.0)*r01*x11560*(gconst10*gconst10)))+((gconst11*r00*x11562))),-1);
if(!x11566.valid){
continue;
}
CheckValue<IkReal> x11567=IKPowWithIntegerCheck((x11562+(((-1.0)*x11561))),-1);
if(!x11567.valid){
continue;
}
if( IKabs(((x11566.value)*((((r02*x11559))+((sj0*x11561))+((r02*x11563))+((r02*x11564))+(((-1.0)*gconst10*sj0*x11560))+(((-1.0)*r02*x11565)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11567.value)*((x11563+x11564+x11559+(((-1.0)*x11565)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11566.value)*((((r02*x11559))+((sj0*x11561))+((r02*x11563))+((r02*x11564))+(((-1.0)*gconst10*sj0*x11560))+(((-1.0)*r02*x11565))))))+IKsqr(((x11567.value)*((x11563+x11564+x11559+(((-1.0)*x11565))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11566.value)*((((r02*x11559))+((sj0*x11561))+((r02*x11563))+((r02*x11564))+(((-1.0)*gconst10*sj0*x11560))+(((-1.0)*r02*x11565))))), ((x11567.value)*((x11563+x11564+x11559+(((-1.0)*x11565))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11568=IKsin(j4);
IkReal x11569=IKcos(j4);
IkReal x11570=((1.0)*sj3);
IkReal x11571=(cj1*cj2);
IkReal x11572=((1.0)*r10);
IkReal x11573=(gconst10*r01);
IkReal x11574=(cj3*gconst10);
IkReal x11575=(gconst10*r21);
IkReal x11576=((1.0)*gconst11);
IkReal x11577=(gconst11*sj3);
IkReal x11578=((1.0)*sj2);
IkReal x11579=(gconst10*r11);
IkReal x11580=(gconst10*sj3);
IkReal x11581=(cj2*sj1);
IkReal x11582=((1.0)*cj3);
IkReal x11583=((1.0)*cj0);
IkReal x11584=(r12*x11568);
IkReal x11585=(cj3*x11569);
IkReal x11586=(sj3*x11569);
IkReal x11587=(gconst11*x11568);
IkReal x11588=(gconst11*x11569);
IkReal x11589=((1.0)*x11569);
IkReal x11590=(r02*x11568);
IkReal x11591=((1.0)*x11568);
evalcond[0]=(((r20*x11587))+(((-1.0)*x11575*x11591)));
evalcond[1]=(sj0+(((-1.0)*x11573*x11591))+(((-1.0)*r02*x11589))+((r00*x11587)));
evalcond[2]=((((-1.0)*x11583))+(((-1.0)*r12*x11589))+((r10*x11587))+(((-1.0)*x11579*x11591)));
evalcond[3]=(((r20*x11580))+x11581+((cj1*sj2))+((r21*x11569*x11574))+((r21*x11577))+(((-1.0)*r20*x11576*x11585)));
evalcond[4]=(((x11575*x11586))+x11571+(((-1.0)*r20*x11574))+(((-1.0)*cj3*r21*x11576))+(((-1.0)*sj1*x11578))+(((-1.0)*r20*x11570*x11588)));
evalcond[5]=(((x11573*x11585))+((r01*x11577))+(((-1.0)*x11582*x11590))+(((-1.0)*cj0*sj1*x11578))+(((-1.0)*r00*x11576*x11585))+((cj0*x11571))+((r00*x11580)));
evalcond[6]=(((sj0*x11571))+((r11*x11569*x11574))+(((-1.0)*sj0*sj1*x11578))+((r11*x11577))+((r10*x11580))+(((-1.0)*gconst11*x11572*x11585))+(((-1.0)*x11582*x11584)));
evalcond[7]=(((x11573*x11586))+(((-1.0)*cj0*cj1*x11578))+(((-1.0)*cj3*r01*x11576))+(((-1.0)*x11570*x11590))+(((-1.0)*r00*x11570*x11588))+(((-1.0)*x11581*x11583))+(((-1.0)*r00*x11574)));
evalcond[8]=((((-1.0)*cj3*r11*x11576))+(((-1.0)*x11570*x11584))+(((-1.0)*r10*x11570*x11588))+((x11579*x11586))+(((-1.0)*x11572*x11574))+(((-1.0)*sj0*x11581))+(((-1.0)*cj1*sj0*x11578)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11592=((1.0)*gconst10);
CheckValue<IkReal> x11593 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x11592))+((cj0*gconst11*r00))+(((-1.0)*r11*sj0*x11592))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11593.valid){
continue;
}
CheckValue<IkReal> x11594=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11594.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11593.value)+(((1.5707963267949)*(x11594.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11595=IKsin(j4);
IkReal x11596=IKcos(j4);
IkReal x11597=((1.0)*sj3);
IkReal x11598=(cj1*cj2);
IkReal x11599=((1.0)*r10);
IkReal x11600=(gconst10*r01);
IkReal x11601=(cj3*gconst10);
IkReal x11602=(gconst10*r21);
IkReal x11603=((1.0)*gconst11);
IkReal x11604=(gconst11*sj3);
IkReal x11605=((1.0)*sj2);
IkReal x11606=(gconst10*r11);
IkReal x11607=(gconst10*sj3);
IkReal x11608=(cj2*sj1);
IkReal x11609=((1.0)*cj3);
IkReal x11610=((1.0)*cj0);
IkReal x11611=(r12*x11595);
IkReal x11612=(cj3*x11596);
IkReal x11613=(sj3*x11596);
IkReal x11614=(gconst11*x11595);
IkReal x11615=(gconst11*x11596);
IkReal x11616=((1.0)*x11596);
IkReal x11617=(r02*x11595);
IkReal x11618=((1.0)*x11595);
evalcond[0]=((((-1.0)*x11602*x11618))+((r20*x11614)));
evalcond[1]=(sj0+(((-1.0)*x11600*x11618))+((r00*x11614))+(((-1.0)*r02*x11616)));
evalcond[2]=((((-1.0)*r12*x11616))+(((-1.0)*x11610))+(((-1.0)*x11606*x11618))+((r10*x11614)));
evalcond[3]=(x11608+((r21*x11596*x11601))+((cj1*sj2))+((r21*x11604))+(((-1.0)*r20*x11603*x11612))+((r20*x11607)));
evalcond[4]=((((-1.0)*r20*x11597*x11615))+x11598+(((-1.0)*cj3*r21*x11603))+(((-1.0)*r20*x11601))+((x11602*x11613))+(((-1.0)*sj1*x11605)));
evalcond[5]=((((-1.0)*r00*x11603*x11612))+(((-1.0)*x11609*x11617))+((r01*x11604))+((r00*x11607))+((x11600*x11612))+(((-1.0)*cj0*sj1*x11605))+((cj0*x11598)));
evalcond[6]=((((-1.0)*x11609*x11611))+((sj0*x11598))+((r10*x11607))+((r11*x11596*x11601))+(((-1.0)*gconst11*x11599*x11612))+(((-1.0)*sj0*sj1*x11605))+((r11*x11604)));
evalcond[7]=((((-1.0)*r00*x11597*x11615))+(((-1.0)*cj0*cj1*x11605))+(((-1.0)*x11608*x11610))+(((-1.0)*r00*x11601))+(((-1.0)*x11597*x11617))+((x11600*x11613))+(((-1.0)*cj3*r01*x11603)));
evalcond[8]=((((-1.0)*cj1*sj0*x11605))+(((-1.0)*x11599*x11601))+(((-1.0)*x11597*x11611))+((x11606*x11613))+(((-1.0)*cj3*r11*x11603))+(((-1.0)*r10*x11597*x11615))+(((-1.0)*sj0*x11608)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11619=((1.0)*gconst10);
CheckValue<IkReal> x11620 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x11619))+(((-1.0)*r11*sj0*x11619))+((cj0*gconst11*r00))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11620.valid){
continue;
}
CheckValue<IkReal> x11621=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11621.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11620.value)+(((1.5707963267949)*(x11621.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11622=IKsin(j4);
IkReal x11623=IKcos(j4);
IkReal x11624=(cj1*cj2);
IkReal x11625=(cj3*r10);
IkReal x11626=(cj3*r01);
IkReal x11627=((1.0)*gconst10);
IkReal x11628=(r21*sj3);
IkReal x11629=(cj3*gconst11);
IkReal x11630=(r01*sj3);
IkReal x11631=((1.0)*sj2);
IkReal x11632=(r11*sj3);
IkReal x11633=(r00*sj3);
IkReal x11634=(gconst10*sj3);
IkReal x11635=(cj2*sj1);
IkReal x11636=(gconst11*sj3);
IkReal x11637=((1.0)*cj0);
IkReal x11638=((1.0)*x11623);
IkReal x11639=((1.0)*x11622);
IkReal x11640=(gconst10*x11623);
IkReal x11641=(gconst11*x11622);
evalcond[0]=((((-1.0)*r22*x11638))+((r20*x11641))+(((-1.0)*r21*x11622*x11627)));
evalcond[1]=((((-1.0)*r02*x11638))+sj0+(((-1.0)*r01*x11622*x11627))+((r00*x11641)));
evalcond[2]=((((-1.0)*x11637))+((r10*x11641))+(((-1.0)*r11*x11622*x11627))+(((-1.0)*r12*x11638)));
evalcond[3]=(((cj3*r21*x11640))+(((-1.0)*r20*x11629*x11638))+x11635+((gconst11*x11628))+((cj1*sj2))+(((-1.0)*cj3*r22*x11639))+((r20*x11634)));
evalcond[4]=((((-1.0)*cj3*r20*x11627))+x11624+(((-1.0)*r20*x11636*x11638))+(((-1.0)*r21*x11629))+((x11628*x11640))+(((-1.0)*r22*sj3*x11639))+(((-1.0)*sj1*x11631)));
evalcond[5]=((((-1.0)*cj3*r02*x11639))+(((-1.0)*cj0*sj1*x11631))+((gconst11*x11630))+(((-1.0)*r00*x11629*x11638))+((cj0*x11624))+((x11626*x11640))+((gconst10*x11633)));
evalcond[6]=(((r10*x11634))+((gconst11*x11632))+((sj0*x11624))+(((-1.0)*gconst11*x11625*x11638))+((cj3*r11*x11640))+(((-1.0)*sj0*sj1*x11631))+(((-1.0)*cj3*r12*x11639)));
evalcond[7]=((((-1.0)*gconst11*x11626))+(((-1.0)*gconst11*x11633*x11638))+((x11630*x11640))+(((-1.0)*r02*sj3*x11639))+(((-1.0)*x11635*x11637))+(((-1.0)*cj0*cj1*x11631))+(((-1.0)*cj3*r00*x11627)));
evalcond[8]=((((-1.0)*r11*x11629))+(((-1.0)*r12*sj3*x11639))+(((-1.0)*sj0*x11635))+((x11632*x11640))+(((-1.0)*r10*x11636*x11638))+(((-1.0)*x11625*x11627))+(((-1.0)*cj1*sj0*x11631)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11642=((1.0)*gconst10);
CheckValue<IkReal> x11643=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst11*r01))+(((-1.0)*r00*x11642)))),-1);
if(!x11643.valid){
continue;
}
CheckValue<IkReal> x11644 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x11642))+((cj0*gconst11*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11644.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11643.value)))+(x11644.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11645=IKsin(j4);
IkReal x11646=IKcos(j4);
IkReal x11647=(cj1*cj2);
IkReal x11648=(cj3*r10);
IkReal x11649=(cj3*r01);
IkReal x11650=((1.0)*gconst10);
IkReal x11651=(r21*sj3);
IkReal x11652=(cj3*gconst11);
IkReal x11653=(r01*sj3);
IkReal x11654=((1.0)*sj2);
IkReal x11655=(r11*sj3);
IkReal x11656=(r00*sj3);
IkReal x11657=(gconst10*sj3);
IkReal x11658=(cj2*sj1);
IkReal x11659=(gconst11*sj3);
IkReal x11660=((1.0)*cj0);
IkReal x11661=((1.0)*x11646);
IkReal x11662=((1.0)*x11645);
IkReal x11663=(gconst10*x11646);
IkReal x11664=(gconst11*x11645);
evalcond[0]=((((-1.0)*r21*x11645*x11650))+((r20*x11664))+(((-1.0)*r22*x11661)));
evalcond[1]=(sj0+(((-1.0)*r02*x11661))+((r00*x11664))+(((-1.0)*r01*x11645*x11650)));
evalcond[2]=((((-1.0)*r12*x11661))+(((-1.0)*x11660))+((r10*x11664))+(((-1.0)*r11*x11645*x11650)));
evalcond[3]=(x11658+((gconst11*x11651))+((cj1*sj2))+((r20*x11657))+((cj3*r21*x11663))+(((-1.0)*r20*x11652*x11661))+(((-1.0)*cj3*r22*x11662)));
evalcond[4]=((((-1.0)*cj3*r20*x11650))+x11647+(((-1.0)*r22*sj3*x11662))+(((-1.0)*r20*x11659*x11661))+(((-1.0)*r21*x11652))+(((-1.0)*sj1*x11654))+((x11651*x11663)));
evalcond[5]=(((x11649*x11663))+(((-1.0)*cj0*sj1*x11654))+((gconst11*x11653))+(((-1.0)*cj3*r02*x11662))+(((-1.0)*r00*x11652*x11661))+((cj0*x11647))+((gconst10*x11656)));
evalcond[6]=(((r10*x11657))+((gconst11*x11655))+((sj0*x11647))+(((-1.0)*sj0*sj1*x11654))+(((-1.0)*cj3*r12*x11662))+((cj3*r11*x11663))+(((-1.0)*gconst11*x11648*x11661)));
evalcond[7]=((((-1.0)*cj3*r00*x11650))+(((-1.0)*r02*sj3*x11662))+(((-1.0)*cj0*cj1*x11654))+(((-1.0)*gconst11*x11656*x11661))+(((-1.0)*x11658*x11660))+((x11653*x11663))+(((-1.0)*gconst11*x11649)));
evalcond[8]=((((-1.0)*sj0*x11658))+(((-1.0)*r10*x11659*x11661))+(((-1.0)*x11648*x11650))+(((-1.0)*cj1*sj0*x11654))+((x11655*x11663))+(((-1.0)*r12*sj3*x11662))+(((-1.0)*r11*x11652)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11665=((1.0)*gconst10);
CheckValue<IkReal> x11666 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x11665))+((gconst11*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11666.valid){
continue;
}
CheckValue<IkReal> x11667=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst11*r11))+(((-1.0)*r10*x11665)))),-1);
if(!x11667.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11666.value)+(((1.5707963267949)*(x11667.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11668=IKsin(j4);
IkReal x11669=IKcos(j4);
IkReal x11670=(cj1*cj2);
IkReal x11671=(cj3*r10);
IkReal x11672=(cj3*r01);
IkReal x11673=((1.0)*gconst10);
IkReal x11674=(r21*sj3);
IkReal x11675=(cj3*gconst11);
IkReal x11676=(r01*sj3);
IkReal x11677=((1.0)*sj2);
IkReal x11678=(r11*sj3);
IkReal x11679=(r00*sj3);
IkReal x11680=(gconst10*sj3);
IkReal x11681=(cj2*sj1);
IkReal x11682=(gconst11*sj3);
IkReal x11683=((1.0)*cj0);
IkReal x11684=((1.0)*x11669);
IkReal x11685=((1.0)*x11668);
IkReal x11686=(gconst10*x11669);
IkReal x11687=(gconst11*x11668);
evalcond[0]=((((-1.0)*r22*x11684))+(((-1.0)*r21*x11668*x11673))+((r20*x11687)));
evalcond[1]=(((r00*x11687))+sj0+(((-1.0)*r02*x11684))+(((-1.0)*r01*x11668*x11673)));
evalcond[2]=((((-1.0)*r11*x11668*x11673))+(((-1.0)*x11683))+((r10*x11687))+(((-1.0)*r12*x11684)));
evalcond[3]=(x11681+((cj1*sj2))+(((-1.0)*r20*x11675*x11684))+((cj3*r21*x11686))+(((-1.0)*cj3*r22*x11685))+((gconst11*x11674))+((r20*x11680)));
evalcond[4]=(x11670+(((-1.0)*cj3*r20*x11673))+(((-1.0)*r21*x11675))+(((-1.0)*r22*sj3*x11685))+(((-1.0)*r20*x11682*x11684))+(((-1.0)*sj1*x11677))+((x11674*x11686)));
evalcond[5]=(((gconst10*x11679))+((cj0*x11670))+(((-1.0)*cj3*r02*x11685))+((x11672*x11686))+((gconst11*x11676))+(((-1.0)*cj0*sj1*x11677))+(((-1.0)*r00*x11675*x11684)));
evalcond[6]=((((-1.0)*gconst11*x11671*x11684))+(((-1.0)*sj0*sj1*x11677))+((r10*x11680))+((cj3*r11*x11686))+((sj0*x11670))+(((-1.0)*cj3*r12*x11685))+((gconst11*x11678)));
evalcond[7]=(((x11676*x11686))+(((-1.0)*cj3*r00*x11673))+(((-1.0)*r02*sj3*x11685))+(((-1.0)*cj0*cj1*x11677))+(((-1.0)*gconst11*x11679*x11684))+(((-1.0)*x11681*x11683))+(((-1.0)*gconst11*x11672)));
evalcond[8]=((((-1.0)*cj1*sj0*x11677))+(((-1.0)*x11671*x11673))+(((-1.0)*r10*x11682*x11684))+(((-1.0)*r11*x11675))+((x11678*x11686))+(((-1.0)*r12*sj3*x11685))+(((-1.0)*sj0*x11681)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x11688=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x11688;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x11688);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x11689=((1.0)*sj5);
IkReal x11690=((((-1.0)*cj5*r11))+(((-1.0)*r10*x11689)));
j4eval[0]=x11690;
j4eval[1]=IKsign(x11690);
j4eval[2]=((IKabs((((cj5*r20))+(((-1.0)*r21*x11689)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x11691=cj5*cj5;
IkReal x11692=(cj3*r00);
IkReal x11693=(cj3*r01);
IkReal x11694=((1.0)*cj5*sj5);
IkReal x11695=((((-1.0)*r21*x11692*x11694))+(((-1.0)*r21*x11691*x11693))+(((-1.0)*r20*x11693*x11694))+((cj3*r02*r22))+((r20*x11691*x11692))+((r21*x11693)));
j4eval[0]=x11695;
j4eval[1]=IKsign(x11695);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x11696=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x11696;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x11696);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x11697=((1.0)*sj5);
IkReal x11698=((((-1.0)*cj5*r11))+(((-1.0)*r10*x11697)));
j4eval[0]=x11698;
j4eval[1]=IKsign(x11698);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x11697))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x11699=cj5*cj5;
IkReal x11700=r01*r01;
IkReal x11701=(cj5*r00);
IkReal x11702=(r01*sj5);
IkReal x11703=(x11700+((x11699*(r00*r00)))+(((-1.0)*x11699*x11700))+(((-2.0)*x11701*x11702))+(r02*r02));
j4eval[0]=x11703;
j4eval[1]=((IKabs(r02))+(IKabs((x11702+(((-1.0)*x11701))))));
j4eval[2]=IKsign(x11703);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11704=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11704);
rxp0_2=(py*r00);
rxp1_0=(r21*x11704);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11705=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11705);
rxp0_2=(py*r00);
rxp1_0=(r21*x11705);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11706=((1.0)*cj2);
CheckValue<IkReal> x11707=IKPowWithIntegerCheck(r12,-1);
if(!x11707.valid){
continue;
}
CheckValue<IkReal> x11708=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x11708.valid){
continue;
}
if( IKabs(((x11707.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x11706)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11708.value)*((((sj1*sj2))+(((-1.0)*cj1*x11706)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11707.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x11706))))))+IKsqr(((x11708.value)*((((sj1*sj2))+(((-1.0)*cj1*x11706))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11707.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x11706))))), ((x11708.value)*((((sj1*sj2))+(((-1.0)*cj1*x11706))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11709=IKsin(j4);
IkReal x11710=IKcos(j4);
IkReal x11711=(r01*sj5);
IkReal x11712=((1.0)*sj2);
IkReal x11713=(r21*sj5);
IkReal x11714=((1.0)*x11709);
IkReal x11715=(cj5*x11709);
IkReal x11716=((1.0)*cj5*x11710);
evalcond[0]=((-1.0)*r12*x11710);
evalcond[1]=(((r20*x11715))+(((-1.0)*x11713*x11714)));
evalcond[2]=((((-1.0)*r00*x11716))+((x11710*x11711)));
evalcond[3]=((1.0)+((r00*x11715))+(((-1.0)*x11711*x11714)));
evalcond[4]=((((-1.0)*cj2*sj1))+(((-1.0)*r12*x11714))+(((-1.0)*cj1*x11712)));
evalcond[5]=((((-1.0)*r20*x11716))+(((-1.0)*sj1*x11712))+((cj1*cj2))+((x11710*x11713)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11717=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x11717.valid){
continue;
}
CheckValue<IkReal> x11718=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x11718.valid){
continue;
}
if( IKabs(((-1.0)*(x11717.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11718.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11717.value)))+IKsqr(((x11718.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11717.value)), ((x11718.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11719=IKsin(j4);
IkReal x11720=IKcos(j4);
IkReal x11721=(r01*sj5);
IkReal x11722=((1.0)*sj2);
IkReal x11723=(r21*sj5);
IkReal x11724=((1.0)*x11719);
IkReal x11725=(cj5*x11719);
IkReal x11726=((1.0)*cj5*x11720);
evalcond[0]=((-1.0)*r12*x11720);
evalcond[1]=((((-1.0)*x11723*x11724))+((r20*x11725)));
evalcond[2]=((((-1.0)*r00*x11726))+((x11720*x11721)));
evalcond[3]=((1.0)+((r00*x11725))+(((-1.0)*x11721*x11724)));
evalcond[4]=((((-1.0)*cj2*sj1))+(((-1.0)*r12*x11724))+(((-1.0)*cj1*x11722)));
evalcond[5]=((((-1.0)*r20*x11726))+(((-1.0)*sj1*x11722))+((cj1*cj2))+((x11720*x11723)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11727=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x11727);
rxp1_0=(pz*r11);
rxp1_1=(r01*x11727);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[1]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11728=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x11728);
rxp1_0=(pz*r11);
rxp1_1=(r01*x11728);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11729=IKPowWithIntegerCheck(r22,-1);
if(!x11729.valid){
continue;
}
CheckValue<IkReal> x11730=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x11730.valid){
continue;
}
if( IKabs(((x11729.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11730.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11729.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x11730.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11729.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x11730.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11731=IKsin(j4);
IkReal x11732=IKcos(j4);
IkReal x11733=((1.0)*sj2);
IkReal x11734=(sj5*x11732);
IkReal x11735=(cj5*x11731);
IkReal x11736=((1.0)*sj5*x11731);
IkReal x11737=((1.0)*cj5*x11732);
evalcond[0]=((-1.0)*r22*x11732);
evalcond[1]=((((-1.0)*r11*x11736))+((r10*x11735)));
evalcond[2]=((((-1.0)*r22*x11731))+(((-1.0)*sj1*x11733))+((cj1*cj2)));
evalcond[3]=(((r01*x11734))+(((-1.0)*r00*x11737)));
evalcond[4]=((1.0)+((r00*x11735))+(((-1.0)*r01*x11736)));
evalcond[5]=(((r11*x11734))+(((-1.0)*r10*x11737))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x11733)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11738=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x11738.valid){
continue;
}
CheckValue<IkReal> x11739=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x11739.valid){
continue;
}
if( IKabs(((-1.0)*(x11738.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11739.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11738.value)))+IKsqr(((x11739.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11738.value)), ((x11739.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11740=IKsin(j4);
IkReal x11741=IKcos(j4);
IkReal x11742=((1.0)*sj2);
IkReal x11743=(sj5*x11741);
IkReal x11744=(cj5*x11740);
IkReal x11745=((1.0)*sj5*x11740);
IkReal x11746=((1.0)*cj5*x11741);
evalcond[0]=((-1.0)*r22*x11741);
evalcond[1]=(((r10*x11744))+(((-1.0)*r11*x11745)));
evalcond[2]=((((-1.0)*r22*x11740))+(((-1.0)*sj1*x11742))+((cj1*cj2)));
evalcond[3]=(((r01*x11743))+(((-1.0)*r00*x11746)));
evalcond[4]=((1.0)+((r00*x11744))+(((-1.0)*r01*x11745)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*r10*x11746))+(((-1.0)*cj1*x11742))+((r11*x11743)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11747=cj5*cj5;
IkReal x11748=r01*r01;
IkReal x11749=(r01*sj5);
IkReal x11750=(cj5*r00);
CheckValue<IkReal> x11751 = IKatan2WithCheck(IkReal((x11749+(((-1.0)*x11750)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11751.valid){
continue;
}
CheckValue<IkReal> x11752=IKPowWithIntegerCheck(IKsign((x11748+(((-2.0)*x11749*x11750))+(r02*r02)+(((-1.0)*x11747*x11748))+((x11747*(r00*r00))))),-1);
if(!x11752.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11751.value)+(((1.5707963267949)*(x11752.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11753=IKsin(j4);
IkReal x11754=IKcos(j4);
IkReal x11755=(cj5*r00);
IkReal x11756=((1.0)*sj2);
IkReal x11757=(cj5*r20);
IkReal x11758=(cj5*r10);
IkReal x11759=((1.0)*x11754);
IkReal x11760=(sj5*x11754);
IkReal x11761=((1.0)*x11753);
IkReal x11762=(sj5*x11761);
evalcond[0]=((((-1.0)*r21*x11762))+((x11753*x11757))+(((-1.0)*r22*x11759)));
evalcond[1]=((((-1.0)*r12*x11759))+(((-1.0)*r11*x11762))+((x11753*x11758)));
evalcond[2]=((((-1.0)*x11755*x11759))+(((-1.0)*r02*x11761))+((r01*x11760)));
evalcond[3]=((1.0)+((x11753*x11755))+(((-1.0)*r02*x11759))+(((-1.0)*r01*x11762)));
evalcond[4]=((((-1.0)*sj1*x11756))+(((-1.0)*r22*x11761))+(((-1.0)*x11757*x11759))+((cj1*cj2))+((r21*x11760)));
evalcond[5]=((((-1.0)*r12*x11761))+((r11*x11760))+(((-1.0)*cj1*x11756))+(((-1.0)*cj2*sj1))+(((-1.0)*x11758*x11759)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11763=((1.0)*sj5);
CheckValue<IkReal> x11764=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x11763)))),-1);
if(!x11764.valid){
continue;
}
CheckValue<IkReal> x11765 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x11763))+((cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11765.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11764.value)))+(x11765.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11766=IKsin(j4);
IkReal x11767=IKcos(j4);
IkReal x11768=(cj5*r00);
IkReal x11769=((1.0)*sj2);
IkReal x11770=(cj5*r20);
IkReal x11771=(cj5*r10);
IkReal x11772=((1.0)*x11767);
IkReal x11773=(sj5*x11767);
IkReal x11774=((1.0)*x11766);
IkReal x11775=(sj5*x11774);
evalcond[0]=(((x11766*x11770))+(((-1.0)*r22*x11772))+(((-1.0)*r21*x11775)));
evalcond[1]=((((-1.0)*r11*x11775))+(((-1.0)*r12*x11772))+((x11766*x11771)));
evalcond[2]=((((-1.0)*x11768*x11772))+(((-1.0)*r02*x11774))+((r01*x11773)));
evalcond[3]=((1.0)+((x11766*x11768))+(((-1.0)*r02*x11772))+(((-1.0)*r01*x11775)));
evalcond[4]=((((-1.0)*sj1*x11769))+(((-1.0)*r22*x11774))+(((-1.0)*x11770*x11772))+((r21*x11773))+((cj1*cj2)));
evalcond[5]=((((-1.0)*x11771*x11772))+(((-1.0)*cj1*x11769))+(((-1.0)*r12*x11774))+(((-1.0)*cj2*sj1))+((r11*x11773)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11776 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11776.valid){
continue;
}
CheckValue<IkReal> x11777=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x11777.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11776.value)+(((1.5707963267949)*(x11777.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11778=IKsin(j4);
IkReal x11779=IKcos(j4);
IkReal x11780=(cj5*r00);
IkReal x11781=((1.0)*sj2);
IkReal x11782=(cj5*r20);
IkReal x11783=(cj5*r10);
IkReal x11784=((1.0)*x11779);
IkReal x11785=(sj5*x11779);
IkReal x11786=((1.0)*x11778);
IkReal x11787=(sj5*x11786);
evalcond[0]=((((-1.0)*r21*x11787))+(((-1.0)*r22*x11784))+((x11778*x11782)));
evalcond[1]=((((-1.0)*r12*x11784))+(((-1.0)*r11*x11787))+((x11778*x11783)));
evalcond[2]=((((-1.0)*x11780*x11784))+(((-1.0)*r02*x11786))+((r01*x11785)));
evalcond[3]=((1.0)+(((-1.0)*r01*x11787))+((x11778*x11780))+(((-1.0)*r02*x11784)));
evalcond[4]=(((r21*x11785))+(((-1.0)*sj1*x11781))+(((-1.0)*x11782*x11784))+(((-1.0)*r22*x11786))+((cj1*cj2)));
evalcond[5]=(((r11*x11785))+(((-1.0)*cj1*x11781))+(((-1.0)*r12*x11786))+(((-1.0)*cj2*sj1))+(((-1.0)*x11783*x11784)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x11788=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x11788;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x11788);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x11789=((1.0)*sj5);
IkReal x11790=((((-1.0)*cj5*r11))+(((-1.0)*r10*x11789)));
j4eval[0]=x11790;
j4eval[1]=IKsign(x11790);
j4eval[2]=((IKabs((((cj5*r20))+(((-1.0)*r21*x11789)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x11791=((1.0)*cj5);
IkReal x11792=((1.0)*sj5);
IkReal x11793=(cj1*cj2);
IkReal x11794=(sj1*sj2);
IkReal x11795=((((-1.0)*r10*x11792))+(((-1.0)*r11*x11791)));
j4eval[0]=x11795;
j4eval[1]=((IKabs((((r01*sj5*x11794))+(((-1.0)*r00*x11791*x11794))+((cj5*r00*x11793))+(((-1.0)*r01*x11792*x11793)))))+(IKabs((((r02*x11794))+(((-1.0)*r02*x11793))))));
j4eval[2]=IKsign(x11795);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11796=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11796);
rxp0_2=(py*r00);
rxp1_0=(r21*x11796);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11797=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11797);
rxp0_2=(py*r00);
rxp1_0=(r21*x11797);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x11798=((1.0)*sj5);
j4eval[0]=((((-1.0)*r01*x11798))+((cj5*r00)));
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*x11798)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11799=((1.0)*sj5);
CheckValue<IkReal> x11800=IKPowWithIntegerCheck(((((-1.0)*r01*x11799))+((cj5*r00))),-1);
if(!x11800.valid){
continue;
}
CheckValue<IkReal> x11801=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*x11799))),-1);
if(!x11801.valid){
continue;
}
if( IKabs(((-1.0)*(x11800.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11801.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11800.value)))+IKsqr(((x11801.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11800.value)), ((x11801.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11802=IKsin(j4);
IkReal x11803=IKcos(j4);
IkReal x11804=((1.0)*sj2);
IkReal x11805=(cj5*x11803);
IkReal x11806=((1.0)*r01*sj5);
IkReal x11807=(cj5*x11802);
IkReal x11808=((1.0)*r21*sj5);
evalcond[0]=((-1.0)*r12*x11803);
evalcond[1]=((((-1.0)*x11802*x11808))+((r20*x11807)));
evalcond[2]=(((r00*x11805))+(((-1.0)*x11803*x11806)));
evalcond[3]=((((-1.0)*cj1*x11804))+(((-1.0)*cj2*sj1))+((r12*x11802)));
evalcond[4]=((1.0)+((r00*x11807))+(((-1.0)*x11802*x11806)));
evalcond[5]=((((-1.0)*x11803*x11808))+(((-1.0)*sj1*x11804))+((r20*x11805))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11809=IKPowWithIntegerCheck(r12,-1);
if(!x11809.valid){
continue;
}
CheckValue<IkReal> x11810=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x11810.valid){
continue;
}
if( IKabs(((x11809.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11810.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11809.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x11810.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11809.value)*((((cj2*sj1))+((cj1*sj2))))), ((x11810.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11811=IKsin(j4);
IkReal x11812=IKcos(j4);
IkReal x11813=((1.0)*sj2);
IkReal x11814=(cj5*x11812);
IkReal x11815=((1.0)*r01*sj5);
IkReal x11816=(cj5*x11811);
IkReal x11817=((1.0)*r21*sj5);
evalcond[0]=((-1.0)*r12*x11812);
evalcond[1]=((((-1.0)*x11811*x11817))+((r20*x11816)));
evalcond[2]=((((-1.0)*x11812*x11815))+((r00*x11814)));
evalcond[3]=((((-1.0)*cj1*x11813))+(((-1.0)*cj2*sj1))+((r12*x11811)));
evalcond[4]=((1.0)+((r00*x11816))+(((-1.0)*x11811*x11815)));
evalcond[5]=((((-1.0)*x11812*x11817))+((cj1*cj2))+(((-1.0)*sj1*x11813))+((r20*x11814)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x11818=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x11818;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x11818);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x11819=((1.0)*sj5);
IkReal x11820=((((-1.0)*r20*x11819))+(((-1.0)*cj5*r21)));
j4eval[0]=x11820;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x11819))+((cj5*r00))))));
j4eval[2]=IKsign(x11820);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x11821=cj5*cj5;
IkReal x11822=(cj5*r20);
IkReal x11823=(r01*r21);
IkReal x11824=(r21*sj5);
IkReal x11825=((((-1.0)*r02*r22))+(((-1.0)*r00*r20*x11821))+(((-1.0)*x11823))+((cj5*r00*x11824))+((r01*sj5*x11822))+((x11821*x11823)));
j4eval[0]=x11825;
j4eval[1]=((IKabs(((((-1.0)*x11824))+x11822)))+(IKabs(r22)));
j4eval[2]=IKsign(x11825);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11826=cj5*cj5;
IkReal x11827=(cj5*r20);
IkReal x11828=(r01*r21);
IkReal x11829=(r21*sj5);
CheckValue<IkReal> x11830 = IKatan2WithCheck(IkReal(((((-1.0)*x11829))+x11827)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x11830.valid){
continue;
}
CheckValue<IkReal> x11831=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+(((-1.0)*r00*r20*x11826))+(((-1.0)*x11828))+((cj5*r00*x11829))+((r01*sj5*x11827))+((x11826*x11828)))),-1);
if(!x11831.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11830.value)+(((1.5707963267949)*(x11831.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11832=IKcos(j4);
IkReal x11833=IKsin(j4);
IkReal x11834=(r11*sj5);
IkReal x11835=(r21*sj5);
IkReal x11836=(r01*sj5);
IkReal x11837=((1.0)*x11832);
IkReal x11838=(cj5*x11833);
IkReal x11839=((1.0)*x11833);
IkReal x11840=(cj5*x11832);
evalcond[0]=(((r22*x11833))+((r20*x11840))+(((-1.0)*x11835*x11837)));
evalcond[1]=(((r02*x11833))+(((-1.0)*x11836*x11837))+((r00*x11840)));
evalcond[2]=((((-1.0)*x11835*x11839))+(((-1.0)*r22*x11837))+((r20*x11838)));
evalcond[3]=((((-1.0)*r12*x11837))+((r10*x11838))+(((-1.0)*x11834*x11839)));
evalcond[4]=((-1.0)+(((-1.0)*x11834*x11837))+((r12*x11833))+((r10*x11840)));
evalcond[5]=((1.0)+(((-1.0)*x11836*x11839))+(((-1.0)*r02*x11837))+((r00*x11838)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11841=((1.0)*sj5);
CheckValue<IkReal> x11842=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11841))+(((-1.0)*cj5*r21)))),-1);
if(!x11842.valid){
continue;
}
CheckValue<IkReal> x11843 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x11841))+((cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11843.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11842.value)))+(x11843.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11844=IKcos(j4);
IkReal x11845=IKsin(j4);
IkReal x11846=(r11*sj5);
IkReal x11847=(r21*sj5);
IkReal x11848=(r01*sj5);
IkReal x11849=((1.0)*x11844);
IkReal x11850=(cj5*x11845);
IkReal x11851=((1.0)*x11845);
IkReal x11852=(cj5*x11844);
evalcond[0]=(((r20*x11852))+((r22*x11845))+(((-1.0)*x11847*x11849)));
evalcond[1]=((((-1.0)*x11848*x11849))+((r00*x11852))+((r02*x11845)));
evalcond[2]=(((r20*x11850))+(((-1.0)*r22*x11849))+(((-1.0)*x11847*x11851)));
evalcond[3]=((((-1.0)*r12*x11849))+(((-1.0)*x11846*x11851))+((r10*x11850)));
evalcond[4]=((-1.0)+((r12*x11845))+(((-1.0)*x11846*x11849))+((r10*x11852)));
evalcond[5]=((1.0)+(((-1.0)*r02*x11849))+((r00*x11850))+(((-1.0)*x11848*x11851)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11853 = IKatan2WithCheck(IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x11853.valid){
continue;
}
CheckValue<IkReal> x11854=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x11854.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11853.value)+(((1.5707963267949)*(x11854.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11855=IKcos(j4);
IkReal x11856=IKsin(j4);
IkReal x11857=(r11*sj5);
IkReal x11858=(r21*sj5);
IkReal x11859=(r01*sj5);
IkReal x11860=((1.0)*x11855);
IkReal x11861=(cj5*x11856);
IkReal x11862=((1.0)*x11856);
IkReal x11863=(cj5*x11855);
evalcond[0]=(((r20*x11863))+((r22*x11856))+(((-1.0)*x11858*x11860)));
evalcond[1]=((((-1.0)*x11859*x11860))+((r00*x11863))+((r02*x11856)));
evalcond[2]=((((-1.0)*r22*x11860))+((r20*x11861))+(((-1.0)*x11858*x11862)));
evalcond[3]=(((r10*x11861))+(((-1.0)*r12*x11860))+(((-1.0)*x11857*x11862)));
evalcond[4]=((-1.0)+((r12*x11856))+((r10*x11863))+(((-1.0)*x11857*x11860)));
evalcond[5]=((1.0)+(((-1.0)*x11859*x11862))+((r00*x11861))+(((-1.0)*r02*x11860)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x11864=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x11864;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x11864);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x11865=((1.0)*sj5);
IkReal x11866=((((-1.0)*r00*x11865))+(((-1.0)*cj5*r01)));
j4eval[0]=x11866;
j4eval[1]=((IKabs((((cj5*r20))+(((-1.0)*r21*x11865)))))+(IKabs(r22)));
j4eval[2]=IKsign(x11866);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x11867=cj5*cj5;
IkReal x11868=(cj5*r20);
IkReal x11869=(r01*r21);
IkReal x11870=(r21*sj5);
IkReal x11871=((((-1.0)*r02*r22))+(((-1.0)*x11869))+((cj5*r00*x11870))+((r01*sj5*x11868))+((x11867*x11869))+(((-1.0)*r00*r20*x11867)));
j4eval[0]=x11871;
j4eval[1]=((IKabs(((((-1.0)*x11870))+x11868)))+(IKabs(r22)));
j4eval[2]=IKsign(x11871);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11872=cj5*cj5;
IkReal x11873=(cj5*r20);
IkReal x11874=(r01*r21);
IkReal x11875=(r21*sj5);
CheckValue<IkReal> x11876 = IKatan2WithCheck(IkReal(((((-1.0)*x11875))+x11873)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x11876.valid){
continue;
}
CheckValue<IkReal> x11877=IKPowWithIntegerCheck(IKsign((((x11872*x11874))+(((-1.0)*r02*r22))+(((-1.0)*x11874))+((cj5*r00*x11875))+((r01*sj5*x11873))+(((-1.0)*r00*r20*x11872)))),-1);
if(!x11877.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11876.value)+(((1.5707963267949)*(x11877.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11878=IKcos(j4);
IkReal x11879=IKsin(j4);
IkReal x11880=(r11*sj5);
IkReal x11881=(r21*sj5);
IkReal x11882=(r01*sj5);
IkReal x11883=((1.0)*x11878);
IkReal x11884=(cj5*x11879);
IkReal x11885=((1.0)*x11879);
IkReal x11886=(cj5*x11878);
evalcond[0]=((((-1.0)*x11881*x11883))+((r22*x11879))+((r20*x11886)));
evalcond[1]=(((r00*x11886))+(((-1.0)*x11882*x11883))+((r02*x11879)));
evalcond[2]=((((-1.0)*x11881*x11885))+(((-1.0)*r22*x11883))+((r20*x11884)));
evalcond[3]=((((-1.0)*x11880*x11885))+((r10*x11884))+(((-1.0)*r12*x11883)));
evalcond[4]=((1.0)+(((-1.0)*x11880*x11883))+((r10*x11886))+((r12*x11879)));
evalcond[5]=((1.0)+((r00*x11884))+(((-1.0)*x11882*x11885))+(((-1.0)*r02*x11883)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11887=((1.0)*sj5);
CheckValue<IkReal> x11888=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x11887))+(((-1.0)*cj5*r01)))),-1);
if(!x11888.valid){
continue;
}
CheckValue<IkReal> x11889 = IKatan2WithCheck(IkReal((((cj5*r20))+(((-1.0)*r21*x11887)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x11889.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11888.value)))+(x11889.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11890=IKcos(j4);
IkReal x11891=IKsin(j4);
IkReal x11892=(r11*sj5);
IkReal x11893=(r21*sj5);
IkReal x11894=(r01*sj5);
IkReal x11895=((1.0)*x11890);
IkReal x11896=(cj5*x11891);
IkReal x11897=((1.0)*x11891);
IkReal x11898=(cj5*x11890);
evalcond[0]=(((r22*x11891))+(((-1.0)*x11893*x11895))+((r20*x11898)));
evalcond[1]=((((-1.0)*x11894*x11895))+((r00*x11898))+((r02*x11891)));
evalcond[2]=((((-1.0)*r22*x11895))+(((-1.0)*x11893*x11897))+((r20*x11896)));
evalcond[3]=((((-1.0)*r12*x11895))+((r10*x11896))+(((-1.0)*x11892*x11897)));
evalcond[4]=((1.0)+((r10*x11898))+(((-1.0)*x11892*x11895))+((r12*x11891)));
evalcond[5]=((1.0)+(((-1.0)*x11894*x11897))+((r00*x11896))+(((-1.0)*r02*x11895)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11899=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x11899.valid){
continue;
}
CheckValue<IkReal> x11900 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11900.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11899.value)))+(x11900.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11901=IKcos(j4);
IkReal x11902=IKsin(j4);
IkReal x11903=(r11*sj5);
IkReal x11904=(r21*sj5);
IkReal x11905=(r01*sj5);
IkReal x11906=((1.0)*x11901);
IkReal x11907=(cj5*x11902);
IkReal x11908=((1.0)*x11902);
IkReal x11909=(cj5*x11901);
evalcond[0]=(((r22*x11902))+(((-1.0)*x11904*x11906))+((r20*x11909)));
evalcond[1]=((((-1.0)*x11905*x11906))+((r00*x11909))+((r02*x11902)));
evalcond[2]=((((-1.0)*r22*x11906))+(((-1.0)*x11904*x11908))+((r20*x11907)));
evalcond[3]=((((-1.0)*r12*x11906))+(((-1.0)*x11903*x11908))+((r10*x11907)));
evalcond[4]=((1.0)+((r12*x11902))+(((-1.0)*x11903*x11906))+((r10*x11909)));
evalcond[5]=((1.0)+(((-1.0)*r02*x11906))+(((-1.0)*x11905*x11908))+((r00*x11907)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x11910=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x11910;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x11910);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x11911=((1.0)*sj5);
IkReal x11912=((((-1.0)*r20*x11911))+(((-1.0)*cj5*r21)));
j4eval[0]=x11912;
j4eval[1]=((IKabs(r02))+(IKabs((((cj5*r00))+(((-1.0)*r01*x11911))))));
j4eval[2]=IKsign(x11912);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x11913=cj5*cj5;
IkReal x11914=(cj5*r20);
IkReal x11915=(r01*r21);
IkReal x11916=(r21*sj5);
IkReal x11917=((((-1.0)*r02*r22))+(((-1.0)*x11915))+((x11913*x11915))+(((-1.0)*r00*r20*x11913))+((r01*sj5*x11914))+((cj5*r00*x11916)));
j4eval[0]=x11917;
j4eval[1]=((IKabs(r22))+(IKabs((x11914+(((-1.0)*x11916))))));
j4eval[2]=IKsign(x11917);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11918=cj5*cj5;
IkReal x11919=(cj5*r20);
IkReal x11920=(r01*r21);
IkReal x11921=(r21*sj5);
CheckValue<IkReal> x11922 = IKatan2WithCheck(IkReal((x11919+(((-1.0)*x11921)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x11922.valid){
continue;
}
CheckValue<IkReal> x11923=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+((cj5*r00*x11921))+((x11918*x11920))+(((-1.0)*r00*r20*x11918))+((r01*sj5*x11919))+(((-1.0)*x11920)))),-1);
if(!x11923.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11922.value)+(((1.5707963267949)*(x11923.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11924=IKcos(j4);
IkReal x11925=IKsin(j4);
IkReal x11926=(r11*sj5);
IkReal x11927=(r21*sj5);
IkReal x11928=(r01*sj5);
IkReal x11929=((1.0)*x11924);
IkReal x11930=(cj5*x11925);
IkReal x11931=((1.0)*x11925);
IkReal x11932=(cj5*x11924);
evalcond[0]=(((r20*x11932))+((r22*x11925))+(((-1.0)*x11927*x11929)));
evalcond[1]=(((r02*x11925))+((r00*x11932))+(((-1.0)*x11928*x11929)));
evalcond[2]=(((r20*x11930))+(((-1.0)*r22*x11929))+(((-1.0)*x11927*x11931)));
evalcond[3]=(((r10*x11930))+(((-1.0)*x11926*x11931))+(((-1.0)*r12*x11929)));
evalcond[4]=((-1.0)+((r10*x11932))+((r12*x11925))+(((-1.0)*x11926*x11929)));
evalcond[5]=((1.0)+(((-1.0)*r02*x11929))+((r00*x11930))+(((-1.0)*x11928*x11931)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11933=((1.0)*sj5);
CheckValue<IkReal> x11934=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*x11933)))),-1);
if(!x11934.valid){
continue;
}
CheckValue<IkReal> x11935 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x11933))+((cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11935.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11934.value)))+(x11935.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11936=IKcos(j4);
IkReal x11937=IKsin(j4);
IkReal x11938=(r11*sj5);
IkReal x11939=(r21*sj5);
IkReal x11940=(r01*sj5);
IkReal x11941=((1.0)*x11936);
IkReal x11942=(cj5*x11937);
IkReal x11943=((1.0)*x11937);
IkReal x11944=(cj5*x11936);
evalcond[0]=(((r20*x11944))+((r22*x11937))+(((-1.0)*x11939*x11941)));
evalcond[1]=((((-1.0)*x11940*x11941))+((r02*x11937))+((r00*x11944)));
evalcond[2]=(((r20*x11942))+(((-1.0)*r22*x11941))+(((-1.0)*x11939*x11943)));
evalcond[3]=((((-1.0)*x11938*x11943))+((r10*x11942))+(((-1.0)*r12*x11941)));
evalcond[4]=((-1.0)+(((-1.0)*x11938*x11941))+((r10*x11944))+((r12*x11937)));
evalcond[5]=((1.0)+(((-1.0)*x11940*x11943))+(((-1.0)*r02*x11941))+((r00*x11942)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11945 = IKatan2WithCheck(IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x11945.valid){
continue;
}
CheckValue<IkReal> x11946=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x11946.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11945.value)+(((1.5707963267949)*(x11946.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11947=IKcos(j4);
IkReal x11948=IKsin(j4);
IkReal x11949=(r11*sj5);
IkReal x11950=(r21*sj5);
IkReal x11951=(r01*sj5);
IkReal x11952=((1.0)*x11947);
IkReal x11953=(cj5*x11948);
IkReal x11954=((1.0)*x11948);
IkReal x11955=(cj5*x11947);
evalcond[0]=(((r20*x11955))+(((-1.0)*x11950*x11952))+((r22*x11948)));
evalcond[1]=(((r02*x11948))+((r00*x11955))+(((-1.0)*x11951*x11952)));
evalcond[2]=(((r20*x11953))+(((-1.0)*r22*x11952))+(((-1.0)*x11950*x11954)));
evalcond[3]=((((-1.0)*r12*x11952))+(((-1.0)*x11949*x11954))+((r10*x11953)));
evalcond[4]=((-1.0)+((r12*x11948))+(((-1.0)*x11949*x11952))+((r10*x11955)));
evalcond[5]=((1.0)+(((-1.0)*r02*x11952))+((r00*x11953))+(((-1.0)*x11951*x11954)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x11956=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x11956;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x11956);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x11957=((1.0)*sj5);
IkReal x11958=((((-1.0)*r00*x11957))+(((-1.0)*cj5*r01)));
j4eval[0]=x11958;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x11957))))));
j4eval[2]=IKsign(x11958);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x11959=cj5*cj5;
IkReal x11960=(cj5*r20);
IkReal x11961=(r01*r21);
IkReal x11962=(r21*sj5);
IkReal x11963=((((-1.0)*r02*r22))+(((-1.0)*x11961))+((r01*sj5*x11960))+((x11959*x11961))+((cj5*r00*x11962))+(((-1.0)*r00*r20*x11959)));
j4eval[0]=x11963;
j4eval[1]=((IKabs(r22))+(IKabs((x11960+(((-1.0)*x11962))))));
j4eval[2]=IKsign(x11963);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11964=cj5*cj5;
IkReal x11965=(cj5*r20);
IkReal x11966=(r01*r21);
IkReal x11967=(r21*sj5);
CheckValue<IkReal> x11968 = IKatan2WithCheck(IkReal((x11965+(((-1.0)*x11967)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x11968.valid){
continue;
}
CheckValue<IkReal> x11969=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+(((-1.0)*x11966))+(((-1.0)*r00*r20*x11964))+((r01*sj5*x11965))+((cj5*r00*x11967))+((x11964*x11966)))),-1);
if(!x11969.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11968.value)+(((1.5707963267949)*(x11969.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11970=IKcos(j4);
IkReal x11971=IKsin(j4);
IkReal x11972=(r11*sj5);
IkReal x11973=(r21*sj5);
IkReal x11974=(r01*sj5);
IkReal x11975=((1.0)*x11970);
IkReal x11976=(cj5*x11971);
IkReal x11977=((1.0)*x11971);
IkReal x11978=(cj5*x11970);
evalcond[0]=(((r20*x11978))+(((-1.0)*x11973*x11975))+((r22*x11971)));
evalcond[1]=(((r00*x11978))+(((-1.0)*x11974*x11975))+((r02*x11971)));
evalcond[2]=(((r20*x11976))+(((-1.0)*r22*x11975))+(((-1.0)*x11973*x11977)));
evalcond[3]=((((-1.0)*r12*x11975))+((r10*x11976))+(((-1.0)*x11972*x11977)));
evalcond[4]=((1.0)+((r10*x11978))+((r12*x11971))+(((-1.0)*x11972*x11975)));
evalcond[5]=((1.0)+((r00*x11976))+(((-1.0)*x11974*x11977))+(((-1.0)*r02*x11975)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11979=((1.0)*sj5);
CheckValue<IkReal> x11980=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x11979))+(((-1.0)*cj5*r01)))),-1);
if(!x11980.valid){
continue;
}
CheckValue<IkReal> x11981 = IKatan2WithCheck(IkReal((((cj5*r20))+(((-1.0)*r21*x11979)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x11981.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11980.value)))+(x11981.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11982=IKcos(j4);
IkReal x11983=IKsin(j4);
IkReal x11984=(r11*sj5);
IkReal x11985=(r21*sj5);
IkReal x11986=(r01*sj5);
IkReal x11987=((1.0)*x11982);
IkReal x11988=(cj5*x11983);
IkReal x11989=((1.0)*x11983);
IkReal x11990=(cj5*x11982);
evalcond[0]=(((r20*x11990))+((r22*x11983))+(((-1.0)*x11985*x11987)));
evalcond[1]=((((-1.0)*x11986*x11987))+((r02*x11983))+((r00*x11990)));
evalcond[2]=(((r20*x11988))+(((-1.0)*x11985*x11989))+(((-1.0)*r22*x11987)));
evalcond[3]=((((-1.0)*r12*x11987))+((r10*x11988))+(((-1.0)*x11984*x11989)));
evalcond[4]=((1.0)+(((-1.0)*x11984*x11987))+((r12*x11983))+((r10*x11990)));
evalcond[5]=((1.0)+(((-1.0)*x11986*x11989))+(((-1.0)*r02*x11987))+((r00*x11988)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11991=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x11991.valid){
continue;
}
CheckValue<IkReal> x11992 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11992.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11991.value)))+(x11992.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11993=IKcos(j4);
IkReal x11994=IKsin(j4);
IkReal x11995=(r11*sj5);
IkReal x11996=(r21*sj5);
IkReal x11997=(r01*sj5);
IkReal x11998=((1.0)*x11993);
IkReal x11999=(cj5*x11994);
IkReal x12000=((1.0)*x11994);
IkReal x12001=(cj5*x11993);
evalcond[0]=(((r20*x12001))+((r22*x11994))+(((-1.0)*x11996*x11998)));
evalcond[1]=(((r00*x12001))+((r02*x11994))+(((-1.0)*x11997*x11998)));
evalcond[2]=(((r20*x11999))+(((-1.0)*r22*x11998))+(((-1.0)*x11996*x12000)));
evalcond[3]=((((-1.0)*r12*x11998))+(((-1.0)*x11995*x12000))+((r10*x11999)));
evalcond[4]=((1.0)+(((-1.0)*x11995*x11998))+((r10*x12001))+((r12*x11994)));
evalcond[5]=((1.0)+(((-1.0)*r02*x11998))+((r00*x11999))+(((-1.0)*x11997*x12000)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12002=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12002;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x12002);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12003=((1.0)*sj5);
IkReal x12004=((((-1.0)*r00*x12003))+(((-1.0)*cj5*r01)));
j4eval[0]=x12004;
j4eval[1]=((IKabs(((((-1.0)*r21*x12003))+((cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12004);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12005=cj5*cj5;
IkReal x12006=(cj5*r20);
IkReal x12007=(r01*r21);
IkReal x12008=(r21*sj5);
IkReal x12009=(((r01*sj5*x12006))+(((-1.0)*r02*r22))+(((-1.0)*x12007))+((x12005*x12007))+(((-1.0)*r00*r20*x12005))+((cj5*r00*x12008)));
j4eval[0]=x12009;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*x12008))+x12006))));
j4eval[2]=IKsign(x12009);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12010=cj5*cj5;
IkReal x12011=(cj5*r20);
IkReal x12012=(r01*r21);
IkReal x12013=(r21*sj5);
CheckValue<IkReal> x12014 = IKatan2WithCheck(IkReal((x12011+(((-1.0)*x12013)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12014.valid){
continue;
}
CheckValue<IkReal> x12015=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*r20*x12010))+(((-1.0)*r02*r22))+((cj5*r00*x12013))+((x12010*x12012))+((r01*sj5*x12011))+(((-1.0)*x12012)))),-1);
if(!x12015.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12014.value)+(((1.5707963267949)*(x12015.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12016=IKcos(j4);
IkReal x12017=IKsin(j4);
IkReal x12018=(r11*sj5);
IkReal x12019=(r21*sj5);
IkReal x12020=(r01*sj5);
IkReal x12021=((1.0)*x12016);
IkReal x12022=(cj5*x12017);
IkReal x12023=((1.0)*x12017);
IkReal x12024=(cj5*x12016);
evalcond[0]=(((r22*x12017))+((r20*x12024))+(((-1.0)*x12019*x12021)));
evalcond[1]=(((r00*x12024))+((r02*x12017))+(((-1.0)*x12020*x12021)));
evalcond[2]=(((r20*x12022))+(((-1.0)*r22*x12021))+(((-1.0)*x12019*x12023)));
evalcond[3]=((((-1.0)*r12*x12021))+((r10*x12022))+(((-1.0)*x12018*x12023)));
evalcond[4]=((1.0)+((r12*x12017))+((r10*x12024))+(((-1.0)*x12018*x12021)));
evalcond[5]=((1.0)+((r00*x12022))+(((-1.0)*r02*x12021))+(((-1.0)*x12020*x12023)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12025=((1.0)*sj5);
CheckValue<IkReal> x12026=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x12025))+(((-1.0)*cj5*r01)))),-1);
if(!x12026.valid){
continue;
}
CheckValue<IkReal> x12027 = IKatan2WithCheck(IkReal((((cj5*r20))+(((-1.0)*r21*x12025)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12027.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12026.value)))+(x12027.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12028=IKcos(j4);
IkReal x12029=IKsin(j4);
IkReal x12030=(r11*sj5);
IkReal x12031=(r21*sj5);
IkReal x12032=(r01*sj5);
IkReal x12033=((1.0)*x12028);
IkReal x12034=(cj5*x12029);
IkReal x12035=((1.0)*x12029);
IkReal x12036=(cj5*x12028);
evalcond[0]=(((r20*x12036))+(((-1.0)*x12031*x12033))+((r22*x12029)));
evalcond[1]=(((r00*x12036))+(((-1.0)*x12032*x12033))+((r02*x12029)));
evalcond[2]=(((r20*x12034))+(((-1.0)*x12031*x12035))+(((-1.0)*r22*x12033)));
evalcond[3]=((((-1.0)*x12030*x12035))+(((-1.0)*r12*x12033))+((r10*x12034)));
evalcond[4]=((1.0)+(((-1.0)*x12030*x12033))+((r12*x12029))+((r10*x12036)));
evalcond[5]=((1.0)+((r00*x12034))+(((-1.0)*r02*x12033))+(((-1.0)*x12032*x12035)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12037=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12037.valid){
continue;
}
CheckValue<IkReal> x12038 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12038.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12037.value)))+(x12038.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12039=IKcos(j4);
IkReal x12040=IKsin(j4);
IkReal x12041=(r11*sj5);
IkReal x12042=(r21*sj5);
IkReal x12043=(r01*sj5);
IkReal x12044=((1.0)*x12039);
IkReal x12045=(cj5*x12040);
IkReal x12046=((1.0)*x12040);
IkReal x12047=(cj5*x12039);
evalcond[0]=(((r20*x12047))+(((-1.0)*x12042*x12044))+((r22*x12040)));
evalcond[1]=(((r02*x12040))+((r00*x12047))+(((-1.0)*x12043*x12044)));
evalcond[2]=(((r20*x12045))+(((-1.0)*x12042*x12046))+(((-1.0)*r22*x12044)));
evalcond[3]=(((r10*x12045))+(((-1.0)*r12*x12044))+(((-1.0)*x12041*x12046)));
evalcond[4]=((1.0)+((r10*x12047))+((r12*x12040))+(((-1.0)*x12041*x12044)));
evalcond[5]=((1.0)+((r00*x12045))+(((-1.0)*x12043*x12046))+(((-1.0)*r02*x12044)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12048=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x12048;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x12048);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12049=((1.0)*sj5);
IkReal x12050=((((-1.0)*r20*x12049))+(((-1.0)*cj5*r21)));
j4eval[0]=x12050;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x12049))+((cj5*r00))))));
j4eval[2]=IKsign(x12050);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12051=cj5*cj5;
IkReal x12052=(cj5*r20);
IkReal x12053=(r01*r21);
IkReal x12054=(r21*sj5);
IkReal x12055=((((-1.0)*r02*r22))+((r01*sj5*x12052))+(((-1.0)*x12053))+(((-1.0)*r00*r20*x12051))+((x12051*x12053))+((cj5*r00*x12054)));
j4eval[0]=x12055;
j4eval[1]=((IKabs(((((-1.0)*x12054))+x12052)))+(IKabs(r22)));
j4eval[2]=IKsign(x12055);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12056=cj5*cj5;
IkReal x12057=(cj5*r20);
IkReal x12058=(r01*r21);
IkReal x12059=(r21*sj5);
CheckValue<IkReal> x12060 = IKatan2WithCheck(IkReal(((((-1.0)*x12059))+x12057)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12060.valid){
continue;
}
CheckValue<IkReal> x12061=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+((r01*sj5*x12057))+((x12056*x12058))+(((-1.0)*x12058))+(((-1.0)*r00*r20*x12056))+((cj5*r00*x12059)))),-1);
if(!x12061.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12060.value)+(((1.5707963267949)*(x12061.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12062=IKcos(j4);
IkReal x12063=IKsin(j4);
IkReal x12064=(r11*sj5);
IkReal x12065=(r21*sj5);
IkReal x12066=(r01*sj5);
IkReal x12067=((1.0)*x12062);
IkReal x12068=(cj5*x12063);
IkReal x12069=((1.0)*x12063);
IkReal x12070=(cj5*x12062);
evalcond[0]=(((r22*x12063))+((r20*x12070))+(((-1.0)*x12065*x12067)));
evalcond[1]=((((-1.0)*x12066*x12067))+((r02*x12063))+((r00*x12070)));
evalcond[2]=(((r20*x12068))+(((-1.0)*r22*x12067))+(((-1.0)*x12065*x12069)));
evalcond[3]=((((-1.0)*x12064*x12069))+((r10*x12068))+(((-1.0)*r12*x12067)));
evalcond[4]=((-1.0)+((r12*x12063))+(((-1.0)*x12064*x12067))+((r10*x12070)));
evalcond[5]=((1.0)+((r00*x12068))+(((-1.0)*x12066*x12069))+(((-1.0)*r02*x12067)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12071=((1.0)*sj5);
CheckValue<IkReal> x12072=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12071))+(((-1.0)*cj5*r21)))),-1);
if(!x12072.valid){
continue;
}
CheckValue<IkReal> x12073 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x12071))+((cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12073.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12072.value)))+(x12073.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12074=IKcos(j4);
IkReal x12075=IKsin(j4);
IkReal x12076=(r11*sj5);
IkReal x12077=(r21*sj5);
IkReal x12078=(r01*sj5);
IkReal x12079=((1.0)*x12074);
IkReal x12080=(cj5*x12075);
IkReal x12081=((1.0)*x12075);
IkReal x12082=(cj5*x12074);
evalcond[0]=(((r20*x12082))+((r22*x12075))+(((-1.0)*x12077*x12079)));
evalcond[1]=((((-1.0)*x12078*x12079))+((r00*x12082))+((r02*x12075)));
evalcond[2]=(((r20*x12080))+(((-1.0)*x12077*x12081))+(((-1.0)*r22*x12079)));
evalcond[3]=((((-1.0)*x12076*x12081))+((r10*x12080))+(((-1.0)*r12*x12079)));
evalcond[4]=((-1.0)+(((-1.0)*x12076*x12079))+((r10*x12082))+((r12*x12075)));
evalcond[5]=((1.0)+((r00*x12080))+(((-1.0)*r02*x12079))+(((-1.0)*x12078*x12081)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12083 = IKatan2WithCheck(IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12083.valid){
continue;
}
CheckValue<IkReal> x12084=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x12084.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12083.value)+(((1.5707963267949)*(x12084.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12085=IKcos(j4);
IkReal x12086=IKsin(j4);
IkReal x12087=(r11*sj5);
IkReal x12088=(r21*sj5);
IkReal x12089=(r01*sj5);
IkReal x12090=((1.0)*x12085);
IkReal x12091=(cj5*x12086);
IkReal x12092=((1.0)*x12086);
IkReal x12093=(cj5*x12085);
evalcond[0]=((((-1.0)*x12088*x12090))+((r20*x12093))+((r22*x12086)));
evalcond[1]=(((r02*x12086))+((r00*x12093))+(((-1.0)*x12089*x12090)));
evalcond[2]=((((-1.0)*x12088*x12092))+((r20*x12091))+(((-1.0)*r22*x12090)));
evalcond[3]=((((-1.0)*x12087*x12092))+((r10*x12091))+(((-1.0)*r12*x12090)));
evalcond[4]=((-1.0)+(((-1.0)*x12087*x12090))+((r10*x12093))+((r12*x12086)));
evalcond[5]=((1.0)+((r00*x12091))+(((-1.0)*x12089*x12092))+(((-1.0)*r02*x12090)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12094=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12094;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x12094);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12095=((1.0)*sj5);
IkReal x12096=((((-1.0)*r00*x12095))+(((-1.0)*cj5*r01)));
j4eval[0]=x12096;
j4eval[1]=((IKabs((((cj5*r20))+(((-1.0)*r21*x12095)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12096);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12097=cj5*cj5;
IkReal x12098=(cj5*r20);
IkReal x12099=(r01*r21);
IkReal x12100=(r21*sj5);
IkReal x12101=((((-1.0)*r00*r20*x12097))+(((-1.0)*r02*r22))+((x12097*x12099))+(((-1.0)*x12099))+((r01*sj5*x12098))+((cj5*r00*x12100)));
j4eval[0]=x12101;
j4eval[1]=((IKabs((x12098+(((-1.0)*x12100)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12101);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12102=cj5*cj5;
IkReal x12103=(cj5*r20);
IkReal x12104=(r01*r21);
IkReal x12105=(r21*sj5);
CheckValue<IkReal> x12106=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+((x12102*x12104))+((cj5*r00*x12105))+(((-1.0)*r00*r20*x12102))+((r01*sj5*x12103))+(((-1.0)*x12104)))),-1);
if(!x12106.valid){
continue;
}
CheckValue<IkReal> x12107 = IKatan2WithCheck(IkReal((x12103+(((-1.0)*x12105)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12107.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12106.value)))+(x12107.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12108=IKcos(j4);
IkReal x12109=IKsin(j4);
IkReal x12110=(r11*sj5);
IkReal x12111=(r21*sj5);
IkReal x12112=(r01*sj5);
IkReal x12113=((1.0)*x12108);
IkReal x12114=(cj5*x12109);
IkReal x12115=((1.0)*x12109);
IkReal x12116=(cj5*x12108);
evalcond[0]=(((r20*x12116))+(((-1.0)*x12111*x12113))+((r22*x12109)));
evalcond[1]=(((r02*x12109))+(((-1.0)*x12112*x12113))+((r00*x12116)));
evalcond[2]=((((-1.0)*r22*x12113))+((r20*x12114))+(((-1.0)*x12111*x12115)));
evalcond[3]=(((r10*x12114))+(((-1.0)*r12*x12113))+(((-1.0)*x12110*x12115)));
evalcond[4]=((1.0)+((r10*x12116))+(((-1.0)*x12110*x12113))+((r12*x12109)));
evalcond[5]=((1.0)+(((-1.0)*x12112*x12115))+((r00*x12114))+(((-1.0)*r02*x12113)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12117=((1.0)*sj5);
CheckValue<IkReal> x12118=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x12117))+(((-1.0)*cj5*r01)))),-1);
if(!x12118.valid){
continue;
}
CheckValue<IkReal> x12119 = IKatan2WithCheck(IkReal((((cj5*r20))+(((-1.0)*r21*x12117)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12119.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12118.value)))+(x12119.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12120=IKcos(j4);
IkReal x12121=IKsin(j4);
IkReal x12122=(r11*sj5);
IkReal x12123=(r21*sj5);
IkReal x12124=(r01*sj5);
IkReal x12125=((1.0)*x12120);
IkReal x12126=(cj5*x12121);
IkReal x12127=((1.0)*x12121);
IkReal x12128=(cj5*x12120);
evalcond[0]=(((r22*x12121))+(((-1.0)*x12123*x12125))+((r20*x12128)));
evalcond[1]=(((r00*x12128))+(((-1.0)*x12124*x12125))+((r02*x12121)));
evalcond[2]=((((-1.0)*r22*x12125))+(((-1.0)*x12123*x12127))+((r20*x12126)));
evalcond[3]=((((-1.0)*r12*x12125))+(((-1.0)*x12122*x12127))+((r10*x12126)));
evalcond[4]=((1.0)+((r12*x12121))+(((-1.0)*x12122*x12125))+((r10*x12128)));
evalcond[5]=((1.0)+((r00*x12126))+(((-1.0)*x12124*x12127))+(((-1.0)*r02*x12125)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12129=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12129.valid){
continue;
}
CheckValue<IkReal> x12130 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12130.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12129.value)))+(x12130.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12131=IKcos(j4);
IkReal x12132=IKsin(j4);
IkReal x12133=(r11*sj5);
IkReal x12134=(r21*sj5);
IkReal x12135=(r01*sj5);
IkReal x12136=((1.0)*x12131);
IkReal x12137=(cj5*x12132);
IkReal x12138=((1.0)*x12132);
IkReal x12139=(cj5*x12131);
evalcond[0]=(((r22*x12132))+(((-1.0)*x12134*x12136))+((r20*x12139)));
evalcond[1]=(((r00*x12139))+(((-1.0)*x12135*x12136))+((r02*x12132)));
evalcond[2]=((((-1.0)*r22*x12136))+(((-1.0)*x12134*x12138))+((r20*x12137)));
evalcond[3]=((((-1.0)*x12133*x12138))+(((-1.0)*r12*x12136))+((r10*x12137)));
evalcond[4]=((1.0)+((r12*x12132))+(((-1.0)*x12133*x12136))+((r10*x12139)));
evalcond[5]=((1.0)+((r00*x12137))+(((-1.0)*x12135*x12138))+(((-1.0)*r02*x12136)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12140=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x12140;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x12140);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12141=((1.0)*sj5);
IkReal x12142=((((-1.0)*r20*x12141))+(((-1.0)*cj5*r21)));
j4eval[0]=x12142;
j4eval[1]=((IKabs(((((-1.0)*r01*x12141))+((cj5*r00)))))+(IKabs(r02)));
j4eval[2]=IKsign(x12142);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12143=cj5*cj5;
IkReal x12144=(cj5*r20);
IkReal x12145=(r01*r21);
IkReal x12146=(r21*sj5);
IkReal x12147=((((-1.0)*r02*r22))+((x12143*x12145))+(((-1.0)*x12145))+((cj5*r00*x12146))+((r01*sj5*x12144))+(((-1.0)*r00*r20*x12143)));
j4eval[0]=x12147;
j4eval[1]=((IKabs(((((-1.0)*x12146))+x12144)))+(IKabs(r22)));
j4eval[2]=IKsign(x12147);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12148=cj5*cj5;
IkReal x12149=(cj5*r20);
IkReal x12150=(r01*r21);
IkReal x12151=(r21*sj5);
CheckValue<IkReal> x12152=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+(((-1.0)*x12150))+((x12148*x12150))+((r01*sj5*x12149))+((cj5*r00*x12151))+(((-1.0)*r00*r20*x12148)))),-1);
if(!x12152.valid){
continue;
}
CheckValue<IkReal> x12153 = IKatan2WithCheck(IkReal(((((-1.0)*x12151))+x12149)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12153.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12152.value)))+(x12153.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12154=IKcos(j4);
IkReal x12155=IKsin(j4);
IkReal x12156=(r11*sj5);
IkReal x12157=(r21*sj5);
IkReal x12158=(r01*sj5);
IkReal x12159=((1.0)*x12154);
IkReal x12160=(cj5*x12155);
IkReal x12161=((1.0)*x12155);
IkReal x12162=(cj5*x12154);
evalcond[0]=(((r22*x12155))+((r20*x12162))+(((-1.0)*x12157*x12159)));
evalcond[1]=(((r02*x12155))+((r00*x12162))+(((-1.0)*x12158*x12159)));
evalcond[2]=((((-1.0)*r22*x12159))+((r20*x12160))+(((-1.0)*x12157*x12161)));
evalcond[3]=((((-1.0)*x12156*x12161))+((r10*x12160))+(((-1.0)*r12*x12159)));
evalcond[4]=((-1.0)+(((-1.0)*x12156*x12159))+((r10*x12162))+((r12*x12155)));
evalcond[5]=((1.0)+(((-1.0)*r02*x12159))+((r00*x12160))+(((-1.0)*x12158*x12161)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12163=((1.0)*sj5);
CheckValue<IkReal> x12164 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x12163))+((cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12164.valid){
continue;
}
CheckValue<IkReal> x12165=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12163))+(((-1.0)*cj5*r21)))),-1);
if(!x12165.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12164.value)+(((1.5707963267949)*(x12165.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12166=IKcos(j4);
IkReal x12167=IKsin(j4);
IkReal x12168=(r11*sj5);
IkReal x12169=(r21*sj5);
IkReal x12170=(r01*sj5);
IkReal x12171=((1.0)*x12166);
IkReal x12172=(cj5*x12167);
IkReal x12173=((1.0)*x12167);
IkReal x12174=(cj5*x12166);
evalcond[0]=(((r20*x12174))+(((-1.0)*x12169*x12171))+((r22*x12167)));
evalcond[1]=(((r02*x12167))+(((-1.0)*x12170*x12171))+((r00*x12174)));
evalcond[2]=((((-1.0)*r22*x12171))+((r20*x12172))+(((-1.0)*x12169*x12173)));
evalcond[3]=(((r10*x12172))+(((-1.0)*x12168*x12173))+(((-1.0)*r12*x12171)));
evalcond[4]=((-1.0)+((r10*x12174))+(((-1.0)*x12168*x12171))+((r12*x12167)));
evalcond[5]=((1.0)+(((-1.0)*x12170*x12173))+((r00*x12172))+(((-1.0)*r02*x12171)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12175 = IKatan2WithCheck(IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12175.valid){
continue;
}
CheckValue<IkReal> x12176=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x12176.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12175.value)+(((1.5707963267949)*(x12176.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12177=IKcos(j4);
IkReal x12178=IKsin(j4);
IkReal x12179=(r11*sj5);
IkReal x12180=(r21*sj5);
IkReal x12181=(r01*sj5);
IkReal x12182=((1.0)*x12177);
IkReal x12183=(cj5*x12178);
IkReal x12184=((1.0)*x12178);
IkReal x12185=(cj5*x12177);
evalcond[0]=(((r20*x12185))+((r22*x12178))+(((-1.0)*x12180*x12182)));
evalcond[1]=((((-1.0)*x12181*x12182))+((r00*x12185))+((r02*x12178)));
evalcond[2]=(((r20*x12183))+(((-1.0)*r22*x12182))+(((-1.0)*x12180*x12184)));
evalcond[3]=((((-1.0)*x12179*x12184))+((r10*x12183))+(((-1.0)*r12*x12182)));
evalcond[4]=((-1.0)+(((-1.0)*x12179*x12182))+((r10*x12185))+((r12*x12178)));
evalcond[5]=((1.0)+(((-1.0)*r02*x12182))+(((-1.0)*x12181*x12184))+((r00*x12183)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12186=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12186);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12186);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12187=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12187);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12187);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x12188=((1.0)*sj5);
j4eval[0]=((((-1.0)*r01*x12188))+((cj5*r00)));
j4eval[1]=(((cj5*r10))+(((-1.0)*r11*x12188)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12189=((1.0)*sj5);
CheckValue<IkReal> x12190=IKPowWithIntegerCheck(((((-1.0)*r01*x12189))+((cj5*r00))),-1);
if(!x12190.valid){
continue;
}
CheckValue<IkReal> x12191=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*x12189))),-1);
if(!x12191.valid){
continue;
}
if( IKabs(((-1.0)*(x12190.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12191.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12190.value)))+IKsqr(((x12191.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12190.value)), ((x12191.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12192=IKsin(j4);
IkReal x12193=IKcos(j4);
IkReal x12194=((1.0)*sj5);
IkReal x12195=(cj5*r00);
IkReal x12196=(cj5*r10);
IkReal x12197=((1.0)*sj2);
evalcond[0]=((-1.0)*r22*x12193);
evalcond[1]=(((r22*x12192))+(((-1.0)*sj1*x12197))+((cj1*cj2)));
evalcond[2]=((((-1.0)*r11*x12192*x12194))+((x12192*x12196)));
evalcond[3]=((((-1.0)*r01*x12193*x12194))+((x12193*x12195)));
evalcond[4]=((1.0)+(((-1.0)*r01*x12192*x12194))+((x12192*x12195)));
evalcond[5]=((((-1.0)*r11*x12193*x12194))+(((-1.0)*cj2*sj1))+((x12193*x12196))+(((-1.0)*cj1*x12197)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12198=IKPowWithIntegerCheck(r22,-1);
if(!x12198.valid){
continue;
}
CheckValue<IkReal> x12199=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x12199.valid){
continue;
}
if( IKabs(((x12198.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12199.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12198.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x12199.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12198.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x12199.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12200=IKsin(j4);
IkReal x12201=IKcos(j4);
IkReal x12202=((1.0)*sj5);
IkReal x12203=(cj5*r00);
IkReal x12204=(cj5*r10);
IkReal x12205=((1.0)*sj2);
evalcond[0]=((-1.0)*r22*x12201);
evalcond[1]=(((r22*x12200))+((cj1*cj2))+(((-1.0)*sj1*x12205)));
evalcond[2]=(((x12200*x12204))+(((-1.0)*r11*x12200*x12202)));
evalcond[3]=(((x12201*x12203))+(((-1.0)*r01*x12201*x12202)));
evalcond[4]=((1.0)+((x12200*x12203))+(((-1.0)*r01*x12200*x12202)));
evalcond[5]=(((x12201*x12204))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x12205))+(((-1.0)*r11*x12201*x12202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12206=((1.0)*cj5);
IkReal x12207=((1.0)*sj5);
IkReal x12208=(cj1*cj2);
IkReal x12209=(sj1*sj2);
CheckValue<IkReal> x12210 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x12207*x12208))+(((-1.0)*r00*x12206*x12209))+((cj5*r00*x12208))+((r01*sj5*x12209)))),IkReal((((r02*x12209))+(((-1.0)*r02*x12208)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12210.valid){
continue;
}
CheckValue<IkReal> x12211=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x12206))+(((-1.0)*r10*x12207)))),-1);
if(!x12211.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12210.value)+(((1.5707963267949)*(x12211.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12212=IKcos(j4);
IkReal x12213=IKsin(j4);
IkReal x12214=((1.0)*sj2);
IkReal x12215=((1.0)*x12212);
IkReal x12216=(cj5*x12212);
IkReal x12217=(cj5*x12213);
IkReal x12218=((1.0)*sj5*x12213);
evalcond[0]=((((-1.0)*r01*sj5*x12215))+((r02*x12213))+((r00*x12216)));
evalcond[1]=((((-1.0)*r22*x12215))+((r20*x12217))+(((-1.0)*r21*x12218)));
evalcond[2]=((((-1.0)*r12*x12215))+(((-1.0)*r11*x12218))+((r10*x12217)));
evalcond[3]=((1.0)+(((-1.0)*r02*x12215))+(((-1.0)*r01*x12218))+((r00*x12217)));
evalcond[4]=((((-1.0)*sj1*x12214))+((r22*x12213))+(((-1.0)*r21*sj5*x12215))+((cj1*cj2))+((r20*x12216)));
evalcond[5]=(((r12*x12213))+(((-1.0)*r11*sj5*x12215))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x12214))+((r10*x12216)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12219=((1.0)*sj5);
CheckValue<IkReal> x12220=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x12219)))),-1);
if(!x12220.valid){
continue;
}
CheckValue<IkReal> x12221 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x12219)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12221.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12220.value)))+(x12221.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12222=IKcos(j4);
IkReal x12223=IKsin(j4);
IkReal x12224=((1.0)*sj2);
IkReal x12225=((1.0)*x12222);
IkReal x12226=(cj5*x12222);
IkReal x12227=(cj5*x12223);
IkReal x12228=((1.0)*sj5*x12223);
evalcond[0]=(((r02*x12223))+(((-1.0)*r01*sj5*x12225))+((r00*x12226)));
evalcond[1]=((((-1.0)*r22*x12225))+(((-1.0)*r21*x12228))+((r20*x12227)));
evalcond[2]=((((-1.0)*r11*x12228))+(((-1.0)*r12*x12225))+((r10*x12227)));
evalcond[3]=((1.0)+(((-1.0)*r01*x12228))+((r00*x12227))+(((-1.0)*r02*x12225)));
evalcond[4]=((((-1.0)*sj1*x12224))+(((-1.0)*r21*sj5*x12225))+((r22*x12223))+((cj1*cj2))+((r20*x12226)));
evalcond[5]=((((-1.0)*cj1*x12224))+(((-1.0)*cj2*sj1))+(((-1.0)*r11*sj5*x12225))+((r10*x12226))+((r12*x12223)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12229 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12229.valid){
continue;
}
CheckValue<IkReal> x12230=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12230.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12229.value)+(((1.5707963267949)*(x12230.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12231=IKcos(j4);
IkReal x12232=IKsin(j4);
IkReal x12233=((1.0)*sj2);
IkReal x12234=((1.0)*x12231);
IkReal x12235=(cj5*x12231);
IkReal x12236=(cj5*x12232);
IkReal x12237=((1.0)*sj5*x12232);
evalcond[0]=(((r00*x12235))+((r02*x12232))+(((-1.0)*r01*sj5*x12234)));
evalcond[1]=((((-1.0)*r22*x12234))+(((-1.0)*r21*x12237))+((r20*x12236)));
evalcond[2]=(((r10*x12236))+(((-1.0)*r12*x12234))+(((-1.0)*r11*x12237)));
evalcond[3]=((1.0)+(((-1.0)*r01*x12237))+((r00*x12236))+(((-1.0)*r02*x12234)));
evalcond[4]=(((r20*x12235))+(((-1.0)*sj1*x12233))+((cj1*cj2))+(((-1.0)*r21*sj5*x12234))+((r22*x12232)));
evalcond[5]=(((r10*x12235))+(((-1.0)*cj2*sj1))+((r12*x12232))+(((-1.0)*cj1*x12233))+(((-1.0)*r11*sj5*x12234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12238=((-1.0)*r10);
IkReal x12240 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x12240)==0){
continue;
}
IkReal x12239=pow(x12240,-0.5);
CheckValue<IkReal> x12241 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12238),IKFAST_ATAN2_MAGTHRESH);
if(!x12241.valid){
continue;
}
IkReal gconst18=((-1.0)*(x12241.value));
IkReal gconst19=(r11*x12239);
IkReal gconst20=(x12238*x12239);
CheckValue<IkReal> x12242 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12242.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x12242.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12243=((-1.0)*r10);
IkReal x12244=x12239;
CheckValue<IkReal> x12246 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12243),IKFAST_ATAN2_MAGTHRESH);
if(!x12246.valid){
continue;
}
IkReal x12245=((-1.0)*(x12246.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x12245;
IkReal gconst18=x12245;
IkReal gconst19=(r11*x12244);
IkReal gconst20=(x12243*x12244);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12247=((-1.0)*r10);
IkReal x12248=x12239;
CheckValue<IkReal> x12250 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12247),IKFAST_ATAN2_MAGTHRESH);
if(!x12250.valid){
continue;
}
IkReal x12249=((-1.0)*(x12250.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x12249;
IkReal gconst18=x12249;
IkReal gconst19=(r11*x12248);
IkReal gconst20=(x12247*x12248);
CheckValue<IkReal> x12258=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x12258.valid){
continue;
}
IkReal x12251=x12258.value;
IkReal x12252=(cj3*x12251);
IkReal x12253=(r00*x12252);
IkReal x12254=(r21*x12252);
IkReal x12255=(r20*x12252);
IkReal x12256=(r01*x12252);
IkReal x12257=(r10*r11*x12252);
j4eval[0]=IKsign((((r01*r10*r11*x12255))+((r10*r11*r21*x12253))+((r01*x12254*(r11*r11)))+((r20*x12253*(r10*r10)))+((cj3*r02*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12259=((-1.0)*r10);
IkReal x12260=x12239;
CheckValue<IkReal> x12262 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12259),IKFAST_ATAN2_MAGTHRESH);
if(!x12262.valid){
continue;
}
IkReal x12261=((-1.0)*(x12262.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x12261;
IkReal gconst18=x12261;
IkReal gconst19=(r11*x12260);
IkReal gconst20=(x12259*x12260);
CheckValue<IkReal> x12270=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x12270.valid){
continue;
}
IkReal x12263=x12270.value;
IkReal x12264=(sj3*x12263);
IkReal x12265=(r20*x12264);
IkReal x12266=(r00*x12264);
IkReal x12267=(r01*x12264);
IkReal x12268=(r21*x12264);
IkReal x12269=(r10*r11*x12264);
j4eval[0]=IKsign((((r01*r10*r11*x12265))+((r10*r11*r21*x12266))+((r00*x12265*(r10*r10)))+((r21*x12267*(r11*r11)))+((r02*r22*sj3))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12271=((-1.0)*r10);
IkReal x12272=x12239;
CheckValue<IkReal> x12274 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12271),IKFAST_ATAN2_MAGTHRESH);
if(!x12274.valid){
continue;
}
IkReal x12273=((-1.0)*(x12274.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x12273;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst18=x12273;
IkReal gconst19=(r11*x12272);
IkReal gconst20=(x12271*x12272);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12275=((-1.0)*r10);
IkReal x12276=x12239;
CheckValue<IkReal> x12278 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12275),IKFAST_ATAN2_MAGTHRESH);
if(!x12278.valid){
continue;
}
IkReal x12277=((-1.0)*(x12278.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x12277;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst18=x12277;
IkReal gconst19=(r11*x12276);
IkReal gconst20=(x12275*x12276);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12279=((-1.0)*r10);
IkReal x12280=x12239;
CheckValue<IkReal> x12282 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12279),IKFAST_ATAN2_MAGTHRESH);
if(!x12282.valid){
continue;
}
IkReal x12281=((-1.0)*(x12282.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x12281;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst18=x12281;
IkReal gconst19=(r11*x12280);
IkReal gconst20=(x12279*x12280);
IkReal x12283=r12*r12;
IkReal x12284=(cj1*r22*sj2);
IkReal x12285=(cj2*r22*sj1);
CheckValue<IkReal> x12289=IKPowWithIntegerCheck(((-1.0)+x12283),-1);
if(!x12289.valid){
continue;
}
IkReal x12286=x12289.value;
if((((1.0)+(((-1.0)*x12283)))) < -0.00001)
continue;
IkReal x12287=IKsqrt(((1.0)+(((-1.0)*x12283))));
IkReal x12288=((1.0)*r12*x12286*x12287);
j4eval[0]=((IKabs(((((-1.0)*x12284*x12288))+(((-1.0)*x12285*x12288)))))+(IKabs((x12284+x12285))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12290=(gconst20*r20);
IkReal x12291=(cj1*sj2);
IkReal x12292=(cj2*sj1);
IkReal x12293=(gconst19*r21);
CheckValue<IkReal> x12294 = IKatan2WithCheck(IkReal((((r22*x12291))+((r22*x12292)))),IkReal(((((-1.0)*x12291*x12293))+((x12290*x12291))+((x12290*x12292))+(((-1.0)*x12292*x12293)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12294.valid){
continue;
}
CheckValue<IkReal> x12295=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x12293*x12293)+(x12290*x12290)+(((-2.0)*x12290*x12293)))),-1);
if(!x12295.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12294.value)+(((1.5707963267949)*(x12295.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12296=IKsin(j4);
IkReal x12297=IKcos(j4);
IkReal x12298=(gconst20*r20);
IkReal x12299=(gconst20*r00);
IkReal x12300=(gconst20*r10);
IkReal x12301=((1.0)*x12297);
IkReal x12302=(gconst19*x12297);
IkReal x12303=((1.0)*x12296);
evalcond[0]=((((-1.0)*gconst19*r21*x12303))+(((-1.0)*r22*x12301))+((x12296*x12298)));
evalcond[1]=((((-1.0)*gconst19*r11*x12303))+((x12296*x12300))+(((-1.0)*r12*x12301)));
evalcond[2]=((((-1.0)*r02*x12303))+((r01*x12302))+(((-1.0)*x12299*x12301)));
evalcond[3]=((1.0)+(((-1.0)*gconst19*r01*x12303))+(((-1.0)*r02*x12301))+((x12296*x12299)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x12302))+(((-1.0)*r22*x12303))+(((-1.0)*x12298*x12301)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r11*x12302))+((cj1*cj2))+(((-1.0)*x12300*x12301))+(((-1.0)*r12*x12303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12304=(gconst19*r01);
IkReal x12305=(gconst20*r00);
CheckValue<IkReal> x12306=IKPowWithIntegerCheck(IKsign(((x12304*x12304)+(((-2.0)*x12304*x12305))+(x12305*x12305)+(r02*r02))),-1);
if(!x12306.valid){
continue;
}
CheckValue<IkReal> x12307 = IKatan2WithCheck(IkReal(((((-1.0)*x12305))+x12304)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x12307.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12306.value)))+(x12307.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12308=IKsin(j4);
IkReal x12309=IKcos(j4);
IkReal x12310=(gconst20*r20);
IkReal x12311=(gconst20*r00);
IkReal x12312=(gconst20*r10);
IkReal x12313=((1.0)*x12309);
IkReal x12314=(gconst19*x12309);
IkReal x12315=((1.0)*x12308);
evalcond[0]=((((-1.0)*gconst19*r21*x12315))+((x12308*x12310))+(((-1.0)*r22*x12313)));
evalcond[1]=((((-1.0)*gconst19*r11*x12315))+(((-1.0)*r12*x12313))+((x12308*x12312)));
evalcond[2]=((((-1.0)*x12311*x12313))+(((-1.0)*r02*x12315))+((r01*x12314)));
evalcond[3]=((1.0)+(((-1.0)*gconst19*r01*x12315))+(((-1.0)*r02*x12313))+((x12308*x12311)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x12310*x12313))+(((-1.0)*r22*x12315))+((r21*x12314)));
evalcond[5]=(((r11*x12314))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x12315))+(((-1.0)*x12312*x12313))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12316 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst19*r11))+((gconst20*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12316.valid){
continue;
}
CheckValue<IkReal> x12317=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x12317.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12316.value)+(((1.5707963267949)*(x12317.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12318=IKsin(j4);
IkReal x12319=IKcos(j4);
IkReal x12320=(gconst20*r20);
IkReal x12321=(gconst20*r00);
IkReal x12322=(gconst20*r10);
IkReal x12323=((1.0)*x12319);
IkReal x12324=(gconst19*x12319);
IkReal x12325=((1.0)*x12318);
evalcond[0]=((((-1.0)*r22*x12323))+((x12318*x12320))+(((-1.0)*gconst19*r21*x12325)));
evalcond[1]=(((x12318*x12322))+(((-1.0)*gconst19*r11*x12325))+(((-1.0)*r12*x12323)));
evalcond[2]=((((-1.0)*x12321*x12323))+((r01*x12324))+(((-1.0)*r02*x12325)));
evalcond[3]=((1.0)+((x12318*x12321))+(((-1.0)*gconst19*r01*x12325))+(((-1.0)*r02*x12323)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x12325))+((cj1*sj2))+(((-1.0)*x12320*x12323))+((r21*x12324)));
evalcond[5]=((((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r12*x12325))+((r11*x12324))+(((-1.0)*x12322*x12323)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12326=((-1.0)*r10);
IkReal x12327=x12239;
CheckValue<IkReal> x12329 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12326),IKFAST_ATAN2_MAGTHRESH);
if(!x12329.valid){
continue;
}
IkReal x12328=((-1.0)*(x12329.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x12328;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst18=x12328;
IkReal gconst19=(r11*x12327);
IkReal gconst20=(x12326*x12327);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x12330=((-1.0)*r10);
IkReal x12331=x12239;
CheckValue<IkReal> x12333 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12330),IKFAST_ATAN2_MAGTHRESH);
if(!x12333.valid){
continue;
}
IkReal x12332=((-1.0)*(x12333.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x12332;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst18=x12332;
IkReal gconst19=(r11*x12331);
IkReal gconst20=(x12330*x12331);
IkReal x12334=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x12338=IKPowWithIntegerCheck(x12334,-1);
if(!x12338.valid){
continue;
}
IkReal x12335=x12338.value;
IkReal x12336=((1.0)*x12335);
IkReal x12337=((((-1.0)*(r02*r02)))+(((-1.0)*x12336*(r01*r01)*(r11*r11)))+(((-2.0)*r00*r01*r10*r11*x12335))+(((-1.0)*x12336*(r00*r00)*(r10*r10))));
j4eval[0]=x12337;
j4eval[1]=r02;
j4eval[2]=x12334;
j4eval[3]=IKsign(x12337);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12339=((-1.0)*r10);
IkReal x12340=x12239;
CheckValue<IkReal> x12342 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12339),IKFAST_ATAN2_MAGTHRESH);
if(!x12342.valid){
continue;
}
IkReal x12341=((-1.0)*(x12342.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x12341;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst18=x12341;
IkReal gconst19=(r11*x12340);
IkReal gconst20=(x12339*x12340);
IkReal x12343=r12*r12;
IkReal x12344=(r02*sj1*sj2);
CheckValue<IkReal> x12349=IKPowWithIntegerCheck(((-1.0)+x12343),-1);
if(!x12349.valid){
continue;
}
IkReal x12345=x12349.value;
IkReal x12346=((1.0)*cj1*cj2*r02);
if((((1.0)+(((-1.0)*x12343)))) < -0.00001)
continue;
IkReal x12347=IKsqrt(((1.0)+(((-1.0)*x12343))));
IkReal x12348=(r12*x12345*x12347);
j4eval[0]=((IKabs((x12344+(((-1.0)*x12346)))))+(IKabs((((x12344*x12348))+(((-1.0)*x12346*x12348))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12350=(gconst19*r01);
IkReal x12351=(sj1*sj2);
IkReal x12352=(gconst20*r00);
IkReal x12353=((1.0)*cj1*cj2);
CheckValue<IkReal> x12354=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x12354.valid){
continue;
}
CheckValue<IkReal> x12355 = IKatan2WithCheck(IkReal((((cj1*cj2*x12352))+(((-1.0)*x12351*x12352))+((x12350*x12351))+(((-1.0)*x12350*x12353)))),IkReal(((((-1.0)*r02*x12353))+((r02*x12351)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12355.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12354.value)))+(x12355.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12356=IKcos(j4);
IkReal x12357=IKsin(j4);
IkReal x12358=(gconst20*r00);
IkReal x12359=(gconst19*r21);
IkReal x12360=(gconst20*r20);
IkReal x12361=(gconst19*r01);
IkReal x12362=(gconst20*r10);
IkReal x12363=(gconst19*r11);
IkReal x12364=((1.0)*x12356);
IkReal x12365=((1.0)*x12357);
evalcond[0]=(((r02*x12357))+(((-1.0)*x12361*x12364))+((x12356*x12358)));
evalcond[1]=((((-1.0)*r22*x12364))+(((-1.0)*x12359*x12365))+((x12357*x12360)));
evalcond[2]=((((-1.0)*r12*x12364))+((x12357*x12362))+(((-1.0)*x12363*x12365)));
evalcond[3]=((1.0)+((x12357*x12358))+(((-1.0)*r02*x12364))+(((-1.0)*x12361*x12365)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x12359*x12364))+((r22*x12357))+((x12356*x12360)));
evalcond[5]=((((-1.0)*sj1*sj2))+((x12356*x12362))+((cj1*cj2))+((r12*x12357))+(((-1.0)*x12363*x12364)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12366=(gconst20*r00);
IkReal x12367=(gconst19*r01);
CheckValue<IkReal> x12368=IKPowWithIntegerCheck(IKsign(((((2.0)*x12366*x12367))+(((-1.0)*(r02*r02)))+(((-1.0)*(x12367*x12367)))+(((-1.0)*(x12366*x12366))))),-1);
if(!x12368.valid){
continue;
}
CheckValue<IkReal> x12369 = IKatan2WithCheck(IkReal((x12366+(((-1.0)*x12367)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12369.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12368.value)))+(x12369.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12370=IKcos(j4);
IkReal x12371=IKsin(j4);
IkReal x12372=(gconst20*r00);
IkReal x12373=(gconst19*r21);
IkReal x12374=(gconst20*r20);
IkReal x12375=(gconst19*r01);
IkReal x12376=(gconst20*r10);
IkReal x12377=(gconst19*r11);
IkReal x12378=((1.0)*x12370);
IkReal x12379=((1.0)*x12371);
evalcond[0]=((((-1.0)*x12375*x12378))+((x12370*x12372))+((r02*x12371)));
evalcond[1]=((((-1.0)*r22*x12378))+((x12371*x12374))+(((-1.0)*x12373*x12379)));
evalcond[2]=((((-1.0)*x12377*x12379))+(((-1.0)*r12*x12378))+((x12371*x12376)));
evalcond[3]=((1.0)+(((-1.0)*x12375*x12379))+(((-1.0)*r02*x12378))+((x12371*x12372)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x12370*x12374))+((r22*x12371))+(((-1.0)*x12373*x12378)));
evalcond[5]=((((-1.0)*x12377*x12378))+(((-1.0)*sj1*sj2))+((x12370*x12376))+((cj1*cj2))+((r12*x12371)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12380 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst19*r11))+((gconst20*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12380.valid){
continue;
}
CheckValue<IkReal> x12381=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x12381.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12380.value)+(((1.5707963267949)*(x12381.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12382=IKcos(j4);
IkReal x12383=IKsin(j4);
IkReal x12384=(gconst20*r00);
IkReal x12385=(gconst19*r21);
IkReal x12386=(gconst20*r20);
IkReal x12387=(gconst19*r01);
IkReal x12388=(gconst20*r10);
IkReal x12389=(gconst19*r11);
IkReal x12390=((1.0)*x12382);
IkReal x12391=((1.0)*x12383);
evalcond[0]=(((r02*x12383))+((x12382*x12384))+(((-1.0)*x12387*x12390)));
evalcond[1]=((((-1.0)*x12385*x12391))+(((-1.0)*r22*x12390))+((x12383*x12386)));
evalcond[2]=((((-1.0)*r12*x12390))+(((-1.0)*x12389*x12391))+((x12383*x12388)));
evalcond[3]=((1.0)+(((-1.0)*r02*x12390))+((x12383*x12384))+(((-1.0)*x12387*x12391)));
evalcond[4]=((((-1.0)*x12385*x12390))+((cj2*sj1))+((cj1*sj2))+((x12382*x12386))+((r22*x12383)));
evalcond[5]=(((r12*x12383))+(((-1.0)*sj1*sj2))+(((-1.0)*x12389*x12390))+((x12382*x12388))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12392=((-1.0)*r10);
IkReal x12393=x12239;
CheckValue<IkReal> x12395 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12392),IKFAST_ATAN2_MAGTHRESH);
if(!x12395.valid){
continue;
}
IkReal x12394=((-1.0)*(x12395.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x12394;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst18=x12394;
IkReal gconst19=(r11*x12393);
IkReal gconst20=(x12392*x12393);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12396=((-1.0)*r10);
IkReal x12397=x12239;
CheckValue<IkReal> x12399 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12396),IKFAST_ATAN2_MAGTHRESH);
if(!x12399.valid){
continue;
}
IkReal x12398=((-1.0)*(x12399.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x12398;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst18=x12398;
IkReal gconst19=(r11*x12397);
IkReal gconst20=(x12396*x12397);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12400=((-1.0)*r10);
IkReal x12401=x12239;
CheckValue<IkReal> x12403 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12400),IKFAST_ATAN2_MAGTHRESH);
if(!x12403.valid){
continue;
}
IkReal x12402=((-1.0)*(x12403.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x12402;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst18=x12402;
IkReal gconst19=(r11*x12401);
IkReal gconst20=(x12400*x12401);
IkReal x12404=r12*r12;
IkReal x12405=(cj1*cj2);
IkReal x12406=(sj1*sj2);
CheckValue<IkReal> x12410=IKPowWithIntegerCheck(((-1.0)+x12404),-1);
if(!x12410.valid){
continue;
}
IkReal x12407=x12410.value;
if((((1.0)+(((-1.0)*x12404)))) < -0.00001)
continue;
IkReal x12408=IKsqrt(((1.0)+(((-1.0)*x12404))));
IkReal x12409=(r12*r22*x12407*x12408);
j4eval[0]=((IKabs((((r22*x12405))+(((-1.0)*r22*x12406)))))+(IKabs(((((-1.0)*x12405*x12409))+((x12406*x12409))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12411=(gconst20*r20);
IkReal x12412=(cj1*cj2);
IkReal x12413=(gconst19*r21);
IkReal x12414=((1.0)*sj1*sj2);
CheckValue<IkReal> x12415 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x12414))+((r22*x12412)))),IkReal((((x12411*x12412))+(((-1.0)*x12411*x12414))+((sj1*sj2*x12413))+(((-1.0)*x12412*x12413)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12415.valid){
continue;
}
CheckValue<IkReal> x12416=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x12411*x12413))+(x12413*x12413)+(x12411*x12411))),-1);
if(!x12416.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12415.value)+(((1.5707963267949)*(x12416.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12417=IKsin(j4);
IkReal x12418=IKcos(j4);
IkReal x12419=(gconst20*r20);
IkReal x12420=(gconst20*r00);
IkReal x12421=((1.0)*sj1);
IkReal x12422=(gconst20*r10);
IkReal x12423=((1.0)*x12418);
IkReal x12424=(gconst19*x12418);
IkReal x12425=((1.0)*x12417);
evalcond[0]=(((x12417*x12419))+(((-1.0)*r22*x12423))+(((-1.0)*gconst19*r21*x12425)));
evalcond[1]=(((x12417*x12422))+(((-1.0)*r12*x12423))+(((-1.0)*gconst19*r11*x12425)));
evalcond[2]=((((-1.0)*x12420*x12423))+((r01*x12424))+(((-1.0)*r02*x12425)));
evalcond[3]=((1.0)+(((-1.0)*gconst19*r01*x12425))+((x12417*x12420))+(((-1.0)*r02*x12423)));
evalcond[4]=(((r21*x12424))+(((-1.0)*r22*x12425))+(((-1.0)*x12419*x12423))+(((-1.0)*sj2*x12421))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*x12422*x12423))+(((-1.0)*cj2*x12421))+((r11*x12424))+(((-1.0)*r12*x12425)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12426=(gconst19*r01);
IkReal x12427=(gconst20*r00);
CheckValue<IkReal> x12428 = IKatan2WithCheck(IkReal(((((-1.0)*x12427))+x12426)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x12428.valid){
continue;
}
CheckValue<IkReal> x12429=IKPowWithIntegerCheck(IKsign(((x12427*x12427)+(x12426*x12426)+(((-2.0)*x12426*x12427))+(r02*r02))),-1);
if(!x12429.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12428.value)+(((1.5707963267949)*(x12429.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12430=IKsin(j4);
IkReal x12431=IKcos(j4);
IkReal x12432=(gconst20*r20);
IkReal x12433=(gconst20*r00);
IkReal x12434=((1.0)*sj1);
IkReal x12435=(gconst20*r10);
IkReal x12436=((1.0)*x12431);
IkReal x12437=(gconst19*x12431);
IkReal x12438=((1.0)*x12430);
evalcond[0]=((((-1.0)*r22*x12436))+(((-1.0)*gconst19*r21*x12438))+((x12430*x12432)));
evalcond[1]=((((-1.0)*r12*x12436))+((x12430*x12435))+(((-1.0)*gconst19*r11*x12438)));
evalcond[2]=((((-1.0)*x12433*x12436))+(((-1.0)*r02*x12438))+((r01*x12437)));
evalcond[3]=((1.0)+(((-1.0)*gconst19*r01*x12438))+((x12430*x12433))+(((-1.0)*r02*x12436)));
evalcond[4]=(((r21*x12437))+(((-1.0)*r22*x12438))+(((-1.0)*sj2*x12434))+((cj1*cj2))+(((-1.0)*x12432*x12436)));
evalcond[5]=((((-1.0)*x12435*x12436))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x12438))+(((-1.0)*cj2*x12434))+((r11*x12437)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12439 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst19*r11))+((gconst20*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12439.valid){
continue;
}
CheckValue<IkReal> x12440=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x12440.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12439.value)+(((1.5707963267949)*(x12440.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12441=IKsin(j4);
IkReal x12442=IKcos(j4);
IkReal x12443=(gconst20*r20);
IkReal x12444=(gconst20*r00);
IkReal x12445=((1.0)*sj1);
IkReal x12446=(gconst20*r10);
IkReal x12447=((1.0)*x12442);
IkReal x12448=(gconst19*x12442);
IkReal x12449=((1.0)*x12441);
evalcond[0]=((((-1.0)*r22*x12447))+((x12441*x12443))+(((-1.0)*gconst19*r21*x12449)));
evalcond[1]=((((-1.0)*gconst19*r11*x12449))+((x12441*x12446))+(((-1.0)*r12*x12447)));
evalcond[2]=((((-1.0)*r02*x12449))+((r01*x12448))+(((-1.0)*x12444*x12447)));
evalcond[3]=((1.0)+(((-1.0)*r02*x12447))+((x12441*x12444))+(((-1.0)*gconst19*r01*x12449)));
evalcond[4]=((((-1.0)*r22*x12449))+((r21*x12448))+(((-1.0)*sj2*x12445))+(((-1.0)*x12443*x12447))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12445))+(((-1.0)*r12*x12449))+(((-1.0)*x12446*x12447))+((r11*x12448)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12450=((-1.0)*r10);
IkReal x12451=x12239;
CheckValue<IkReal> x12453 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12450),IKFAST_ATAN2_MAGTHRESH);
if(!x12453.valid){
continue;
}
IkReal x12452=((-1.0)*(x12453.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x12452;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst18=x12452;
IkReal gconst19=(r11*x12451);
IkReal gconst20=(x12450*x12451);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x12454=((-1.0)*r10);
IkReal x12455=x12239;
CheckValue<IkReal> x12457 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12454),IKFAST_ATAN2_MAGTHRESH);
if(!x12457.valid){
continue;
}
IkReal x12456=((-1.0)*(x12457.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x12456;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst18=x12456;
IkReal gconst19=(r11*x12455);
IkReal gconst20=(x12454*x12455);
IkReal x12458=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x12462=IKPowWithIntegerCheck(x12458,-1);
if(!x12462.valid){
continue;
}
IkReal x12459=x12462.value;
IkReal x12460=((1.0)*x12459);
IkReal x12461=((((-1.0)*(r02*r02)))+(((-1.0)*x12460*(r00*r00)*(r10*r10)))+(((-1.0)*x12460*(r01*r01)*(r11*r11)))+(((-2.0)*r00*r01*r10*r11*x12459)));
j4eval[0]=x12461;
j4eval[1]=r02;
j4eval[2]=x12458;
j4eval[3]=IKsign(x12461);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12463=((-1.0)*r10);
IkReal x12464=x12239;
CheckValue<IkReal> x12466 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12463),IKFAST_ATAN2_MAGTHRESH);
if(!x12466.valid){
continue;
}
IkReal x12465=((-1.0)*(x12466.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x12465;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst18=x12465;
IkReal gconst19=(r11*x12464);
IkReal gconst20=(x12463*x12464);
IkReal x12467=(cj1*r02*sj2);
IkReal x12468=(cj2*r02*sj1);
IkReal x12469=x12239;
IkReal x12470=(r12*x12469);
j4eval[0]=((IKabs((x12468+x12467)))+(IKabs((((x12468*x12470))+((x12467*x12470))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12471=(cj2*sj1);
IkReal x12472=(gconst19*r01);
IkReal x12473=(cj1*sj2);
IkReal x12474=((1.0)*gconst20*r00);
CheckValue<IkReal> x12475 = IKatan2WithCheck(IkReal(((((-1.0)*x12471*x12474))+(((-1.0)*x12473*x12474))+((x12471*x12472))+((x12472*x12473)))),IkReal((((r02*x12471))+((r02*x12473)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12475.valid){
continue;
}
CheckValue<IkReal> x12476=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x12476.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12475.value)+(((1.5707963267949)*(x12476.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12477=IKcos(j4);
IkReal x12478=IKsin(j4);
IkReal x12479=(gconst20*r00);
IkReal x12480=((1.0)*sj1);
IkReal x12481=(gconst19*r21);
IkReal x12482=(gconst20*r20);
IkReal x12483=(gconst19*r01);
IkReal x12484=(gconst20*r10);
IkReal x12485=(gconst19*r11);
IkReal x12486=((1.0)*x12477);
IkReal x12487=((1.0)*x12478);
evalcond[0]=(((x12477*x12479))+(((-1.0)*x12483*x12486))+((r02*x12478)));
evalcond[1]=((((-1.0)*r22*x12486))+((x12478*x12482))+(((-1.0)*x12481*x12487)));
evalcond[2]=((((-1.0)*r12*x12486))+((x12478*x12484))+(((-1.0)*x12485*x12487)));
evalcond[3]=((1.0)+((x12478*x12479))+(((-1.0)*x12483*x12487))+(((-1.0)*r02*x12486)));
evalcond[4]=(((x12477*x12482))+(((-1.0)*x12481*x12486))+((cj1*cj2))+(((-1.0)*sj2*x12480))+((r22*x12478)));
evalcond[5]=(((x12477*x12484))+((r12*x12478))+(((-1.0)*cj1*sj2))+(((-1.0)*x12485*x12486))+(((-1.0)*cj2*x12480)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12488=(gconst20*r00);
IkReal x12489=(gconst19*r01);
CheckValue<IkReal> x12490 = IKatan2WithCheck(IkReal(((((-1.0)*x12489))+x12488)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12490.valid){
continue;
}
CheckValue<IkReal> x12491=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x12489*x12489)))+(((-1.0)*(r02*r02)))+(((2.0)*x12488*x12489))+(((-1.0)*(x12488*x12488))))),-1);
if(!x12491.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12490.value)+(((1.5707963267949)*(x12491.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12492=IKcos(j4);
IkReal x12493=IKsin(j4);
IkReal x12494=(gconst20*r00);
IkReal x12495=((1.0)*sj1);
IkReal x12496=(gconst19*r21);
IkReal x12497=(gconst20*r20);
IkReal x12498=(gconst19*r01);
IkReal x12499=(gconst20*r10);
IkReal x12500=(gconst19*r11);
IkReal x12501=((1.0)*x12492);
IkReal x12502=((1.0)*x12493);
evalcond[0]=((((-1.0)*x12498*x12501))+((x12492*x12494))+((r02*x12493)));
evalcond[1]=(((x12493*x12497))+(((-1.0)*x12496*x12502))+(((-1.0)*r22*x12501)));
evalcond[2]=(((x12493*x12499))+(((-1.0)*r12*x12501))+(((-1.0)*x12500*x12502)));
evalcond[3]=((1.0)+(((-1.0)*x12498*x12502))+((x12493*x12494))+(((-1.0)*r02*x12501)));
evalcond[4]=(((x12492*x12497))+(((-1.0)*x12496*x12501))+(((-1.0)*sj2*x12495))+((cj1*cj2))+((r22*x12493)));
evalcond[5]=(((x12492*x12499))+(((-1.0)*cj2*x12495))+(((-1.0)*cj1*sj2))+(((-1.0)*x12500*x12501))+((r12*x12493)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12503 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst19*r11))+((gconst20*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12503.valid){
continue;
}
CheckValue<IkReal> x12504=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x12504.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12503.value)+(((1.5707963267949)*(x12504.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12505=IKcos(j4);
IkReal x12506=IKsin(j4);
IkReal x12507=(gconst20*r00);
IkReal x12508=((1.0)*sj1);
IkReal x12509=(gconst19*r21);
IkReal x12510=(gconst20*r20);
IkReal x12511=(gconst19*r01);
IkReal x12512=(gconst20*r10);
IkReal x12513=(gconst19*r11);
IkReal x12514=((1.0)*x12505);
IkReal x12515=((1.0)*x12506);
evalcond[0]=(((x12505*x12507))+((r02*x12506))+(((-1.0)*x12511*x12514)));
evalcond[1]=((((-1.0)*r22*x12514))+((x12506*x12510))+(((-1.0)*x12509*x12515)));
evalcond[2]=((((-1.0)*r12*x12514))+(((-1.0)*x12513*x12515))+((x12506*x12512)));
evalcond[3]=((1.0)+(((-1.0)*r02*x12514))+((x12506*x12507))+(((-1.0)*x12511*x12515)));
evalcond[4]=(((x12505*x12510))+(((-1.0)*x12509*x12514))+((cj1*cj2))+(((-1.0)*sj2*x12508))+((r22*x12506)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*x12513*x12514))+((x12505*x12512))+(((-1.0)*cj2*x12508))+((r12*x12506)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12516=((-1.0)*r10);
IkReal x12517=((-1.0)*pz);
CheckValue<IkReal> x12519 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12516),IKFAST_ATAN2_MAGTHRESH);
if(!x12519.valid){
continue;
}
IkReal x12518=((-1.0)*(x12519.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x12518;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12517);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12517);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal gconst18=x12518;
IkReal gconst19=r11;
IkReal gconst20=x12516;
IkReal x12520=(r00*r10);
IkReal x12521=(r01*r11);
j4eval[0]=((((-1.0)*x12521))+(((-1.0)*x12520)));
j4eval[1]=(((sj3*x12520))+((sj3*x12521)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12522=((-1.0)*r10);
IkReal x12523=((-1.0)*pz);
CheckValue<IkReal> x12525 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12522),IKFAST_ATAN2_MAGTHRESH);
if(!x12525.valid){
continue;
}
IkReal x12524=((-1.0)*(x12525.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x12524;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12523);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12523);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal gconst18=x12524;
IkReal gconst19=r11;
IkReal gconst20=x12522;
IkReal x12526=(r00*r10);
IkReal x12527=(r01*r11);
j4eval[0]=((((-1.0)*x12527))+(((-1.0)*x12526)));
j4eval[1]=(((cj3*x12526))+((cj3*x12527)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x12528=((-1.0)*r10);
IkReal x12529=((-1.0)*pz);
CheckValue<IkReal> x12531 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12528),IKFAST_ATAN2_MAGTHRESH);
if(!x12531.valid){
continue;
}
IkReal x12530=((-1.0)*(x12531.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x12530;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12529);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12529);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal gconst18=x12530;
IkReal gconst19=r11;
IkReal gconst20=x12528;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=(((cj3*r01*r11))+((cj3*r00*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12532=((1.0)*r00);
CheckValue<IkReal> x12533=IKPowWithIntegerCheck(cj3,-1);
if(!x12533.valid){
continue;
}
CheckValue<IkReal> x12534=IKPowWithIntegerCheck(r22,-1);
if(!x12534.valid){
continue;
}
CheckValue<IkReal> x12535=IKPowWithIntegerCheck((((cj3*gconst19*r01))+(((-1.0)*cj3*gconst20*x12532))),-1);
if(!x12535.valid){
continue;
}
if( IKabs(((x12533.value)*(x12534.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12535.value)*(((((-1.0)*gconst19*sj3*x12532))+(((-1.0)*gconst20*r01*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12533.value)*(x12534.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x12535.value)*(((((-1.0)*gconst19*sj3*x12532))+(((-1.0)*gconst20*r01*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12533.value)*(x12534.value)*((((cj2*sj1))+((cj1*sj2))))), ((x12535.value)*(((((-1.0)*gconst19*sj3*x12532))+(((-1.0)*gconst20*r01*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12536=IKsin(j4);
IkReal x12537=IKcos(j4);
IkReal x12538=(cj1*cj2);
IkReal x12539=(gconst20*r00);
IkReal x12540=(cj3*gconst19);
IkReal x12541=(gconst19*sj3);
IkReal x12542=((1.0)*sj2);
IkReal x12543=((1.0)*cj3);
IkReal x12544=(gconst20*r11);
IkReal x12545=(gconst20*sj3);
IkReal x12546=(cj2*sj1);
IkReal x12547=(gconst20*r10);
IkReal x12548=(sj1*x12542);
IkReal x12549=(r22*x12536);
IkReal x12550=((1.0)*x12537);
IkReal x12551=(x12537*x12541);
IkReal x12552=((1.0)*gconst19*x12536);
evalcond[0]=((-1.0)*r22*x12537);
evalcond[1]=((((-1.0)*r11*x12552))+((x12536*x12547)));
evalcond[2]=(((cj1*sj2))+x12546+(((-1.0)*x12543*x12549)));
evalcond[3]=((1.0)+(((-1.0)*r01*x12552))+((x12536*x12539)));
evalcond[4]=((((-1.0)*sj3*x12549))+x12538+(((-1.0)*x12548)));
evalcond[5]=(((r01*x12537*x12540))+((r00*x12541))+((r01*x12545))+(((-1.0)*x12537*x12539*x12543)));
evalcond[6]=(((r01*x12551))+(((-1.0)*gconst20*r01*x12543))+(((-1.0)*sj3*x12539*x12550))+(((-1.0)*r00*x12540)));
evalcond[7]=((((-1.0)*x12537*x12543*x12547))+((r10*x12541))+((sj3*x12544))+x12538+((r11*x12537*x12540))+(((-1.0)*x12548)));
evalcond[8]=((((-1.0)*x12546))+(((-1.0)*r10*x12545*x12550))+(((-1.0)*r10*x12540))+((r11*x12551))+(((-1.0)*cj1*x12542))+(((-1.0)*x12543*x12544)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12553=((1.0)*r00);
IkReal x12554=(gconst19*r01);
CheckValue<IkReal> x12555=IKPowWithIntegerCheck((((gconst20*r00))+(((-1.0)*x12554))),-1);
if(!x12555.valid){
continue;
}
CheckValue<IkReal> x12556=IKPowWithIntegerCheck(((((-1.0)*cj3*gconst20*x12553))+((cj3*x12554))),-1);
if(!x12556.valid){
continue;
}
if( IKabs(((-1.0)*(x12555.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12556.value)*(((((-1.0)*gconst19*sj3*x12553))+(((-1.0)*gconst20*r01*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12555.value)))+IKsqr(((x12556.value)*(((((-1.0)*gconst19*sj3*x12553))+(((-1.0)*gconst20*r01*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12555.value)), ((x12556.value)*(((((-1.0)*gconst19*sj3*x12553))+(((-1.0)*gconst20*r01*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12557=IKsin(j4);
IkReal x12558=IKcos(j4);
IkReal x12559=(cj1*cj2);
IkReal x12560=(gconst20*r00);
IkReal x12561=(cj3*gconst19);
IkReal x12562=(gconst19*sj3);
IkReal x12563=((1.0)*sj2);
IkReal x12564=((1.0)*cj3);
IkReal x12565=(gconst20*r11);
IkReal x12566=(gconst20*sj3);
IkReal x12567=(cj2*sj1);
IkReal x12568=(gconst20*r10);
IkReal x12569=(sj1*x12563);
IkReal x12570=(r22*x12557);
IkReal x12571=((1.0)*x12558);
IkReal x12572=(x12558*x12562);
IkReal x12573=((1.0)*gconst19*x12557);
evalcond[0]=((-1.0)*r22*x12558);
evalcond[1]=((((-1.0)*r11*x12573))+((x12557*x12568)));
evalcond[2]=((((-1.0)*x12564*x12570))+((cj1*sj2))+x12567);
evalcond[3]=((1.0)+((x12557*x12560))+(((-1.0)*r01*x12573)));
evalcond[4]=((((-1.0)*sj3*x12570))+x12559+(((-1.0)*x12569)));
evalcond[5]=((((-1.0)*x12558*x12560*x12564))+((r01*x12558*x12561))+((r01*x12566))+((r00*x12562)));
evalcond[6]=((((-1.0)*gconst20*r01*x12564))+(((-1.0)*sj3*x12560*x12571))+((r01*x12572))+(((-1.0)*r00*x12561)));
evalcond[7]=((((-1.0)*x12558*x12564*x12568))+((r10*x12562))+x12559+((r11*x12558*x12561))+(((-1.0)*x12569))+((sj3*x12565)));
evalcond[8]=((((-1.0)*x12564*x12565))+(((-1.0)*r10*x12561))+(((-1.0)*x12567))+(((-1.0)*r10*x12566*x12571))+((r11*x12572))+(((-1.0)*cj1*x12563)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12574=(gconst20*r00);
IkReal x12575=(gconst19*r01);
CheckValue<IkReal> x12576=IKPowWithIntegerCheck(((((-1.0)*x12575))+x12574),-1);
if(!x12576.valid){
continue;
}
CheckValue<IkReal> x12577=IKPowWithIntegerCheck(((((-1.0)*sj3*x12574))+((sj3*x12575))),-1);
if(!x12577.valid){
continue;
}
if( IKabs(((-1.0)*(x12576.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12577.value)*((((cj3*gconst19*r00))+((cj3*gconst20*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12576.value)))+IKsqr(((x12577.value)*((((cj3*gconst19*r00))+((cj3*gconst20*r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12576.value)), ((x12577.value)*((((cj3*gconst19*r00))+((cj3*gconst20*r01))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12578=IKsin(j4);
IkReal x12579=IKcos(j4);
IkReal x12580=(cj1*cj2);
IkReal x12581=(gconst20*r00);
IkReal x12582=(cj3*gconst19);
IkReal x12583=(gconst19*sj3);
IkReal x12584=((1.0)*sj2);
IkReal x12585=((1.0)*cj3);
IkReal x12586=(gconst20*r11);
IkReal x12587=(gconst20*sj3);
IkReal x12588=(cj2*sj1);
IkReal x12589=(gconst20*r10);
IkReal x12590=(sj1*x12584);
IkReal x12591=(r22*x12578);
IkReal x12592=((1.0)*x12579);
IkReal x12593=(x12579*x12583);
IkReal x12594=((1.0)*gconst19*x12578);
evalcond[0]=((-1.0)*r22*x12579);
evalcond[1]=(((x12578*x12589))+(((-1.0)*r11*x12594)));
evalcond[2]=(((cj1*sj2))+(((-1.0)*x12585*x12591))+x12588);
evalcond[3]=((1.0)+(((-1.0)*r01*x12594))+((x12578*x12581)));
evalcond[4]=((((-1.0)*x12590))+x12580+(((-1.0)*sj3*x12591)));
evalcond[5]=(((r00*x12583))+((r01*x12587))+((r01*x12579*x12582))+(((-1.0)*x12579*x12581*x12585)));
evalcond[6]=((((-1.0)*gconst20*r01*x12585))+((r01*x12593))+(((-1.0)*sj3*x12581*x12592))+(((-1.0)*r00*x12582)));
evalcond[7]=(((sj3*x12586))+((r11*x12579*x12582))+(((-1.0)*x12590))+x12580+((r10*x12583))+(((-1.0)*x12579*x12585*x12589)));
evalcond[8]=((((-1.0)*x12585*x12586))+(((-1.0)*r10*x12587*x12592))+(((-1.0)*cj1*x12584))+(((-1.0)*x12588))+(((-1.0)*r10*x12582))+((r11*x12593)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12595=gconst19*gconst19;
IkReal x12596=gconst20*gconst20;
IkReal x12597=(r20*sj3);
IkReal x12598=(cj3*r21);
IkReal x12599=(gconst19*r00);
IkReal x12600=((1.0)*gconst20);
IkReal x12601=(cj3*r20);
IkReal x12602=(r21*sj3);
IkReal x12603=(gconst19*gconst20*r01);
IkReal x12604=((1.0)*cj3*r22);
CheckValue<IkReal> x12605=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst19*r01*x12597*x12600))+((r01*x12595*x12602))+(((-1.0)*x12599*x12600*x12602))+((r00*x12596*x12597))+((r02*r22*sj3)))),-1);
if(!x12605.valid){
continue;
}
CheckValue<IkReal> x12606 = IKatan2WithCheck(IkReal(((((-1.0)*cj3*r01*r22*x12600))+(((-1.0)*x12599*x12604)))),IkReal((((x12598*x12603))+(((-1.0)*r01*x12596*x12601))+(((-1.0)*x12599*x12600*x12601))+((r00*x12595*x12598)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12606.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12605.value)))+(x12606.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12607=IKsin(j4);
IkReal x12608=IKcos(j4);
IkReal x12609=(cj1*cj2);
IkReal x12610=((1.0)*sj2);
IkReal x12611=(gconst20*sj3);
IkReal x12612=(cj3*gconst19);
IkReal x12613=(gconst19*sj3);
IkReal x12614=(cj2*sj1);
IkReal x12615=(cj3*gconst20);
IkReal x12616=(sj1*x12610);
IkReal x12617=((1.0)*x12608);
IkReal x12618=((1.0)*x12607);
IkReal x12619=(gconst20*x12607);
IkReal x12620=((1.0)*x12615);
IkReal x12621=(x12608*x12613);
evalcond[0]=((((-1.0)*r22*x12617))+(((-1.0)*gconst19*r21*x12618))+((r20*x12619)));
evalcond[1]=((((-1.0)*r12*x12617))+(((-1.0)*gconst19*r11*x12618))+((r10*x12619)));
evalcond[2]=((1.0)+(((-1.0)*gconst19*r01*x12618))+(((-1.0)*r02*x12617))+((r00*x12619)));
evalcond[3]=((((-1.0)*cj3*r02*x12618))+((r01*x12608*x12612))+(((-1.0)*r00*x12615*x12617))+((r00*x12613))+((r01*x12611)));
evalcond[4]=((((-1.0)*r00*x12611*x12617))+(((-1.0)*r01*x12620))+(((-1.0)*r00*x12612))+((r01*x12621))+(((-1.0)*r02*sj3*x12618)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*r20*x12615*x12617))+((r21*x12611))+((r21*x12608*x12612))+((r20*x12613))+x12614+(((-1.0)*cj3*r22*x12618)));
evalcond[6]=((((-1.0)*cj3*r12*x12618))+((r11*x12608*x12612))+(((-1.0)*r10*x12615*x12617))+x12609+((r11*x12611))+(((-1.0)*x12616))+((r10*x12613)));
evalcond[7]=((((-1.0)*r20*x12611*x12617))+(((-1.0)*r22*sj3*x12618))+(((-1.0)*r21*x12620))+((r21*x12621))+(((-1.0)*r20*x12612))+x12609+(((-1.0)*x12616)));
evalcond[8]=((((-1.0)*cj1*x12610))+(((-1.0)*r10*x12612))+(((-1.0)*r11*x12620))+(((-1.0)*x12614))+(((-1.0)*r10*x12611*x12617))+(((-1.0)*r12*sj3*x12618))+((r11*x12621)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12622=gconst20*gconst20;
IkReal x12623=gconst19*gconst19;
IkReal x12624=(cj3*r21);
IkReal x12625=((1.0)*r00);
IkReal x12626=(gconst19*gconst20);
IkReal x12627=(r21*sj3);
IkReal x12628=(r00*r20);
IkReal x12629=(r01*r20);
IkReal x12630=(r22*sj3);
CheckValue<IkReal> x12631 = IKatan2WithCheck(IkReal((((gconst19*r00*x12630))+((gconst20*r01*x12630)))),IkReal((((sj3*x12622*x12629))+((sj3*x12626*x12628))+(((-1.0)*x12623*x12625*x12627))+(((-1.0)*r01*x12626*x12627)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12631.valid){
continue;
}
CheckValue<IkReal> x12632=IKPowWithIntegerCheck(IKsign((((cj3*x12622*x12628))+(((-1.0)*x12624*x12625*x12626))+((r01*x12623*x12624))+(((-1.0)*cj3*x12626*x12629))+((cj3*r02*r22)))),-1);
if(!x12632.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12631.value)+(((1.5707963267949)*(x12632.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12633=IKsin(j4);
IkReal x12634=IKcos(j4);
IkReal x12635=(cj1*cj2);
IkReal x12636=((1.0)*sj2);
IkReal x12637=(gconst20*sj3);
IkReal x12638=(cj3*gconst19);
IkReal x12639=(gconst19*sj3);
IkReal x12640=(cj2*sj1);
IkReal x12641=(cj3*gconst20);
IkReal x12642=(sj1*x12636);
IkReal x12643=((1.0)*x12634);
IkReal x12644=((1.0)*x12633);
IkReal x12645=(gconst20*x12633);
IkReal x12646=((1.0)*x12641);
IkReal x12647=(x12634*x12639);
evalcond[0]=((((-1.0)*gconst19*r21*x12644))+(((-1.0)*r22*x12643))+((r20*x12645)));
evalcond[1]=((((-1.0)*gconst19*r11*x12644))+((r10*x12645))+(((-1.0)*r12*x12643)));
evalcond[2]=((1.0)+(((-1.0)*r02*x12643))+((r00*x12645))+(((-1.0)*gconst19*r01*x12644)));
evalcond[3]=(((r01*x12637))+((r00*x12639))+(((-1.0)*cj3*r02*x12644))+((r01*x12634*x12638))+(((-1.0)*r00*x12641*x12643)));
evalcond[4]=((((-1.0)*r00*x12638))+((r01*x12647))+(((-1.0)*r00*x12637*x12643))+(((-1.0)*r02*sj3*x12644))+(((-1.0)*r01*x12646)));
evalcond[5]=((((-1.0)*cj3*r22*x12644))+((r21*x12634*x12638))+((cj1*sj2))+((r20*x12639))+(((-1.0)*r20*x12641*x12643))+x12640+((r21*x12637)));
evalcond[6]=(((r11*x12637))+(((-1.0)*r10*x12641*x12643))+(((-1.0)*cj3*r12*x12644))+x12635+(((-1.0)*x12642))+((r11*x12634*x12638))+((r10*x12639)));
evalcond[7]=((((-1.0)*r21*x12646))+(((-1.0)*r20*x12637*x12643))+x12635+(((-1.0)*x12642))+((r21*x12647))+(((-1.0)*r20*x12638))+(((-1.0)*r22*sj3*x12644)));
evalcond[8]=((((-1.0)*x12640))+(((-1.0)*r12*sj3*x12644))+(((-1.0)*r10*x12637*x12643))+(((-1.0)*r10*x12638))+(((-1.0)*cj1*x12636))+(((-1.0)*r11*x12646))+((r11*x12647)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12648 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst19*r11))+((gconst20*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12648.valid){
continue;
}
CheckValue<IkReal> x12649=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x12649.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12648.value)+(((1.5707963267949)*(x12649.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12650=IKsin(j4);
IkReal x12651=IKcos(j4);
IkReal x12652=(cj1*cj2);
IkReal x12653=((1.0)*sj2);
IkReal x12654=(gconst20*sj3);
IkReal x12655=(cj3*gconst19);
IkReal x12656=(gconst19*sj3);
IkReal x12657=(cj2*sj1);
IkReal x12658=(cj3*gconst20);
IkReal x12659=(sj1*x12653);
IkReal x12660=((1.0)*x12651);
IkReal x12661=((1.0)*x12650);
IkReal x12662=(gconst20*x12650);
IkReal x12663=((1.0)*x12658);
IkReal x12664=(x12651*x12656);
evalcond[0]=((((-1.0)*r22*x12660))+(((-1.0)*gconst19*r21*x12661))+((r20*x12662)));
evalcond[1]=(((r10*x12662))+(((-1.0)*r12*x12660))+(((-1.0)*gconst19*r11*x12661)));
evalcond[2]=((1.0)+(((-1.0)*gconst19*r01*x12661))+(((-1.0)*r02*x12660))+((r00*x12662)));
evalcond[3]=(((r01*x12651*x12655))+(((-1.0)*cj3*r02*x12661))+(((-1.0)*r00*x12658*x12660))+((r00*x12656))+((r01*x12654)));
evalcond[4]=((((-1.0)*r02*sj3*x12661))+(((-1.0)*r00*x12654*x12660))+(((-1.0)*r01*x12663))+(((-1.0)*r00*x12655))+((r01*x12664)));
evalcond[5]=(((r21*x12654))+((cj1*sj2))+(((-1.0)*r20*x12658*x12660))+((r21*x12651*x12655))+x12657+((r20*x12656))+(((-1.0)*cj3*r22*x12661)));
evalcond[6]=((((-1.0)*x12659))+((r10*x12656))+(((-1.0)*r10*x12658*x12660))+((r11*x12654))+((r11*x12651*x12655))+(((-1.0)*cj3*r12*x12661))+x12652);
evalcond[7]=(((r21*x12664))+(((-1.0)*x12659))+(((-1.0)*r22*sj3*x12661))+(((-1.0)*r20*x12655))+(((-1.0)*r20*x12654*x12660))+(((-1.0)*r21*x12663))+x12652);
evalcond[8]=((((-1.0)*r10*x12655))+(((-1.0)*cj1*x12653))+(((-1.0)*r10*x12654*x12660))+(((-1.0)*r11*x12663))+((r11*x12664))+(((-1.0)*r12*sj3*x12661))+(((-1.0)*x12657)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12665=((-1.0)*r11);
IkReal x12667 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x12667)==0){
continue;
}
IkReal x12666=pow(x12667,-0.5);
CheckValue<IkReal> x12668 = IKatan2WithCheck(IkReal(x12665),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12668.valid){
continue;
}
IkReal gconst21=((3.14159265358979)+(((-1.0)*(x12668.value))));
IkReal gconst22=(x12665*x12666);
IkReal gconst23=((1.0)*r10*x12666);
CheckValue<IkReal> x12669 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12669.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x12669.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12670=((-1.0)*r11);
CheckValue<IkReal> x12673 = IKatan2WithCheck(IkReal(x12670),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12673.valid){
continue;
}
IkReal x12671=((1.0)*(x12673.value));
IkReal x12672=x12666;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x12671)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x12671)));
IkReal gconst22=(x12670*x12672);
IkReal gconst23=((1.0)*r10*x12672);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12674=gconst23*gconst23;
IkReal x12675=gconst22*gconst22;
IkReal x12676=(r01*sj3);
IkReal x12677=(cj3*r00);
IkReal x12678=(cj3*r01);
IkReal x12679=(r00*sj3);
IkReal x12680=((1.0)*gconst22*gconst23);
IkReal x12681=(r20*x12674);
IkReal x12682=(r21*x12675);
CheckValue<IkReal> x12683=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12677*x12680))+((x12678*x12682))+(((-1.0)*r20*x12678*x12680))+((cj3*r02*r22))+((x12677*x12681)))),-1);
if(!x12683.valid){
continue;
}
CheckValue<IkReal> x12684 = IKatan2WithCheck(IkReal((((gconst22*r22*x12679))+((gconst23*r22*x12676)))),IkReal(((((-1.0)*r21*x12676*x12680))+((gconst22*gconst23*r20*x12679))+((x12676*x12681))+(((-1.0)*x12679*x12682)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12684.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12683.value)))+(x12684.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12685=IKsin(j4);
IkReal x12686=IKcos(j4);
IkReal x12687=(cj1*cj2);
IkReal x12688=(gconst23*sj3);
IkReal x12689=(gconst22*r21);
IkReal x12690=(gconst22*sj3);
IkReal x12691=(gconst22*r01);
IkReal x12692=((1.0)*sj1);
IkReal x12693=((1.0)*cj3);
IkReal x12694=(cj1*sj2);
IkReal x12695=(cj3*gconst23);
IkReal x12696=(gconst22*r11);
IkReal x12697=(sj2*x12692);
IkReal x12698=((1.0)*x12686);
IkReal x12699=((1.0)*x12685);
IkReal x12700=(gconst23*x12685);
IkReal x12701=(cj3*x12686);
evalcond[0]=((((-1.0)*r22*x12698))+(((-1.0)*x12689*x12699))+((r20*x12700)));
evalcond[1]=((((-1.0)*r12*x12698))+((r10*x12700))+(((-1.0)*x12696*x12699)));
evalcond[2]=((1.0)+(((-1.0)*r02*x12698))+(((-1.0)*x12691*x12699))+((r00*x12700)));
evalcond[3]=(((r00*x12690))+((r01*x12688))+(((-1.0)*r02*x12685*x12693))+(((-1.0)*gconst23*r00*x12686*x12693))+((x12691*x12701)));
evalcond[4]=((((-1.0)*r00*x12688*x12698))+(((-1.0)*r02*sj3*x12699))+(((-1.0)*gconst22*r00*x12693))+((r01*x12686*x12690))+(((-1.0)*gconst23*r01*x12693)));
evalcond[5]=(((r21*x12688))+((cj2*sj1))+((x12689*x12701))+(((-1.0)*r22*x12685*x12693))+x12694+((r20*x12690))+(((-1.0)*gconst23*r20*x12686*x12693)));
evalcond[6]=(((x12696*x12701))+(((-1.0)*x12697))+((r10*x12690))+((r11*x12688))+(((-1.0)*r12*x12685*x12693))+(((-1.0)*gconst23*r10*x12686*x12693))+x12687);
evalcond[7]=((((-1.0)*x12697))+(((-1.0)*r20*x12688*x12698))+(((-1.0)*gconst22*r20*x12693))+(((-1.0)*gconst23*r21*x12693))+x12687+(((-1.0)*r22*sj3*x12699))+((sj3*x12686*x12689)));
evalcond[8]=((((-1.0)*gconst22*r10*x12693))+(((-1.0)*gconst23*r11*x12693))+(((-1.0)*cj2*x12692))+(((-1.0)*r12*sj3*x12699))+(((-1.0)*r10*x12688*x12698))+((r11*x12686*x12690))+(((-1.0)*x12694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12702 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst22*r11))+((gconst23*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12702.valid){
continue;
}
CheckValue<IkReal> x12703=IKPowWithIntegerCheck(IKsign((((gconst22*r20))+((gconst23*r21)))),-1);
if(!x12703.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12702.value)+(((1.5707963267949)*(x12703.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12704=IKsin(j4);
IkReal x12705=IKcos(j4);
IkReal x12706=(cj1*cj2);
IkReal x12707=(gconst23*sj3);
IkReal x12708=(gconst22*r21);
IkReal x12709=(gconst22*sj3);
IkReal x12710=(gconst22*r01);
IkReal x12711=((1.0)*sj1);
IkReal x12712=((1.0)*cj3);
IkReal x12713=(cj1*sj2);
IkReal x12714=(cj3*gconst23);
IkReal x12715=(gconst22*r11);
IkReal x12716=(sj2*x12711);
IkReal x12717=((1.0)*x12705);
IkReal x12718=((1.0)*x12704);
IkReal x12719=(gconst23*x12704);
IkReal x12720=(cj3*x12705);
evalcond[0]=((((-1.0)*r22*x12717))+((r20*x12719))+(((-1.0)*x12708*x12718)));
evalcond[1]=((((-1.0)*r12*x12717))+(((-1.0)*x12715*x12718))+((r10*x12719)));
evalcond[2]=((1.0)+(((-1.0)*x12710*x12718))+((r00*x12719))+(((-1.0)*r02*x12717)));
evalcond[3]=((((-1.0)*gconst23*r00*x12705*x12712))+((r00*x12709))+((r01*x12707))+((x12710*x12720))+(((-1.0)*r02*x12704*x12712)));
evalcond[4]=((((-1.0)*r02*sj3*x12718))+(((-1.0)*gconst23*r01*x12712))+(((-1.0)*gconst22*r00*x12712))+((r01*x12705*x12709))+(((-1.0)*r00*x12707*x12717)));
evalcond[5]=(((cj2*sj1))+((r21*x12707))+((x12708*x12720))+(((-1.0)*gconst23*r20*x12705*x12712))+((r20*x12709))+x12713+(((-1.0)*r22*x12704*x12712)));
evalcond[6]=(((x12715*x12720))+(((-1.0)*x12716))+((r11*x12707))+((r10*x12709))+x12706+(((-1.0)*r12*x12704*x12712))+(((-1.0)*gconst23*r10*x12705*x12712)));
evalcond[7]=((((-1.0)*r20*x12707*x12717))+(((-1.0)*x12716))+(((-1.0)*r22*sj3*x12718))+(((-1.0)*gconst23*r21*x12712))+x12706+((sj3*x12705*x12708))+(((-1.0)*gconst22*r20*x12712)));
evalcond[8]=((((-1.0)*cj2*x12711))+(((-1.0)*x12713))+((r11*x12705*x12709))+(((-1.0)*gconst22*r10*x12712))+(((-1.0)*r10*x12707*x12717))+(((-1.0)*r12*sj3*x12718))+(((-1.0)*gconst23*r11*x12712)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12721=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12721);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12721);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x12722=(cj5*r00);
IkReal x12723=(r01*sj5);
j4eval[0]=((((-1.0)*x12723))+x12722);
j4eval[1]=((((-1.0)*sj3*x12722))+((sj3*x12723)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12724=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12724);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12724);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x12725=(cj5*r00);
IkReal x12726=(r01*sj5);
j4eval[0]=((((-1.0)*x12726))+x12725);
j4eval[1]=((((-1.0)*cj3*x12725))+((cj3*x12726)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x12727=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12727);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12727);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=(((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12728=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12728);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12728);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12729=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12729);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12729);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[1]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12730=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12730.valid){
continue;
}
CheckValue<IkReal> x12731=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12731.valid){
continue;
}
if( IKabs(((-1.0)*(x12730.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12731.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12730.value)))+IKsqr(((x12731.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12730.value)), ((x12731.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12732=IKsin(j4);
IkReal x12733=IKcos(j4);
IkReal x12734=(cj5*r00);
IkReal x12735=(cj5*r10);
IkReal x12736=((1.0)*x12733);
IkReal x12737=(sj5*x12733);
IkReal x12738=((1.0)*sj5*x12732);
evalcond[0]=((-1.0)*r22*x12733);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x12732)));
evalcond[2]=(((x12732*x12735))+(((-1.0)*r11*x12738)));
evalcond[3]=(((r01*x12737))+(((-1.0)*x12734*x12736)));
evalcond[4]=((1.0)+(((-1.0)*r01*x12738))+((x12732*x12734)));
evalcond[5]=(((r11*x12737))+(((-1.0)*sj1*sj2))+(((-1.0)*x12735*x12736))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12739=IKPowWithIntegerCheck(r22,-1);
if(!x12739.valid){
continue;
}
CheckValue<IkReal> x12740=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12740.valid){
continue;
}
if( IKabs(((x12739.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12740.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12739.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x12740.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12739.value)*((((cj2*sj1))+((cj1*sj2))))), ((x12740.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12741=IKsin(j4);
IkReal x12742=IKcos(j4);
IkReal x12743=(cj5*r00);
IkReal x12744=(cj5*r10);
IkReal x12745=((1.0)*x12742);
IkReal x12746=(sj5*x12742);
IkReal x12747=((1.0)*sj5*x12741);
evalcond[0]=((-1.0)*r22*x12742);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x12741)));
evalcond[2]=((((-1.0)*r11*x12747))+((x12741*x12744)));
evalcond[3]=((((-1.0)*x12743*x12745))+((r01*x12746)));
evalcond[4]=((1.0)+((x12741*x12743))+(((-1.0)*r01*x12747)));
evalcond[5]=(((r11*x12746))+(((-1.0)*sj1*sj2))+(((-1.0)*x12744*x12745))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12748=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12748);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12748);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x12749=((1.0)*sj5);
j4eval[0]=((((-1.0)*r01*x12749))+((cj5*r00)));
j4eval[1]=(((cj5*r10))+(((-1.0)*r11*x12749)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12750=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12750);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12750);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
j4eval[1]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12751=((1.0)*cj2);
CheckValue<IkReal> x12752=IKPowWithIntegerCheck(r22,-1);
if(!x12752.valid){
continue;
}
CheckValue<IkReal> x12753=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x12753.valid){
continue;
}
if( IKabs(((x12752.value)*(((((-1.0)*sj1*x12751))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12753.value)*((((sj1*sj2))+(((-1.0)*cj1*x12751)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12752.value)*(((((-1.0)*sj1*x12751))+(((-1.0)*cj1*sj2))))))+IKsqr(((x12753.value)*((((sj1*sj2))+(((-1.0)*cj1*x12751))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12752.value)*(((((-1.0)*sj1*x12751))+(((-1.0)*cj1*sj2))))), ((x12753.value)*((((sj1*sj2))+(((-1.0)*cj1*x12751))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12754=IKsin(j4);
IkReal x12755=IKcos(j4);
IkReal x12756=(cj5*r00);
IkReal x12757=(cj5*r10);
IkReal x12758=((1.0)*r11*sj5);
IkReal x12759=((1.0)*r01*sj5);
evalcond[0]=((-1.0)*r22*x12755);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r22*x12754)));
evalcond[2]=(((x12754*x12757))+(((-1.0)*x12754*x12758)));
evalcond[3]=(((x12755*x12756))+(((-1.0)*x12755*x12759)));
evalcond[4]=((1.0)+((x12754*x12756))+(((-1.0)*x12754*x12759)));
evalcond[5]=(((x12755*x12757))+(((-1.0)*sj1*sj2))+(((-1.0)*x12755*x12758))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12760=((1.0)*sj5);
CheckValue<IkReal> x12761=IKPowWithIntegerCheck(((((-1.0)*r01*x12760))+((cj5*r00))),-1);
if(!x12761.valid){
continue;
}
CheckValue<IkReal> x12762=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*x12760))),-1);
if(!x12762.valid){
continue;
}
if( IKabs(((-1.0)*(x12761.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12762.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12761.value)))+IKsqr(((x12762.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12761.value)), ((x12762.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12763=IKsin(j4);
IkReal x12764=IKcos(j4);
IkReal x12765=(cj5*r00);
IkReal x12766=(cj5*r10);
IkReal x12767=((1.0)*r11*sj5);
IkReal x12768=((1.0)*r01*sj5);
evalcond[0]=((-1.0)*r22*x12764);
evalcond[1]=(((cj2*sj1))+((r22*x12763))+((cj1*sj2)));
evalcond[2]=(((x12763*x12766))+(((-1.0)*x12763*x12767)));
evalcond[3]=(((x12764*x12765))+(((-1.0)*x12764*x12768)));
evalcond[4]=((1.0)+((x12763*x12765))+(((-1.0)*x12763*x12768)));
evalcond[5]=(((x12764*x12766))+(((-1.0)*sj1*sj2))+(((-1.0)*x12764*x12767))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12769=((1.0)*r00);
CheckValue<IkReal> x12770=IKPowWithIntegerCheck(cj3,-1);
if(!x12770.valid){
continue;
}
CheckValue<IkReal> x12771=IKPowWithIntegerCheck(r22,-1);
if(!x12771.valid){
continue;
}
CheckValue<IkReal> x12772=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x12769))+((cj3*r01*sj5))),-1);
if(!x12772.valid){
continue;
}
if( IKabs(((x12770.value)*(x12771.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12772.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x12769)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12770.value)*(x12771.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x12772.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x12769))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12770.value)*(x12771.value)*((((cj2*sj1))+((cj1*sj2))))), ((x12772.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x12769))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12773=IKsin(j4);
IkReal x12774=IKcos(j4);
IkReal x12775=(cj1*cj2);
IkReal x12776=(cj5*sj3);
IkReal x12777=((1.0)*r11);
IkReal x12778=(cj3*cj5);
IkReal x12779=((1.0)*r10);
IkReal x12780=(cj3*sj5);
IkReal x12781=((1.0)*sj2);
IkReal x12782=((1.0)*r01);
IkReal x12783=(sj3*sj5);
IkReal x12784=(cj2*sj1);
IkReal x12785=((1.0)*r00);
IkReal x12786=(sj1*x12781);
IkReal x12787=(sj5*x12773);
IkReal x12788=(r11*x12774);
IkReal x12789=(cj5*x12773);
IkReal x12790=(r01*x12774);
IkReal x12791=((1.0)*r22*x12773);
evalcond[0]=((-1.0)*r22*x12774);
evalcond[1]=(((r10*x12789))+(((-1.0)*x12777*x12787)));
evalcond[2]=(((cj1*sj2))+(((-1.0)*cj3*x12791))+x12784);
evalcond[3]=((1.0)+(((-1.0)*x12782*x12787))+((r00*x12789)));
evalcond[4]=((((-1.0)*sj3*x12791))+x12775+(((-1.0)*x12786)));
evalcond[5]=(((r01*x12776))+((x12780*x12790))+((r00*x12783))+(((-1.0)*x12774*x12778*x12785)));
evalcond[6]=((((-1.0)*x12774*x12776*x12785))+(((-1.0)*x12778*x12782))+(((-1.0)*x12780*x12785))+((x12783*x12790)));
evalcond[7]=(((r10*x12783))+x12775+((x12780*x12788))+(((-1.0)*x12774*x12778*x12779))+((r11*x12776))+(((-1.0)*x12786)));
evalcond[8]=(((x12783*x12788))+(((-1.0)*x12777*x12778))+(((-1.0)*x12779*x12780))+(((-1.0)*cj1*x12781))+(((-1.0)*x12774*x12776*x12779))+(((-1.0)*x12784)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12792=((1.0)*sj5);
IkReal x12793=(cj5*r00);
CheckValue<IkReal> x12794=IKPowWithIntegerCheck(((((-1.0)*r01*x12792))+x12793),-1);
if(!x12794.valid){
continue;
}
CheckValue<IkReal> x12795=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*x12793))),-1);
if(!x12795.valid){
continue;
}
if( IKabs(((-1.0)*(x12794.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12795.value)*(((((-1.0)*r00*sj3*x12792))+(((-1.0)*cj5*r01*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12794.value)))+IKsqr(((x12795.value)*(((((-1.0)*r00*sj3*x12792))+(((-1.0)*cj5*r01*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12794.value)), ((x12795.value)*(((((-1.0)*r00*sj3*x12792))+(((-1.0)*cj5*r01*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12796=IKsin(j4);
IkReal x12797=IKcos(j4);
IkReal x12798=(cj1*cj2);
IkReal x12799=(cj5*sj3);
IkReal x12800=((1.0)*r11);
IkReal x12801=(cj3*cj5);
IkReal x12802=((1.0)*r10);
IkReal x12803=(cj3*sj5);
IkReal x12804=((1.0)*sj2);
IkReal x12805=((1.0)*r01);
IkReal x12806=(sj3*sj5);
IkReal x12807=(cj2*sj1);
IkReal x12808=((1.0)*r00);
IkReal x12809=(sj1*x12804);
IkReal x12810=(sj5*x12796);
IkReal x12811=(r11*x12797);
IkReal x12812=(cj5*x12796);
IkReal x12813=(r01*x12797);
IkReal x12814=((1.0)*r22*x12796);
evalcond[0]=((-1.0)*r22*x12797);
evalcond[1]=((((-1.0)*x12800*x12810))+((r10*x12812)));
evalcond[2]=(x12807+((cj1*sj2))+(((-1.0)*cj3*x12814)));
evalcond[3]=((1.0)+((r00*x12812))+(((-1.0)*x12805*x12810)));
evalcond[4]=((((-1.0)*x12809))+(((-1.0)*sj3*x12814))+x12798);
evalcond[5]=(((x12803*x12813))+((r00*x12806))+(((-1.0)*x12797*x12801*x12808))+((r01*x12799)));
evalcond[6]=(((x12806*x12813))+(((-1.0)*x12803*x12808))+(((-1.0)*x12801*x12805))+(((-1.0)*x12797*x12799*x12808)));
evalcond[7]=(((r10*x12806))+(((-1.0)*x12809))+((r11*x12799))+((x12803*x12811))+x12798+(((-1.0)*x12797*x12801*x12802)));
evalcond[8]=(((x12806*x12811))+(((-1.0)*x12800*x12801))+(((-1.0)*x12802*x12803))+(((-1.0)*x12797*x12799*x12802))+(((-1.0)*x12807))+(((-1.0)*cj1*x12804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12815=(r01*sj5);
IkReal x12816=(cj5*r00);
CheckValue<IkReal> x12817=IKPowWithIntegerCheck((x12816+(((-1.0)*x12815))),-1);
if(!x12817.valid){
continue;
}
CheckValue<IkReal> x12818=IKPowWithIntegerCheck((((sj3*x12815))+(((-1.0)*sj3*x12816))),-1);
if(!x12818.valid){
continue;
}
if( IKabs(((-1.0)*(x12817.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12818.value)*((((cj3*cj5*r01))+((cj3*r00*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12817.value)))+IKsqr(((x12818.value)*((((cj3*cj5*r01))+((cj3*r00*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12817.value)), ((x12818.value)*((((cj3*cj5*r01))+((cj3*r00*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12819=IKsin(j4);
IkReal x12820=IKcos(j4);
IkReal x12821=(cj1*cj2);
IkReal x12822=(cj5*sj3);
IkReal x12823=((1.0)*r11);
IkReal x12824=(cj3*cj5);
IkReal x12825=((1.0)*r10);
IkReal x12826=(cj3*sj5);
IkReal x12827=((1.0)*sj2);
IkReal x12828=((1.0)*r01);
IkReal x12829=(sj3*sj5);
IkReal x12830=(cj2*sj1);
IkReal x12831=((1.0)*r00);
IkReal x12832=(sj1*x12827);
IkReal x12833=(sj5*x12819);
IkReal x12834=(r11*x12820);
IkReal x12835=(cj5*x12819);
IkReal x12836=(r01*x12820);
IkReal x12837=((1.0)*r22*x12819);
evalcond[0]=((-1.0)*r22*x12820);
evalcond[1]=(((r10*x12835))+(((-1.0)*x12823*x12833)));
evalcond[2]=(x12830+((cj1*sj2))+(((-1.0)*cj3*x12837)));
evalcond[3]=((1.0)+(((-1.0)*x12828*x12833))+((r00*x12835)));
evalcond[4]=(x12821+(((-1.0)*x12832))+(((-1.0)*sj3*x12837)));
evalcond[5]=(((r01*x12822))+((r00*x12829))+(((-1.0)*x12820*x12824*x12831))+((x12826*x12836)));
evalcond[6]=((((-1.0)*x12824*x12828))+(((-1.0)*x12820*x12822*x12831))+(((-1.0)*x12826*x12831))+((x12829*x12836)));
evalcond[7]=(x12821+((r10*x12829))+(((-1.0)*x12820*x12824*x12825))+(((-1.0)*x12832))+((x12826*x12834))+((r11*x12822)));
evalcond[8]=((((-1.0)*x12825*x12826))+(((-1.0)*cj1*x12827))+(((-1.0)*x12820*x12822*x12825))+(((-1.0)*x12823*x12824))+(((-1.0)*x12830))+((x12829*x12834)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12838=cj5*cj5;
IkReal x12839=(cj3*r00);
IkReal x12840=(r01*sj3);
IkReal x12841=(r00*sj3);
IkReal x12842=(cj3*r01);
IkReal x12843=(cj5*r20*sj5);
IkReal x12844=(r21*x12838);
IkReal x12845=(r20*x12838);
IkReal x12846=((1.0)*cj5*r21*sj5);
CheckValue<IkReal> x12847 = IKatan2WithCheck(IkReal((((cj5*r22*x12840))+((r22*sj5*x12841)))),IkReal((((x12841*x12844))+((x12841*x12843))+((x12840*x12845))+(((-1.0)*x12840*x12846))+(((-1.0)*r21*x12841)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12847.valid){
continue;
}
CheckValue<IkReal> x12848=IKPowWithIntegerCheck(IKsign((((x12839*x12845))+(((-1.0)*x12839*x12846))+((r21*x12842))+(((-1.0)*x12842*x12844))+(((-1.0)*x12842*x12843))+((cj3*r02*r22)))),-1);
if(!x12848.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12847.value)+(((1.5707963267949)*(x12848.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12849=IKsin(j4);
IkReal x12850=IKcos(j4);
IkReal x12851=(cj1*cj2);
IkReal x12852=(r11*sj5);
IkReal x12853=(cj5*sj3);
IkReal x12854=((1.0)*sj2);
IkReal x12855=(r21*sj5);
IkReal x12856=(r01*sj5);
IkReal x12857=(sj3*sj5);
IkReal x12858=(cj2*sj1);
IkReal x12859=(cj3*cj5);
IkReal x12860=(sj1*x12854);
IkReal x12861=((1.0)*x12850);
IkReal x12862=(cj3*x12850);
IkReal x12863=((1.0)*x12849);
IkReal x12864=((1.0)*x12859);
IkReal x12865=((1.0)*cj3*sj5);
IkReal x12866=(cj5*x12849);
IkReal x12867=(sj3*x12850);
evalcond[0]=(((r20*x12866))+(((-1.0)*r22*x12861))+(((-1.0)*x12855*x12863)));
evalcond[1]=((((-1.0)*x12852*x12863))+(((-1.0)*r12*x12861))+((r10*x12866)));
evalcond[2]=((1.0)+(((-1.0)*r02*x12861))+(((-1.0)*x12856*x12863))+((r00*x12866)));
evalcond[3]=(((r00*x12857))+((r01*x12853))+((x12856*x12862))+(((-1.0)*r00*x12859*x12861))+(((-1.0)*cj3*r02*x12863)));
evalcond[4]=((((-1.0)*r01*x12864))+(((-1.0)*r00*x12853*x12861))+(((-1.0)*r00*x12865))+((x12856*x12867))+(((-1.0)*r02*sj3*x12863)));
evalcond[5]=(x12858+((cj1*sj2))+(((-1.0)*r20*x12859*x12861))+((x12855*x12862))+((r21*x12853))+((r20*x12857))+(((-1.0)*cj3*r22*x12863)));
evalcond[6]=(x12851+((r10*x12857))+(((-1.0)*x12860))+((r11*x12853))+((x12852*x12862))+(((-1.0)*cj3*r12*x12863))+(((-1.0)*r10*x12859*x12861)));
evalcond[7]=(x12851+(((-1.0)*r22*sj3*x12863))+(((-1.0)*x12860))+((x12855*x12867))+(((-1.0)*r21*x12864))+(((-1.0)*r20*x12865))+(((-1.0)*r20*x12853*x12861)));
evalcond[8]=((((-1.0)*r10*x12865))+(((-1.0)*cj1*x12854))+(((-1.0)*r10*x12853*x12861))+(((-1.0)*x12858))+((x12852*x12867))+(((-1.0)*r11*x12864))+(((-1.0)*r12*sj3*x12863)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12868=((1.0)*sj5);
CheckValue<IkReal> x12869 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x12868)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12869.valid){
continue;
}
CheckValue<IkReal> x12870=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x12868)))),-1);
if(!x12870.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12869.value)+(((1.5707963267949)*(x12870.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12871=IKsin(j4);
IkReal x12872=IKcos(j4);
IkReal x12873=(cj1*cj2);
IkReal x12874=(r11*sj5);
IkReal x12875=(cj5*sj3);
IkReal x12876=((1.0)*sj2);
IkReal x12877=(r21*sj5);
IkReal x12878=(r01*sj5);
IkReal x12879=(sj3*sj5);
IkReal x12880=(cj2*sj1);
IkReal x12881=(cj3*cj5);
IkReal x12882=(sj1*x12876);
IkReal x12883=((1.0)*x12872);
IkReal x12884=(cj3*x12872);
IkReal x12885=((1.0)*x12871);
IkReal x12886=((1.0)*x12881);
IkReal x12887=((1.0)*cj3*sj5);
IkReal x12888=(cj5*x12871);
IkReal x12889=(sj3*x12872);
evalcond[0]=((((-1.0)*r22*x12883))+((r20*x12888))+(((-1.0)*x12877*x12885)));
evalcond[1]=((((-1.0)*x12874*x12885))+(((-1.0)*r12*x12883))+((r10*x12888)));
evalcond[2]=((1.0)+(((-1.0)*r02*x12883))+(((-1.0)*x12878*x12885))+((r00*x12888)));
evalcond[3]=(((r01*x12875))+(((-1.0)*cj3*r02*x12885))+((r00*x12879))+((x12878*x12884))+(((-1.0)*r00*x12881*x12883)));
evalcond[4]=((((-1.0)*r00*x12887))+(((-1.0)*r01*x12886))+(((-1.0)*r00*x12875*x12883))+((x12878*x12889))+(((-1.0)*r02*sj3*x12885)));
evalcond[5]=(x12880+((cj1*sj2))+(((-1.0)*cj3*r22*x12885))+(((-1.0)*r20*x12881*x12883))+((r21*x12875))+((r20*x12879))+((x12877*x12884)));
evalcond[6]=((((-1.0)*cj3*r12*x12885))+x12873+(((-1.0)*r10*x12881*x12883))+(((-1.0)*x12882))+((r10*x12879))+((x12874*x12884))+((r11*x12875)));
evalcond[7]=(x12873+(((-1.0)*r20*x12887))+(((-1.0)*r21*x12886))+(((-1.0)*x12882))+(((-1.0)*r20*x12875*x12883))+(((-1.0)*r22*sj3*x12885))+((x12877*x12889)));
evalcond[8]=((((-1.0)*r10*x12875*x12883))+(((-1.0)*x12880))+(((-1.0)*cj1*x12876))+((x12874*x12889))+(((-1.0)*r11*x12886))+(((-1.0)*r10*x12887))+(((-1.0)*r12*sj3*x12885)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12890 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12890.valid){
continue;
}
CheckValue<IkReal> x12891=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12891.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12890.value)+(((1.5707963267949)*(x12891.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12892=IKsin(j4);
IkReal x12893=IKcos(j4);
IkReal x12894=(cj1*cj2);
IkReal x12895=(r11*sj5);
IkReal x12896=(cj5*sj3);
IkReal x12897=((1.0)*sj2);
IkReal x12898=(r21*sj5);
IkReal x12899=(r01*sj5);
IkReal x12900=(sj3*sj5);
IkReal x12901=(cj2*sj1);
IkReal x12902=(cj3*cj5);
IkReal x12903=(sj1*x12897);
IkReal x12904=((1.0)*x12893);
IkReal x12905=(cj3*x12893);
IkReal x12906=((1.0)*x12892);
IkReal x12907=((1.0)*x12902);
IkReal x12908=((1.0)*cj3*sj5);
IkReal x12909=(cj5*x12892);
IkReal x12910=(sj3*x12893);
evalcond[0]=((((-1.0)*x12898*x12906))+((r20*x12909))+(((-1.0)*r22*x12904)));
evalcond[1]=((((-1.0)*r12*x12904))+((r10*x12909))+(((-1.0)*x12895*x12906)));
evalcond[2]=((1.0)+((r00*x12909))+(((-1.0)*x12899*x12906))+(((-1.0)*r02*x12904)));
evalcond[3]=(((r00*x12900))+((r01*x12896))+((x12899*x12905))+(((-1.0)*cj3*r02*x12906))+(((-1.0)*r00*x12902*x12904)));
evalcond[4]=((((-1.0)*r00*x12908))+(((-1.0)*r01*x12907))+(((-1.0)*r00*x12896*x12904))+((x12899*x12910))+(((-1.0)*r02*sj3*x12906)));
evalcond[5]=(x12901+(((-1.0)*cj3*r22*x12906))+((r21*x12896))+((cj1*sj2))+(((-1.0)*r20*x12902*x12904))+((r20*x12900))+((x12898*x12905)));
evalcond[6]=(x12894+((x12895*x12905))+(((-1.0)*x12903))+(((-1.0)*r10*x12902*x12904))+((r10*x12900))+(((-1.0)*cj3*r12*x12906))+((r11*x12896)));
evalcond[7]=(x12894+(((-1.0)*r20*x12908))+(((-1.0)*x12903))+(((-1.0)*r21*x12907))+(((-1.0)*r20*x12896*x12904))+((x12898*x12910))+(((-1.0)*r22*sj3*x12906)));
evalcond[8]=((((-1.0)*r12*sj3*x12906))+((x12895*x12910))+(((-1.0)*x12901))+(((-1.0)*r10*x12896*x12904))+(((-1.0)*r10*x12908))+(((-1.0)*cj1*x12897))+(((-1.0)*r11*x12907)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x12911=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12911;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x12911);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x12912=((1.0)*sj5);
IkReal x12913=((((-1.0)*r20*x12912))+(((-1.0)*cj5*r21)));
j4eval[0]=x12913;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x12912))))));
j4eval[2]=IKsign(x12913);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x12914=cj5*cj5;
IkReal x12915=(cj3*r00);
IkReal x12916=(cj3*r01);
IkReal x12917=((1.0)*cj5*sj5);
IkReal x12918=((((-1.0)*r21*x12914*x12916))+((r20*x12914*x12915))+(((-1.0)*r20*x12916*x12917))+(((-1.0)*r21*x12915*x12917))+((r21*x12916))+((cj3*r02*r22)));
j4eval[0]=x12918;
j4eval[1]=IKsign(x12918);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12919=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12919;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x12919);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12920=((1.0)*sj5);
IkReal x12921=((((-1.0)*r20*x12920))+(((-1.0)*cj5*r21)));
j4eval[0]=x12921;
j4eval[1]=((IKabs((((cj5*r10))+(((-1.0)*r11*x12920)))))+(IKabs(r12)));
j4eval[2]=IKsign(x12921);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12922=cj5*cj5;
IkReal x12923=r01*r01;
IkReal x12924=(r01*sj5);
IkReal x12925=(cj5*r00);
IkReal x12926=((((-1.0)*x12922*(r00*r00)))+(((-1.0)*x12923))+(((-1.0)*(r02*r02)))+(((2.0)*x12924*x12925))+((x12922*x12923)));
j4eval[0]=x12926;
j4eval[1]=IKsign(x12926);
j4eval[2]=((IKabs(r02))+(IKabs((x12924+(((-1.0)*x12925))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12927=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12927);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12927);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[1]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12928=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12928);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12928);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12929=((1.0)*sj1);
CheckValue<IkReal> x12930=IKPowWithIntegerCheck(r22,-1);
if(!x12930.valid){
continue;
}
CheckValue<IkReal> x12931=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12931.valid){
continue;
}
if( IKabs(((x12930.value)*(((((-1.0)*sj2*x12929))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12931.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12929)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12930.value)*(((((-1.0)*sj2*x12929))+((cj1*cj2))))))+IKsqr(((x12931.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12929))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12930.value)*(((((-1.0)*sj2*x12929))+((cj1*cj2))))), ((x12931.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12929))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12932=IKsin(j4);
IkReal x12933=IKcos(j4);
IkReal x12934=(sj5*x12933);
IkReal x12935=(cj5*x12932);
IkReal x12936=((1.0)*sj5*x12932);
IkReal x12937=((1.0)*cj5*x12933);
evalcond[0]=((-1.0)*r22*x12933);
evalcond[1]=((((-1.0)*r11*x12936))+((r10*x12935)));
evalcond[2]=((((-1.0)*sj1*sj2))+(((-1.0)*r22*x12932))+((cj1*cj2)));
evalcond[3]=((((-1.0)*r00*x12937))+((r01*x12934)));
evalcond[4]=((-1.0)+(((-1.0)*r01*x12936))+((r00*x12935)));
evalcond[5]=(((r11*x12934))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r10*x12937)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12938=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12938.valid){
continue;
}
CheckValue<IkReal> x12939=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12939.valid){
continue;
}
if( IKabs(x12938.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12939.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x12938.value)+IKsqr(((x12939.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x12938.value, ((x12939.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12940=IKsin(j4);
IkReal x12941=IKcos(j4);
IkReal x12942=(sj5*x12941);
IkReal x12943=(cj5*x12940);
IkReal x12944=((1.0)*sj5*x12940);
IkReal x12945=((1.0)*cj5*x12941);
evalcond[0]=((-1.0)*r22*x12941);
evalcond[1]=((((-1.0)*r11*x12944))+((r10*x12943)));
evalcond[2]=((((-1.0)*sj1*sj2))+(((-1.0)*r22*x12940))+((cj1*cj2)));
evalcond[3]=(((r01*x12942))+(((-1.0)*r00*x12945)));
evalcond[4]=((-1.0)+((r00*x12943))+(((-1.0)*r01*x12944)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r10*x12945))+((cj1*sj2))+((r11*x12942)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12946=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12946);
rxp0_2=(py*r00);
rxp1_0=(r21*x12946);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12947=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12947);
rxp0_2=(py*r00);
rxp1_0=(r21*x12947);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12948=IKPowWithIntegerCheck(r12,-1);
if(!x12948.valid){
continue;
}
CheckValue<IkReal> x12949=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x12949.valid){
continue;
}
if( IKabs(((x12948.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12949.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12948.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x12949.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12948.value)*((((cj2*sj1))+((cj1*sj2))))), ((x12949.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12950=IKsin(j4);
IkReal x12951=IKcos(j4);
IkReal x12952=(r01*sj5);
IkReal x12953=(r21*sj5);
IkReal x12954=((1.0)*x12950);
IkReal x12955=(cj5*x12950);
IkReal x12956=((1.0)*cj5*x12951);
evalcond[0]=((-1.0)*r12*x12951);
evalcond[1]=((((-1.0)*r12*x12954))+((cj2*sj1))+((cj1*sj2)));
evalcond[2]=((((-1.0)*x12953*x12954))+((r20*x12955)));
evalcond[3]=(((x12951*x12952))+(((-1.0)*r00*x12956)));
evalcond[4]=((-1.0)+(((-1.0)*x12952*x12954))+((r00*x12955)));
evalcond[5]=(((x12951*x12953))+(((-1.0)*sj1*sj2))+(((-1.0)*r20*x12956))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12957=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12957.valid){
continue;
}
CheckValue<IkReal> x12958=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x12958.valid){
continue;
}
if( IKabs(x12957.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12958.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x12957.value)+IKsqr(((x12958.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x12957.value, ((x12958.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12959=IKsin(j4);
IkReal x12960=IKcos(j4);
IkReal x12961=(r01*sj5);
IkReal x12962=(r21*sj5);
IkReal x12963=((1.0)*x12959);
IkReal x12964=(cj5*x12959);
IkReal x12965=((1.0)*cj5*x12960);
evalcond[0]=((-1.0)*r12*x12960);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x12963)));
evalcond[2]=((((-1.0)*x12962*x12963))+((r20*x12964)));
evalcond[3]=((((-1.0)*r00*x12965))+((x12960*x12961)));
evalcond[4]=((-1.0)+((r00*x12964))+(((-1.0)*x12961*x12963)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r20*x12965))+((x12960*x12962))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12966=cj5*cj5;
IkReal x12967=r01*r01;
IkReal x12968=(r01*sj5);
IkReal x12969=(cj5*r00);
CheckValue<IkReal> x12970 = IKatan2WithCheck(IkReal((x12968+(((-1.0)*x12969)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x12970.valid){
continue;
}
CheckValue<IkReal> x12971=IKPowWithIntegerCheck(IKsign(((((2.0)*x12968*x12969))+(((-1.0)*x12966*(r00*r00)))+(((-1.0)*(r02*r02)))+(((-1.0)*x12967))+((x12966*x12967)))),-1);
if(!x12971.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12970.value)+(((1.5707963267949)*(x12971.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12972=IKsin(j4);
IkReal x12973=IKcos(j4);
IkReal x12974=(cj5*r00);
IkReal x12975=(r11*sj5);
IkReal x12976=((1.0)*x12973);
IkReal x12977=((1.0)*x12972);
IkReal x12978=(sj5*x12973);
IkReal x12979=(cj5*x12972);
evalcond[0]=((((-1.0)*r21*sj5*x12977))+((r20*x12979))+(((-1.0)*r22*x12976)));
evalcond[1]=((((-1.0)*r12*x12976))+(((-1.0)*x12975*x12977))+((r10*x12979)));
evalcond[2]=((((-1.0)*x12974*x12976))+((r01*x12978))+(((-1.0)*r02*x12977)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x12976))+(((-1.0)*r01*sj5*x12977))+((x12972*x12974)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*cj5*r10*x12976))+((x12973*x12975))+(((-1.0)*r12*x12977)));
evalcond[5]=((((-1.0)*cj5*r20*x12976))+(((-1.0)*sj1*sj2))+(((-1.0)*r22*x12977))+((cj1*cj2))+((r21*x12978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12980=((1.0)*sj5);
CheckValue<IkReal> x12981 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x12980)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12981.valid){
continue;
}
CheckValue<IkReal> x12982=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12980))+(((-1.0)*cj5*r21)))),-1);
if(!x12982.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12981.value)+(((1.5707963267949)*(x12982.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12983=IKsin(j4);
IkReal x12984=IKcos(j4);
IkReal x12985=(cj5*r00);
IkReal x12986=(r11*sj5);
IkReal x12987=((1.0)*x12984);
IkReal x12988=((1.0)*x12983);
IkReal x12989=(sj5*x12984);
IkReal x12990=(cj5*x12983);
evalcond[0]=((((-1.0)*r22*x12987))+(((-1.0)*r21*sj5*x12988))+((r20*x12990)));
evalcond[1]=(((r10*x12990))+(((-1.0)*r12*x12987))+(((-1.0)*x12986*x12988)));
evalcond[2]=(((r01*x12989))+(((-1.0)*r02*x12988))+(((-1.0)*x12985*x12987)));
evalcond[3]=((-1.0)+((x12983*x12985))+(((-1.0)*r02*x12987))+(((-1.0)*r01*sj5*x12988)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x12984*x12986))+(((-1.0)*r12*x12988))+(((-1.0)*cj5*r10*x12987)));
evalcond[5]=((((-1.0)*r22*x12988))+(((-1.0)*sj1*sj2))+((r21*x12989))+((cj1*cj2))+(((-1.0)*cj5*r20*x12987)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12991=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12991.valid){
continue;
}
CheckValue<IkReal> x12992 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12992.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12991.value)))+(x12992.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12993=IKsin(j4);
IkReal x12994=IKcos(j4);
IkReal x12995=(cj5*r00);
IkReal x12996=(r11*sj5);
IkReal x12997=((1.0)*x12994);
IkReal x12998=((1.0)*x12993);
IkReal x12999=(sj5*x12994);
IkReal x13000=(cj5*x12993);
evalcond[0]=((((-1.0)*r22*x12997))+((r20*x13000))+(((-1.0)*r21*sj5*x12998)));
evalcond[1]=((((-1.0)*r12*x12997))+(((-1.0)*x12996*x12998))+((r10*x13000)));
evalcond[2]=(((r01*x12999))+(((-1.0)*r02*x12998))+(((-1.0)*x12995*x12997)));
evalcond[3]=((-1.0)+(((-1.0)*r01*sj5*x12998))+((x12993*x12995))+(((-1.0)*r02*x12997)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x12994*x12996))+(((-1.0)*r12*x12998))+(((-1.0)*cj5*r10*x12997)));
evalcond[5]=((((-1.0)*r22*x12998))+(((-1.0)*sj1*sj2))+((r21*x12999))+((cj1*cj2))+(((-1.0)*cj5*r20*x12997)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13001=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x13001;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x13001);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13002=((1.0)*sj5);
IkReal x13003=((((-1.0)*r20*x13002))+(((-1.0)*cj5*r21)));
j4eval[0]=x13003;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r11*x13002))+((cj5*r10))))));
j4eval[2]=IKsign(x13003);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13004=cj5*cj5;
IkReal x13005=r01*r01;
IkReal x13006=(cj5*r00);
IkReal x13007=(r01*sj5);
IkReal x13008=(((x13004*(r00*r00)))+(((-2.0)*x13006*x13007))+x13005+(r02*r02)+(((-1.0)*x13004*x13005)));
j4eval[0]=x13008;
j4eval[1]=((IKabs(((((-1.0)*x13007))+x13006)))+(IKabs(r02)));
j4eval[2]=IKsign(x13008);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13009=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13009);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13009);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13010=((1.0)*sj5);
j4eval[0]=((((-1.0)*r01*x13010))+((cj5*r00)));
j4eval[1]=(((cj5*r10))+(((-1.0)*r11*x13010)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13011=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13011);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13011);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13012=((1.0)*cj2);
CheckValue<IkReal> x13013=IKPowWithIntegerCheck(r22,-1);
if(!x13013.valid){
continue;
}
CheckValue<IkReal> x13014=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x13014.valid){
continue;
}
if( IKabs(((x13013.value)*(((((-1.0)*cj1*x13012))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13014.value)*(((((-1.0)*sj1*x13012))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13013.value)*(((((-1.0)*cj1*x13012))+((sj1*sj2))))))+IKsqr(((x13014.value)*(((((-1.0)*sj1*x13012))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13013.value)*(((((-1.0)*cj1*x13012))+((sj1*sj2))))), ((x13014.value)*(((((-1.0)*sj1*x13012))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13015=IKsin(j4);
IkReal x13016=IKcos(j4);
IkReal x13017=(cj5*r00);
IkReal x13018=(cj5*r10);
IkReal x13019=((1.0)*sj5*x13015);
IkReal x13020=((1.0)*sj5*x13016);
evalcond[0]=((-1.0)*r22*x13016);
evalcond[1]=((((-1.0)*sj1*sj2))+((r22*x13015))+((cj1*cj2)));
evalcond[2]=(((x13015*x13018))+(((-1.0)*r11*x13019)));
evalcond[3]=(((x13016*x13017))+(((-1.0)*r01*x13020)));
evalcond[4]=((-1.0)+((x13015*x13017))+(((-1.0)*r01*x13019)));
evalcond[5]=(((x13016*x13018))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r11*x13020)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13021=((1.0)*sj5);
CheckValue<IkReal> x13022=IKPowWithIntegerCheck(((((-1.0)*r01*x13021))+((cj5*r00))),-1);
if(!x13022.valid){
continue;
}
CheckValue<IkReal> x13023=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*x13021))),-1);
if(!x13023.valid){
continue;
}
if( IKabs(x13022.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13023.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13022.value)+IKsqr(((x13023.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x13022.value, ((x13023.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13024=IKsin(j4);
IkReal x13025=IKcos(j4);
IkReal x13026=(cj5*r00);
IkReal x13027=(cj5*r10);
IkReal x13028=((1.0)*sj5*x13024);
IkReal x13029=((1.0)*sj5*x13025);
evalcond[0]=((-1.0)*r22*x13025);
evalcond[1]=((((-1.0)*sj1*sj2))+((r22*x13024))+((cj1*cj2)));
evalcond[2]=(((x13024*x13027))+(((-1.0)*r11*x13028)));
evalcond[3]=((((-1.0)*r01*x13029))+((x13025*x13026)));
evalcond[4]=((-1.0)+((x13024*x13026))+(((-1.0)*r01*x13028)));
evalcond[5]=(((cj2*sj1))+((cj1*sj2))+((x13025*x13027))+(((-1.0)*r11*x13029)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13030=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x13030);
rxp0_2=(py*r00);
rxp1_0=(r21*x13030);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x13031=((1.0)*sj5);
j4eval[0]=((((-1.0)*r01*x13031))+((cj5*r00)));
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*x13031)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13032=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x13032);
rxp0_2=(py*r00);
rxp1_0=(r21*x13032);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13033=((1.0)*cj2);
CheckValue<IkReal> x13034=IKPowWithIntegerCheck(r12,-1);
if(!x13034.valid){
continue;
}
CheckValue<IkReal> x13035=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x13035.valid){
continue;
}
if( IKabs(((x13034.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13033)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13035.value)*((((sj1*sj2))+(((-1.0)*cj1*x13033)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13034.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13033))))))+IKsqr(((x13035.value)*((((sj1*sj2))+(((-1.0)*cj1*x13033))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13034.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13033))))), ((x13035.value)*((((sj1*sj2))+(((-1.0)*cj1*x13033))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13036=IKsin(j4);
IkReal x13037=IKcos(j4);
IkReal x13038=((1.0)*sj5);
IkReal x13039=(cj5*x13037);
IkReal x13040=(cj5*x13036);
evalcond[0]=((-1.0)*r12*x13037);
evalcond[1]=(((cj2*sj1))+((r12*x13036))+((cj1*sj2)));
evalcond[2]=(((r20*x13040))+(((-1.0)*r21*x13036*x13038)));
evalcond[3]=(((r00*x13039))+(((-1.0)*r01*x13037*x13038)));
evalcond[4]=((-1.0)+(((-1.0)*r01*x13036*x13038))+((r00*x13040)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r21*x13037*x13038))+((cj1*cj2))+((r20*x13039)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13041=((1.0)*sj5);
CheckValue<IkReal> x13042=IKPowWithIntegerCheck(((((-1.0)*r01*x13041))+((cj5*r00))),-1);
if(!x13042.valid){
continue;
}
CheckValue<IkReal> x13043=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*x13041))),-1);
if(!x13043.valid){
continue;
}
if( IKabs(x13042.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13043.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13042.value)+IKsqr(((x13043.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x13042.value, ((x13043.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13044=IKsin(j4);
IkReal x13045=IKcos(j4);
IkReal x13046=((1.0)*sj5);
IkReal x13047=(cj5*x13045);
IkReal x13048=(cj5*x13044);
evalcond[0]=((-1.0)*r12*x13045);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r12*x13044)));
evalcond[2]=(((r20*x13048))+(((-1.0)*r21*x13044*x13046)));
evalcond[3]=((((-1.0)*r01*x13045*x13046))+((r00*x13047)));
evalcond[4]=((-1.0)+((r00*x13048))+(((-1.0)*r01*x13044*x13046)));
evalcond[5]=(((r20*x13047))+(((-1.0)*sj1*sj2))+(((-1.0)*r21*x13045*x13046))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13049=cj5*cj5;
IkReal x13050=r01*r01;
IkReal x13051=(r01*sj5);
IkReal x13052=(cj5*r00);
CheckValue<IkReal> x13053 = IKatan2WithCheck(IkReal(((((-1.0)*x13051))+x13052)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x13053.valid){
continue;
}
CheckValue<IkReal> x13054=IKPowWithIntegerCheck(IKsign((((x13049*(r00*r00)))+(((-2.0)*x13051*x13052))+x13050+(r02*r02)+(((-1.0)*x13049*x13050)))),-1);
if(!x13054.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13053.value)+(((1.5707963267949)*(x13054.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13055=IKcos(j4);
IkReal x13056=IKsin(j4);
IkReal x13057=(cj5*r10);
IkReal x13058=((1.0)*x13055);
IkReal x13059=(cj5*x13056);
IkReal x13060=(cj5*x13055);
IkReal x13061=((1.0)*sj5*x13056);
evalcond[0]=(((r02*x13056))+((r00*x13060))+(((-1.0)*r01*sj5*x13058)));
evalcond[1]=(((r20*x13059))+(((-1.0)*r21*x13061))+(((-1.0)*r22*x13058)));
evalcond[2]=(((x13056*x13057))+(((-1.0)*r12*x13058))+(((-1.0)*r11*x13061)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x13061))+(((-1.0)*r02*x13058))+((r00*x13059)));
evalcond[4]=(((cj2*sj1))+((r12*x13056))+((x13055*x13057))+((cj1*sj2))+(((-1.0)*r11*sj5*x13058)));
evalcond[5]=(((r20*x13060))+(((-1.0)*sj1*sj2))+((r22*x13056))+(((-1.0)*r21*sj5*x13058))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13062=((1.0)*sj5);
CheckValue<IkReal> x13063=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x13062))+(((-1.0)*cj5*r21)))),-1);
if(!x13063.valid){
continue;
}
CheckValue<IkReal> x13064 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x13062)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13064.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13063.value)))+(x13064.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13065=IKcos(j4);
IkReal x13066=IKsin(j4);
IkReal x13067=(cj5*r10);
IkReal x13068=((1.0)*x13065);
IkReal x13069=(cj5*x13066);
IkReal x13070=(cj5*x13065);
IkReal x13071=((1.0)*sj5*x13066);
evalcond[0]=(((r02*x13066))+((r00*x13070))+(((-1.0)*r01*sj5*x13068)));
evalcond[1]=(((r20*x13069))+(((-1.0)*r22*x13068))+(((-1.0)*r21*x13071)));
evalcond[2]=(((x13066*x13067))+(((-1.0)*r11*x13071))+(((-1.0)*r12*x13068)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x13071))+(((-1.0)*r02*x13068))+((r00*x13069)));
evalcond[4]=(((cj2*sj1))+((r12*x13066))+((cj1*sj2))+((x13065*x13067))+(((-1.0)*r11*sj5*x13068)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r22*x13066))+(((-1.0)*r21*sj5*x13068))+((r20*x13070))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13072=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x13072.valid){
continue;
}
CheckValue<IkReal> x13073 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13073.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13072.value)))+(x13073.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13074=IKcos(j4);
IkReal x13075=IKsin(j4);
IkReal x13076=(cj5*r10);
IkReal x13077=((1.0)*x13074);
IkReal x13078=(cj5*x13075);
IkReal x13079=(cj5*x13074);
IkReal x13080=((1.0)*sj5*x13075);
evalcond[0]=((((-1.0)*r01*sj5*x13077))+((r00*x13079))+((r02*x13075)));
evalcond[1]=(((r20*x13078))+(((-1.0)*r22*x13077))+(((-1.0)*r21*x13080)));
evalcond[2]=((((-1.0)*r12*x13077))+(((-1.0)*r11*x13080))+((x13075*x13076)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x13077))+((r00*x13078))+(((-1.0)*r01*x13080)));
evalcond[4]=(((cj2*sj1))+((x13074*x13076))+(((-1.0)*r11*sj5*x13077))+((cj1*sj2))+((r12*x13075)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r20*x13079))+((cj1*cj2))+(((-1.0)*r21*sj5*x13077))+((r22*x13075)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13081=((-1.0)*r20);
IkReal x13083 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13083)==0){
continue;
}
IkReal x13082=pow(x13083,-0.5);
CheckValue<IkReal> x13084 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x13081),IKFAST_ATAN2_MAGTHRESH);
if(!x13084.valid){
continue;
}
IkReal gconst30=((-1.0)*(x13084.value));
IkReal gconst31=(r21*x13082);
IkReal gconst32=(x13081*x13082);
CheckValue<IkReal> x13085 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x13085.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13085.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13086=((-1.0)*r20);
IkReal x13087=x13082;
CheckValue<IkReal> x13089 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x13086),IKFAST_ATAN2_MAGTHRESH);
if(!x13089.valid){
continue;
}
IkReal x13088=((-1.0)*(x13089.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x13088;
IkReal gconst30=x13088;
IkReal gconst31=(r21*x13087);
IkReal gconst32=(x13086*x13087);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13090=((-1.0)*r20);
IkReal x13091=x13082;
CheckValue<IkReal> x13093 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x13090),IKFAST_ATAN2_MAGTHRESH);
if(!x13093.valid){
continue;
}
IkReal x13092=((-1.0)*(x13093.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x13092;
IkReal gconst30=x13092;
IkReal gconst31=(r21*x13091);
IkReal gconst32=(x13090*x13091);
CheckValue<IkReal> x13101=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x13101.valid){
continue;
}
IkReal x13094=x13101.value;
IkReal x13095=(cj3*x13094);
IkReal x13096=(r11*x13095);
IkReal x13097=(r01*x13095);
IkReal x13098=(r00*x13095);
IkReal x13099=(r10*x13095);
IkReal x13100=(r20*r21*x13095);
j4eval[0]=IKsign((((r10*x13098*(r20*r20)))+((cj3*r02*r12))+((r00*r20*r21*x13096))+((r10*r20*r21*x13097))+((r01*x13096*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13102=((-1.0)*r20);
IkReal x13103=x13082;
CheckValue<IkReal> x13105 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x13102),IKFAST_ATAN2_MAGTHRESH);
if(!x13105.valid){
continue;
}
IkReal x13104=((-1.0)*(x13105.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x13104;
IkReal gconst30=x13104;
IkReal gconst31=(r21*x13103);
IkReal gconst32=(x13102*x13103);
CheckValue<IkReal> x13113=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x13113.valid){
continue;
}
IkReal x13106=x13113.value;
IkReal x13107=(sj3*x13106);
IkReal x13108=(r11*x13107);
IkReal x13109=(r00*x13107);
IkReal x13110=(r01*x13107);
IkReal x13111=(r10*x13107);
IkReal x13112=(r20*r21*x13107);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*x13109*(r20*r20)))+((r10*r20*r21*x13110))+((r00*r20*r21*x13108))+((r01*x13108*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13114=((-1.0)*r20);
IkReal x13115=x13082;
CheckValue<IkReal> x13117 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x13114),IKFAST_ATAN2_MAGTHRESH);
if(!x13117.valid){
continue;
}
IkReal x13116=((-1.0)*(x13117.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x13116;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst30=x13116;
IkReal gconst31=(r21*x13115);
IkReal gconst32=(x13114*x13115);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x13118=((-1.0)*r20);
IkReal x13119=x13082;
CheckValue<IkReal> x13121 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x13118),IKFAST_ATAN2_MAGTHRESH);
if(!x13121.valid){
continue;
}
IkReal x13120=((-1.0)*(x13121.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x13120;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst30=x13120;
IkReal gconst31=(r21*x13119);
IkReal gconst32=(x13118*x13119);
IkReal x13122=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13126=IKPowWithIntegerCheck(x13122,-1);
if(!x13126.valid){
continue;
}
IkReal x13123=x13126.value;
IkReal x13124=((1.0)*x13123);
IkReal x13125=((((-1.0)*x13124*(r00*r00)*(r20*r20)))+(((-1.0)*x13124*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x13123)));
j4eval[0]=x13125;
j4eval[1]=IKsign(x13125);
j4eval[2]=r02;
j4eval[3]=x13122;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13127=((-1.0)*r20);
IkReal x13128=x13082;
CheckValue<IkReal> x13130 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x13127),IKFAST_ATAN2_MAGTHRESH);
if(!x13130.valid){
continue;
}
IkReal x13129=((-1.0)*(x13130.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x13129;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst30=x13129;
IkReal gconst31=(r21*x13128);
IkReal gconst32=(x13127*x13128);
IkReal x13131=r22*r22;
IkReal x13132=(cj1*r02*sj2);
IkReal x13133=(cj2*r02*sj1);
CheckValue<IkReal> x13137=IKPowWithIntegerCheck(((-1.0)+x13131),-1);
if(!x13137.valid){
continue;
}
IkReal x13134=x13137.value;
if((((1.0)+(((-1.0)*x13131)))) < -0.00001)
continue;
IkReal x13135=IKsqrt(((1.0)+(((-1.0)*x13131))));
IkReal x13136=(r22*x13134*x13135);
j4eval[0]=((IKabs((((x13132*x13136))+((x13133*x13136)))))+(IKabs((x13133+x13132))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13138=((1.0)*gconst32);
IkReal x13139=(gconst31*r01);
IkReal x13140=(cj1*sj2);
IkReal x13141=(cj2*sj1);
CheckValue<IkReal> x13142=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst31*r10))+(((-1.0)*r11*x13138)))),-1);
if(!x13142.valid){
continue;
}
CheckValue<IkReal> x13143 = IKatan2WithCheck(IkReal((((x13139*x13140))+((x13139*x13141))+(((-1.0)*r00*x13138*x13140))+(((-1.0)*r00*x13138*x13141)))),IkReal((((r02*x13140))+((r02*x13141)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13143.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13142.value)))+(x13143.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13144=IKsin(j4);
IkReal x13145=IKcos(j4);
IkReal x13146=(gconst32*r20);
IkReal x13147=((1.0)*x13145);
IkReal x13148=(gconst31*x13145);
IkReal x13149=(gconst32*x13144);
IkReal x13150=((1.0)*x13144);
IkReal x13151=(gconst31*x13150);
evalcond[0]=(((x13144*x13146))+(((-1.0)*r22*x13147))+(((-1.0)*r21*x13151)));
evalcond[1]=((((-1.0)*r11*x13151))+(((-1.0)*r12*x13147))+((r10*x13149)));
evalcond[2]=((((-1.0)*gconst32*r00*x13147))+(((-1.0)*r02*x13150))+((r01*x13148)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x13151))+(((-1.0)*r02*x13147))+((r00*x13149)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x13146*x13147))+((cj1*sj2))+(((-1.0)*r22*x13150))+((r21*x13148)));
evalcond[5]=((((-1.0)*r12*x13150))+(((-1.0)*gconst32*r10*x13147))+(((-1.0)*cj1*cj2))+((r11*x13148))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13152=(gconst32*r00);
IkReal x13153=(gconst31*r01);
CheckValue<IkReal> x13154=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x13152*x13152)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x13153*x13153)))+(((2.0)*x13152*x13153)))),-1);
if(!x13154.valid){
continue;
}
CheckValue<IkReal> x13155 = IKatan2WithCheck(IkReal((x13153+(((-1.0)*x13152)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x13155.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13154.value)))+(x13155.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13156=IKsin(j4);
IkReal x13157=IKcos(j4);
IkReal x13158=(gconst32*r20);
IkReal x13159=((1.0)*x13157);
IkReal x13160=(gconst31*x13157);
IkReal x13161=(gconst32*x13156);
IkReal x13162=((1.0)*x13156);
IkReal x13163=(gconst31*x13162);
evalcond[0]=((((-1.0)*r21*x13163))+(((-1.0)*r22*x13159))+((x13156*x13158)));
evalcond[1]=((((-1.0)*r12*x13159))+(((-1.0)*r11*x13163))+((r10*x13161)));
evalcond[2]=(((r01*x13160))+(((-1.0)*gconst32*r00*x13159))+(((-1.0)*r02*x13162)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x13163))+((r00*x13161))+(((-1.0)*r02*x13159)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x13158*x13159))+(((-1.0)*r22*x13162))+((r21*x13160)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x13162))+((r11*x13160))+(((-1.0)*gconst32*r10*x13159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13164=IKPowWithIntegerCheck(IKsign((((gconst32*r11))+((gconst31*r10)))),-1);
if(!x13164.valid){
continue;
}
CheckValue<IkReal> x13165 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst32*r20))+(((-1.0)*gconst31*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13165.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13164.value)))+(x13165.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13166=IKsin(j4);
IkReal x13167=IKcos(j4);
IkReal x13168=(gconst32*r20);
IkReal x13169=((1.0)*x13167);
IkReal x13170=(gconst31*x13167);
IkReal x13171=(gconst32*x13166);
IkReal x13172=((1.0)*x13166);
IkReal x13173=(gconst31*x13172);
evalcond[0]=((((-1.0)*r22*x13169))+((x13166*x13168))+(((-1.0)*r21*x13173)));
evalcond[1]=((((-1.0)*r12*x13169))+(((-1.0)*r11*x13173))+((r10*x13171)));
evalcond[2]=(((r01*x13170))+(((-1.0)*gconst32*r00*x13169))+(((-1.0)*r02*x13172)));
evalcond[3]=((-1.0)+((r00*x13171))+(((-1.0)*r02*x13169))+(((-1.0)*r01*x13173)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x13168*x13169))+((cj1*sj2))+(((-1.0)*r22*x13172))+((r21*x13170)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst32*r10*x13169))+(((-1.0)*r12*x13172))+((r11*x13170)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13174=((-1.0)*r20);
IkReal x13175=x13082;
CheckValue<IkReal> x13177 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x13174),IKFAST_ATAN2_MAGTHRESH);
if(!x13177.valid){
continue;
}
IkReal x13176=((-1.0)*(x13177.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x13176;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst30=x13176;
IkReal gconst31=(r21*x13175);
IkReal gconst32=(x13174*x13175);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13178=((-1.0)*r20);
IkReal x13179=x13082;
CheckValue<IkReal> x13181 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x13178),IKFAST_ATAN2_MAGTHRESH);
if(!x13181.valid){
continue;
}
IkReal x13180=((-1.0)*(x13181.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x13180;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst30=x13180;
IkReal gconst31=(r21*x13179);
IkReal gconst32=(x13178*x13179);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13182=((-1.0)*r20);
IkReal x13183=x13082;
CheckValue<IkReal> x13185 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x13182),IKFAST_ATAN2_MAGTHRESH);
if(!x13185.valid){
continue;
}
IkReal x13184=((-1.0)*(x13185.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x13184;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst30=x13184;
IkReal gconst31=(r21*x13183);
IkReal gconst32=(x13182*x13183);
IkReal x13186=r22*r22;
IkReal x13187=((1.0)*r02);
IkReal x13188=(cj1*sj2);
IkReal x13189=(cj2*sj1);
CheckValue<IkReal> x13193=IKPowWithIntegerCheck(((-1.0)+x13186),-1);
if(!x13193.valid){
continue;
}
IkReal x13190=x13193.value;
if((((1.0)+(((-1.0)*x13186)))) < -0.00001)
continue;
IkReal x13191=IKsqrt(((1.0)+(((-1.0)*x13186))));
IkReal x13192=(r22*x13190*x13191);
j4eval[0]=((IKabs(((((-1.0)*x13187*x13189*x13192))+(((-1.0)*x13187*x13188*x13192)))))+(IKabs(((((-1.0)*x13187*x13188))+(((-1.0)*x13187*x13189))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13194=(cj1*sj2);
IkReal x13195=(gconst32*r00);
IkReal x13196=((1.0)*r02);
IkReal x13197=((1.0)*gconst31);
IkReal x13198=(cj2*sj1);
CheckValue<IkReal> x13199 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x13197*x13198))+((x13195*x13198))+((x13194*x13195))+(((-1.0)*r01*x13194*x13197)))),IkReal(((((-1.0)*x13194*x13196))+(((-1.0)*x13196*x13198)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13199.valid){
continue;
}
CheckValue<IkReal> x13200=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x13197))+(((-1.0)*gconst32*r11)))),-1);
if(!x13200.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13199.value)+(((1.5707963267949)*(x13200.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13201=IKcos(j4);
IkReal x13202=IKsin(j4);
IkReal x13203=(gconst31*r21);
IkReal x13204=(gconst31*r01);
IkReal x13205=(gconst31*r11);
IkReal x13206=((1.0)*x13201);
IkReal x13207=((1.0)*x13202);
IkReal x13208=(gconst32*x13202);
IkReal x13209=(gconst32*x13201);
evalcond[0]=(((r00*x13209))+((r02*x13202))+(((-1.0)*x13204*x13206)));
evalcond[1]=((((-1.0)*x13203*x13207))+(((-1.0)*r22*x13206))+((r20*x13208)));
evalcond[2]=(((r10*x13208))+(((-1.0)*r12*x13206))+(((-1.0)*x13205*x13207)));
evalcond[3]=((-1.0)+((r00*x13208))+(((-1.0)*r02*x13206))+(((-1.0)*x13204*x13207)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x13202))+(((-1.0)*x13203*x13206))+((r20*x13209)));
evalcond[5]=(((r10*x13209))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x13202))+(((-1.0)*x13205*x13206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13210=(gconst32*r00);
IkReal x13211=(gconst31*r01);
CheckValue<IkReal> x13212 = IKatan2WithCheck(IkReal(((((-1.0)*x13211))+x13210)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x13212.valid){
continue;
}
CheckValue<IkReal> x13213=IKPowWithIntegerCheck(IKsign(((x13210*x13210)+(x13211*x13211)+(r02*r02)+(((-2.0)*x13210*x13211)))),-1);
if(!x13213.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13212.value)+(((1.5707963267949)*(x13213.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13214=IKcos(j4);
IkReal x13215=IKsin(j4);
IkReal x13216=(gconst31*r21);
IkReal x13217=(gconst31*r01);
IkReal x13218=(gconst31*r11);
IkReal x13219=((1.0)*x13214);
IkReal x13220=((1.0)*x13215);
IkReal x13221=(gconst32*x13215);
IkReal x13222=(gconst32*x13214);
evalcond[0]=(((r00*x13222))+((r02*x13215))+(((-1.0)*x13217*x13219)));
evalcond[1]=((((-1.0)*r22*x13219))+(((-1.0)*x13216*x13220))+((r20*x13221)));
evalcond[2]=(((r10*x13221))+(((-1.0)*x13218*x13220))+(((-1.0)*r12*x13219)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x13219))+((r00*x13221))+(((-1.0)*x13217*x13220)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x13216*x13219))+((cj1*sj2))+((r22*x13215))+((r20*x13222)));
evalcond[5]=(((r12*x13215))+(((-1.0)*x13218*x13219))+((r10*x13222))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13223=IKPowWithIntegerCheck(IKsign((((gconst32*r11))+((gconst31*r10)))),-1);
if(!x13223.valid){
continue;
}
CheckValue<IkReal> x13224 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst32*r20))+(((-1.0)*gconst31*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13224.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13223.value)))+(x13224.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13225=IKcos(j4);
IkReal x13226=IKsin(j4);
IkReal x13227=(gconst31*r21);
IkReal x13228=(gconst31*r01);
IkReal x13229=(gconst31*r11);
IkReal x13230=((1.0)*x13225);
IkReal x13231=((1.0)*x13226);
IkReal x13232=(gconst32*x13226);
IkReal x13233=(gconst32*x13225);
evalcond[0]=((((-1.0)*x13228*x13230))+((r02*x13226))+((r00*x13233)));
evalcond[1]=(((r20*x13232))+(((-1.0)*x13227*x13231))+(((-1.0)*r22*x13230)));
evalcond[2]=(((r10*x13232))+(((-1.0)*x13229*x13231))+(((-1.0)*r12*x13230)));
evalcond[3]=((-1.0)+(((-1.0)*x13228*x13231))+(((-1.0)*r02*x13230))+((r00*x13232)));
evalcond[4]=(((cj2*sj1))+((r20*x13233))+((cj1*sj2))+((r22*x13226))+(((-1.0)*x13227*x13230)));
evalcond[5]=(((r10*x13233))+(((-1.0)*x13229*x13230))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x13226)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13234=((-1.0)*r20);
IkReal x13235=x13082;
CheckValue<IkReal> x13237 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x13234),IKFAST_ATAN2_MAGTHRESH);
if(!x13237.valid){
continue;
}
IkReal x13236=((-1.0)*(x13237.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x13236;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst30=x13236;
IkReal gconst31=(r21*x13235);
IkReal gconst32=(x13234*x13235);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x13238=((-1.0)*r20);
IkReal x13239=x13082;
CheckValue<IkReal> x13241 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x13238),IKFAST_ATAN2_MAGTHRESH);
if(!x13241.valid){
continue;
}
IkReal x13240=((-1.0)*(x13241.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x13240;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst30=x13240;
IkReal gconst31=(r21*x13239);
IkReal gconst32=(x13238*x13239);
IkReal x13242=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13246=IKPowWithIntegerCheck(x13242,-1);
if(!x13246.valid){
continue;
}
IkReal x13243=x13246.value;
IkReal x13244=((1.0)*x13243);
IkReal x13245=((((-2.0)*r00*r01*r20*r21*x13243))+(((-1.0)*(r02*r02)))+(((-1.0)*x13244*(r00*r00)*(r20*r20)))+(((-1.0)*x13244*(r01*r01)*(r21*r21))));
j4eval[0]=x13245;
j4eval[1]=IKsign(x13245);
j4eval[2]=r02;
j4eval[3]=x13242;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13247=((-1.0)*r20);
IkReal x13248=x13082;
CheckValue<IkReal> x13250 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x13247),IKFAST_ATAN2_MAGTHRESH);
if(!x13250.valid){
continue;
}
IkReal x13249=((-1.0)*(x13250.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x13249;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst30=x13249;
IkReal gconst31=(r21*x13248);
IkReal gconst32=(x13247*x13248);
IkReal x13251=r22*r22;
IkReal x13252=(cj1*r12*sj2);
IkReal x13253=(cj2*r12*sj1);
CheckValue<IkReal> x13257=IKPowWithIntegerCheck(((-1.0)+x13251),-1);
if(!x13257.valid){
continue;
}
IkReal x13254=x13257.value;
if((((1.0)+(((-1.0)*x13251)))) < -0.00001)
continue;
IkReal x13255=IKsqrt(((1.0)+(((-1.0)*x13251))));
IkReal x13256=((1.0)*r22*x13254*x13255);
j4eval[0]=((IKabs(((((-1.0)*x13253*x13256))+(((-1.0)*x13252*x13256)))))+(IKabs((x13252+x13253))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13258=(gconst32*r10);
IkReal x13259=(cj2*sj1);
IkReal x13260=(cj1*sj2);
IkReal x13261=(gconst31*r11);
CheckValue<IkReal> x13262=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x13258*x13261))+(x13258*x13258)+(x13261*x13261))),-1);
if(!x13262.valid){
continue;
}
CheckValue<IkReal> x13263 = IKatan2WithCheck(IkReal((((r12*x13260))+((r12*x13259)))),IkReal((((x13258*x13260))+(((-1.0)*x13259*x13261))+((x13258*x13259))+(((-1.0)*x13260*x13261)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13263.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13262.value)))+(x13263.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13264=IKsin(j4);
IkReal x13265=IKcos(j4);
IkReal x13266=(gconst32*r20);
IkReal x13267=((1.0)*x13265);
IkReal x13268=(gconst31*x13265);
IkReal x13269=(gconst32*x13264);
IkReal x13270=((1.0)*x13264);
IkReal x13271=(gconst31*x13270);
evalcond[0]=((((-1.0)*r22*x13267))+((x13264*x13266))+(((-1.0)*r21*x13271)));
evalcond[1]=(((r10*x13269))+(((-1.0)*r11*x13271))+(((-1.0)*r12*x13267)));
evalcond[2]=(((r01*x13268))+(((-1.0)*r02*x13270))+(((-1.0)*gconst32*r00*x13267)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x13271))+((r00*x13269))+(((-1.0)*r02*x13267)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst32*r10*x13267))+((r11*x13268))+((cj1*sj2))+(((-1.0)*r12*x13270)));
evalcond[5]=((((-1.0)*x13266*x13267))+((r21*x13268))+(((-1.0)*sj1*sj2))+(((-1.0)*r22*x13270))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13272=(gconst32*r00);
IkReal x13273=(gconst31*r01);
CheckValue<IkReal> x13274 = IKatan2WithCheck(IkReal(((((-1.0)*x13272))+x13273)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x13274.valid){
continue;
}
CheckValue<IkReal> x13275=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x13273*x13273)))+(((-1.0)*(x13272*x13272)))+(((-1.0)*(r02*r02)))+(((2.0)*x13272*x13273)))),-1);
if(!x13275.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13274.value)+(((1.5707963267949)*(x13275.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13276=IKsin(j4);
IkReal x13277=IKcos(j4);
IkReal x13278=(gconst32*r20);
IkReal x13279=((1.0)*x13277);
IkReal x13280=(gconst31*x13277);
IkReal x13281=(gconst32*x13276);
IkReal x13282=((1.0)*x13276);
IkReal x13283=(gconst31*x13282);
evalcond[0]=((((-1.0)*r21*x13283))+(((-1.0)*r22*x13279))+((x13276*x13278)));
evalcond[1]=(((r10*x13281))+(((-1.0)*r12*x13279))+(((-1.0)*r11*x13283)));
evalcond[2]=((((-1.0)*gconst32*r00*x13279))+(((-1.0)*r02*x13282))+((r01*x13280)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x13283))+(((-1.0)*r02*x13279))+((r00*x13281)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst32*r10*x13279))+((cj1*sj2))+((r11*x13280))+(((-1.0)*r12*x13282)));
evalcond[5]=((((-1.0)*r22*x13282))+(((-1.0)*x13278*x13279))+(((-1.0)*sj1*sj2))+((r21*x13280))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13284=IKPowWithIntegerCheck(IKsign((((gconst32*r11))+((gconst31*r10)))),-1);
if(!x13284.valid){
continue;
}
CheckValue<IkReal> x13285 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst32*r20))+(((-1.0)*gconst31*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13285.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13284.value)))+(x13285.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13286=IKsin(j4);
IkReal x13287=IKcos(j4);
IkReal x13288=(gconst32*r20);
IkReal x13289=((1.0)*x13287);
IkReal x13290=(gconst31*x13287);
IkReal x13291=(gconst32*x13286);
IkReal x13292=((1.0)*x13286);
IkReal x13293=(gconst31*x13292);
evalcond[0]=((((-1.0)*r22*x13289))+(((-1.0)*r21*x13293))+((x13286*x13288)));
evalcond[1]=(((r10*x13291))+(((-1.0)*r11*x13293))+(((-1.0)*r12*x13289)));
evalcond[2]=((((-1.0)*gconst32*r00*x13289))+(((-1.0)*r02*x13292))+((r01*x13290)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x13289))+(((-1.0)*r01*x13293))+((r00*x13291)));
evalcond[4]=(((cj2*sj1))+((r11*x13290))+((cj1*sj2))+(((-1.0)*r12*x13292))+(((-1.0)*gconst32*r10*x13289)));
evalcond[5]=((((-1.0)*x13288*x13289))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r22*x13292))+((r21*x13290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13294=((-1.0)*r20);
IkReal x13295=x13082;
CheckValue<IkReal> x13297 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x13294),IKFAST_ATAN2_MAGTHRESH);
if(!x13297.valid){
continue;
}
IkReal x13296=((-1.0)*(x13297.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x13296;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst30=x13296;
IkReal gconst31=(r21*x13295);
IkReal gconst32=(x13294*x13295);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13298=((-1.0)*r20);
IkReal x13299=x13082;
CheckValue<IkReal> x13301 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x13298),IKFAST_ATAN2_MAGTHRESH);
if(!x13301.valid){
continue;
}
IkReal x13300=((-1.0)*(x13301.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x13300;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst30=x13300;
IkReal gconst31=(r21*x13299);
IkReal gconst32=(x13298*x13299);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13302=((-1.0)*r20);
IkReal x13303=x13082;
CheckValue<IkReal> x13305 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x13302),IKFAST_ATAN2_MAGTHRESH);
if(!x13305.valid){
continue;
}
IkReal x13304=((-1.0)*(x13305.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x13304;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst30=x13304;
IkReal gconst31=(r21*x13303);
IkReal gconst32=(x13302*x13303);
IkReal x13306=r22*r22;
IkReal x13307=(r02*sj1*sj2);
CheckValue<IkReal> x13312=IKPowWithIntegerCheck(((-1.0)+x13306),-1);
if(!x13312.valid){
continue;
}
IkReal x13308=x13312.value;
IkReal x13309=((1.0)*cj1*cj2*r02);
if((((1.0)+(((-1.0)*x13306)))) < -0.00001)
continue;
IkReal x13310=IKsqrt(((1.0)+(((-1.0)*x13306))));
IkReal x13311=(r22*x13308*x13310);
j4eval[0]=((IKabs(((((-1.0)*x13309*x13311))+((x13307*x13311)))))+(IKabs(((((-1.0)*x13309))+x13307))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13313=((1.0)*gconst32);
IkReal x13314=(sj1*sj2);
IkReal x13315=((1.0)*gconst31);
IkReal x13316=(cj1*cj2);
CheckValue<IkReal> x13317=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x13315))+(((-1.0)*r11*x13313)))),-1);
if(!x13317.valid){
continue;
}
CheckValue<IkReal> x13318 = IKatan2WithCheck(IkReal((((gconst31*r01*x13314))+(((-1.0)*r00*x13313*x13314))+(((-1.0)*r01*x13315*x13316))+((gconst32*r00*x13316)))),IkReal(((((-1.0)*r02*x13316))+((r02*x13314)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13318.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13317.value)))+(x13318.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13319=IKcos(j4);
IkReal x13320=IKsin(j4);
IkReal x13321=(gconst31*r21);
IkReal x13322=(gconst31*r01);
IkReal x13323=(gconst31*r11);
IkReal x13324=((1.0)*x13319);
IkReal x13325=((1.0)*x13320);
IkReal x13326=(gconst32*x13320);
IkReal x13327=(gconst32*x13319);
evalcond[0]=(((r02*x13320))+((r00*x13327))+(((-1.0)*x13322*x13324)));
evalcond[1]=((((-1.0)*x13321*x13325))+(((-1.0)*r22*x13324))+((r20*x13326)));
evalcond[2]=((((-1.0)*r12*x13324))+((r10*x13326))+(((-1.0)*x13323*x13325)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x13324))+((r00*x13326))+(((-1.0)*x13322*x13325)));
evalcond[4]=(((r12*x13320))+((cj2*sj1))+((cj1*sj2))+((r10*x13327))+(((-1.0)*x13323*x13324)));
evalcond[5]=((((-1.0)*x13321*x13324))+(((-1.0)*sj1*sj2))+((r20*x13327))+((cj1*cj2))+((r22*x13320)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13328=(gconst32*r00);
IkReal x13329=(gconst31*r01);
CheckValue<IkReal> x13330 = IKatan2WithCheck(IkReal(((((-1.0)*x13329))+x13328)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x13330.valid){
continue;
}
CheckValue<IkReal> x13331=IKPowWithIntegerCheck(IKsign(((x13329*x13329)+(((-2.0)*x13328*x13329))+(x13328*x13328)+(r02*r02))),-1);
if(!x13331.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13330.value)+(((1.5707963267949)*(x13331.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13332=IKcos(j4);
IkReal x13333=IKsin(j4);
IkReal x13334=(gconst31*r21);
IkReal x13335=(gconst31*r01);
IkReal x13336=(gconst31*r11);
IkReal x13337=((1.0)*x13332);
IkReal x13338=((1.0)*x13333);
IkReal x13339=(gconst32*x13333);
IkReal x13340=(gconst32*x13332);
evalcond[0]=(((r02*x13333))+(((-1.0)*x13335*x13337))+((r00*x13340)));
evalcond[1]=((((-1.0)*r22*x13337))+((r20*x13339))+(((-1.0)*x13334*x13338)));
evalcond[2]=(((r10*x13339))+(((-1.0)*r12*x13337))+(((-1.0)*x13336*x13338)));
evalcond[3]=((-1.0)+((r00*x13339))+(((-1.0)*x13335*x13338))+(((-1.0)*r02*x13337)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x13336*x13337))+((r10*x13340))+((r12*x13333)));
evalcond[5]=(((r22*x13333))+(((-1.0)*sj1*sj2))+(((-1.0)*x13334*x13337))+((cj1*cj2))+((r20*x13340)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13341=IKPowWithIntegerCheck(IKsign((((gconst32*r11))+((gconst31*r10)))),-1);
if(!x13341.valid){
continue;
}
CheckValue<IkReal> x13342 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst32*r20))+(((-1.0)*gconst31*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13342.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13341.value)))+(x13342.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13343=IKcos(j4);
IkReal x13344=IKsin(j4);
IkReal x13345=(gconst31*r21);
IkReal x13346=(gconst31*r01);
IkReal x13347=(gconst31*r11);
IkReal x13348=((1.0)*x13343);
IkReal x13349=((1.0)*x13344);
IkReal x13350=(gconst32*x13344);
IkReal x13351=(gconst32*x13343);
evalcond[0]=(((r02*x13344))+((r00*x13351))+(((-1.0)*x13346*x13348)));
evalcond[1]=(((r20*x13350))+(((-1.0)*x13345*x13349))+(((-1.0)*r22*x13348)));
evalcond[2]=(((r10*x13350))+(((-1.0)*r12*x13348))+(((-1.0)*x13347*x13349)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x13348))+((r00*x13350))+(((-1.0)*x13346*x13349)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r10*x13351))+((r12*x13344))+(((-1.0)*x13347*x13348)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r20*x13351))+((r22*x13344))+(((-1.0)*x13345*x13348))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13352=((-1.0)*r20);
IkReal x13353=((-1.0)*r21);
CheckValue<IkReal> x13355 = IKatan2WithCheck(IkReal(x13353),IkReal(x13352),IKFAST_ATAN2_MAGTHRESH);
if(!x13355.valid){
continue;
}
IkReal x13354=((-1.0)*(x13355.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x13354;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x13352);
rxp0_2=(py*r00);
rxp1_0=(py*x13353);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst30=x13354;
IkReal gconst31=r21;
IkReal gconst32=x13352;
IkReal x13356=(r01*r21);
IkReal x13357=(r00*r20);
j4eval[0]=((((-1.0)*x13357))+(((-1.0)*x13356)));
j4eval[1]=(((sj3*x13356))+((sj3*x13357)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13358=((-1.0)*r20);
IkReal x13359=((-1.0)*r21);
CheckValue<IkReal> x13361 = IKatan2WithCheck(IkReal(x13359),IkReal(x13358),IKFAST_ATAN2_MAGTHRESH);
if(!x13361.valid){
continue;
}
IkReal x13360=((-1.0)*(x13361.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x13360;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x13358);
rxp0_2=(py*r00);
rxp1_0=(py*x13359);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst30=x13360;
IkReal gconst31=r21;
IkReal gconst32=x13358;
IkReal x13362=(r01*r21);
IkReal x13363=(r00*r20);
j4eval[0]=((((-1.0)*x13362))+(((-1.0)*x13363)));
j4eval[1]=(((cj3*x13363))+((cj3*x13362)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13364=((-1.0)*r20);
IkReal x13365=((-1.0)*r21);
CheckValue<IkReal> x13367 = IKatan2WithCheck(IkReal(x13365),IkReal(x13364),IKFAST_ATAN2_MAGTHRESH);
if(!x13367.valid){
continue;
}
IkReal x13366=((-1.0)*(x13367.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x13366;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x13364);
rxp0_2=(py*r00);
rxp1_0=(py*x13365);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst30=x13366;
IkReal gconst31=r21;
IkReal gconst32=x13364;
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=(((cj3*r01*r21))+((cj3*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13368=((1.0)*r00);
CheckValue<IkReal> x13369=IKPowWithIntegerCheck(r12,-1);
if(!x13369.valid){
continue;
}
CheckValue<IkReal> x13370=IKPowWithIntegerCheck(sj3,-1);
if(!x13370.valid){
continue;
}
CheckValue<IkReal> x13371=IKPowWithIntegerCheck((((cj3*gconst31*r01))+(((-1.0)*cj3*gconst32*x13368))),-1);
if(!x13371.valid){
continue;
}
if( IKabs(((x13369.value)*(x13370.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13371.value)*(((((-1.0)*gconst32*r01*sj3))+(((-1.0)*gconst31*sj3*x13368)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13369.value)*(x13370.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x13371.value)*(((((-1.0)*gconst32*r01*sj3))+(((-1.0)*gconst31*sj3*x13368))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13369.value)*(x13370.value)*((((cj2*sj1))+((cj1*sj2))))), ((x13371.value)*(((((-1.0)*gconst32*r01*sj3))+(((-1.0)*gconst31*sj3*x13368))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13372=IKsin(j4);
IkReal x13373=IKcos(j4);
IkReal x13374=(cj2*sj1);
IkReal x13375=(cj1*sj2);
IkReal x13376=(r21*sj3);
IkReal x13377=((1.0)*sj3);
IkReal x13378=(gconst31*sj3);
IkReal x13379=(sj1*sj2);
IkReal x13380=((1.0)*gconst31);
IkReal x13381=(cj1*cj2);
IkReal x13382=(r01*sj3);
IkReal x13383=(r12*x13372);
IkReal x13384=((1.0)*cj3*gconst32);
IkReal x13385=(gconst31*x13373);
IkReal x13386=(gconst32*x13373);
IkReal x13387=(gconst32*x13372);
IkReal x13388=(x13375+x13374);
evalcond[0]=((-1.0)*r12*x13373);
evalcond[1]=((((-1.0)*r21*x13372*x13380))+((r20*x13387)));
evalcond[2]=((((-1.0)*x13377*x13383))+x13388);
evalcond[3]=((-1.0)+((r00*x13387))+(((-1.0)*r01*x13372*x13380)));
evalcond[4]=((((-1.0)*cj3*x13383))+(((-1.0)*x13381))+x13379);
evalcond[5]=(((gconst32*x13382))+((cj3*r01*x13385))+(((-1.0)*r00*x13373*x13384))+((r00*x13378)));
evalcond[6]=((((-1.0)*r00*x13377*x13386))+(((-1.0)*cj3*r00*x13380))+(((-1.0)*r01*x13384))+((r01*x13373*x13378)));
evalcond[7]=(((cj3*r21*x13385))+(((-1.0)*r20*x13373*x13384))+((r20*x13378))+((gconst32*x13376))+x13388);
evalcond[8]=((((-1.0)*r21*x13384))+((x13376*x13385))+(((-1.0)*cj3*r20*x13380))+x13381+(((-1.0)*r20*x13377*x13386))+(((-1.0)*x13379)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13389=(gconst32*r00);
IkReal x13390=((1.0)*gconst31);
CheckValue<IkReal> x13391=IKPowWithIntegerCheck(((((-1.0)*r01*x13390))+x13389),-1);
if(!x13391.valid){
continue;
}
CheckValue<IkReal> x13392=IKPowWithIntegerCheck(((((-1.0)*cj3*x13389))+((cj3*gconst31*r01))),-1);
if(!x13392.valid){
continue;
}
if( IKabs(x13391.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13392.value)*(((((-1.0)*gconst32*r01*sj3))+(((-1.0)*r00*sj3*x13390)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13391.value)+IKsqr(((x13392.value)*(((((-1.0)*gconst32*r01*sj3))+(((-1.0)*r00*sj3*x13390))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x13391.value, ((x13392.value)*(((((-1.0)*gconst32*r01*sj3))+(((-1.0)*r00*sj3*x13390))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13393=IKsin(j4);
IkReal x13394=IKcos(j4);
IkReal x13395=(cj2*sj1);
IkReal x13396=(cj1*sj2);
IkReal x13397=(r21*sj3);
IkReal x13398=((1.0)*sj3);
IkReal x13399=(gconst31*sj3);
IkReal x13400=(sj1*sj2);
IkReal x13401=((1.0)*gconst31);
IkReal x13402=(cj1*cj2);
IkReal x13403=(r01*sj3);
IkReal x13404=(r12*x13393);
IkReal x13405=((1.0)*cj3*gconst32);
IkReal x13406=(gconst31*x13394);
IkReal x13407=(gconst32*x13394);
IkReal x13408=(gconst32*x13393);
IkReal x13409=(x13396+x13395);
evalcond[0]=((-1.0)*r12*x13394);
evalcond[1]=((((-1.0)*r21*x13393*x13401))+((r20*x13408)));
evalcond[2]=(x13409+(((-1.0)*x13398*x13404)));
evalcond[3]=((-1.0)+((r00*x13408))+(((-1.0)*r01*x13393*x13401)));
evalcond[4]=(x13400+(((-1.0)*cj3*x13404))+(((-1.0)*x13402)));
evalcond[5]=(((cj3*r01*x13406))+(((-1.0)*r00*x13394*x13405))+((gconst32*x13403))+((r00*x13399)));
evalcond[6]=((((-1.0)*cj3*r00*x13401))+((r01*x13394*x13399))+(((-1.0)*r01*x13405))+(((-1.0)*r00*x13398*x13407)));
evalcond[7]=(x13409+((r20*x13399))+((cj3*r21*x13406))+(((-1.0)*r20*x13394*x13405))+((gconst32*x13397)));
evalcond[8]=(x13402+(((-1.0)*r20*x13398*x13407))+((x13397*x13406))+(((-1.0)*cj3*r20*x13401))+(((-1.0)*x13400))+(((-1.0)*r21*x13405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13410=(gconst32*r00);
IkReal x13411=(gconst31*r01);
CheckValue<IkReal> x13412=IKPowWithIntegerCheck((x13410+(((-1.0)*x13411))),-1);
if(!x13412.valid){
continue;
}
CheckValue<IkReal> x13413=IKPowWithIntegerCheck((((sj3*x13411))+(((-1.0)*sj3*x13410))),-1);
if(!x13413.valid){
continue;
}
if( IKabs(x13412.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13413.value)*((((cj3*gconst31*r00))+((cj3*gconst32*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13412.value)+IKsqr(((x13413.value)*((((cj3*gconst31*r00))+((cj3*gconst32*r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x13412.value, ((x13413.value)*((((cj3*gconst31*r00))+((cj3*gconst32*r01))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13414=IKsin(j4);
IkReal x13415=IKcos(j4);
IkReal x13416=(cj2*sj1);
IkReal x13417=(cj1*sj2);
IkReal x13418=(r21*sj3);
IkReal x13419=((1.0)*sj3);
IkReal x13420=(gconst31*sj3);
IkReal x13421=(sj1*sj2);
IkReal x13422=((1.0)*gconst31);
IkReal x13423=(cj1*cj2);
IkReal x13424=(r01*sj3);
IkReal x13425=(r12*x13414);
IkReal x13426=((1.0)*cj3*gconst32);
IkReal x13427=(gconst31*x13415);
IkReal x13428=(gconst32*x13415);
IkReal x13429=(gconst32*x13414);
IkReal x13430=(x13416+x13417);
evalcond[0]=((-1.0)*r12*x13415);
evalcond[1]=(((r20*x13429))+(((-1.0)*r21*x13414*x13422)));
evalcond[2]=(x13430+(((-1.0)*x13419*x13425)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x13414*x13422))+((r00*x13429)));
evalcond[4]=(x13421+(((-1.0)*x13423))+(((-1.0)*cj3*x13425)));
evalcond[5]=((((-1.0)*r00*x13415*x13426))+((r00*x13420))+((gconst32*x13424))+((cj3*r01*x13427)));
evalcond[6]=((((-1.0)*cj3*r00*x13422))+(((-1.0)*r01*x13426))+(((-1.0)*r00*x13419*x13428))+((r01*x13415*x13420)));
evalcond[7]=(x13430+((cj3*r21*x13427))+((gconst32*x13418))+(((-1.0)*r20*x13415*x13426))+((r20*x13420)));
evalcond[8]=(x13423+(((-1.0)*x13421))+(((-1.0)*r21*x13426))+((x13418*x13427))+(((-1.0)*cj3*r20*x13422))+(((-1.0)*r20*x13419*x13428)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13431=gconst32*gconst32;
IkReal x13432=gconst31*gconst31;
IkReal x13433=(gconst31*r00);
IkReal x13434=(gconst32*r01);
IkReal x13435=((1.0)*cj3);
IkReal x13436=(cj3*r11);
IkReal x13437=((1.0)*sj3);
IkReal x13438=(r12*x13435);
IkReal x13439=(r10*x13431);
CheckValue<IkReal> x13440=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((r01*r11*sj3*x13432))+(((-1.0)*gconst32*r11*x13433*x13437))+((r00*sj3*x13439))+(((-1.0)*gconst31*r10*x13434*x13437)))),-1);
if(!x13440.valid){
continue;
}
CheckValue<IkReal> x13441 = IKatan2WithCheck(IkReal(((((-1.0)*x13434*x13438))+(((-1.0)*x13433*x13438)))),IkReal(((((-1.0)*r01*x13435*x13439))+(((-1.0)*gconst32*r10*x13433*x13435))+((gconst31*x13434*x13436))+((r00*x13432*x13436)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13441.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13440.value)))+(x13441.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13442=IKsin(j4);
IkReal x13443=IKcos(j4);
IkReal x13444=(cj2*sj1);
IkReal x13445=(cj1*sj2);
IkReal x13446=(r21*sj3);
IkReal x13447=(cj3*gconst32);
IkReal x13448=((1.0)*r01);
IkReal x13449=(gconst32*sj3);
IkReal x13450=(gconst31*r00);
IkReal x13451=(sj1*sj2);
IkReal x13452=(cj1*cj2);
IkReal x13453=((1.0)*cj3);
IkReal x13454=(gconst31*r10);
IkReal x13455=(gconst31*r20);
IkReal x13456=((1.0)*x13443);
IkReal x13457=(gconst31*x13443);
IkReal x13458=((1.0)*x13442);
IkReal x13459=(gconst32*x13442);
IkReal x13460=(x13445+x13444);
evalcond[0]=((((-1.0)*r22*x13456))+((r20*x13459))+(((-1.0)*gconst31*r21*x13458)));
evalcond[1]=(((r10*x13459))+(((-1.0)*gconst31*r11*x13458))+(((-1.0)*r12*x13456)));
evalcond[2]=((-1.0)+(((-1.0)*gconst31*x13442*x13448))+(((-1.0)*r02*x13456))+((r00*x13459)));
evalcond[3]=((((-1.0)*r00*x13447*x13456))+((sj3*x13450))+(((-1.0)*r02*x13442*x13453))+((r01*x13449))+((cj3*r01*x13457)));
evalcond[4]=((((-1.0)*r00*x13449*x13456))+((r01*sj3*x13457))+(((-1.0)*r02*sj3*x13458))+(((-1.0)*x13447*x13448))+(((-1.0)*x13450*x13453)));
evalcond[5]=(x13460+((cj3*r21*x13457))+((sj3*x13455))+(((-1.0)*r20*x13447*x13456))+(((-1.0)*r22*x13442*x13453))+((gconst32*x13446)));
evalcond[6]=(x13451+(((-1.0)*r12*x13442*x13453))+((sj3*x13454))+((cj3*r11*x13457))+(((-1.0)*r10*x13447*x13456))+(((-1.0)*x13452))+((r11*x13449)));
evalcond[7]=(x13460+(((-1.0)*x13453*x13454))+((r11*sj3*x13457))+(((-1.0)*r10*x13449*x13456))+(((-1.0)*r12*sj3*x13458))+(((-1.0)*r11*x13447)));
evalcond[8]=(x13452+(((-1.0)*x13453*x13455))+(((-1.0)*x13451))+(((-1.0)*r21*x13447))+(((-1.0)*r20*x13449*x13456))+(((-1.0)*r22*sj3*x13458))+((x13446*x13457)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13461=gconst31*gconst31;
IkReal x13462=gconst32*gconst32;
IkReal x13463=((1.0)*r11);
IkReal x13464=(r00*sj3);
IkReal x13465=(gconst31*gconst32);
IkReal x13466=(cj3*r01);
IkReal x13467=(cj3*r00);
IkReal x13468=(gconst32*r01*sj3);
IkReal x13469=(r10*x13462);
CheckValue<IkReal> x13470=IKPowWithIntegerCheck(IKsign((((cj3*r02*r12))+((x13467*x13469))+(((-1.0)*r10*x13465*x13466))+(((-1.0)*x13463*x13465*x13467))+((r11*x13461*x13466)))),-1);
if(!x13470.valid){
continue;
}
CheckValue<IkReal> x13471 = IKatan2WithCheck(IkReal((((gconst31*r12*x13464))+((r12*x13468)))),IkReal(((((-1.0)*r01*sj3*x13463*x13465))+((r01*sj3*x13469))+(((-1.0)*x13461*x13463*x13464))+((r10*x13464*x13465)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13471.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13470.value)))+(x13471.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13472=IKsin(j4);
IkReal x13473=IKcos(j4);
IkReal x13474=(cj2*sj1);
IkReal x13475=(cj1*sj2);
IkReal x13476=(r21*sj3);
IkReal x13477=(cj3*gconst32);
IkReal x13478=((1.0)*r01);
IkReal x13479=(gconst32*sj3);
IkReal x13480=(gconst31*r00);
IkReal x13481=(sj1*sj2);
IkReal x13482=(cj1*cj2);
IkReal x13483=((1.0)*cj3);
IkReal x13484=(gconst31*r10);
IkReal x13485=(gconst31*r20);
IkReal x13486=((1.0)*x13473);
IkReal x13487=(gconst31*x13473);
IkReal x13488=((1.0)*x13472);
IkReal x13489=(gconst32*x13472);
IkReal x13490=(x13474+x13475);
evalcond[0]=((((-1.0)*r22*x13486))+((r20*x13489))+(((-1.0)*gconst31*r21*x13488)));
evalcond[1]=((((-1.0)*r12*x13486))+(((-1.0)*gconst31*r11*x13488))+((r10*x13489)));
evalcond[2]=((-1.0)+(((-1.0)*gconst31*x13472*x13478))+(((-1.0)*r02*x13486))+((r00*x13489)));
evalcond[3]=(((r01*x13479))+(((-1.0)*r00*x13477*x13486))+((cj3*r01*x13487))+((sj3*x13480))+(((-1.0)*r02*x13472*x13483)));
evalcond[4]=(((r01*sj3*x13487))+(((-1.0)*r00*x13479*x13486))+(((-1.0)*x13477*x13478))+(((-1.0)*r02*sj3*x13488))+(((-1.0)*x13480*x13483)));
evalcond[5]=(((cj3*r21*x13487))+x13490+((gconst32*x13476))+(((-1.0)*r20*x13477*x13486))+((sj3*x13485))+(((-1.0)*r22*x13472*x13483)));
evalcond[6]=(x13481+(((-1.0)*x13482))+((r11*x13479))+((sj3*x13484))+(((-1.0)*r12*x13472*x13483))+((cj3*r11*x13487))+(((-1.0)*r10*x13477*x13486)));
evalcond[7]=(x13490+(((-1.0)*x13483*x13484))+(((-1.0)*r12*sj3*x13488))+(((-1.0)*r10*x13479*x13486))+((r11*sj3*x13487))+(((-1.0)*r11*x13477)));
evalcond[8]=(x13482+((x13476*x13487))+(((-1.0)*x13481))+(((-1.0)*x13483*x13485))+(((-1.0)*r20*x13479*x13486))+(((-1.0)*r21*x13477))+(((-1.0)*r22*sj3*x13488)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13491=IKPowWithIntegerCheck(IKsign((((gconst32*r11))+((gconst31*r10)))),-1);
if(!x13491.valid){
continue;
}
CheckValue<IkReal> x13492 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst32*r20))+(((-1.0)*gconst31*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13492.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13491.value)))+(x13492.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13493=IKsin(j4);
IkReal x13494=IKcos(j4);
IkReal x13495=(cj2*sj1);
IkReal x13496=(cj1*sj2);
IkReal x13497=(r21*sj3);
IkReal x13498=(cj3*gconst32);
IkReal x13499=((1.0)*r01);
IkReal x13500=(gconst32*sj3);
IkReal x13501=(gconst31*r00);
IkReal x13502=(sj1*sj2);
IkReal x13503=(cj1*cj2);
IkReal x13504=((1.0)*cj3);
IkReal x13505=(gconst31*r10);
IkReal x13506=(gconst31*r20);
IkReal x13507=((1.0)*x13494);
IkReal x13508=(gconst31*x13494);
IkReal x13509=((1.0)*x13493);
IkReal x13510=(gconst32*x13493);
IkReal x13511=(x13495+x13496);
evalcond[0]=(((r20*x13510))+(((-1.0)*gconst31*r21*x13509))+(((-1.0)*r22*x13507)));
evalcond[1]=((((-1.0)*r12*x13507))+(((-1.0)*gconst31*r11*x13509))+((r10*x13510)));
evalcond[2]=((-1.0)+(((-1.0)*gconst31*x13493*x13499))+(((-1.0)*r02*x13507))+((r00*x13510)));
evalcond[3]=((((-1.0)*r00*x13498*x13507))+((cj3*r01*x13508))+(((-1.0)*r02*x13493*x13504))+((sj3*x13501))+((r01*x13500)));
evalcond[4]=(((r01*sj3*x13508))+(((-1.0)*x13501*x13504))+(((-1.0)*r02*sj3*x13509))+(((-1.0)*x13498*x13499))+(((-1.0)*r00*x13500*x13507)));
evalcond[5]=(x13511+(((-1.0)*r20*x13498*x13507))+(((-1.0)*r22*x13493*x13504))+((gconst32*x13497))+((sj3*x13506))+((cj3*r21*x13508)));
evalcond[6]=(x13502+(((-1.0)*r10*x13498*x13507))+(((-1.0)*r12*x13493*x13504))+(((-1.0)*x13503))+((cj3*r11*x13508))+((r11*x13500))+((sj3*x13505)));
evalcond[7]=(x13511+(((-1.0)*r10*x13500*x13507))+(((-1.0)*r12*sj3*x13509))+(((-1.0)*r11*x13498))+(((-1.0)*x13504*x13505))+((r11*sj3*x13508)));
evalcond[8]=(x13503+(((-1.0)*r22*sj3*x13509))+(((-1.0)*x13502))+((x13497*x13508))+(((-1.0)*r21*x13498))+(((-1.0)*x13504*x13506))+(((-1.0)*r20*x13500*x13507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13512=((-1.0)*r21);
IkReal x13514 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13514)==0){
continue;
}
IkReal x13513=pow(x13514,-0.5);
CheckValue<IkReal> x13515 = IKatan2WithCheck(IkReal(x13512),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x13515.valid){
continue;
}
IkReal gconst33=((3.14159265358979)+(((-1.0)*(x13515.value))));
IkReal gconst34=(x13512*x13513);
IkReal gconst35=((1.0)*r20*x13513);
CheckValue<IkReal> x13516 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x13516.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13516.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13517=((-1.0)*r21);
CheckValue<IkReal> x13520 = IKatan2WithCheck(IkReal(x13517),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x13520.valid){
continue;
}
IkReal x13518=((1.0)*(x13520.value));
IkReal x13519=x13513;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x13518)));
IkReal gconst33=((3.14159265358979)+(((-1.0)*x13518)));
IkReal gconst34=(x13517*x13519);
IkReal gconst35=((1.0)*r20*x13519);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x13521=((-1.0)*r21);
CheckValue<IkReal> x13524 = IKatan2WithCheck(IkReal(x13521),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x13524.valid){
continue;
}
IkReal x13522=((1.0)*(x13524.value));
IkReal x13523=x13513;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x13522)));
IkReal gconst33=((3.14159265358979)+(((-1.0)*x13522)));
IkReal gconst34=(x13521*x13523);
IkReal gconst35=((1.0)*r20*x13523);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13525=((-1.0)*r21);
CheckValue<IkReal> x13528 = IKatan2WithCheck(IkReal(x13525),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x13528.valid){
continue;
}
IkReal x13526=((1.0)*(x13528.value));
IkReal x13527=x13513;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x13526)));
IkReal gconst33=((3.14159265358979)+(((-1.0)*x13526)));
IkReal gconst34=(x13525*x13527);
IkReal gconst35=((1.0)*r20*x13527);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13529=((-1.0)*r21);
CheckValue<IkReal> x13532 = IKatan2WithCheck(IkReal(x13529),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x13532.valid){
continue;
}
IkReal x13530=((1.0)*(x13532.value));
IkReal x13531=x13513;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x13530)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x13530)));
IkReal gconst34=(x13529*x13531);
IkReal gconst35=((1.0)*r20*x13531);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x13533=((-1.0)*r21);
CheckValue<IkReal> x13536 = IKatan2WithCheck(IkReal(x13533),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x13536.valid){
continue;
}
IkReal x13534=((1.0)*(x13536.value));
IkReal x13535=x13513;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x13534)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x13534)));
IkReal gconst34=(x13533*x13535);
IkReal gconst35=((1.0)*r20*x13535);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x13537=((-1.0)*r21);
CheckValue<IkReal> x13540 = IKatan2WithCheck(IkReal(x13537),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x13540.valid){
continue;
}
IkReal x13538=((1.0)*(x13540.value));
IkReal x13539=x13513;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x13538)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x13538)));
IkReal gconst34=(x13537*x13539);
IkReal gconst35=((1.0)*r20*x13539);
IkReal x13541=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13545=IKPowWithIntegerCheck(x13541,-1);
if(!x13545.valid){
continue;
}
IkReal x13542=x13545.value;
IkReal x13543=((1.0)*x13542);
IkReal x13544=((((-2.0)*r00*r01*r20*r21*x13542))+(((-1.0)*(r02*r02)))+(((-1.0)*x13543*(r01*r01)*(r21*r21)))+(((-1.0)*x13543*(r00*r00)*(r20*r20))));
j4eval[0]=x13544;
j4eval[1]=r02;
j4eval[2]=x13541;
j4eval[3]=IKsign(x13544);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13546=(gconst35*r00);
IkReal x13547=(gconst34*r01);
CheckValue<IkReal> x13548 = IKatan2WithCheck(IkReal((x13547+(((-1.0)*x13546)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x13548.valid){
continue;
}
CheckValue<IkReal> x13549=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x13546*x13546)))+(((-1.0)*(r02*r02)))+(((2.0)*x13546*x13547))+(((-1.0)*(x13547*x13547))))),-1);
if(!x13549.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13548.value)+(((1.5707963267949)*(x13549.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13550=IKsin(j4);
IkReal x13551=IKcos(j4);
IkReal x13552=(gconst35*r10);
IkReal x13553=(gconst34*r01);
IkReal x13554=((1.0)*x13551);
IkReal x13555=(gconst35*x13550);
IkReal x13556=((1.0)*x13550);
IkReal x13557=(gconst34*x13551);
evalcond[0]=((((-1.0)*gconst34*r21*x13556))+((r20*x13555))+(((-1.0)*r22*x13554)));
evalcond[1]=(((x13550*x13552))+(((-1.0)*r12*x13554))+(((-1.0)*gconst34*r11*x13556)));
evalcond[2]=(((x13551*x13553))+(((-1.0)*r02*x13556))+(((-1.0)*gconst35*r00*x13554)));
evalcond[3]=((-1.0)+((r00*x13555))+(((-1.0)*x13553*x13556))+(((-1.0)*r02*x13554)));
evalcond[4]=(((cj2*sj1))+((r11*x13557))+((cj1*sj2))+(((-1.0)*x13552*x13554))+(((-1.0)*r12*x13556)));
evalcond[5]=(((r21*x13557))+(((-1.0)*sj1*sj2))+(((-1.0)*gconst35*r20*x13554))+((cj1*cj2))+(((-1.0)*r22*x13556)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13558=((1.0)*gconst34);
CheckValue<IkReal> x13559 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst35*r10))+(((-1.0)*r11*x13558)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13559.valid){
continue;
}
CheckValue<IkReal> x13560=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst35*r21))+(((-1.0)*r20*x13558)))),-1);
if(!x13560.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13559.value)+(((1.5707963267949)*(x13560.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13561=IKsin(j4);
IkReal x13562=IKcos(j4);
IkReal x13563=(gconst35*r10);
IkReal x13564=(gconst34*r01);
IkReal x13565=((1.0)*x13562);
IkReal x13566=(gconst35*x13561);
IkReal x13567=((1.0)*x13561);
IkReal x13568=(gconst34*x13562);
evalcond[0]=(((r20*x13566))+(((-1.0)*gconst34*r21*x13567))+(((-1.0)*r22*x13565)));
evalcond[1]=((((-1.0)*gconst34*r11*x13567))+((x13561*x13563))+(((-1.0)*r12*x13565)));
evalcond[2]=((((-1.0)*r02*x13567))+((x13562*x13564))+(((-1.0)*gconst35*r00*x13565)));
evalcond[3]=((-1.0)+((r00*x13566))+(((-1.0)*r02*x13565))+(((-1.0)*x13564*x13567)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x13563*x13565))+((cj1*sj2))+((r11*x13568))+(((-1.0)*r12*x13567)));
evalcond[5]=((((-1.0)*sj1*sj2))+((cj1*cj2))+((r21*x13568))+(((-1.0)*gconst35*r20*x13565))+(((-1.0)*r22*x13567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13569=IKPowWithIntegerCheck(IKsign((((gconst35*r11))+((gconst34*r10)))),-1);
if(!x13569.valid){
continue;
}
CheckValue<IkReal> x13570 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst34*r21))+((gconst35*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13570.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13569.value)))+(x13570.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13571=IKsin(j4);
IkReal x13572=IKcos(j4);
IkReal x13573=(gconst35*r10);
IkReal x13574=(gconst34*r01);
IkReal x13575=((1.0)*x13572);
IkReal x13576=(gconst35*x13571);
IkReal x13577=((1.0)*x13571);
IkReal x13578=(gconst34*x13572);
evalcond[0]=((((-1.0)*r22*x13575))+(((-1.0)*gconst34*r21*x13577))+((r20*x13576)));
evalcond[1]=((((-1.0)*gconst34*r11*x13577))+(((-1.0)*r12*x13575))+((x13571*x13573)));
evalcond[2]=((((-1.0)*gconst35*r00*x13575))+(((-1.0)*r02*x13577))+((x13572*x13574)));
evalcond[3]=((-1.0)+((r00*x13576))+(((-1.0)*r02*x13575))+(((-1.0)*x13574*x13577)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x13573*x13575))+((r11*x13578))+(((-1.0)*r12*x13577)));
evalcond[5]=((((-1.0)*r22*x13577))+(((-1.0)*sj1*sj2))+((r21*x13578))+(((-1.0)*gconst35*r20*x13575))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13579=((-1.0)*r21);
CheckValue<IkReal> x13582 = IKatan2WithCheck(IkReal(x13579),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x13582.valid){
continue;
}
IkReal x13580=((1.0)*(x13582.value));
IkReal x13581=x13513;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x13580)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x13580)));
IkReal gconst34=(x13579*x13581);
IkReal gconst35=((1.0)*r20*x13581);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x13583=((-1.0)*r21);
CheckValue<IkReal> x13586 = IKatan2WithCheck(IkReal(x13583),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x13586.valid){
continue;
}
IkReal x13584=((1.0)*(x13586.value));
IkReal x13585=x13513;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x13584)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x13584)));
IkReal gconst34=(x13583*x13585);
IkReal gconst35=((1.0)*r20*x13585);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13587=((-1.0)*r21);
CheckValue<IkReal> x13590 = IKatan2WithCheck(IkReal(x13587),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x13590.valid){
continue;
}
IkReal x13588=((1.0)*(x13590.value));
IkReal x13589=x13513;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x13588)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x13588)));
IkReal gconst34=(x13587*x13589);
IkReal gconst35=((1.0)*r20*x13589);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13591=(gconst34*r01);
IkReal x13592=(gconst35*r00);
CheckValue<IkReal> x13593 = IKatan2WithCheck(IkReal((x13592+(((-1.0)*x13591)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x13593.valid){
continue;
}
CheckValue<IkReal> x13594=IKPowWithIntegerCheck(IKsign(((x13592*x13592)+(((-2.0)*x13591*x13592))+(r02*r02)+(x13591*x13591))),-1);
if(!x13594.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13593.value)+(((1.5707963267949)*(x13594.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13595=IKcos(j4);
IkReal x13596=IKsin(j4);
IkReal x13597=(gconst34*r11);
IkReal x13598=(gconst34*r01);
IkReal x13599=(gconst34*r21);
IkReal x13600=((1.0)*x13595);
IkReal x13601=(gconst35*x13596);
IkReal x13602=((1.0)*x13596);
IkReal x13603=(gconst35*x13595);
evalcond[0]=((((-1.0)*x13598*x13600))+((r02*x13596))+((r00*x13603)));
evalcond[1]=((((-1.0)*x13599*x13602))+(((-1.0)*r22*x13600))+((r20*x13601)));
evalcond[2]=(((r10*x13601))+(((-1.0)*x13597*x13602))+(((-1.0)*r12*x13600)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x13600))+(((-1.0)*x13598*x13602))+((r00*x13601)));
evalcond[4]=(((cj2*sj1))+((r10*x13603))+(((-1.0)*x13597*x13600))+((cj1*sj2))+((r12*x13596)));
evalcond[5]=((((-1.0)*x13599*x13600))+((r22*x13596))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r20*x13603)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13604=((1.0)*gconst34);
CheckValue<IkReal> x13605=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst35*r21))+(((-1.0)*r20*x13604)))),-1);
if(!x13605.valid){
continue;
}
CheckValue<IkReal> x13606 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst35*r10))+(((-1.0)*r11*x13604)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13606.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13605.value)))+(x13606.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13607=IKcos(j4);
IkReal x13608=IKsin(j4);
IkReal x13609=(gconst34*r11);
IkReal x13610=(gconst34*r01);
IkReal x13611=(gconst34*r21);
IkReal x13612=((1.0)*x13607);
IkReal x13613=(gconst35*x13608);
IkReal x13614=((1.0)*x13608);
IkReal x13615=(gconst35*x13607);
evalcond[0]=(((r02*x13608))+((r00*x13615))+(((-1.0)*x13610*x13612)));
evalcond[1]=(((r20*x13613))+(((-1.0)*x13611*x13614))+(((-1.0)*r22*x13612)));
evalcond[2]=((((-1.0)*x13609*x13614))+((r10*x13613))+(((-1.0)*r12*x13612)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x13612))+((r00*x13613))+(((-1.0)*x13610*x13614)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x13609*x13612))+((r12*x13608))+((cj1*sj2))+((r10*x13615)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r20*x13615))+((r22*x13608))+((cj1*cj2))+(((-1.0)*x13611*x13612)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13616=IKPowWithIntegerCheck(IKsign((((gconst35*r11))+((gconst34*r10)))),-1);
if(!x13616.valid){
continue;
}
CheckValue<IkReal> x13617 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst34*r21))+((gconst35*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13617.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13616.value)))+(x13617.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13618=IKcos(j4);
IkReal x13619=IKsin(j4);
IkReal x13620=(gconst34*r11);
IkReal x13621=(gconst34*r01);
IkReal x13622=(gconst34*r21);
IkReal x13623=((1.0)*x13618);
IkReal x13624=(gconst35*x13619);
IkReal x13625=((1.0)*x13619);
IkReal x13626=(gconst35*x13618);
evalcond[0]=((((-1.0)*x13621*x13623))+((r00*x13626))+((r02*x13619)));
evalcond[1]=((((-1.0)*x13622*x13625))+(((-1.0)*r22*x13623))+((r20*x13624)));
evalcond[2]=(((r10*x13624))+(((-1.0)*x13620*x13625))+(((-1.0)*r12*x13623)));
evalcond[3]=((-1.0)+(((-1.0)*x13621*x13625))+((r00*x13624))+(((-1.0)*r02*x13623)));
evalcond[4]=(((r10*x13626))+((cj2*sj1))+(((-1.0)*x13620*x13623))+((cj1*sj2))+((r12*x13619)));
evalcond[5]=((((-1.0)*x13622*x13623))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r20*x13626))+((r22*x13619)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13627=((-1.0)*r21);
CheckValue<IkReal> x13630 = IKatan2WithCheck(IkReal(x13627),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x13630.valid){
continue;
}
IkReal x13628=((1.0)*(x13630.value));
IkReal x13629=x13513;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x13628)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x13628)));
IkReal gconst34=(x13627*x13629);
IkReal gconst35=((1.0)*r20*x13629);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x13631=((-1.0)*r21);
CheckValue<IkReal> x13634 = IKatan2WithCheck(IkReal(x13631),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x13634.valid){
continue;
}
IkReal x13632=((1.0)*(x13634.value));
IkReal x13633=x13513;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x13632)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x13632)));
IkReal gconst34=(x13631*x13633);
IkReal gconst35=((1.0)*r20*x13633);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x13635=((-1.0)*r21);
CheckValue<IkReal> x13638 = IKatan2WithCheck(IkReal(x13635),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x13638.valid){
continue;
}
IkReal x13636=((1.0)*(x13638.value));
IkReal x13637=x13513;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x13636)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x13636)));
IkReal gconst34=(x13635*x13637);
IkReal gconst35=((1.0)*r20*x13637);
IkReal x13639=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13643=IKPowWithIntegerCheck(x13639,-1);
if(!x13643.valid){
continue;
}
IkReal x13640=x13643.value;
IkReal x13641=((1.0)*x13640);
IkReal x13642=((((-1.0)*(r02*r02)))+(((-1.0)*x13641*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x13640))+(((-1.0)*x13641*(r00*r00)*(r20*r20))));
j4eval[0]=x13642;
j4eval[1]=r02;
j4eval[2]=x13639;
j4eval[3]=IKsign(x13642);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13644=(gconst35*r00);
IkReal x13645=(gconst34*r01);
CheckValue<IkReal> x13646=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x13645*x13645)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x13644*x13644)))+(((2.0)*x13644*x13645)))),-1);
if(!x13646.valid){
continue;
}
CheckValue<IkReal> x13647 = IKatan2WithCheck(IkReal((x13645+(((-1.0)*x13644)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x13647.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13646.value)))+(x13647.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13648=IKsin(j4);
IkReal x13649=IKcos(j4);
IkReal x13650=(gconst35*r10);
IkReal x13651=(gconst34*r01);
IkReal x13652=((1.0)*x13649);
IkReal x13653=(gconst35*x13648);
IkReal x13654=((1.0)*x13648);
IkReal x13655=(gconst34*x13649);
evalcond[0]=(((r20*x13653))+(((-1.0)*r22*x13652))+(((-1.0)*gconst34*r21*x13654)));
evalcond[1]=(((x13648*x13650))+(((-1.0)*gconst34*r11*x13654))+(((-1.0)*r12*x13652)));
evalcond[2]=((((-1.0)*r02*x13654))+((x13649*x13651))+(((-1.0)*gconst35*r00*x13652)));
evalcond[3]=((-1.0)+((r00*x13653))+(((-1.0)*r02*x13652))+(((-1.0)*x13651*x13654)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x13654))+((r21*x13655))+(((-1.0)*gconst35*r20*x13652)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x13654))+(((-1.0)*x13650*x13652))+((r11*x13655)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13656=((1.0)*gconst34);
CheckValue<IkReal> x13657=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x13656))+(((-1.0)*gconst35*r21)))),-1);
if(!x13657.valid){
continue;
}
CheckValue<IkReal> x13658 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst35*r10))+(((-1.0)*r11*x13656)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13658.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13657.value)))+(x13658.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13659=IKsin(j4);
IkReal x13660=IKcos(j4);
IkReal x13661=(gconst35*r10);
IkReal x13662=(gconst34*r01);
IkReal x13663=((1.0)*x13660);
IkReal x13664=(gconst35*x13659);
IkReal x13665=((1.0)*x13659);
IkReal x13666=(gconst34*x13660);
evalcond[0]=((((-1.0)*gconst34*r21*x13665))+(((-1.0)*r22*x13663))+((r20*x13664)));
evalcond[1]=(((x13659*x13661))+(((-1.0)*r12*x13663))+(((-1.0)*gconst34*r11*x13665)));
evalcond[2]=(((x13660*x13662))+(((-1.0)*gconst35*r00*x13663))+(((-1.0)*r02*x13665)));
evalcond[3]=((-1.0)+((r00*x13664))+(((-1.0)*x13662*x13665))+(((-1.0)*r02*x13663)));
evalcond[4]=((((-1.0)*r22*x13665))+((cj2*sj1))+(((-1.0)*gconst35*r20*x13663))+((cj1*sj2))+((r21*x13666)));
evalcond[5]=((((-1.0)*r12*x13665))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x13666))+(((-1.0)*x13661*x13663)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13667=IKPowWithIntegerCheck(IKsign((((gconst35*r11))+((gconst34*r10)))),-1);
if(!x13667.valid){
continue;
}
CheckValue<IkReal> x13668 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst34*r21))+((gconst35*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13668.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13667.value)))+(x13668.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13669=IKsin(j4);
IkReal x13670=IKcos(j4);
IkReal x13671=(gconst35*r10);
IkReal x13672=(gconst34*r01);
IkReal x13673=((1.0)*x13670);
IkReal x13674=(gconst35*x13669);
IkReal x13675=((1.0)*x13669);
IkReal x13676=(gconst34*x13670);
evalcond[0]=(((r20*x13674))+(((-1.0)*gconst34*r21*x13675))+(((-1.0)*r22*x13673)));
evalcond[1]=(((x13669*x13671))+(((-1.0)*r12*x13673))+(((-1.0)*gconst34*r11*x13675)));
evalcond[2]=((((-1.0)*gconst35*r00*x13673))+((x13670*x13672))+(((-1.0)*r02*x13675)));
evalcond[3]=((-1.0)+(((-1.0)*x13672*x13675))+((r00*x13674))+(((-1.0)*r02*x13673)));
evalcond[4]=((((-1.0)*gconst35*r20*x13673))+((cj2*sj1))+((cj1*sj2))+((r21*x13676))+(((-1.0)*r22*x13675)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x13675))+(((-1.0)*x13671*x13673))+((r11*x13676)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13677=((-1.0)*r21);
CheckValue<IkReal> x13680 = IKatan2WithCheck(IkReal(x13677),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x13680.valid){
continue;
}
IkReal x13678=((1.0)*(x13680.value));
IkReal x13679=x13513;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x13678)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x13678)));
IkReal gconst34=(x13677*x13679);
IkReal gconst35=((1.0)*r20*x13679);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x13681=((-1.0)*r21);
CheckValue<IkReal> x13684 = IKatan2WithCheck(IkReal(x13681),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x13684.valid){
continue;
}
IkReal x13682=((1.0)*(x13684.value));
IkReal x13683=x13513;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x13682)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x13682)));
IkReal gconst34=(x13681*x13683);
IkReal gconst35=((1.0)*r20*x13683);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13685=((-1.0)*r21);
CheckValue<IkReal> x13688 = IKatan2WithCheck(IkReal(x13685),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x13688.valid){
continue;
}
IkReal x13686=((1.0)*(x13688.value));
IkReal x13687=x13513;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x13686)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x13686)));
IkReal gconst34=(x13685*x13687);
IkReal gconst35=((1.0)*r20*x13687);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13689=(gconst34*r01);
IkReal x13690=(gconst35*r00);
CheckValue<IkReal> x13691=IKPowWithIntegerCheck(IKsign(((x13689*x13689)+(((-2.0)*x13689*x13690))+(x13690*x13690)+(r02*r02))),-1);
if(!x13691.valid){
continue;
}
CheckValue<IkReal> x13692 = IKatan2WithCheck(IkReal((x13690+(((-1.0)*x13689)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x13692.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13691.value)))+(x13692.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13693=IKcos(j4);
IkReal x13694=IKsin(j4);
IkReal x13695=(gconst34*r11);
IkReal x13696=(gconst34*r01);
IkReal x13697=(gconst34*r21);
IkReal x13698=((1.0)*x13693);
IkReal x13699=(gconst35*x13694);
IkReal x13700=((1.0)*x13694);
IkReal x13701=(gconst35*x13693);
evalcond[0]=(((r00*x13701))+((r02*x13694))+(((-1.0)*x13696*x13698)));
evalcond[1]=(((r20*x13699))+(((-1.0)*x13697*x13700))+(((-1.0)*r22*x13698)));
evalcond[2]=(((r10*x13699))+(((-1.0)*x13695*x13700))+(((-1.0)*r12*x13698)));
evalcond[3]=((-1.0)+((r00*x13699))+(((-1.0)*r02*x13698))+(((-1.0)*x13696*x13700)));
evalcond[4]=(((cj2*sj1))+((r20*x13701))+((cj1*sj2))+((r22*x13694))+(((-1.0)*x13697*x13698)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r10*x13701))+(((-1.0)*x13695*x13698))+((r12*x13694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13702=((1.0)*gconst34);
CheckValue<IkReal> x13703 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst35*r10))+(((-1.0)*r11*x13702)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13703.valid){
continue;
}
CheckValue<IkReal> x13704=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst35*r21))+(((-1.0)*r20*x13702)))),-1);
if(!x13704.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13703.value)+(((1.5707963267949)*(x13704.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13705=IKcos(j4);
IkReal x13706=IKsin(j4);
IkReal x13707=(gconst34*r11);
IkReal x13708=(gconst34*r01);
IkReal x13709=(gconst34*r21);
IkReal x13710=((1.0)*x13705);
IkReal x13711=(gconst35*x13706);
IkReal x13712=((1.0)*x13706);
IkReal x13713=(gconst35*x13705);
evalcond[0]=(((r00*x13713))+(((-1.0)*x13708*x13710))+((r02*x13706)));
evalcond[1]=((((-1.0)*x13709*x13712))+(((-1.0)*r22*x13710))+((r20*x13711)));
evalcond[2]=((((-1.0)*r12*x13710))+(((-1.0)*x13707*x13712))+((r10*x13711)));
evalcond[3]=((-1.0)+((r00*x13711))+(((-1.0)*r02*x13710))+(((-1.0)*x13708*x13712)));
evalcond[4]=((((-1.0)*x13709*x13710))+((cj2*sj1))+((r20*x13713))+((cj1*sj2))+((r22*x13706)));
evalcond[5]=(((r12*x13706))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x13707*x13710))+((r10*x13713)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13714=IKPowWithIntegerCheck(IKsign((((gconst35*r11))+((gconst34*r10)))),-1);
if(!x13714.valid){
continue;
}
CheckValue<IkReal> x13715 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst34*r21))+((gconst35*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13715.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13714.value)))+(x13715.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13716=IKcos(j4);
IkReal x13717=IKsin(j4);
IkReal x13718=(gconst34*r11);
IkReal x13719=(gconst34*r01);
IkReal x13720=(gconst34*r21);
IkReal x13721=((1.0)*x13716);
IkReal x13722=(gconst35*x13717);
IkReal x13723=((1.0)*x13717);
IkReal x13724=(gconst35*x13716);
evalcond[0]=(((r00*x13724))+(((-1.0)*x13719*x13721))+((r02*x13717)));
evalcond[1]=(((r20*x13722))+(((-1.0)*r22*x13721))+(((-1.0)*x13720*x13723)));
evalcond[2]=(((r10*x13722))+(((-1.0)*r12*x13721))+(((-1.0)*x13718*x13723)));
evalcond[3]=((-1.0)+((r00*x13722))+(((-1.0)*r02*x13721))+(((-1.0)*x13719*x13723)));
evalcond[4]=(((r20*x13724))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x13720*x13721))+((r22*x13717)));
evalcond[5]=(((r12*x13717))+((r10*x13724))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x13718*x13721)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13725=((-1.0)*r21);
IkReal x13726=((-1.0)*r20);
CheckValue<IkReal> x13728 = IKatan2WithCheck(IkReal(x13725),IkReal(x13726),IKFAST_ATAN2_MAGTHRESH);
if(!x13728.valid){
continue;
}
IkReal x13727=((1.0)*(x13728.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x13727)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x13726);
rxp0_2=(py*r00);
rxp1_0=(py*x13725);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst33=((3.14159265358979)+(((-1.0)*x13727)));
IkReal gconst34=x13725;
IkReal gconst35=((1.0)*r20);
IkReal x13729=((1.0)*r01*r21);
IkReal x13730=((1.0)*r00*r20);
j4eval[0]=(x13730+x13729);
j4eval[1]=((((-1.0)*sj3*x13730))+(((-1.0)*sj3*x13729)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13731=((-1.0)*r21);
IkReal x13732=((-1.0)*r20);
CheckValue<IkReal> x13734 = IKatan2WithCheck(IkReal(x13731),IkReal(x13732),IKFAST_ATAN2_MAGTHRESH);
if(!x13734.valid){
continue;
}
IkReal x13733=((1.0)*(x13734.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x13733)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x13732);
rxp0_2=(py*r00);
rxp1_0=(py*x13731);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst33=((3.14159265358979)+(((-1.0)*x13733)));
IkReal gconst34=x13731;
IkReal gconst35=((1.0)*r20);
IkReal x13735=((1.0)*r01*r21);
IkReal x13736=((1.0)*r00*r20);
j4eval[0]=(x13735+x13736);
j4eval[1]=((((-1.0)*cj3*x13735))+(((-1.0)*cj3*x13736)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13737=((-1.0)*r21);
IkReal x13738=((-1.0)*r20);
CheckValue<IkReal> x13740 = IKatan2WithCheck(IkReal(x13737),IkReal(x13738),IKFAST_ATAN2_MAGTHRESH);
if(!x13740.valid){
continue;
}
IkReal x13739=((1.0)*(x13740.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x13739)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x13738);
rxp0_2=(py*r00);
rxp1_0=(py*x13737);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst33=((3.14159265358979)+(((-1.0)*x13739)));
IkReal gconst34=x13737;
IkReal gconst35=((1.0)*r20);
IkReal x13741=((1.0)*cj3);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((((-1.0)*r01*r21*x13741))+(((-1.0)*r00*r20*x13741)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13742=((1.0)*gconst35);
CheckValue<IkReal> x13743=IKPowWithIntegerCheck(r12,-1);
if(!x13743.valid){
continue;
}
CheckValue<IkReal> x13744=IKPowWithIntegerCheck(sj3,-1);
if(!x13744.valid){
continue;
}
CheckValue<IkReal> x13745=IKPowWithIntegerCheck(((((-1.0)*cj3*r00*x13742))+((cj3*gconst34*r01))),-1);
if(!x13745.valid){
continue;
}
if( IKabs(((x13743.value)*(x13744.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13745.value)*(((((-1.0)*r01*sj3*x13742))+(((-1.0)*gconst34*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13743.value)*(x13744.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x13745.value)*(((((-1.0)*r01*sj3*x13742))+(((-1.0)*gconst34*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13743.value)*(x13744.value)*((((cj2*sj1))+((cj1*sj2))))), ((x13745.value)*(((((-1.0)*r01*sj3*x13742))+(((-1.0)*gconst34*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13746=IKsin(j4);
IkReal x13747=IKcos(j4);
IkReal x13748=(cj2*sj1);
IkReal x13749=(cj1*sj2);
IkReal x13750=((1.0)*sj3);
IkReal x13751=(gconst34*sj3);
IkReal x13752=((1.0)*cj3);
IkReal x13753=(gconst34*r01);
IkReal x13754=(sj1*sj2);
IkReal x13755=(gconst35*r21);
IkReal x13756=(cj1*cj2);
IkReal x13757=(gconst35*r01);
IkReal x13758=(r12*x13746);
IkReal x13759=(r21*x13747);
IkReal x13760=(gconst35*x13747);
IkReal x13761=(gconst35*x13746);
IkReal x13762=((1.0)*x13746);
IkReal x13763=(x13748+x13749);
evalcond[0]=((-1.0)*r12*x13747);
evalcond[1]=(((r20*x13761))+(((-1.0)*gconst34*r21*x13762)));
evalcond[2]=(x13763+(((-1.0)*x13750*x13758)));
evalcond[3]=((-1.0)+((r00*x13761))+(((-1.0)*x13753*x13762)));
evalcond[4]=(x13754+(((-1.0)*x13756))+(((-1.0)*x13752*x13758)));
evalcond[5]=(((cj3*x13747*x13753))+((sj3*x13757))+(((-1.0)*r00*x13752*x13760))+((r00*x13751)));
evalcond[6]=((((-1.0)*gconst34*r00*x13752))+(((-1.0)*x13752*x13757))+(((-1.0)*r00*x13750*x13760))+((r01*x13747*x13751)));
evalcond[7]=(x13763+(((-1.0)*r20*x13752*x13760))+((sj3*x13755))+((r20*x13751))+((cj3*gconst34*x13759)));
evalcond[8]=(x13756+(((-1.0)*x13754))+(((-1.0)*x13752*x13755))+(((-1.0)*gconst34*r20*x13752))+((x13751*x13759))+(((-1.0)*r20*x13750*x13760)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13764=(gconst35*r00);
IkReal x13765=((1.0)*r01);
CheckValue<IkReal> x13766=IKPowWithIntegerCheck((x13764+(((-1.0)*gconst34*x13765))),-1);
if(!x13766.valid){
continue;
}
CheckValue<IkReal> x13767=IKPowWithIntegerCheck(((((-1.0)*cj3*x13764))+((cj3*gconst34*r01))),-1);
if(!x13767.valid){
continue;
}
if( IKabs(x13766.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13767.value)*(((((-1.0)*gconst35*sj3*x13765))+(((-1.0)*gconst34*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13766.value)+IKsqr(((x13767.value)*(((((-1.0)*gconst35*sj3*x13765))+(((-1.0)*gconst34*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x13766.value, ((x13767.value)*(((((-1.0)*gconst35*sj3*x13765))+(((-1.0)*gconst34*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13768=IKsin(j4);
IkReal x13769=IKcos(j4);
IkReal x13770=(cj2*sj1);
IkReal x13771=(cj1*sj2);
IkReal x13772=((1.0)*sj3);
IkReal x13773=(gconst34*sj3);
IkReal x13774=((1.0)*cj3);
IkReal x13775=(gconst34*r01);
IkReal x13776=(sj1*sj2);
IkReal x13777=(gconst35*r21);
IkReal x13778=(cj1*cj2);
IkReal x13779=(gconst35*r01);
IkReal x13780=(r12*x13768);
IkReal x13781=(r21*x13769);
IkReal x13782=(gconst35*x13769);
IkReal x13783=(gconst35*x13768);
IkReal x13784=((1.0)*x13768);
IkReal x13785=(x13771+x13770);
evalcond[0]=((-1.0)*r12*x13769);
evalcond[1]=((((-1.0)*gconst34*r21*x13784))+((r20*x13783)));
evalcond[2]=(x13785+(((-1.0)*x13772*x13780)));
evalcond[3]=((-1.0)+((r00*x13783))+(((-1.0)*x13775*x13784)));
evalcond[4]=((((-1.0)*x13778))+x13776+(((-1.0)*x13774*x13780)));
evalcond[5]=(((r00*x13773))+((sj3*x13779))+((cj3*x13769*x13775))+(((-1.0)*r00*x13774*x13782)));
evalcond[6]=((((-1.0)*r00*x13772*x13782))+(((-1.0)*gconst34*r00*x13774))+(((-1.0)*x13774*x13779))+((r01*x13769*x13773)));
evalcond[7]=(((cj3*gconst34*x13781))+(((-1.0)*r20*x13774*x13782))+x13785+((sj3*x13777))+((r20*x13773)));
evalcond[8]=((((-1.0)*x13776))+x13778+(((-1.0)*r20*x13772*x13782))+(((-1.0)*x13774*x13777))+(((-1.0)*gconst34*r20*x13774))+((x13773*x13781)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13786=(gconst34*r01);
IkReal x13787=(gconst35*r00);
CheckValue<IkReal> x13788=IKPowWithIntegerCheck((x13787+(((-1.0)*x13786))),-1);
if(!x13788.valid){
continue;
}
CheckValue<IkReal> x13789=IKPowWithIntegerCheck(((((-1.0)*sj3*x13787))+((sj3*x13786))),-1);
if(!x13789.valid){
continue;
}
if( IKabs(x13788.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13789.value)*((((cj3*gconst34*r00))+((cj3*gconst35*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13788.value)+IKsqr(((x13789.value)*((((cj3*gconst34*r00))+((cj3*gconst35*r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x13788.value, ((x13789.value)*((((cj3*gconst34*r00))+((cj3*gconst35*r01))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13790=IKsin(j4);
IkReal x13791=IKcos(j4);
IkReal x13792=(cj2*sj1);
IkReal x13793=(cj1*sj2);
IkReal x13794=((1.0)*sj3);
IkReal x13795=(gconst34*sj3);
IkReal x13796=((1.0)*cj3);
IkReal x13797=(gconst34*r01);
IkReal x13798=(sj1*sj2);
IkReal x13799=(gconst35*r21);
IkReal x13800=(cj1*cj2);
IkReal x13801=(gconst35*r01);
IkReal x13802=(r12*x13790);
IkReal x13803=(r21*x13791);
IkReal x13804=(gconst35*x13791);
IkReal x13805=(gconst35*x13790);
IkReal x13806=((1.0)*x13790);
IkReal x13807=(x13793+x13792);
evalcond[0]=((-1.0)*r12*x13791);
evalcond[1]=((((-1.0)*gconst34*r21*x13806))+((r20*x13805)));
evalcond[2]=(x13807+(((-1.0)*x13794*x13802)));
evalcond[3]=((-1.0)+(((-1.0)*x13797*x13806))+((r00*x13805)));
evalcond[4]=(x13798+(((-1.0)*x13800))+(((-1.0)*x13796*x13802)));
evalcond[5]=(((r00*x13795))+(((-1.0)*r00*x13796*x13804))+((sj3*x13801))+((cj3*x13791*x13797)));
evalcond[6]=((((-1.0)*gconst34*r00*x13796))+((r01*x13791*x13795))+(((-1.0)*x13796*x13801))+(((-1.0)*r00*x13794*x13804)));
evalcond[7]=(((cj3*gconst34*x13803))+x13807+(((-1.0)*r20*x13796*x13804))+((sj3*x13799))+((r20*x13795)));
evalcond[8]=(x13800+(((-1.0)*gconst34*r20*x13796))+((x13795*x13803))+(((-1.0)*r20*x13794*x13804))+(((-1.0)*x13796*x13799))+(((-1.0)*x13798)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13808=gconst35*gconst35;
IkReal x13809=gconst34*gconst34;
IkReal x13810=(r20*sj3);
IkReal x13811=((1.0)*r21);
IkReal x13812=(gconst34*sj3);
IkReal x13813=(gconst35*r01);
IkReal x13814=(cj3*r20);
IkReal x13815=(gconst34*gconst35*r00);
CheckValue<IkReal> x13816 = IKatan2WithCheck(IkReal((((r22*sj3*x13813))+((r00*r22*x13812)))),IkReal(((((-1.0)*r00*sj3*x13809*x13811))+((x13810*x13815))+((r01*x13808*x13810))+(((-1.0)*x13811*x13812*x13813)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13816.valid){
continue;
}
CheckValue<IkReal> x13817=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj3*x13811*x13815))+((r00*x13808*x13814))+((cj3*r01*r21*x13809))+((cj3*r02*r22))+(((-1.0)*gconst34*x13813*x13814)))),-1);
if(!x13817.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13816.value)+(((1.5707963267949)*(x13817.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13818=IKsin(j4);
IkReal x13819=IKcos(j4);
IkReal x13820=(cj2*sj1);
IkReal x13821=(cj1*sj2);
IkReal x13822=(r21*sj3);
IkReal x13823=(gconst35*r20);
IkReal x13824=(gconst35*r00);
IkReal x13825=(cj3*r01);
IkReal x13826=(sj1*sj2);
IkReal x13827=(cj3*r11);
IkReal x13828=(cj1*cj2);
IkReal x13829=(cj3*r21);
IkReal x13830=((1.0)*gconst35);
IkReal x13831=(gconst35*r10);
IkReal x13832=(r01*sj3);
IkReal x13833=(gconst34*r00);
IkReal x13834=((1.0)*cj3);
IkReal x13835=(r11*sj3);
IkReal x13836=(gconst34*r20);
IkReal x13837=(gconst34*r10);
IkReal x13838=((1.0)*x13819);
IkReal x13839=((1.0)*x13818);
IkReal x13840=(gconst34*x13819);
IkReal x13841=(x13821+x13820);
evalcond[0]=((((-1.0)*r22*x13838))+((x13818*x13823))+(((-1.0)*gconst34*r21*x13839)));
evalcond[1]=(((x13818*x13831))+(((-1.0)*r12*x13838))+(((-1.0)*gconst34*r11*x13839)));
evalcond[2]=((-1.0)+(((-1.0)*gconst34*r01*x13839))+(((-1.0)*r02*x13838))+((x13818*x13824)));
evalcond[3]=(((x13825*x13840))+(((-1.0)*x13819*x13824*x13834))+((gconst35*x13832))+((sj3*x13833))+(((-1.0)*r02*x13818*x13834)));
evalcond[4]=((((-1.0)*sj3*x13824*x13838))+(((-1.0)*x13825*x13830))+(((-1.0)*x13833*x13834))+(((-1.0)*r02*sj3*x13839))+((x13832*x13840)));
evalcond[5]=(x13841+((gconst35*x13822))+((sj3*x13836))+((x13829*x13840))+(((-1.0)*x13819*x13823*x13834))+(((-1.0)*r22*x13818*x13834)));
evalcond[6]=(((gconst35*x13835))+x13826+(((-1.0)*r12*x13818*x13834))+(((-1.0)*x13828))+((sj3*x13837))+(((-1.0)*cj3*r10*x13819*x13830))+((x13827*x13840)));
evalcond[7]=((((-1.0)*x13834*x13837))+(((-1.0)*r12*sj3*x13839))+x13841+(((-1.0)*x13827*x13830))+(((-1.0)*r10*sj3*x13819*x13830))+((x13835*x13840)));
evalcond[8]=((((-1.0)*sj3*x13823*x13838))+(((-1.0)*x13834*x13836))+x13828+((x13822*x13840))+(((-1.0)*x13829*x13830))+(((-1.0)*x13826))+(((-1.0)*r22*sj3*x13839)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13842=((1.0)*gconst34);
CheckValue<IkReal> x13843 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r11*x13842))+((gconst35*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13843.valid){
continue;
}
CheckValue<IkReal> x13844=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst35*r21))+(((-1.0)*r20*x13842)))),-1);
if(!x13844.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13843.value)+(((1.5707963267949)*(x13844.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13845=IKsin(j4);
IkReal x13846=IKcos(j4);
IkReal x13847=(cj2*sj1);
IkReal x13848=(cj1*sj2);
IkReal x13849=(r21*sj3);
IkReal x13850=(gconst35*r20);
IkReal x13851=(gconst35*r00);
IkReal x13852=(cj3*r01);
IkReal x13853=(sj1*sj2);
IkReal x13854=(cj3*r11);
IkReal x13855=(cj1*cj2);
IkReal x13856=(cj3*r21);
IkReal x13857=((1.0)*gconst35);
IkReal x13858=(gconst35*r10);
IkReal x13859=(r01*sj3);
IkReal x13860=(gconst34*r00);
IkReal x13861=((1.0)*cj3);
IkReal x13862=(r11*sj3);
IkReal x13863=(gconst34*r20);
IkReal x13864=(gconst34*r10);
IkReal x13865=((1.0)*x13846);
IkReal x13866=((1.0)*x13845);
IkReal x13867=(gconst34*x13846);
IkReal x13868=(x13847+x13848);
evalcond[0]=((((-1.0)*r22*x13865))+((x13845*x13850))+(((-1.0)*gconst34*r21*x13866)));
evalcond[1]=((((-1.0)*gconst34*r11*x13866))+(((-1.0)*r12*x13865))+((x13845*x13858)));
evalcond[2]=((-1.0)+(((-1.0)*gconst34*r01*x13866))+(((-1.0)*r02*x13865))+((x13845*x13851)));
evalcond[3]=((((-1.0)*x13846*x13851*x13861))+((gconst35*x13859))+((sj3*x13860))+((x13852*x13867))+(((-1.0)*r02*x13845*x13861)));
evalcond[4]=((((-1.0)*sj3*x13851*x13865))+(((-1.0)*x13852*x13857))+(((-1.0)*x13860*x13861))+(((-1.0)*r02*sj3*x13866))+((x13859*x13867)));
evalcond[5]=(x13868+((gconst35*x13849))+((sj3*x13863))+(((-1.0)*r22*x13845*x13861))+((x13856*x13867))+(((-1.0)*x13846*x13850*x13861)));
evalcond[6]=((((-1.0)*cj3*r10*x13846*x13857))+(((-1.0)*x13855))+((gconst35*x13862))+x13853+((x13854*x13867))+((sj3*x13864))+(((-1.0)*r12*x13845*x13861)));
evalcond[7]=((((-1.0)*r10*sj3*x13846*x13857))+x13868+((x13862*x13867))+(((-1.0)*r12*sj3*x13866))+(((-1.0)*x13861*x13864))+(((-1.0)*x13854*x13857)));
evalcond[8]=((((-1.0)*x13853))+(((-1.0)*sj3*x13850*x13865))+x13855+(((-1.0)*x13856*x13857))+(((-1.0)*x13861*x13863))+(((-1.0)*r22*sj3*x13866))+((x13849*x13867)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13869=IKPowWithIntegerCheck(IKsign((((gconst35*r11))+((gconst34*r10)))),-1);
if(!x13869.valid){
continue;
}
CheckValue<IkReal> x13870 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst34*r21))+((gconst35*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13870.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13869.value)))+(x13870.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13871=IKsin(j4);
IkReal x13872=IKcos(j4);
IkReal x13873=(cj2*sj1);
IkReal x13874=(cj1*sj2);
IkReal x13875=(r21*sj3);
IkReal x13876=(gconst35*r20);
IkReal x13877=(gconst35*r00);
IkReal x13878=(cj3*r01);
IkReal x13879=(sj1*sj2);
IkReal x13880=(cj3*r11);
IkReal x13881=(cj1*cj2);
IkReal x13882=(cj3*r21);
IkReal x13883=((1.0)*gconst35);
IkReal x13884=(gconst35*r10);
IkReal x13885=(r01*sj3);
IkReal x13886=(gconst34*r00);
IkReal x13887=((1.0)*cj3);
IkReal x13888=(r11*sj3);
IkReal x13889=(gconst34*r20);
IkReal x13890=(gconst34*r10);
IkReal x13891=((1.0)*x13872);
IkReal x13892=((1.0)*x13871);
IkReal x13893=(gconst34*x13872);
IkReal x13894=(x13873+x13874);
evalcond[0]=((((-1.0)*gconst34*r21*x13892))+((x13871*x13876))+(((-1.0)*r22*x13891)));
evalcond[1]=((((-1.0)*r12*x13891))+((x13871*x13884))+(((-1.0)*gconst34*r11*x13892)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x13891))+(((-1.0)*gconst34*r01*x13892))+((x13871*x13877)));
evalcond[3]=(((sj3*x13886))+((x13878*x13893))+(((-1.0)*r02*x13871*x13887))+((gconst35*x13885))+(((-1.0)*x13872*x13877*x13887)));
evalcond[4]=((((-1.0)*r02*sj3*x13892))+(((-1.0)*x13878*x13883))+((x13885*x13893))+(((-1.0)*sj3*x13877*x13891))+(((-1.0)*x13886*x13887)));
evalcond[5]=(((x13882*x13893))+((sj3*x13889))+x13894+((gconst35*x13875))+(((-1.0)*r22*x13871*x13887))+(((-1.0)*x13872*x13876*x13887)));
evalcond[6]=((((-1.0)*cj3*r10*x13872*x13883))+x13879+((sj3*x13890))+((x13880*x13893))+(((-1.0)*x13881))+(((-1.0)*r12*x13871*x13887))+((gconst35*x13888)));
evalcond[7]=((((-1.0)*r12*sj3*x13892))+x13894+(((-1.0)*x13880*x13883))+(((-1.0)*x13887*x13890))+(((-1.0)*r10*sj3*x13872*x13883))+((x13888*x13893)));
evalcond[8]=((((-1.0)*r22*sj3*x13892))+x13881+(((-1.0)*x13879))+(((-1.0)*x13882*x13883))+(((-1.0)*sj3*x13876*x13891))+(((-1.0)*x13887*x13889))+((x13875*x13893)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13896 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x13896)==0){
continue;
}
IkReal x13895=pow(x13896,-0.5);
CheckValue<IkReal> x13897 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13897.valid){
continue;
}
IkReal gconst36=((-1.0)*(x13897.value));
IkReal gconst37=((-1.0)*r11*x13895);
IkReal gconst38=(r10*x13895);
CheckValue<IkReal> x13898 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13898.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13898.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13901 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13901.valid){
continue;
}
IkReal x13899=((-1.0)*(x13901.value));
IkReal x13900=x13895;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst37;
cj5=gconst38;
j5=x13899;
IkReal gconst36=x13899;
IkReal gconst37=((-1.0)*r11*x13900);
IkReal gconst38=(r10*x13900);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13904 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13904.valid){
continue;
}
IkReal x13902=((-1.0)*(x13904.value));
IkReal x13903=x13895;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst37;
cj5=gconst38;
j5=x13902;
IkReal gconst36=x13902;
IkReal gconst37=((-1.0)*r11*x13903);
IkReal gconst38=(r10*x13903);
CheckValue<IkReal> x13912=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x13912.valid){
continue;
}
IkReal x13905=x13912.value;
IkReal x13906=(cj3*x13905);
IkReal x13907=(r00*x13906);
IkReal x13908=(r21*x13906);
IkReal x13909=(r20*x13906);
IkReal x13910=(r01*x13906);
IkReal x13911=(r10*r11*x13906);
j4eval[0]=IKsign((((r01*x13908*(r11*r11)))+((r10*r11*r21*x13907))+((r20*x13907*(r10*r10)))+((cj3*r02*r22))+((r01*r10*r11*x13909))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13915 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13915.valid){
continue;
}
IkReal x13913=((-1.0)*(x13915.value));
IkReal x13914=x13895;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst37;
cj5=gconst38;
j5=x13913;
IkReal gconst36=x13913;
IkReal gconst37=((-1.0)*r11*x13914);
IkReal gconst38=(r10*x13914);
CheckValue<IkReal> x13923=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x13923.valid){
continue;
}
IkReal x13916=x13923.value;
IkReal x13917=(sj3*x13916);
IkReal x13918=(r20*x13917);
IkReal x13919=(r00*x13917);
IkReal x13920=(r01*x13917);
IkReal x13921=(r21*x13917);
IkReal x13922=(r10*r11*x13917);
j4eval[0]=IKsign((((r00*x13918*(r10*r10)))+((r10*r11*r21*x13919))+((r01*r10*r11*x13918))+((r21*x13920*(r11*r11)))+((r02*r22*sj3))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13924=gconst37*gconst37;
IkReal x13925=gconst38*gconst38;
IkReal x13926=(cj3*r00);
IkReal x13927=(r01*sj3);
IkReal x13928=((1.0)*gconst37);
IkReal x13929=(gconst38*r20);
IkReal x13930=(r00*sj3);
IkReal x13931=(gconst38*r21);
IkReal x13932=((1.0)*cj3*r01);
IkReal x13933=(r21*x13924);
IkReal x13934=(r20*x13925);
CheckValue<IkReal> x13935 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x13926*x13928))+(((-1.0)*gconst38*r22*x13932)))),IkReal((((x13926*x13933))+((cj3*gconst37*r01*x13931))+(((-1.0)*x13932*x13934))+(((-1.0)*x13926*x13928*x13929)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13935.valid){
continue;
}
CheckValue<IkReal> x13936=IKPowWithIntegerCheck(IKsign((((x13927*x13933))+(((-1.0)*x13928*x13930*x13931))+((x13930*x13934))+((r02*r22*sj3))+(((-1.0)*x13927*x13928*x13929)))),-1);
if(!x13936.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13935.value)+(((1.5707963267949)*(x13936.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13937=IKsin(j4);
IkReal x13938=IKcos(j4);
IkReal x13939=(cj2*sj1);
IkReal x13940=(cj1*sj2);
IkReal x13941=(gconst37*r21);
IkReal x13942=(gconst38*sj3);
IkReal x13943=(gconst38*r20);
IkReal x13944=(cj1*cj2);
IkReal x13945=(gconst37*r01);
IkReal x13946=(sj1*sj2);
IkReal x13947=(cj3*gconst38);
IkReal x13948=(gconst37*r00);
IkReal x13949=((1.0)*cj3);
IkReal x13950=(gconst37*sj3);
IkReal x13951=(gconst37*r11);
IkReal x13952=((1.0)*x13938);
IkReal x13953=((1.0)*x13937);
IkReal x13954=(gconst38*x13937);
IkReal x13955=(sj3*x13938);
IkReal x13956=(x13939+x13940);
IkReal x13957=(cj3*gconst37*x13938);
evalcond[0]=((((-1.0)*x13941*x13953))+((x13937*x13943))+(((-1.0)*r22*x13952)));
evalcond[1]=((((-1.0)*r12*x13952))+((r10*x13954))+(((-1.0)*x13951*x13953)));
evalcond[2]=((-1.0)+(((-1.0)*x13945*x13953))+((r00*x13954))+(((-1.0)*r02*x13952)));
evalcond[3]=((((-1.0)*r02*x13937*x13949))+((sj3*x13948))+((r01*x13942))+((cj3*x13938*x13945))+(((-1.0)*r00*x13947*x13952)));
evalcond[4]=((((-1.0)*r02*sj3*x13953))+(((-1.0)*x13948*x13949))+(((-1.0)*r00*x13942*x13952))+((x13945*x13955))+(((-1.0)*r01*x13947)));
evalcond[5]=((((-1.0)*r22*x13937*x13949))+x13956+(((-1.0)*x13938*x13943*x13949))+((cj3*x13938*x13941))+((r20*x13950))+((r21*x13942)));
evalcond[6]=((((-1.0)*x13944))+((cj3*x13938*x13951))+x13946+(((-1.0)*r12*x13937*x13949))+(((-1.0)*r10*x13947*x13952))+((r10*x13950))+((r11*x13942)));
evalcond[7]=((((-1.0)*r12*sj3*x13953))+(((-1.0)*r11*x13947))+(((-1.0)*gconst37*r10*x13949))+x13956+(((-1.0)*r10*x13942*x13952))+((r11*x13938*x13950)));
evalcond[8]=((((-1.0)*x13946))+(((-1.0)*gconst37*r20*x13949))+x13944+(((-1.0)*r20*x13942*x13952))+(((-1.0)*r21*x13947))+(((-1.0)*r22*sj3*x13953))+((x13941*x13955)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13958=gconst38*gconst38;
IkReal x13959=gconst37*gconst37;
IkReal x13960=(r01*r20);
IkReal x13961=(gconst37*gconst38);
IkReal x13962=((1.0)*cj3);
IkReal x13963=(r00*sj3);
IkReal x13964=(r01*sj3);
IkReal x13965=(r21*x13959);
CheckValue<IkReal> x13966=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13960*x13961*x13962))+(((-1.0)*r00*r21*x13961*x13962))+((cj3*r02*r22))+((cj3*r01*x13965))+((cj3*r00*r20*x13958)))),-1);
if(!x13966.valid){
continue;
}
CheckValue<IkReal> x13967 = IKatan2WithCheck(IkReal((((gconst38*r22*x13964))+((gconst37*r22*x13963)))),IkReal(((((-1.0)*r21*x13961*x13964))+(((-1.0)*x13963*x13965))+((sj3*x13958*x13960))+((r20*x13961*x13963)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13967.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13966.value)))+(x13967.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13968=IKsin(j4);
IkReal x13969=IKcos(j4);
IkReal x13970=(cj2*sj1);
IkReal x13971=(cj1*sj2);
IkReal x13972=(gconst37*r21);
IkReal x13973=(gconst38*sj3);
IkReal x13974=(gconst38*r20);
IkReal x13975=(cj1*cj2);
IkReal x13976=(gconst37*r01);
IkReal x13977=(sj1*sj2);
IkReal x13978=(cj3*gconst38);
IkReal x13979=(gconst37*r00);
IkReal x13980=((1.0)*cj3);
IkReal x13981=(gconst37*sj3);
IkReal x13982=(gconst37*r11);
IkReal x13983=((1.0)*x13969);
IkReal x13984=((1.0)*x13968);
IkReal x13985=(gconst38*x13968);
IkReal x13986=(sj3*x13969);
IkReal x13987=(x13971+x13970);
IkReal x13988=(cj3*gconst37*x13969);
evalcond[0]=((((-1.0)*x13972*x13984))+((x13968*x13974))+(((-1.0)*r22*x13983)));
evalcond[1]=((((-1.0)*x13982*x13984))+((r10*x13985))+(((-1.0)*r12*x13983)));
evalcond[2]=((-1.0)+((r00*x13985))+(((-1.0)*x13976*x13984))+(((-1.0)*r02*x13983)));
evalcond[3]=(((sj3*x13979))+((cj3*x13969*x13976))+(((-1.0)*r02*x13968*x13980))+(((-1.0)*r00*x13978*x13983))+((r01*x13973)));
evalcond[4]=(((x13976*x13986))+(((-1.0)*x13979*x13980))+(((-1.0)*r00*x13973*x13983))+(((-1.0)*r01*x13978))+(((-1.0)*r02*sj3*x13984)));
evalcond[5]=(((r20*x13981))+x13987+(((-1.0)*r22*x13968*x13980))+((cj3*x13969*x13972))+(((-1.0)*x13969*x13974*x13980))+((r21*x13973)));
evalcond[6]=(((cj3*x13969*x13982))+(((-1.0)*r12*x13968*x13980))+x13977+((r11*x13973))+(((-1.0)*x13975))+((r10*x13981))+(((-1.0)*r10*x13978*x13983)));
evalcond[7]=(x13987+(((-1.0)*r10*x13973*x13983))+(((-1.0)*r11*x13978))+((r11*x13969*x13981))+(((-1.0)*r12*sj3*x13984))+(((-1.0)*gconst37*r10*x13980)));
evalcond[8]=(((x13972*x13986))+(((-1.0)*r20*x13973*x13983))+x13975+(((-1.0)*x13977))+(((-1.0)*r21*x13978))+(((-1.0)*r22*sj3*x13984))+(((-1.0)*gconst37*r20*x13980)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13989=((1.0)*gconst37);
CheckValue<IkReal> x13990 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r11*x13989))+((gconst38*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13990.valid){
continue;
}
CheckValue<IkReal> x13991=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x13989))+(((-1.0)*gconst38*r21)))),-1);
if(!x13991.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13990.value)+(((1.5707963267949)*(x13991.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13992=IKsin(j4);
IkReal x13993=IKcos(j4);
IkReal x13994=(cj2*sj1);
IkReal x13995=(cj1*sj2);
IkReal x13996=(gconst37*r21);
IkReal x13997=(gconst38*sj3);
IkReal x13998=(gconst38*r20);
IkReal x13999=(cj1*cj2);
IkReal x14000=(gconst37*r01);
IkReal x14001=(sj1*sj2);
IkReal x14002=(cj3*gconst38);
IkReal x14003=(gconst37*r00);
IkReal x14004=((1.0)*cj3);
IkReal x14005=(gconst37*sj3);
IkReal x14006=(gconst37*r11);
IkReal x14007=((1.0)*x13993);
IkReal x14008=((1.0)*x13992);
IkReal x14009=(gconst38*x13992);
IkReal x14010=(sj3*x13993);
IkReal x14011=(x13995+x13994);
IkReal x14012=(cj3*gconst37*x13993);
evalcond[0]=(((x13992*x13998))+(((-1.0)*x13996*x14008))+(((-1.0)*r22*x14007)));
evalcond[1]=(((r10*x14009))+(((-1.0)*x14006*x14008))+(((-1.0)*r12*x14007)));
evalcond[2]=((-1.0)+(((-1.0)*x14000*x14008))+(((-1.0)*r02*x14007))+((r00*x14009)));
evalcond[3]=((((-1.0)*r02*x13992*x14004))+((sj3*x14003))+(((-1.0)*r00*x14002*x14007))+((cj3*x13993*x14000))+((r01*x13997)));
evalcond[4]=((((-1.0)*r02*sj3*x14008))+((x14000*x14010))+(((-1.0)*x14003*x14004))+(((-1.0)*r00*x13997*x14007))+(((-1.0)*r01*x14002)));
evalcond[5]=(((cj3*x13993*x13996))+((r21*x13997))+(((-1.0)*r22*x13992*x14004))+(((-1.0)*x13993*x13998*x14004))+x14011+((r20*x14005)));
evalcond[6]=(((r10*x14005))+(((-1.0)*r12*x13992*x14004))+(((-1.0)*r10*x14002*x14007))+((r11*x13997))+((cj3*x13993*x14006))+x14001+(((-1.0)*x13999)));
evalcond[7]=((((-1.0)*r12*sj3*x14008))+(((-1.0)*gconst37*r10*x14004))+((r11*x13993*x14005))+(((-1.0)*r11*x14002))+x14011+(((-1.0)*r10*x13997*x14007)));
evalcond[8]=((((-1.0)*gconst37*r20*x14004))+(((-1.0)*r22*sj3*x14008))+x13999+((x13996*x14010))+(((-1.0)*r21*x14002))+(((-1.0)*x14001))+(((-1.0)*r20*x13997*x14007)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14014 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x14014)==0){
continue;
}
IkReal x14013=pow(x14014,-0.5);
CheckValue<IkReal> x14015 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14015.valid){
continue;
}
IkReal gconst39=((3.14159265358979)+(((-1.0)*(x14015.value))));
IkReal gconst40=((1.0)*r11*x14013);
IkReal gconst41=((-1.0)*r10*x14013);
CheckValue<IkReal> x14016 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14016.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14016.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14019 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14019.valid){
continue;
}
IkReal x14017=((1.0)*(x14019.value));
IkReal x14018=x14013;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x14017)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x14017)));
IkReal gconst40=((1.0)*r11*x14018);
IkReal gconst41=((-1.0)*r10*x14018);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14020=gconst41*gconst41;
IkReal x14021=gconst40*gconst40;
IkReal x14022=(r01*r21);
IkReal x14023=(gconst41*sj3);
IkReal x14024=((1.0)*gconst40);
IkReal x14025=(gconst40*r00);
IkReal x14026=(r00*r21);
IkReal x14027=(cj3*gconst41);
IkReal x14028=(r20*x14020);
CheckValue<IkReal> x14029 = IKatan2WithCheck(IkReal((((r01*r22*x14023))+((r22*sj3*x14025)))),IkReal((((r01*sj3*x14028))+(((-1.0)*x14022*x14023*x14024))+((r20*x14023*x14025))+(((-1.0)*sj3*x14021*x14026)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14029.valid){
continue;
}
CheckValue<IkReal> x14030=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*r20*x14024*x14027))+((cj3*x14021*x14022))+((cj3*r00*x14028))+(((-1.0)*x14024*x14026*x14027))+((cj3*r02*r22)))),-1);
if(!x14030.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14029.value)+(((1.5707963267949)*(x14030.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14031=IKsin(j4);
IkReal x14032=IKcos(j4);
IkReal x14033=(cj2*sj1);
IkReal x14034=(cj1*sj2);
IkReal x14035=(gconst40*r01);
IkReal x14036=(cj3*gconst41);
IkReal x14037=(gconst40*sj3);
IkReal x14038=(sj1*sj2);
IkReal x14039=(gconst41*sj3);
IkReal x14040=(cj1*cj2);
IkReal x14041=(gconst40*r11);
IkReal x14042=(gconst40*r21);
IkReal x14043=((1.0)*x14032);
IkReal x14044=((1.0)*x14031);
IkReal x14045=(cj3*x14032);
IkReal x14046=((1.0)*cj3*gconst40);
IkReal x14047=(gconst41*x14031);
IkReal x14048=(x14033+x14034);
evalcond[0]=((((-1.0)*x14042*x14044))+((r20*x14047))+(((-1.0)*r22*x14043)));
evalcond[1]=(((r10*x14047))+(((-1.0)*r12*x14043))+(((-1.0)*x14041*x14044)));
evalcond[2]=((-1.0)+((r00*x14047))+(((-1.0)*x14035*x14044))+(((-1.0)*r02*x14043)));
evalcond[3]=(((r01*x14039))+((r00*x14037))+(((-1.0)*r00*x14036*x14043))+(((-1.0)*cj3*r02*x14044))+((x14035*x14045)));
evalcond[4]=(((sj3*x14032*x14035))+(((-1.0)*r02*sj3*x14044))+(((-1.0)*r00*x14046))+(((-1.0)*r00*x14039*x14043))+(((-1.0)*r01*x14036)));
evalcond[5]=((((-1.0)*r20*x14036*x14043))+((r20*x14037))+((r21*x14039))+((x14042*x14045))+x14048+(((-1.0)*cj3*r22*x14044)));
evalcond[6]=(((r11*x14039))+(((-1.0)*x14040))+(((-1.0)*r10*x14036*x14043))+((r10*x14037))+(((-1.0)*cj3*r12*x14044))+x14038+((x14041*x14045)));
evalcond[7]=((((-1.0)*r10*x14046))+((r11*x14032*x14037))+(((-1.0)*r11*x14036))+(((-1.0)*r12*sj3*x14044))+(((-1.0)*r10*x14039*x14043))+x14048);
evalcond[8]=(((r21*x14032*x14037))+(((-1.0)*r20*x14046))+(((-1.0)*x14038))+(((-1.0)*r21*x14036))+(((-1.0)*r22*sj3*x14044))+x14040+(((-1.0)*r20*x14039*x14043)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14049=((1.0)*gconst40);
CheckValue<IkReal> x14050=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x14049))+(((-1.0)*gconst41*r21)))),-1);
if(!x14050.valid){
continue;
}
CheckValue<IkReal> x14051 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r11*x14049))+((gconst41*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14051.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14050.value)))+(x14051.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14052=IKsin(j4);
IkReal x14053=IKcos(j4);
IkReal x14054=(cj2*sj1);
IkReal x14055=(cj1*sj2);
IkReal x14056=(gconst40*r01);
IkReal x14057=(cj3*gconst41);
IkReal x14058=(gconst40*sj3);
IkReal x14059=(sj1*sj2);
IkReal x14060=(gconst41*sj3);
IkReal x14061=(cj1*cj2);
IkReal x14062=(gconst40*r11);
IkReal x14063=(gconst40*r21);
IkReal x14064=((1.0)*x14053);
IkReal x14065=((1.0)*x14052);
IkReal x14066=(cj3*x14053);
IkReal x14067=((1.0)*cj3*gconst40);
IkReal x14068=(gconst41*x14052);
IkReal x14069=(x14055+x14054);
evalcond[0]=((((-1.0)*r22*x14064))+((r20*x14068))+(((-1.0)*x14063*x14065)));
evalcond[1]=((((-1.0)*r12*x14064))+((r10*x14068))+(((-1.0)*x14062*x14065)));
evalcond[2]=((-1.0)+(((-1.0)*x14056*x14065))+((r00*x14068))+(((-1.0)*r02*x14064)));
evalcond[3]=(((r00*x14058))+((x14056*x14066))+((r01*x14060))+(((-1.0)*r00*x14057*x14064))+(((-1.0)*cj3*r02*x14065)));
evalcond[4]=(((sj3*x14053*x14056))+(((-1.0)*r02*sj3*x14065))+(((-1.0)*r01*x14057))+(((-1.0)*r00*x14067))+(((-1.0)*r00*x14060*x14064)));
evalcond[5]=(((r20*x14058))+((x14063*x14066))+((r21*x14060))+(((-1.0)*r20*x14057*x14064))+(((-1.0)*cj3*r22*x14065))+x14069);
evalcond[6]=(((r10*x14058))+((x14062*x14066))+(((-1.0)*cj3*r12*x14065))+(((-1.0)*x14061))+(((-1.0)*r10*x14057*x14064))+((r11*x14060))+x14059);
evalcond[7]=((((-1.0)*r10*x14060*x14064))+(((-1.0)*r11*x14057))+x14069+(((-1.0)*r10*x14067))+((r11*x14053*x14058))+(((-1.0)*r12*sj3*x14065)));
evalcond[8]=((((-1.0)*x14059))+(((-1.0)*r22*sj3*x14065))+(((-1.0)*r20*x14060*x14064))+((r21*x14053*x14058))+(((-1.0)*r20*x14067))+x14061+(((-1.0)*r21*x14057)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14070=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14070);
rxp0_2=(py*r00);
rxp1_0=(r21*x14070);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x14071=(cj5*r00);
IkReal x14072=(r01*sj5);
j4eval[0]=((((-1.0)*x14072))+x14071);
j4eval[1]=(((sj3*x14072))+(((-1.0)*sj3*x14071)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14073=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14073);
rxp0_2=(py*r00);
rxp1_0=(r21*x14073);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x14074=(cj5*r00);
IkReal x14075=(r01*sj5);
j4eval[0]=((((-1.0)*x14075))+x14074);
j4eval[1]=((((-1.0)*cj3*x14074))+((cj3*x14075)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14076=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14076);
rxp0_2=(py*r00);
rxp1_0=(r21*x14076);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=(((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14077=((1.0)*r00);
CheckValue<IkReal> x14078=IKPowWithIntegerCheck(r12,-1);
if(!x14078.valid){
continue;
}
CheckValue<IkReal> x14079=IKPowWithIntegerCheck(sj3,-1);
if(!x14079.valid){
continue;
}
CheckValue<IkReal> x14080=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*x14077))),-1);
if(!x14080.valid){
continue;
}
if( IKabs(((x14078.value)*(x14079.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14080.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14077)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14078.value)*(x14079.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x14080.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14077))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14078.value)*(x14079.value)*((((cj2*sj1))+((cj1*sj2))))), ((x14080.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14077))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14081=IKsin(j4);
IkReal x14082=IKcos(j4);
IkReal x14083=(cj2*sj1);
IkReal x14084=(cj1*sj2);
IkReal x14085=(cj1*cj2);
IkReal x14086=((1.0)*cj3);
IkReal x14087=(cj5*r21);
IkReal x14088=(sj1*sj2);
IkReal x14089=(cj5*r01);
IkReal x14090=(r20*sj5);
IkReal x14091=(r01*sj5);
IkReal x14092=(r00*sj5);
IkReal x14093=((1.0)*sj3);
IkReal x14094=((1.0)*x14081);
IkReal x14095=(cj5*x14082);
IkReal x14096=(cj5*x14081);
IkReal x14097=(x14083+x14084);
IkReal x14098=(r21*sj5*x14082);
evalcond[0]=((-1.0)*r12*x14082);
evalcond[1]=(((r20*x14096))+(((-1.0)*r21*sj5*x14094)));
evalcond[2]=((((-1.0)*r12*x14081*x14093))+x14097);
evalcond[3]=((-1.0)+((r00*x14096))+(((-1.0)*x14091*x14094)));
evalcond[4]=((((-1.0)*r12*x14081*x14086))+(((-1.0)*x14085))+x14088);
evalcond[5]=(((sj3*x14092))+((cj3*x14082*x14091))+(((-1.0)*r00*x14086*x14095))+((sj3*x14089)));
evalcond[6]=((((-1.0)*x14086*x14092))+(((-1.0)*x14086*x14089))+((sj3*x14082*x14091))+(((-1.0)*r00*x14093*x14095)));
evalcond[7]=((((-1.0)*r20*x14086*x14095))+((sj3*x14090))+((cj3*x14098))+x14097+((sj3*x14087)));
evalcond[8]=(((sj3*x14098))+(((-1.0)*x14086*x14090))+(((-1.0)*x14088))+(((-1.0)*x14086*x14087))+(((-1.0)*r20*x14093*x14095))+x14085);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14099=((1.0)*sj5);
IkReal x14100=(cj5*r00);
CheckValue<IkReal> x14101=IKPowWithIntegerCheck(((((-1.0)*r01*x14099))+x14100),-1);
if(!x14101.valid){
continue;
}
CheckValue<IkReal> x14102=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*x14100))),-1);
if(!x14102.valid){
continue;
}
if( IKabs(x14101.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14102.value)*(((((-1.0)*r00*sj3*x14099))+(((-1.0)*cj5*r01*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14101.value)+IKsqr(((x14102.value)*(((((-1.0)*r00*sj3*x14099))+(((-1.0)*cj5*r01*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14101.value, ((x14102.value)*(((((-1.0)*r00*sj3*x14099))+(((-1.0)*cj5*r01*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14103=IKsin(j4);
IkReal x14104=IKcos(j4);
IkReal x14105=(cj2*sj1);
IkReal x14106=(cj1*sj2);
IkReal x14107=(cj1*cj2);
IkReal x14108=((1.0)*cj3);
IkReal x14109=(cj5*r21);
IkReal x14110=(sj1*sj2);
IkReal x14111=(cj5*r01);
IkReal x14112=(r20*sj5);
IkReal x14113=(r01*sj5);
IkReal x14114=(r00*sj5);
IkReal x14115=((1.0)*sj3);
IkReal x14116=((1.0)*x14103);
IkReal x14117=(cj5*x14104);
IkReal x14118=(cj5*x14103);
IkReal x14119=(x14106+x14105);
IkReal x14120=(r21*sj5*x14104);
evalcond[0]=((-1.0)*r12*x14104);
evalcond[1]=((((-1.0)*r21*sj5*x14116))+((r20*x14118)));
evalcond[2]=(x14119+(((-1.0)*r12*x14103*x14115)));
evalcond[3]=((-1.0)+((r00*x14118))+(((-1.0)*x14113*x14116)));
evalcond[4]=((((-1.0)*r12*x14103*x14108))+(((-1.0)*x14107))+x14110);
evalcond[5]=(((sj3*x14114))+((sj3*x14111))+((cj3*x14104*x14113))+(((-1.0)*r00*x14108*x14117)));
evalcond[6]=((((-1.0)*r00*x14115*x14117))+(((-1.0)*x14108*x14114))+(((-1.0)*x14108*x14111))+((sj3*x14104*x14113)));
evalcond[7]=(((sj3*x14109))+((sj3*x14112))+((cj3*x14120))+x14119+(((-1.0)*r20*x14108*x14117)));
evalcond[8]=((((-1.0)*x14108*x14109))+(((-1.0)*x14108*x14112))+(((-1.0)*r20*x14115*x14117))+(((-1.0)*x14110))+x14107+((sj3*x14120)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14121=(r01*sj5);
IkReal x14122=(cj5*r00);
CheckValue<IkReal> x14123=IKPowWithIntegerCheck(((((-1.0)*x14121))+x14122),-1);
if(!x14123.valid){
continue;
}
CheckValue<IkReal> x14124=IKPowWithIntegerCheck(((((-1.0)*sj3*x14122))+((sj3*x14121))),-1);
if(!x14124.valid){
continue;
}
if( IKabs(x14123.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14124.value)*((((cj3*cj5*r01))+((cj3*r00*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14123.value)+IKsqr(((x14124.value)*((((cj3*cj5*r01))+((cj3*r00*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14123.value, ((x14124.value)*((((cj3*cj5*r01))+((cj3*r00*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14125=IKsin(j4);
IkReal x14126=IKcos(j4);
IkReal x14127=(cj2*sj1);
IkReal x14128=(cj1*sj2);
IkReal x14129=(cj1*cj2);
IkReal x14130=((1.0)*cj3);
IkReal x14131=(cj5*r21);
IkReal x14132=(sj1*sj2);
IkReal x14133=(cj5*r01);
IkReal x14134=(r20*sj5);
IkReal x14135=(r01*sj5);
IkReal x14136=(r00*sj5);
IkReal x14137=((1.0)*sj3);
IkReal x14138=((1.0)*x14125);
IkReal x14139=(cj5*x14126);
IkReal x14140=(cj5*x14125);
IkReal x14141=(x14128+x14127);
IkReal x14142=(r21*sj5*x14126);
evalcond[0]=((-1.0)*r12*x14126);
evalcond[1]=((((-1.0)*r21*sj5*x14138))+((r20*x14140)));
evalcond[2]=((((-1.0)*r12*x14125*x14137))+x14141);
evalcond[3]=((-1.0)+(((-1.0)*x14135*x14138))+((r00*x14140)));
evalcond[4]=((((-1.0)*r12*x14125*x14130))+(((-1.0)*x14129))+x14132);
evalcond[5]=(((sj3*x14133))+((sj3*x14136))+(((-1.0)*r00*x14130*x14139))+((cj3*x14126*x14135)));
evalcond[6]=(((sj3*x14126*x14135))+(((-1.0)*r00*x14137*x14139))+(((-1.0)*x14130*x14133))+(((-1.0)*x14130*x14136)));
evalcond[7]=(((cj3*x14142))+((sj3*x14131))+((sj3*x14134))+x14141+(((-1.0)*r20*x14130*x14139)));
evalcond[8]=((((-1.0)*x14132))+(((-1.0)*r20*x14137*x14139))+((sj3*x14142))+x14129+(((-1.0)*x14130*x14131))+(((-1.0)*x14130*x14134)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14143=cj5*cj5;
IkReal x14144=(cj3*r00);
IkReal x14145=(r01*sj3);
IkReal x14146=(r00*sj3);
IkReal x14147=(cj3*r01);
IkReal x14148=(cj5*r20*sj5);
IkReal x14149=(r21*x14143);
IkReal x14150=(r20*x14143);
IkReal x14151=((1.0)*cj5*r21*sj5);
CheckValue<IkReal> x14152 = IKatan2WithCheck(IkReal((((r22*sj5*x14146))+((cj5*r22*x14145)))),IkReal(((((-1.0)*x14145*x14151))+((x14146*x14149))+((x14146*x14148))+(((-1.0)*r21*x14146))+((x14145*x14150)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14152.valid){
continue;
}
CheckValue<IkReal> x14153=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14144*x14151))+(((-1.0)*x14147*x14148))+(((-1.0)*x14147*x14149))+((r21*x14147))+((x14144*x14150))+((cj3*r02*r22)))),-1);
if(!x14153.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14152.value)+(((1.5707963267949)*(x14153.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14154=IKsin(j4);
IkReal x14155=IKcos(j4);
IkReal x14156=(cj2*sj1);
IkReal x14157=(cj1*sj2);
IkReal x14158=(cj1*cj2);
IkReal x14159=(r11*sj5);
IkReal x14160=(cj5*sj3);
IkReal x14161=(sj1*sj2);
IkReal x14162=(r21*sj5);
IkReal x14163=(r01*sj5);
IkReal x14164=(sj3*sj5);
IkReal x14165=(cj3*cj5);
IkReal x14166=((1.0)*x14155);
IkReal x14167=((1.0)*x14154);
IkReal x14168=(cj3*x14155);
IkReal x14169=((1.0)*x14165);
IkReal x14170=((1.0)*cj3*sj5);
IkReal x14171=(cj5*x14154);
IkReal x14172=(sj3*x14155);
IkReal x14173=(x14156+x14157);
evalcond[0]=((((-1.0)*r22*x14166))+(((-1.0)*x14162*x14167))+((r20*x14171)));
evalcond[1]=((((-1.0)*r12*x14166))+((r10*x14171))+(((-1.0)*x14159*x14167)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14166))+(((-1.0)*x14163*x14167))+((r00*x14171)));
evalcond[3]=((((-1.0)*r00*x14165*x14166))+((r00*x14164))+((r01*x14160))+((x14163*x14168))+(((-1.0)*cj3*r02*x14167)));
evalcond[4]=((((-1.0)*r01*x14169))+(((-1.0)*r02*sj3*x14167))+((x14163*x14172))+(((-1.0)*r00*x14170))+(((-1.0)*r00*x14160*x14166)));
evalcond[5]=((((-1.0)*cj3*r22*x14167))+((x14162*x14168))+(((-1.0)*r20*x14165*x14166))+x14173+((r21*x14160))+((r20*x14164)));
evalcond[6]=(((x14159*x14168))+((r10*x14164))+(((-1.0)*cj3*r12*x14167))+((r11*x14160))+x14161+(((-1.0)*r10*x14165*x14166))+(((-1.0)*x14158)));
evalcond[7]=((((-1.0)*r10*x14170))+(((-1.0)*r12*sj3*x14167))+(((-1.0)*r11*x14169))+((x14159*x14172))+x14173+(((-1.0)*r10*x14160*x14166)));
evalcond[8]=((((-1.0)*r20*x14170))+(((-1.0)*r22*sj3*x14167))+(((-1.0)*r20*x14160*x14166))+(((-1.0)*r21*x14169))+x14158+((x14162*x14172))+(((-1.0)*x14161)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14174=((1.0)*sj5);
CheckValue<IkReal> x14175=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x14174))+(((-1.0)*cj5*r21)))),-1);
if(!x14175.valid){
continue;
}
CheckValue<IkReal> x14176 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x14174)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14176.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14175.value)))+(x14176.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14177=IKsin(j4);
IkReal x14178=IKcos(j4);
IkReal x14179=(cj2*sj1);
IkReal x14180=(cj1*sj2);
IkReal x14181=(cj1*cj2);
IkReal x14182=(r11*sj5);
IkReal x14183=(cj5*sj3);
IkReal x14184=(sj1*sj2);
IkReal x14185=(r21*sj5);
IkReal x14186=(r01*sj5);
IkReal x14187=(sj3*sj5);
IkReal x14188=(cj3*cj5);
IkReal x14189=((1.0)*x14178);
IkReal x14190=((1.0)*x14177);
IkReal x14191=(cj3*x14178);
IkReal x14192=((1.0)*x14188);
IkReal x14193=((1.0)*cj3*sj5);
IkReal x14194=(cj5*x14177);
IkReal x14195=(sj3*x14178);
IkReal x14196=(x14179+x14180);
evalcond[0]=((((-1.0)*r22*x14189))+(((-1.0)*x14185*x14190))+((r20*x14194)));
evalcond[1]=(((r10*x14194))+(((-1.0)*r12*x14189))+(((-1.0)*x14182*x14190)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14189))+(((-1.0)*x14186*x14190))+((r00*x14194)));
evalcond[3]=((((-1.0)*r00*x14188*x14189))+(((-1.0)*cj3*r02*x14190))+((r01*x14183))+((r00*x14187))+((x14186*x14191)));
evalcond[4]=((((-1.0)*r01*x14192))+(((-1.0)*r00*x14193))+(((-1.0)*r00*x14183*x14189))+(((-1.0)*r02*sj3*x14190))+((x14186*x14195)));
evalcond[5]=(((r20*x14187))+(((-1.0)*r20*x14188*x14189))+(((-1.0)*cj3*r22*x14190))+((x14185*x14191))+((r21*x14183))+x14196);
evalcond[6]=((((-1.0)*cj3*r12*x14190))+((x14182*x14191))+((r11*x14183))+(((-1.0)*r10*x14188*x14189))+x14184+(((-1.0)*x14181))+((r10*x14187)));
evalcond[7]=((((-1.0)*r12*sj3*x14190))+(((-1.0)*r11*x14192))+((x14182*x14195))+(((-1.0)*r10*x14183*x14189))+(((-1.0)*r10*x14193))+x14196);
evalcond[8]=((((-1.0)*r22*sj3*x14190))+((x14185*x14195))+(((-1.0)*r21*x14192))+x14181+(((-1.0)*r20*x14193))+(((-1.0)*r20*x14183*x14189))+(((-1.0)*x14184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14197=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x14197.valid){
continue;
}
CheckValue<IkReal> x14198 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14198.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14197.value)))+(x14198.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14199=IKsin(j4);
IkReal x14200=IKcos(j4);
IkReal x14201=(cj2*sj1);
IkReal x14202=(cj1*sj2);
IkReal x14203=(cj1*cj2);
IkReal x14204=(r11*sj5);
IkReal x14205=(cj5*sj3);
IkReal x14206=(sj1*sj2);
IkReal x14207=(r21*sj5);
IkReal x14208=(r01*sj5);
IkReal x14209=(sj3*sj5);
IkReal x14210=(cj3*cj5);
IkReal x14211=((1.0)*x14200);
IkReal x14212=((1.0)*x14199);
IkReal x14213=(cj3*x14200);
IkReal x14214=((1.0)*x14210);
IkReal x14215=((1.0)*cj3*sj5);
IkReal x14216=(cj5*x14199);
IkReal x14217=(sj3*x14200);
IkReal x14218=(x14201+x14202);
evalcond[0]=((((-1.0)*x14207*x14212))+(((-1.0)*r22*x14211))+((r20*x14216)));
evalcond[1]=((((-1.0)*r12*x14211))+(((-1.0)*x14204*x14212))+((r10*x14216)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14211))+(((-1.0)*x14208*x14212))+((r00*x14216)));
evalcond[3]=(((r00*x14209))+((r01*x14205))+(((-1.0)*cj3*r02*x14212))+((x14208*x14213))+(((-1.0)*r00*x14210*x14211)));
evalcond[4]=((((-1.0)*r02*sj3*x14212))+(((-1.0)*r00*x14205*x14211))+(((-1.0)*r01*x14214))+(((-1.0)*r00*x14215))+((x14208*x14217)));
evalcond[5]=(((x14207*x14213))+((r20*x14209))+((r21*x14205))+(((-1.0)*cj3*r22*x14212))+(((-1.0)*r20*x14210*x14211))+x14218);
evalcond[6]=(((x14204*x14213))+((r10*x14209))+(((-1.0)*r10*x14210*x14211))+(((-1.0)*x14203))+((r11*x14205))+(((-1.0)*cj3*r12*x14212))+x14206);
evalcond[7]=((((-1.0)*r10*x14205*x14211))+((x14204*x14217))+(((-1.0)*r10*x14215))+(((-1.0)*r12*sj3*x14212))+x14218+(((-1.0)*r11*x14214)));
evalcond[8]=(((x14207*x14217))+(((-1.0)*r21*x14214))+(((-1.0)*r20*x14215))+(((-1.0)*r20*x14205*x14211))+(((-1.0)*r22*sj3*x14212))+(((-1.0)*x14206))+x14203);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14219=((-1.0)*r10);
IkReal x14221 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x14221)==0){
continue;
}
IkReal x14220=pow(x14221,-0.5);
CheckValue<IkReal> x14222 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x14219),IKFAST_ATAN2_MAGTHRESH);
if(!x14222.valid){
continue;
}
IkReal gconst12=((-1.0)*(x14222.value));
IkReal gconst13=(r11*x14220);
IkReal gconst14=(x14219*x14220);
CheckValue<IkReal> x14223 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x14223.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14223.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x14224=((-1.0)*r10);
IkReal x14225=x14220;
CheckValue<IkReal> x14227 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x14224),IKFAST_ATAN2_MAGTHRESH);
if(!x14227.valid){
continue;
}
IkReal x14226=((-1.0)*(x14227.value));
sj5=gconst13;
cj5=gconst14;
j5=x14226;
IkReal gconst12=x14226;
IkReal gconst13=(r11*x14225);
IkReal gconst14=(x14224*x14225);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14228=((1.0)*gconst13);
CheckValue<IkReal> x14229 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst14*r00))+((gconst14*r10*sj0))+(((-1.0)*cj0*r01*x14228))+(((-1.0)*r11*sj0*x14228)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14229.valid){
continue;
}
CheckValue<IkReal> x14230=IKPowWithIntegerCheck(IKsign((((gconst14*r21))+((gconst13*r20)))),-1);
if(!x14230.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14229.value)+(((1.5707963267949)*(x14230.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14231=IKsin(j4);
IkReal x14232=IKcos(j4);
IkReal x14233=((1.0)*r22);
IkReal x14234=((1.0)*cj3);
IkReal x14235=(gconst13*r20);
IkReal x14236=(cj2*sj0);
IkReal x14237=(gconst13*sj3);
IkReal x14238=(gconst13*r11);
IkReal x14239=(gconst14*r11);
IkReal x14240=(gconst14*r21);
IkReal x14241=((1.0)*sj1);
IkReal x14242=(gconst14*sj3);
IkReal x14243=(cj0*cj2);
IkReal x14244=((1.0)*x14231);
IkReal x14245=(gconst14*x14231);
IkReal x14246=((1.0)*x14232);
IkReal x14247=((1.0)*cj1*sj2);
IkReal x14248=(gconst14*x14232);
IkReal x14249=(cj3*gconst13*x14232);
evalcond[0]=((((-1.0)*x14232*x14233))+((r20*x14245))+(((-1.0)*gconst13*r21*x14244)));
evalcond[1]=(sj0+(((-1.0)*gconst13*r01*x14244))+(((-1.0)*r02*x14246))+((r00*x14245)));
evalcond[2]=((((-1.0)*x14238*x14244))+((r10*x14245))+(((-1.0)*r12*x14246))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x14249))+((cj2*sj1))+((sj3*x14240))+(((-1.0)*cj3*x14231*x14233))+((cj1*sj2))+((sj3*x14235))+(((-1.0)*r20*x14234*x14248)));
evalcond[4]=((((-1.0)*x14234*x14240))+(((-1.0)*r20*x14242*x14246))+((r21*x14232*x14237))+(((-1.0)*x14234*x14235))+(((-1.0)*sj2*x14241))+((cj1*cj2))+(((-1.0)*sj3*x14231*x14233)));
evalcond[5]=((((-1.0)*r00*x14234*x14248))+(((-1.0)*r02*x14231*x14234))+(((-1.0)*cj0*sj2*x14241))+((r00*x14237))+((r01*x14249))+((r01*x14242))+((cj1*x14243)));
evalcond[6]=((((-1.0)*sj0*sj2*x14241))+((cj3*x14232*x14238))+((r10*x14237))+(((-1.0)*r10*x14234*x14248))+((cj1*x14236))+(((-1.0)*r12*x14231*x14234))+((sj3*x14239)));
evalcond[7]=((((-1.0)*gconst14*r01*x14234))+((r01*x14232*x14237))+(((-1.0)*r02*sj3*x14244))+(((-1.0)*gconst13*r00*x14234))+(((-1.0)*r00*x14242*x14246))+(((-1.0)*cj0*x14247))+(((-1.0)*x14241*x14243)));
evalcond[8]=((((-1.0)*r10*x14242*x14246))+(((-1.0)*x14234*x14239))+(((-1.0)*gconst13*r10*x14234))+(((-1.0)*x14236*x14241))+((r11*x14232*x14237))+(((-1.0)*r12*sj3*x14244))+(((-1.0)*sj0*x14247)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14250=((1.0)*gconst13);
CheckValue<IkReal> x14251 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x14250))+((cj0*gconst14*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14251.valid){
continue;
}
CheckValue<IkReal> x14252=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst14*r01))+(((-1.0)*r00*x14250)))),-1);
if(!x14252.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14251.value)+(((1.5707963267949)*(x14252.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14253=IKsin(j4);
IkReal x14254=IKcos(j4);
IkReal x14255=((1.0)*r22);
IkReal x14256=((1.0)*cj3);
IkReal x14257=(gconst13*r20);
IkReal x14258=(cj2*sj0);
IkReal x14259=(gconst13*sj3);
IkReal x14260=(gconst13*r11);
IkReal x14261=(gconst14*r11);
IkReal x14262=(gconst14*r21);
IkReal x14263=((1.0)*sj1);
IkReal x14264=(gconst14*sj3);
IkReal x14265=(cj0*cj2);
IkReal x14266=((1.0)*x14253);
IkReal x14267=(gconst14*x14253);
IkReal x14268=((1.0)*x14254);
IkReal x14269=((1.0)*cj1*sj2);
IkReal x14270=(gconst14*x14254);
IkReal x14271=(cj3*gconst13*x14254);
evalcond[0]=((((-1.0)*x14254*x14255))+((r20*x14267))+(((-1.0)*gconst13*r21*x14266)));
evalcond[1]=((((-1.0)*r02*x14268))+(((-1.0)*gconst13*r01*x14266))+((r00*x14267))+sj0);
evalcond[2]=((((-1.0)*x14260*x14266))+(((-1.0)*r12*x14268))+((r10*x14267))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((sj3*x14262))+((sj3*x14257))+((r21*x14271))+((cj1*sj2))+(((-1.0)*r20*x14256*x14270))+(((-1.0)*cj3*x14253*x14255)));
evalcond[4]=((((-1.0)*sj2*x14263))+(((-1.0)*sj3*x14253*x14255))+(((-1.0)*r20*x14264*x14268))+((cj1*cj2))+((r21*x14254*x14259))+(((-1.0)*x14256*x14257))+(((-1.0)*x14256*x14262)));
evalcond[5]=(((r01*x14271))+((cj1*x14265))+(((-1.0)*r02*x14253*x14256))+(((-1.0)*cj0*sj2*x14263))+(((-1.0)*r00*x14256*x14270))+((r00*x14259))+((r01*x14264)));
evalcond[6]=((((-1.0)*r10*x14256*x14270))+((cj3*x14254*x14260))+((sj3*x14261))+(((-1.0)*sj0*sj2*x14263))+((r10*x14259))+(((-1.0)*r12*x14253*x14256))+((cj1*x14258)));
evalcond[7]=((((-1.0)*cj0*x14269))+(((-1.0)*gconst13*r00*x14256))+((r01*x14254*x14259))+(((-1.0)*x14263*x14265))+(((-1.0)*r02*sj3*x14266))+(((-1.0)*gconst14*r01*x14256))+(((-1.0)*r00*x14264*x14268)));
evalcond[8]=((((-1.0)*sj0*x14269))+(((-1.0)*r12*sj3*x14266))+(((-1.0)*x14258*x14263))+(((-1.0)*r10*x14264*x14268))+(((-1.0)*x14256*x14261))+(((-1.0)*gconst13*r10*x14256))+((r11*x14254*x14259)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14272=((-1.0)*r11);
IkReal x14274 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x14274)==0){
continue;
}
IkReal x14273=pow(x14274,-0.5);
CheckValue<IkReal> x14275 = IKatan2WithCheck(IkReal(x14272),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x14275.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x14275.value))));
IkReal gconst16=(x14272*x14273);
IkReal gconst17=((1.0)*r10*x14273);
CheckValue<IkReal> x14276 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x14276.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14276.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x14277=((-1.0)*r11);
CheckValue<IkReal> x14280 = IKatan2WithCheck(IkReal(x14277),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x14280.valid){
continue;
}
IkReal x14278=((1.0)*(x14280.value));
IkReal x14279=x14273;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14278)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14278)));
IkReal gconst16=(x14277*x14279);
IkReal gconst17=((1.0)*r10*x14279);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14281=((-1.0)*r11);
CheckValue<IkReal> x14284 = IKatan2WithCheck(IkReal(x14281),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x14284.valid){
continue;
}
IkReal x14282=((1.0)*(x14284.value));
IkReal x14283=x14273;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14282)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14282)));
IkReal gconst16=(x14281*x14283);
IkReal gconst17=((1.0)*r10*x14283);
IkReal x14285=r12*r12;
IkReal x14286=(cj0*r02);
IkReal x14287=x14273;
IkReal x14288=(sj0*x14287);
j4eval[0]=((IKabs((((r12*sj0))+x14286)))+(IKabs((((r12*x14286*x14287))+(((-1.0)*x14288))+((x14285*x14288))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14289=((-1.0)*r11);
CheckValue<IkReal> x14292 = IKatan2WithCheck(IkReal(x14289),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x14292.valid){
continue;
}
IkReal x14290=((1.0)*(x14292.value));
IkReal x14291=x14273;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14290)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14290)));
IkReal gconst16=(x14289*x14291);
IkReal gconst17=((1.0)*r10*x14291);
CheckValue<IkReal> x14296=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x14296.valid){
continue;
}
IkReal x14293=x14296.value;
IkReal x14294=(cj3*x14293);
IkReal x14295=((1.0)*x14294);
j4eval[0]=IKsign((((cj3*(r22*r22)))+(((2.0)*r10*r11*r20*r21*x14294))+((x14295*(r10*r10)*(r20*r20)))+((x14295*(r11*r11)*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x14297=((-1.0)*r11);
CheckValue<IkReal> x14300 = IKatan2WithCheck(IkReal(x14297),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x14300.valid){
continue;
}
IkReal x14298=((1.0)*(x14300.value));
IkReal x14299=x14273;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14298)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14298)));
IkReal gconst16=(x14297*x14299);
IkReal gconst17=((1.0)*r10*x14299);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14301=((-1.0)*r11);
CheckValue<IkReal> x14304 = IKatan2WithCheck(IkReal(x14301),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x14304.valid){
continue;
}
IkReal x14302=((1.0)*(x14304.value));
IkReal x14303=x14273;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14302)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14302)));
IkReal gconst16=(x14301*x14303);
IkReal gconst17=((1.0)*r10*x14303);
IkReal x14305=r12*r12;
IkReal x14306=(cj0*r02);
IkReal x14307=x14273;
IkReal x14308=(sj0*x14307);
j4eval[0]=((IKabs((((r12*x14306*x14307))+(((-1.0)*x14308))+((x14305*x14308)))))+(IKabs((((r12*sj0))+x14306))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14309=((-1.0)*r11);
CheckValue<IkReal> x14312 = IKatan2WithCheck(IkReal(x14309),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x14312.valid){
continue;
}
IkReal x14310=((1.0)*(x14312.value));
IkReal x14311=x14273;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14310)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14310)));
IkReal gconst16=(x14309*x14311);
IkReal gconst17=((1.0)*r10*x14311);
IkReal x14313=r12*r12;
IkReal x14314=(cj1*cj2*r22);
CheckValue<IkReal> x14319=IKPowWithIntegerCheck(((-1.0)+x14313),-1);
if(!x14319.valid){
continue;
}
IkReal x14315=x14319.value;
IkReal x14316=((1.0)*r22*sj1*sj2);
if((((1.0)+(((-1.0)*x14313)))) < -0.00001)
continue;
IkReal x14317=IKsqrt(((1.0)+(((-1.0)*x14313))));
IkReal x14318=(r12*x14315*x14317);
j4eval[0]=((IKabs(((((-1.0)*x14316))+x14314)))+(IKabs((((x14314*x14318))+(((-1.0)*x14316*x14318))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14320=(gconst17*r20);
IkReal x14321=(cj1*cj2);
IkReal x14322=(gconst16*r21);
IkReal x14323=(sj1*sj2);
CheckValue<IkReal> x14324 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x14323))+((r22*x14321)))),IkReal(((((-1.0)*x14321*x14322))+((x14320*x14321))+(((-1.0)*x14320*x14323))+((x14322*x14323)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14324.valid){
continue;
}
CheckValue<IkReal> x14325=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x14322*x14322)+(x14320*x14320)+(((-2.0)*x14320*x14322)))),-1);
if(!x14325.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14324.value)+(((1.5707963267949)*(x14325.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14326=IKsin(j4);
IkReal x14327=IKcos(j4);
IkReal x14328=((1.0)*sj1);
IkReal x14329=((1.0)*x14327);
IkReal x14330=(gconst17*x14326);
IkReal x14331=(gconst16*x14327);
IkReal x14332=((1.0)*x14326);
IkReal x14333=((1.0)*cj1*sj2);
IkReal x14334=(gconst16*x14332);
evalcond[0]=(((r20*x14330))+(((-1.0)*r21*x14334))+(((-1.0)*r22*x14329)));
evalcond[1]=(sj0+((r00*x14330))+(((-1.0)*r01*x14334))+(((-1.0)*r02*x14329)));
evalcond[2]=((((-1.0)*r11*x14334))+((r10*x14330))+(((-1.0)*r12*x14329))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst17*r20*x14329))+(((-1.0)*r22*x14332))+(((-1.0)*sj2*x14328))+((cj1*cj2))+((r21*x14331)));
evalcond[4]=((((-1.0)*cj0*cj2*x14328))+(((-1.0)*gconst17*r00*x14329))+(((-1.0)*r02*x14332))+((r01*x14331))+(((-1.0)*cj0*x14333)));
evalcond[5]=((((-1.0)*gconst17*r10*x14329))+((r11*x14331))+(((-1.0)*r12*x14332))+(((-1.0)*cj2*sj0*x14328))+(((-1.0)*sj0*x14333)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14335=((1.0)*gconst16);
CheckValue<IkReal> x14336=IKPowWithIntegerCheck(IKsign((((gconst17*r21))+((gconst16*r20)))),-1);
if(!x14336.valid){
continue;
}
CheckValue<IkReal> x14337 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x14335))+(((-1.0)*cj0*r01*x14335))+((cj0*gconst17*r00))+((gconst17*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14337.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14336.value)))+(x14337.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14338=IKsin(j4);
IkReal x14339=IKcos(j4);
IkReal x14340=((1.0)*sj1);
IkReal x14341=((1.0)*x14339);
IkReal x14342=(gconst17*x14338);
IkReal x14343=(gconst16*x14339);
IkReal x14344=((1.0)*x14338);
IkReal x14345=((1.0)*cj1*sj2);
IkReal x14346=(gconst16*x14344);
evalcond[0]=((((-1.0)*r21*x14346))+(((-1.0)*r22*x14341))+((r20*x14342)));
evalcond[1]=((((-1.0)*r01*x14346))+sj0+((r00*x14342))+(((-1.0)*r02*x14341)));
evalcond[2]=((((-1.0)*r12*x14341))+(((-1.0)*r11*x14346))+((r10*x14342))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x14343))+(((-1.0)*r22*x14344))+(((-1.0)*gconst17*r20*x14341))+(((-1.0)*sj2*x14340))+((cj1*cj2)));
evalcond[4]=((((-1.0)*gconst17*r00*x14341))+((r01*x14343))+(((-1.0)*cj0*x14345))+(((-1.0)*cj0*cj2*x14340))+(((-1.0)*r02*x14344)));
evalcond[5]=((((-1.0)*r12*x14344))+(((-1.0)*sj0*x14345))+((r11*x14343))+(((-1.0)*gconst17*r10*x14341))+(((-1.0)*cj2*sj0*x14340)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14347=((1.0)*gconst16);
CheckValue<IkReal> x14348 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x14347))+((cj0*gconst17*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14348.valid){
continue;
}
CheckValue<IkReal> x14349=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst17*r01))+(((-1.0)*r00*x14347)))),-1);
if(!x14349.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14348.value)+(((1.5707963267949)*(x14349.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14350=IKsin(j4);
IkReal x14351=IKcos(j4);
IkReal x14352=((1.0)*sj1);
IkReal x14353=((1.0)*x14351);
IkReal x14354=(gconst17*x14350);
IkReal x14355=(gconst16*x14351);
IkReal x14356=((1.0)*x14350);
IkReal x14357=((1.0)*cj1*sj2);
IkReal x14358=(gconst16*x14356);
evalcond[0]=(((r20*x14354))+(((-1.0)*r22*x14353))+(((-1.0)*r21*x14358)));
evalcond[1]=((((-1.0)*r02*x14353))+sj0+((r00*x14354))+(((-1.0)*r01*x14358)));
evalcond[2]=((((-1.0)*r12*x14353))+(((-1.0)*r11*x14358))+((r10*x14354))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj2*x14352))+(((-1.0)*r22*x14356))+(((-1.0)*gconst17*r20*x14353))+((cj1*cj2))+((r21*x14355)));
evalcond[4]=((((-1.0)*r02*x14356))+((r01*x14355))+(((-1.0)*cj0*x14357))+(((-1.0)*gconst17*r00*x14353))+(((-1.0)*cj0*cj2*x14352)));
evalcond[5]=((((-1.0)*cj2*sj0*x14352))+((r11*x14355))+(((-1.0)*r12*x14356))+(((-1.0)*gconst17*r10*x14353))+(((-1.0)*sj0*x14357)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x14359=((-1.0)*r11);
CheckValue<IkReal> x14362 = IKatan2WithCheck(IkReal(x14359),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x14362.valid){
continue;
}
IkReal x14360=((1.0)*(x14362.value));
IkReal x14361=x14273;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14360)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14360)));
IkReal gconst16=(x14359*x14361);
IkReal gconst17=((1.0)*r10*x14361);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14363=((-1.0)*r11);
CheckValue<IkReal> x14366 = IKatan2WithCheck(IkReal(x14363),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x14366.valid){
continue;
}
IkReal x14364=((1.0)*(x14366.value));
IkReal x14365=x14273;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14364)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14364)));
IkReal gconst16=(x14363*x14365);
IkReal gconst17=((1.0)*r10*x14365);
IkReal x14367=r12*r12;
IkReal x14368=(cj0*r02);
IkReal x14369=x14273;
IkReal x14370=(sj0*x14369);
j4eval[0]=((IKabs((((r12*sj0))+x14368)))+(IKabs((((x14367*x14370))+(((-1.0)*x14370))+((r12*x14368*x14369))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14371=((-1.0)*r11);
CheckValue<IkReal> x14374 = IKatan2WithCheck(IkReal(x14371),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x14374.valid){
continue;
}
IkReal x14372=((1.0)*(x14374.value));
IkReal x14373=x14273;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14372)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14372)));
IkReal gconst16=(x14371*x14373);
IkReal gconst17=((1.0)*r10*x14373);
IkReal x14375=r12*r12;
IkReal x14376=((1.0)+(((-1.0)*x14375)));
IkReal x14377=(cj1*cj2*r22);
CheckValue<IkReal> x14385=IKPowWithIntegerCheck(x14376,-1);
if(!x14385.valid){
continue;
}
IkReal x14378=x14385.value;
CheckValue<IkReal> x14386=IKPowWithIntegerCheck(((-1.0)+x14375),-1);
if(!x14386.valid){
continue;
}
IkReal x14379=x14386.value;
IkReal x14380=((1.0)*x14378);
IkReal x14381=((1.0)*r22*sj1*sj2);
if((x14376) < -0.00001)
continue;
IkReal x14382=IKsqrt(x14376);
IkReal x14383=(r12*x14379*x14382);
IkReal x14384=((((-1.0)*x14380*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-1.0)*x14380*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x14378)));
j4eval[0]=x14384;
j4eval[1]=((IKabs(((((-1.0)*x14381))+x14377)))+(IKabs((((x14377*x14383))+(((-1.0)*x14381*x14383))))));
j4eval[2]=IKsign(x14384);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14387=(gconst17*r20);
IkReal x14388=(cj1*cj2);
IkReal x14389=(gconst16*r21);
IkReal x14390=(sj1*sj2);
CheckValue<IkReal> x14391 = IKatan2WithCheck(IkReal((((r22*x14388))+(((-1.0)*r22*x14390)))),IkReal((((x14387*x14388))+(((-1.0)*x14388*x14389))+((x14389*x14390))+(((-1.0)*x14387*x14390)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14391.valid){
continue;
}
CheckValue<IkReal> x14392=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x14389*x14389)))+(((-1.0)*(x14387*x14387)))+(((-1.0)*(r22*r22)))+(((2.0)*x14387*x14389)))),-1);
if(!x14392.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14391.value)+(((1.5707963267949)*(x14392.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14393=IKsin(j4);
IkReal x14394=IKcos(j4);
IkReal x14395=(gconst16*r11);
IkReal x14396=(gconst16*r21);
IkReal x14397=(gconst16*r01);
IkReal x14398=(gconst17*r00);
IkReal x14399=((1.0)*sj1);
IkReal x14400=((1.0)*x14394);
IkReal x14401=((1.0)*x14393);
IkReal x14402=(gconst17*x14394);
IkReal x14403=(gconst17*x14393);
IkReal x14404=((1.0)*cj1*sj2);
evalcond[0]=((((-1.0)*x14396*x14401))+(((-1.0)*r22*x14400))+((r20*x14403)));
evalcond[1]=(((x14393*x14398))+sj0+(((-1.0)*x14397*x14401))+(((-1.0)*r02*x14400)));
evalcond[2]=(((r10*x14403))+(((-1.0)*x14395*x14401))+(((-1.0)*r12*x14400))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x14396*x14400))+((r22*x14393))+(((-1.0)*sj2*x14399))+((cj1*cj2))+((r20*x14402)));
evalcond[4]=((((-1.0)*x14397*x14400))+((x14394*x14398))+(((-1.0)*cj0*x14404))+((r02*x14393))+(((-1.0)*cj0*cj2*x14399)));
evalcond[5]=(((r10*x14402))+(((-1.0)*cj2*sj0*x14399))+(((-1.0)*x14395*x14400))+((r12*x14393))+(((-1.0)*sj0*x14404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14405=((1.0)*gconst16);
CheckValue<IkReal> x14406 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst17*r00))+((gconst17*r10*sj0))+(((-1.0)*r11*sj0*x14405))+(((-1.0)*cj0*r01*x14405)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14406.valid){
continue;
}
CheckValue<IkReal> x14407=IKPowWithIntegerCheck(IKsign((((gconst17*r21))+((gconst16*r20)))),-1);
if(!x14407.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14406.value)+(((1.5707963267949)*(x14407.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14408=IKsin(j4);
IkReal x14409=IKcos(j4);
IkReal x14410=(gconst16*r11);
IkReal x14411=(gconst16*r21);
IkReal x14412=(gconst16*r01);
IkReal x14413=(gconst17*r00);
IkReal x14414=((1.0)*sj1);
IkReal x14415=((1.0)*x14409);
IkReal x14416=((1.0)*x14408);
IkReal x14417=(gconst17*x14409);
IkReal x14418=(gconst17*x14408);
IkReal x14419=((1.0)*cj1*sj2);
evalcond[0]=((((-1.0)*r22*x14415))+(((-1.0)*x14411*x14416))+((r20*x14418)));
evalcond[1]=(sj0+((x14408*x14413))+(((-1.0)*r02*x14415))+(((-1.0)*x14412*x14416)));
evalcond[2]=((((-1.0)*r12*x14415))+(((-1.0)*x14410*x14416))+((r10*x14418))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x14408))+(((-1.0)*x14411*x14415))+((cj1*cj2))+(((-1.0)*sj2*x14414))+((r20*x14417)));
evalcond[4]=(((r02*x14408))+((x14409*x14413))+(((-1.0)*cj0*x14419))+(((-1.0)*x14412*x14415))+(((-1.0)*cj0*cj2*x14414)));
evalcond[5]=((((-1.0)*sj0*x14419))+((r12*x14408))+(((-1.0)*cj2*sj0*x14414))+(((-1.0)*x14410*x14415))+((r10*x14417)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14420=((1.0)*gconst16);
CheckValue<IkReal> x14421 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x14420))+((cj0*gconst17*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14421.valid){
continue;
}
CheckValue<IkReal> x14422=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst17*r01))+(((-1.0)*r00*x14420)))),-1);
if(!x14422.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14421.value)+(((1.5707963267949)*(x14422.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14423=IKsin(j4);
IkReal x14424=IKcos(j4);
IkReal x14425=(gconst16*r11);
IkReal x14426=(gconst16*r21);
IkReal x14427=(gconst16*r01);
IkReal x14428=(gconst17*r00);
IkReal x14429=((1.0)*sj1);
IkReal x14430=((1.0)*x14424);
IkReal x14431=((1.0)*x14423);
IkReal x14432=(gconst17*x14424);
IkReal x14433=(gconst17*x14423);
IkReal x14434=((1.0)*cj1*sj2);
evalcond[0]=((((-1.0)*x14426*x14431))+((r20*x14433))+(((-1.0)*r22*x14430)));
evalcond[1]=(sj0+((x14423*x14428))+(((-1.0)*r02*x14430))+(((-1.0)*x14427*x14431)));
evalcond[2]=((((-1.0)*x14425*x14431))+((r10*x14433))+(((-1.0)*r12*x14430))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x14426*x14430))+((r20*x14432))+(((-1.0)*sj2*x14429))+((r22*x14423))+((cj1*cj2)));
evalcond[4]=((((-1.0)*cj0*x14434))+((x14424*x14428))+(((-1.0)*cj0*cj2*x14429))+((r02*x14423))+(((-1.0)*x14427*x14430)));
evalcond[5]=((((-1.0)*sj0*x14434))+(((-1.0)*x14425*x14430))+((r12*x14423))+(((-1.0)*cj2*sj0*x14429))+((r10*x14432)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14435=((-1.0)*r11);
CheckValue<IkReal> x14438 = IKatan2WithCheck(IkReal(x14435),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x14438.valid){
continue;
}
IkReal x14436=((1.0)*(x14438.value));
IkReal x14437=x14273;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14436)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14436)));
IkReal gconst16=(x14435*x14437);
IkReal gconst17=((1.0)*r10*x14437);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14439=gconst17*gconst17;
IkReal x14440=gconst16*gconst16;
IkReal x14441=(cj3*r01);
IkReal x14442=(r01*sj3);
IkReal x14443=(cj3*r00);
IkReal x14444=(r00*sj3);
IkReal x14445=(gconst16*gconst17);
IkReal x14446=((1.0)*r21);
IkReal x14447=(r21*x14440);
IkReal x14448=(r20*x14439);
CheckValue<IkReal> x14449 = IKatan2WithCheck(IkReal((((gconst17*r22*x14442))+((gconst16*r22*x14444)))),IkReal((((x14442*x14448))+(((-1.0)*x14442*x14445*x14446))+(((-1.0)*x14440*x14444*x14446))+((r20*x14444*x14445)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14449.valid){
continue;
}
CheckValue<IkReal> x14450=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x14441*x14445))+((x14441*x14447))+((cj3*r02*r22))+((x14443*x14448))+(((-1.0)*x14443*x14445*x14446)))),-1);
if(!x14450.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14449.value)+(((1.5707963267949)*(x14450.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14451=IKsin(j4);
IkReal x14452=IKcos(j4);
IkReal x14453=(cj2*sj1);
IkReal x14454=(cj1*sj2);
IkReal x14455=(cj3*gconst17);
IkReal x14456=((1.0)*r21);
IkReal x14457=(gconst16*r11);
IkReal x14458=(gconst16*r01);
IkReal x14459=(sj1*sj2);
IkReal x14460=(r20*sj3);
IkReal x14461=(gconst17*sj3);
IkReal x14462=(cj1*cj2);
IkReal x14463=(gconst16*r00);
IkReal x14464=((1.0)*cj3);
IkReal x14465=(gconst16*r10);
IkReal x14466=((1.0)*x14452);
IkReal x14467=((1.0)*x14451);
IkReal x14468=(gconst17*x14451);
IkReal x14469=(cj3*x14452);
IkReal x14470=(sj3*x14452);
IkReal x14471=(x14454+x14453);
IkReal x14472=(gconst16*r21*x14452);
evalcond[0]=((((-1.0)*gconst16*x14451*x14456))+(((-1.0)*r22*x14466))+((r20*x14468)));
evalcond[1]=((((-1.0)*x14457*x14467))+((r10*x14468))+(((-1.0)*r12*x14466)));
evalcond[2]=((-1.0)+((r00*x14468))+(((-1.0)*r02*x14466))+(((-1.0)*x14458*x14467)));
evalcond[3]=((((-1.0)*r00*x14455*x14466))+((r01*x14461))+((sj3*x14463))+((x14458*x14469))+(((-1.0)*r02*x14451*x14464)));
evalcond[4]=((((-1.0)*x14463*x14464))+(((-1.0)*r02*sj3*x14467))+(((-1.0)*r00*x14461*x14466))+(((-1.0)*r01*x14455))+((x14458*x14470)));
evalcond[5]=(((gconst16*r21*x14469))+((r21*x14461))+(((-1.0)*r20*x14455*x14466))+x14471+((gconst16*x14460))+(((-1.0)*r22*x14451*x14464)));
evalcond[6]=(((x14457*x14469))+((sj3*x14465))+(((-1.0)*r10*x14455*x14466))+(((-1.0)*x14462))+((r11*x14461))+(((-1.0)*r12*x14451*x14464))+x14459);
evalcond[7]=(((x14457*x14470))+(((-1.0)*x14464*x14465))+(((-1.0)*r12*sj3*x14467))+(((-1.0)*r10*x14461*x14466))+x14471+(((-1.0)*r11*x14455)));
evalcond[8]=(((gconst16*r21*x14470))+(((-1.0)*gconst16*r20*x14464))+(((-1.0)*r22*sj3*x14467))+(((-1.0)*x14459))+x14462+(((-1.0)*gconst17*x14460*x14466))+(((-1.0)*x14455*x14456)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14473=((1.0)*gconst16);
CheckValue<IkReal> x14474=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst17*r21))+(((-1.0)*r20*x14473)))),-1);
if(!x14474.valid){
continue;
}
CheckValue<IkReal> x14475 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst17*r10))+(((-1.0)*r11*x14473)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14475.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14474.value)))+(x14475.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14476=IKsin(j4);
IkReal x14477=IKcos(j4);
IkReal x14478=(cj2*sj1);
IkReal x14479=(cj1*sj2);
IkReal x14480=(cj3*gconst17);
IkReal x14481=((1.0)*r21);
IkReal x14482=(gconst16*r11);
IkReal x14483=(gconst16*r01);
IkReal x14484=(sj1*sj2);
IkReal x14485=(r20*sj3);
IkReal x14486=(gconst17*sj3);
IkReal x14487=(cj1*cj2);
IkReal x14488=(gconst16*r00);
IkReal x14489=((1.0)*cj3);
IkReal x14490=(gconst16*r10);
IkReal x14491=((1.0)*x14477);
IkReal x14492=((1.0)*x14476);
IkReal x14493=(gconst17*x14476);
IkReal x14494=(cj3*x14477);
IkReal x14495=(sj3*x14477);
IkReal x14496=(x14479+x14478);
IkReal x14497=(gconst16*r21*x14477);
evalcond[0]=((((-1.0)*r22*x14491))+(((-1.0)*gconst16*x14476*x14481))+((r20*x14493)));
evalcond[1]=(((r10*x14493))+(((-1.0)*r12*x14491))+(((-1.0)*x14482*x14492)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14491))+(((-1.0)*x14483*x14492))+((r00*x14493)));
evalcond[3]=((((-1.0)*r02*x14476*x14489))+((r01*x14486))+(((-1.0)*r00*x14480*x14491))+((x14483*x14494))+((sj3*x14488)));
evalcond[4]=((((-1.0)*r02*sj3*x14492))+(((-1.0)*x14488*x14489))+(((-1.0)*r01*x14480))+((x14483*x14495))+(((-1.0)*r00*x14486*x14491)));
evalcond[5]=(((r21*x14486))+((gconst16*x14485))+(((-1.0)*r22*x14476*x14489))+x14496+(((-1.0)*r20*x14480*x14491))+((gconst16*r21*x14494)));
evalcond[6]=(((r11*x14486))+((sj3*x14490))+(((-1.0)*x14487))+x14484+(((-1.0)*r12*x14476*x14489))+((x14482*x14494))+(((-1.0)*r10*x14480*x14491)));
evalcond[7]=((((-1.0)*r10*x14486*x14491))+(((-1.0)*r11*x14480))+x14496+(((-1.0)*r12*sj3*x14492))+(((-1.0)*x14489*x14490))+((x14482*x14495)));
evalcond[8]=((((-1.0)*x14480*x14481))+(((-1.0)*gconst17*x14485*x14491))+(((-1.0)*x14484))+(((-1.0)*gconst16*r20*x14489))+x14487+((gconst16*r21*x14495))+(((-1.0)*r22*sj3*x14492)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14498=((-1.0)*r11);
IkReal x14499=((-1.0)*r10);
CheckValue<IkReal> x14501 = IKatan2WithCheck(IkReal(x14498),IkReal(x14499),IKFAST_ATAN2_MAGTHRESH);
if(!x14501.valid){
continue;
}
IkReal x14500=((1.0)*(x14501.value));
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14500)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x14499);
rxp1_1=(px*r21);
rxp1_2=(px*x14498);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14500)));
IkReal gconst16=x14498;
IkReal gconst17=((1.0)*r10);
j4eval[0]=1.0;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14502=((-1.0)*r11);
IkReal x14503=((-1.0)*r10);
CheckValue<IkReal> x14505 = IKatan2WithCheck(IkReal(x14502),IkReal(x14503),IKFAST_ATAN2_MAGTHRESH);
if(!x14505.valid){
continue;
}
IkReal x14504=((1.0)*(x14505.value));
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14504)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x14503);
rxp1_1=(px*r21);
rxp1_2=(px*x14502);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14504)));
IkReal gconst16=x14502;
IkReal gconst17=((1.0)*r10);
IkReal x14506=((1.0)*cj3);
j4eval[0]=1.0;
j4eval[1]=((((-1.0)*r11*r21*x14506))+(((-1.0)*r10*r20*x14506)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14507=((-1.0)*r11);
IkReal x14508=((-1.0)*r10);
CheckValue<IkReal> x14510 = IKatan2WithCheck(IkReal(x14507),IkReal(x14508),IKFAST_ATAN2_MAGTHRESH);
if(!x14510.valid){
continue;
}
IkReal x14509=((1.0)*(x14510.value));
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14509)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x14508);
rxp1_1=(px*r21);
rxp1_2=(px*x14507);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14509)));
IkReal gconst16=x14507;
IkReal gconst17=((1.0)*r10);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14512=IKPowWithIntegerCheck(r02,-1);
if(!x14512.valid){
continue;
}
IkReal x14511=x14512.value;
CheckValue<IkReal> x14513=IKPowWithIntegerCheck(cj3,-1);
if(!x14513.valid){
continue;
}
if( IKabs((x14511*(x14513.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj0*x14511)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x14511*(x14513.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr((sj0*x14511))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x14511*(x14513.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), (sj0*x14511));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14514=IKsin(j4);
IkReal x14515=IKcos(j4);
IkReal x14516=(gconst17*r21);
IkReal x14517=((1.0)*cj3);
IkReal x14518=(cj1*cj2);
IkReal x14519=((1.0)*sj3);
IkReal x14520=((1.0)*sj1);
IkReal x14521=(gconst16*sj3);
IkReal x14522=(sj0*sj2);
IkReal x14523=(gconst17*r20);
IkReal x14524=(gconst17*r11);
IkReal x14525=(cj1*sj2);
IkReal x14526=((1.0)*cj0);
IkReal x14527=(r02*x14514);
IkReal x14528=(r11*x14515);
IkReal x14529=(gconst16*r21*x14515);
IkReal x14530=((1.0)*gconst16*x14514);
IkReal x14531=(gconst17*r10*x14515);
evalcond[0]=(sj0+(((-1.0)*r02*x14515)));
evalcond[1]=((((-1.0)*r21*x14530))+((x14514*x14523)));
evalcond[2]=((((-1.0)*r11*x14530))+((gconst17*r10*x14514))+(((-1.0)*x14526)));
evalcond[3]=((((-1.0)*x14517*x14527))+((cj0*x14518))+(((-1.0)*cj0*sj2*x14520)));
evalcond[4]=((((-1.0)*cj0*cj2*x14520))+(((-1.0)*x14525*x14526))+(((-1.0)*x14519*x14527)));
evalcond[5]=(((cj2*sj1))+((sj3*x14516))+((r20*x14521))+((cj3*x14529))+x14525+(((-1.0)*x14515*x14517*x14523)));
evalcond[6]=((((-1.0)*x14515*x14519*x14523))+(((-1.0)*gconst16*r20*x14517))+((r21*x14515*x14521))+x14518+(((-1.0)*x14516*x14517))+(((-1.0)*sj2*x14520)));
evalcond[7]=((((-1.0)*x14520*x14522))+((sj3*x14524))+((cj3*gconst16*x14528))+(((-1.0)*x14517*x14531))+((sj0*x14518))+((r10*x14521)));
evalcond[8]=((((-1.0)*x14517*x14524))+((x14521*x14528))+(((-1.0)*cj1*x14522))+(((-1.0)*cj2*sj0*x14520))+(((-1.0)*x14519*x14531))+(((-1.0)*gconst16*r10*x14517)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14532=((1.0)*gconst17);
IkReal x14533=((1.0)*gconst16);
CheckValue<IkReal> x14534=IKPowWithIntegerCheck(((((-1.0)*r11*x14533))+((gconst17*r10))),-1);
if(!x14534.valid){
continue;
}
CheckValue<IkReal> x14535=IKPowWithIntegerCheck((((cj3*gconst16*r21))+(((-1.0)*cj3*r20*x14532))),-1);
if(!x14535.valid){
continue;
}
if( IKabs((cj0*(x14534.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14535.value)*(((((-1.0)*r21*sj3*x14532))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*sj3*x14533)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj0*(x14534.value)))+IKsqr(((x14535.value)*(((((-1.0)*r21*sj3*x14532))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*sj3*x14533))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((cj0*(x14534.value)), ((x14535.value)*(((((-1.0)*r21*sj3*x14532))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*sj3*x14533))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14536=IKsin(j4);
IkReal x14537=IKcos(j4);
IkReal x14538=(gconst17*r21);
IkReal x14539=((1.0)*cj3);
IkReal x14540=(cj1*cj2);
IkReal x14541=((1.0)*sj3);
IkReal x14542=((1.0)*sj1);
IkReal x14543=(gconst16*sj3);
IkReal x14544=(sj0*sj2);
IkReal x14545=(gconst17*r20);
IkReal x14546=(gconst17*r11);
IkReal x14547=(cj1*sj2);
IkReal x14548=((1.0)*cj0);
IkReal x14549=(r02*x14536);
IkReal x14550=(r11*x14537);
IkReal x14551=(gconst16*r21*x14537);
IkReal x14552=((1.0)*gconst16*x14536);
IkReal x14553=(gconst17*r10*x14537);
evalcond[0]=((((-1.0)*r02*x14537))+sj0);
evalcond[1]=((((-1.0)*r21*x14552))+((x14536*x14545)));
evalcond[2]=((((-1.0)*r11*x14552))+((gconst17*r10*x14536))+(((-1.0)*x14548)));
evalcond[3]=((((-1.0)*x14539*x14549))+((cj0*x14540))+(((-1.0)*cj0*sj2*x14542)));
evalcond[4]=((((-1.0)*x14547*x14548))+(((-1.0)*cj0*cj2*x14542))+(((-1.0)*x14541*x14549)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*x14537*x14539*x14545))+x14547+((sj3*x14538))+((r20*x14543))+((cj3*x14551)));
evalcond[6]=(((r21*x14537*x14543))+(((-1.0)*sj2*x14542))+(((-1.0)*x14538*x14539))+(((-1.0)*gconst16*r20*x14539))+x14540+(((-1.0)*x14537*x14541*x14545)));
evalcond[7]=(((r10*x14543))+((sj0*x14540))+(((-1.0)*x14542*x14544))+((sj3*x14546))+(((-1.0)*x14539*x14553))+((cj3*gconst16*x14550)));
evalcond[8]=(((x14543*x14550))+(((-1.0)*x14539*x14546))+(((-1.0)*gconst16*r10*x14539))+(((-1.0)*cj1*x14544))+(((-1.0)*cj2*sj0*x14542))+(((-1.0)*x14541*x14553)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14554=IKPowWithIntegerCheck(((((-1.0)*gconst16*r11))+((gconst17*r10))),-1);
if(!x14554.valid){
continue;
}
CheckValue<IkReal> x14555=IKPowWithIntegerCheck(r02,-1);
if(!x14555.valid){
continue;
}
if( IKabs((cj0*(x14554.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj0*(x14555.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj0*(x14554.value)))+IKsqr((sj0*(x14555.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((cj0*(x14554.value)), (sj0*(x14555.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14556=IKsin(j4);
IkReal x14557=IKcos(j4);
IkReal x14558=(gconst17*r21);
IkReal x14559=((1.0)*cj3);
IkReal x14560=(cj1*cj2);
IkReal x14561=((1.0)*sj3);
IkReal x14562=((1.0)*sj1);
IkReal x14563=(gconst16*sj3);
IkReal x14564=(sj0*sj2);
IkReal x14565=(gconst17*r20);
IkReal x14566=(gconst17*r11);
IkReal x14567=(cj1*sj2);
IkReal x14568=((1.0)*cj0);
IkReal x14569=(r02*x14556);
IkReal x14570=(r11*x14557);
IkReal x14571=(gconst16*r21*x14557);
IkReal x14572=((1.0)*gconst16*x14556);
IkReal x14573=(gconst17*r10*x14557);
evalcond[0]=(sj0+(((-1.0)*r02*x14557)));
evalcond[1]=((((-1.0)*r21*x14572))+((x14556*x14565)));
evalcond[2]=(((gconst17*r10*x14556))+(((-1.0)*x14568))+(((-1.0)*r11*x14572)));
evalcond[3]=(((cj0*x14560))+(((-1.0)*x14559*x14569))+(((-1.0)*cj0*sj2*x14562)));
evalcond[4]=((((-1.0)*cj0*cj2*x14562))+(((-1.0)*x14561*x14569))+(((-1.0)*x14567*x14568)));
evalcond[5]=(((sj3*x14558))+((cj2*sj1))+((r20*x14563))+x14567+((cj3*x14571))+(((-1.0)*x14557*x14559*x14565)));
evalcond[6]=(((r21*x14557*x14563))+(((-1.0)*x14558*x14559))+x14560+(((-1.0)*x14557*x14561*x14565))+(((-1.0)*sj2*x14562))+(((-1.0)*gconst16*r20*x14559)));
evalcond[7]=((((-1.0)*x14562*x14564))+(((-1.0)*x14559*x14573))+((r10*x14563))+((cj3*gconst16*x14570))+((sj0*x14560))+((sj3*x14566)));
evalcond[8]=((((-1.0)*cj1*x14564))+(((-1.0)*gconst16*r10*x14559))+(((-1.0)*x14559*x14566))+(((-1.0)*cj2*sj0*x14562))+((x14563*x14570))+(((-1.0)*x14561*x14573)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14574=((-1.0)*r11);
CheckValue<IkReal> x14577 = IKatan2WithCheck(IkReal(x14574),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x14577.valid){
continue;
}
IkReal x14575=((1.0)*(x14577.value));
IkReal x14576=x14273;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14575)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14575)));
IkReal gconst16=(x14574*x14576);
IkReal gconst17=((1.0)*r10*x14576);
IkReal x14578=r12*r12;
IkReal x14579=(cj0*r02);
IkReal x14580=x14273;
IkReal x14581=(sj0*x14580);
j4eval[0]=((IKabs((x14579+((r12*sj0)))))+(IKabs((((r12*x14579*x14580))+(((-1.0)*x14581))+((x14578*x14581))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14582=(sj1*sj2);
IkReal x14583=((1.0)*sj3);
IkReal x14584=(gconst17*r20);
IkReal x14585=(cj3*r02);
IkReal x14586=(gconst16*r20);
IkReal x14587=(gconst17*r21);
IkReal x14588=(gconst16*sj3);
IkReal x14589=((1.0)*cj1*cj2);
CheckValue<IkReal> x14590=IKPowWithIntegerCheck((((r00*x14587*x14588))+(((-1.0)*r01*r21*x14583*(gconst16*gconst16)))+((r01*x14584*x14588))+(((-1.0)*gconst17*r00*x14583*x14584))),-1);
if(!x14590.valid){
continue;
}
CheckValue<IkReal> x14591=IKPowWithIntegerCheck(((((-1.0)*x14583*x14584))+((r21*x14588))),-1);
if(!x14591.valid){
continue;
}
if( IKabs(((x14590.value)*((((r02*x14582))+((sj0*sj3*x14584))+(((-1.0)*r02*x14589))+(((-1.0)*gconst16*r21*sj0*x14583))+((x14585*x14586))+((x14585*x14587)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14591.value)*((((cj3*x14587))+((cj3*x14586))+(((-1.0)*x14589))+x14582)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14590.value)*((((r02*x14582))+((sj0*sj3*x14584))+(((-1.0)*r02*x14589))+(((-1.0)*gconst16*r21*sj0*x14583))+((x14585*x14586))+((x14585*x14587))))))+IKsqr(((x14591.value)*((((cj3*x14587))+((cj3*x14586))+(((-1.0)*x14589))+x14582))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14590.value)*((((r02*x14582))+((sj0*sj3*x14584))+(((-1.0)*r02*x14589))+(((-1.0)*gconst16*r21*sj0*x14583))+((x14585*x14586))+((x14585*x14587))))), ((x14591.value)*((((cj3*x14587))+((cj3*x14586))+(((-1.0)*x14589))+x14582))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14592=IKsin(j4);
IkReal x14593=IKcos(j4);
IkReal x14594=(gconst17*sj3);
IkReal x14595=((1.0)*sj1);
IkReal x14596=(cj2*sj0);
IkReal x14597=(cj0*cj2);
IkReal x14598=(gconst16*sj3);
IkReal x14599=(cj1*sj2);
IkReal x14600=((1.0)*cj0);
IkReal x14601=((1.0)*cj3*gconst17);
IkReal x14602=(r00*x14593);
IkReal x14603=((1.0)*x14593);
IkReal x14604=(gconst17*x14592);
IkReal x14605=(r11*x14593);
IkReal x14606=((1.0)*cj3*gconst16);
IkReal x14607=(gconst16*r21*x14593);
IkReal x14608=((1.0)*gconst16*x14592);
IkReal x14609=(gconst16*r01*x14593);
IkReal x14610=((1.0)*cj3*x14592);
IkReal x14611=((1.0)*sj3*x14592);
evalcond[0]=((((-1.0)*r21*x14608))+((r20*x14604)));
evalcond[1]=(sj0+((r00*x14604))+(((-1.0)*r01*x14608))+(((-1.0)*r02*x14603)));
evalcond[2]=(((r10*x14604))+(((-1.0)*r11*x14608))+(((-1.0)*r12*x14603))+(((-1.0)*x14600)));
evalcond[3]=(((r20*x14598))+((cj2*sj1))+(((-1.0)*r20*x14593*x14601))+((r21*x14594))+x14599+((cj3*x14607)));
evalcond[4]=((((-1.0)*r21*x14601))+(((-1.0)*r20*x14606))+(((-1.0)*sj2*x14595))+((r21*x14593*x14598))+((cj1*cj2))+(((-1.0)*r20*x14594*x14603)));
evalcond[5]=((((-1.0)*cj0*sj2*x14595))+((cj1*x14597))+((cj3*x14609))+((r01*x14594))+(((-1.0)*r02*x14610))+(((-1.0)*x14601*x14602))+((r00*x14598)));
evalcond[6]=(((cj3*gconst16*x14605))+(((-1.0)*sj0*sj2*x14595))+((cj1*x14596))+(((-1.0)*r12*x14610))+((r10*x14598))+(((-1.0)*r10*x14593*x14601))+((r11*x14594)));
evalcond[7]=((((-1.0)*x14599*x14600))+(((-1.0)*x14594*x14602))+(((-1.0)*x14595*x14597))+((r01*x14593*x14598))+(((-1.0)*r01*x14601))+(((-1.0)*r00*x14606))+(((-1.0)*r02*x14611)));
evalcond[8]=((((-1.0)*x14595*x14596))+(((-1.0)*r10*x14606))+(((-1.0)*r11*x14601))+(((-1.0)*r12*x14611))+((x14598*x14605))+(((-1.0)*sj0*x14599))+(((-1.0)*r10*x14594*x14603)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14612=((1.0)*gconst16);
CheckValue<IkReal> x14613=IKPowWithIntegerCheck(IKsign((((gconst17*r21))+((gconst16*r20)))),-1);
if(!x14613.valid){
continue;
}
CheckValue<IkReal> x14614 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x14612))+((cj0*gconst17*r00))+((gconst17*r10*sj0))+(((-1.0)*r11*sj0*x14612)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14614.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14613.value)))+(x14614.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14615=IKsin(j4);
IkReal x14616=IKcos(j4);
IkReal x14617=(gconst17*sj3);
IkReal x14618=((1.0)*sj1);
IkReal x14619=(cj2*sj0);
IkReal x14620=(cj0*cj2);
IkReal x14621=(gconst16*sj3);
IkReal x14622=(cj1*sj2);
IkReal x14623=((1.0)*cj0);
IkReal x14624=((1.0)*cj3*gconst17);
IkReal x14625=(r00*x14616);
IkReal x14626=((1.0)*x14616);
IkReal x14627=(gconst17*x14615);
IkReal x14628=(r11*x14616);
IkReal x14629=((1.0)*cj3*gconst16);
IkReal x14630=(gconst16*r21*x14616);
IkReal x14631=((1.0)*gconst16*x14615);
IkReal x14632=(gconst16*r01*x14616);
IkReal x14633=((1.0)*cj3*x14615);
IkReal x14634=((1.0)*sj3*x14615);
evalcond[0]=((((-1.0)*r21*x14631))+((r20*x14627)));
evalcond[1]=(sj0+(((-1.0)*r02*x14626))+(((-1.0)*r01*x14631))+((r00*x14627)));
evalcond[2]=((((-1.0)*x14623))+((r10*x14627))+(((-1.0)*r12*x14626))+(((-1.0)*r11*x14631)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r20*x14616*x14624))+((r20*x14621))+((r21*x14617))+((cj3*x14630))+x14622);
evalcond[4]=((((-1.0)*sj2*x14618))+(((-1.0)*r20*x14617*x14626))+((r21*x14616*x14621))+(((-1.0)*r20*x14629))+(((-1.0)*r21*x14624))+((cj1*cj2)));
evalcond[5]=(((cj1*x14620))+((cj3*x14632))+((r01*x14617))+((r00*x14621))+(((-1.0)*cj0*sj2*x14618))+(((-1.0)*x14624*x14625))+(((-1.0)*r02*x14633)));
evalcond[6]=(((cj1*x14619))+(((-1.0)*r10*x14616*x14624))+(((-1.0)*sj0*sj2*x14618))+((r10*x14621))+((cj3*gconst16*x14628))+((r11*x14617))+(((-1.0)*r12*x14633)));
evalcond[7]=((((-1.0)*x14618*x14620))+(((-1.0)*r00*x14629))+(((-1.0)*x14622*x14623))+(((-1.0)*r01*x14624))+(((-1.0)*x14617*x14625))+((r01*x14616*x14621))+(((-1.0)*r02*x14634)));
evalcond[8]=((((-1.0)*r10*x14617*x14626))+(((-1.0)*r10*x14629))+(((-1.0)*sj0*x14622))+(((-1.0)*r11*x14624))+((x14621*x14628))+(((-1.0)*x14618*x14619))+(((-1.0)*r12*x14634)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14635=gconst17*gconst17;
IkReal x14636=r20*r20;
IkReal x14637=r21*r21;
IkReal x14638=gconst16*gconst16;
IkReal x14639=(cj2*sj1);
IkReal x14640=(gconst16*r21);
IkReal x14641=(r20*sj3);
IkReal x14642=(gconst17*r20);
IkReal x14643=(cj1*sj2);
IkReal x14644=(gconst17*sj3);
CheckValue<IkReal> x14645 = IKatan2WithCheck(IkReal((((r21*r22*x14644))+((r22*x14639))+((r22*x14643))+((gconst16*r22*x14641)))),IkReal(((((-1.0)*x14639*x14640))+((x14642*x14643))+((gconst16*x14636*x14644))+((x14639*x14642))+(((-1.0)*x14640*x14643))+(((-1.0)*r21*x14638*x14641))+(((-1.0)*gconst16*x14637*x14644))+((r21*x14635*x14641)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14645.valid){
continue;
}
CheckValue<IkReal> x14646=IKPowWithIntegerCheck(IKsign(((((-2.0)*cj3*x14640*x14642))+((cj3*x14637*x14638))+((cj3*(r22*r22)))+((cj3*x14635*x14636)))),-1);
if(!x14646.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14645.value)+(((1.5707963267949)*(x14646.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14647=IKsin(j4);
IkReal x14648=IKcos(j4);
IkReal x14649=(cj3*gconst17);
IkReal x14650=((1.0)*r21);
IkReal x14651=(gconst17*sj3);
IkReal x14652=((1.0)*sj1);
IkReal x14653=(cj2*sj0);
IkReal x14654=((1.0)*cj3);
IkReal x14655=(gconst16*r00);
IkReal x14656=(cj0*cj2);
IkReal x14657=(gconst16*sj3);
IkReal x14658=(cj1*sj2);
IkReal x14659=((1.0)*cj0);
IkReal x14660=((1.0)*sj3);
IkReal x14661=((1.0)*x14648);
IkReal x14662=(gconst17*x14647);
IkReal x14663=(r22*x14647);
IkReal x14664=(r02*x14647);
IkReal x14665=(r11*x14648);
IkReal x14666=(r12*x14647);
IkReal x14667=(gconst16*r21*x14648);
IkReal x14668=((1.0)*gconst16*x14647);
IkReal x14669=(gconst16*r01*x14648);
evalcond[0]=((((-1.0)*r22*x14661))+(((-1.0)*gconst16*x14647*x14650))+((r20*x14662)));
evalcond[1]=(sj0+((r00*x14662))+(((-1.0)*r01*x14668))+(((-1.0)*r02*x14661)));
evalcond[2]=(((r10*x14662))+(((-1.0)*r12*x14661))+(((-1.0)*r11*x14668))+(((-1.0)*x14659)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x14654*x14663))+((cj3*x14667))+(((-1.0)*r20*x14649*x14661))+x14658+((r21*x14651))+((r20*x14657)));
evalcond[4]=(((r21*x14648*x14657))+(((-1.0)*x14660*x14663))+(((-1.0)*r20*x14651*x14661))+(((-1.0)*x14649*x14650))+((cj1*cj2))+(((-1.0)*gconst16*r20*x14654))+(((-1.0)*sj2*x14652)));
evalcond[5]=((((-1.0)*x14654*x14664))+((r01*x14651))+((sj3*x14655))+((cj3*x14669))+(((-1.0)*r00*x14649*x14661))+((cj1*x14656))+(((-1.0)*cj0*sj2*x14652)));
evalcond[6]=(((r10*x14657))+(((-1.0)*sj0*sj2*x14652))+(((-1.0)*x14654*x14666))+(((-1.0)*r10*x14649*x14661))+((cj1*x14653))+((cj3*gconst16*x14665))+((r11*x14651)));
evalcond[7]=((((-1.0)*x14660*x14664))+(((-1.0)*x14654*x14655))+(((-1.0)*r01*x14649))+(((-1.0)*x14658*x14659))+(((-1.0)*r00*x14651*x14661))+((r01*x14648*x14657))+(((-1.0)*x14652*x14656)));
evalcond[8]=((((-1.0)*r11*x14649))+(((-1.0)*x14660*x14666))+((x14657*x14665))+(((-1.0)*r10*x14651*x14661))+(((-1.0)*gconst16*r10*x14654))+(((-1.0)*sj0*x14658))+(((-1.0)*x14652*x14653)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14670=((1.0)*gconst16);
CheckValue<IkReal> x14671 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x14670))+((cj0*gconst17*r00))+((gconst17*r10*sj0))+(((-1.0)*r11*sj0*x14670)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14671.valid){
continue;
}
CheckValue<IkReal> x14672=IKPowWithIntegerCheck(IKsign((((gconst17*r21))+((gconst16*r20)))),-1);
if(!x14672.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14671.value)+(((1.5707963267949)*(x14672.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14673=IKsin(j4);
IkReal x14674=IKcos(j4);
IkReal x14675=(cj3*gconst17);
IkReal x14676=((1.0)*r21);
IkReal x14677=(gconst17*sj3);
IkReal x14678=((1.0)*sj1);
IkReal x14679=(cj2*sj0);
IkReal x14680=((1.0)*cj3);
IkReal x14681=(gconst16*r00);
IkReal x14682=(cj0*cj2);
IkReal x14683=(gconst16*sj3);
IkReal x14684=(cj1*sj2);
IkReal x14685=((1.0)*cj0);
IkReal x14686=((1.0)*sj3);
IkReal x14687=((1.0)*x14674);
IkReal x14688=(gconst17*x14673);
IkReal x14689=(r22*x14673);
IkReal x14690=(r02*x14673);
IkReal x14691=(r11*x14674);
IkReal x14692=(r12*x14673);
IkReal x14693=(gconst16*r21*x14674);
IkReal x14694=((1.0)*gconst16*x14673);
IkReal x14695=(gconst16*r01*x14674);
evalcond[0]=(((r20*x14688))+(((-1.0)*r22*x14687))+(((-1.0)*gconst16*x14673*x14676)));
evalcond[1]=(((r00*x14688))+sj0+(((-1.0)*r01*x14694))+(((-1.0)*r02*x14687)));
evalcond[2]=((((-1.0)*x14685))+((r10*x14688))+(((-1.0)*r12*x14687))+(((-1.0)*r11*x14694)));
evalcond[3]=(((cj2*sj1))+((cj3*x14693))+((r21*x14677))+(((-1.0)*r20*x14675*x14687))+(((-1.0)*x14680*x14689))+((r20*x14683))+x14684);
evalcond[4]=((((-1.0)*sj2*x14678))+(((-1.0)*x14686*x14689))+(((-1.0)*x14675*x14676))+(((-1.0)*r20*x14677*x14687))+(((-1.0)*gconst16*r20*x14680))+((cj1*cj2))+((r21*x14674*x14683)));
evalcond[5]=((((-1.0)*r00*x14675*x14687))+((cj3*x14695))+((sj3*x14681))+(((-1.0)*x14680*x14690))+((r01*x14677))+((cj1*x14682))+(((-1.0)*cj0*sj2*x14678)));
evalcond[6]=((((-1.0)*sj0*sj2*x14678))+(((-1.0)*r10*x14675*x14687))+(((-1.0)*x14680*x14692))+((cj3*gconst16*x14691))+((r10*x14683))+((r11*x14677))+((cj1*x14679)));
evalcond[7]=((((-1.0)*x14678*x14682))+(((-1.0)*r00*x14677*x14687))+(((-1.0)*x14684*x14685))+(((-1.0)*x14686*x14690))+(((-1.0)*x14680*x14681))+(((-1.0)*r01*x14675))+((r01*x14674*x14683)));
evalcond[8]=((((-1.0)*r10*x14677*x14687))+(((-1.0)*x14686*x14692))+(((-1.0)*gconst16*r10*x14680))+(((-1.0)*x14678*x14679))+(((-1.0)*r11*x14675))+((x14683*x14691))+(((-1.0)*sj0*x14684)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14696=((1.0)*gconst16);
CheckValue<IkReal> x14697 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x14696))+((cj0*gconst17*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14697.valid){
continue;
}
CheckValue<IkReal> x14698=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst17*r01))+(((-1.0)*r00*x14696)))),-1);
if(!x14698.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14697.value)+(((1.5707963267949)*(x14698.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14699=IKsin(j4);
IkReal x14700=IKcos(j4);
IkReal x14701=(cj3*gconst17);
IkReal x14702=((1.0)*r21);
IkReal x14703=(gconst17*sj3);
IkReal x14704=((1.0)*sj1);
IkReal x14705=(cj2*sj0);
IkReal x14706=((1.0)*cj3);
IkReal x14707=(gconst16*r00);
IkReal x14708=(cj0*cj2);
IkReal x14709=(gconst16*sj3);
IkReal x14710=(cj1*sj2);
IkReal x14711=((1.0)*cj0);
IkReal x14712=((1.0)*sj3);
IkReal x14713=((1.0)*x14700);
IkReal x14714=(gconst17*x14699);
IkReal x14715=(r22*x14699);
IkReal x14716=(r02*x14699);
IkReal x14717=(r11*x14700);
IkReal x14718=(r12*x14699);
IkReal x14719=(gconst16*r21*x14700);
IkReal x14720=((1.0)*gconst16*x14699);
IkReal x14721=(gconst16*r01*x14700);
evalcond[0]=(((r20*x14714))+(((-1.0)*r22*x14713))+(((-1.0)*gconst16*x14699*x14702)));
evalcond[1]=(sj0+(((-1.0)*r01*x14720))+(((-1.0)*r02*x14713))+((r00*x14714)));
evalcond[2]=((((-1.0)*r11*x14720))+((r10*x14714))+(((-1.0)*x14711))+(((-1.0)*r12*x14713)));
evalcond[3]=(((cj2*sj1))+((cj3*x14719))+(((-1.0)*x14706*x14715))+((r20*x14709))+((r21*x14703))+x14710+(((-1.0)*r20*x14701*x14713)));
evalcond[4]=((((-1.0)*r20*x14703*x14713))+(((-1.0)*gconst16*r20*x14706))+(((-1.0)*sj2*x14704))+((r21*x14700*x14709))+(((-1.0)*x14712*x14715))+((cj1*cj2))+(((-1.0)*x14701*x14702)));
evalcond[5]=(((r01*x14703))+(((-1.0)*cj0*sj2*x14704))+(((-1.0)*x14706*x14716))+((cj1*x14708))+((cj3*x14721))+(((-1.0)*r00*x14701*x14713))+((sj3*x14707)));
evalcond[6]=((((-1.0)*x14706*x14718))+(((-1.0)*sj0*sj2*x14704))+((cj3*gconst16*x14717))+((cj1*x14705))+((r11*x14703))+(((-1.0)*r10*x14701*x14713))+((r10*x14709)));
evalcond[7]=((((-1.0)*x14706*x14707))+(((-1.0)*r01*x14701))+(((-1.0)*r00*x14703*x14713))+(((-1.0)*x14704*x14708))+((r01*x14700*x14709))+(((-1.0)*x14712*x14716))+(((-1.0)*x14710*x14711)));
evalcond[8]=((((-1.0)*sj0*x14710))+(((-1.0)*x14704*x14705))+(((-1.0)*gconst16*r10*x14706))+(((-1.0)*r10*x14703*x14713))+(((-1.0)*r11*x14701))+(((-1.0)*x14712*x14718))+((x14709*x14717)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x14722=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14722;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x14722);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x14723=((1.0)*sj5);
IkReal x14724=((((-1.0)*r00*x14723))+(((-1.0)*cj5*r01)));
j4eval[0]=x14724;
j4eval[1]=((IKabs((((cj5*r20))+(((-1.0)*r21*x14723)))))+(IKabs(r22)));
j4eval[2]=IKsign(x14724);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=1.0;
j0=0;
IkReal x14725=cj5*cj5;
IkReal x14726=(cj3*r11*r21);
IkReal x14727=((1.0)*cj3*cj5*sj5);
IkReal x14728=(((cj3*r12*r22))+(((-1.0)*r10*r21*x14727))+(((-1.0)*r11*r20*x14727))+((cj3*r10*r20*x14725))+x14726+(((-1.0)*x14725*x14726)));
j4eval[0]=x14728;
j4eval[1]=IKsign(x14728);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14729=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14729;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x14729);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14730=((1.0)*sj5);
IkReal x14731=((((-1.0)*r00*x14730))+(((-1.0)*cj5*r01)));
j4eval[0]=x14731;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x14730))))));
j4eval[2]=IKsign(x14731);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14732=cj5*cj5;
IkReal x14733=r11*r11;
IkReal x14734=(cj5*r10);
IkReal x14735=(r11*sj5);
IkReal x14736=((((-1.0)*x14732*(r10*r10)))+(((-1.0)*x14733))+(((2.0)*x14734*x14735))+((x14732*x14733))+(((-1.0)*(r12*r12))));
j4eval[0]=x14736;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x14734))+x14735))));
j4eval[2]=IKsign(x14736);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14737=cj5*cj5;
IkReal x14738=r11*r11;
IkReal x14739=(cj5*r10);
IkReal x14740=(r11*sj5);
CheckValue<IkReal> x14741 = IKatan2WithCheck(IkReal(((((-1.0)*x14739))+x14740)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x14741.valid){
continue;
}
CheckValue<IkReal> x14742=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14738))+(((-1.0)*x14737*(r10*r10)))+(((-1.0)*(r12*r12)))+(((2.0)*x14739*x14740))+((x14737*x14738)))),-1);
if(!x14742.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14741.value)+(((1.5707963267949)*(x14742.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14743=IKsin(j4);
IkReal x14744=IKcos(j4);
IkReal x14745=(cj5*r00);
IkReal x14746=((1.0)*sj2);
IkReal x14747=((1.0)*x14744);
IkReal x14748=(sj5*x14744);
IkReal x14749=(cj5*x14743);
IkReal x14750=((1.0)*x14743);
IkReal x14751=(sj5*x14750);
evalcond[0]=((((-1.0)*r22*x14747))+((r20*x14749))+(((-1.0)*r21*x14751)));
evalcond[1]=((((-1.0)*r01*x14751))+((x14743*x14745))+(((-1.0)*r02*x14747)));
evalcond[2]=(((r11*x14748))+(((-1.0)*r12*x14750))+(((-1.0)*cj5*r10*x14747)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x14751))+((r10*x14749))+(((-1.0)*r12*x14747)));
evalcond[4]=((((-1.0)*cj5*r20*x14747))+((r21*x14748))+(((-1.0)*sj1*x14746))+((cj1*cj2))+(((-1.0)*r22*x14750)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r01*x14748))+(((-1.0)*r02*x14750))+(((-1.0)*x14745*x14747))+(((-1.0)*cj1*x14746)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14752=((1.0)*sj5);
CheckValue<IkReal> x14753=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x14752))+(((-1.0)*cj5*r01)))),-1);
if(!x14753.valid){
continue;
}
CheckValue<IkReal> x14754 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x14752)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14754.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14753.value)))+(x14754.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14755=IKsin(j4);
IkReal x14756=IKcos(j4);
IkReal x14757=(cj5*r00);
IkReal x14758=((1.0)*sj2);
IkReal x14759=((1.0)*x14756);
IkReal x14760=(sj5*x14756);
IkReal x14761=(cj5*x14755);
IkReal x14762=((1.0)*x14755);
IkReal x14763=(sj5*x14762);
evalcond[0]=(((r20*x14761))+(((-1.0)*r21*x14763))+(((-1.0)*r22*x14759)));
evalcond[1]=((((-1.0)*r01*x14763))+((x14755*x14757))+(((-1.0)*r02*x14759)));
evalcond[2]=((((-1.0)*r12*x14762))+((r11*x14760))+(((-1.0)*cj5*r10*x14759)));
evalcond[3]=((-1.0)+((r10*x14761))+(((-1.0)*r12*x14759))+(((-1.0)*r11*x14763)));
evalcond[4]=((((-1.0)*sj1*x14758))+(((-1.0)*r22*x14762))+(((-1.0)*cj5*r20*x14759))+((r21*x14760))+((cj1*cj2)));
evalcond[5]=((((-1.0)*r02*x14762))+(((-1.0)*x14757*x14759))+((r01*x14760))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x14758)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14764=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14764.valid){
continue;
}
CheckValue<IkReal> x14765 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14765.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14764.value)))+(x14765.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14766=IKsin(j4);
IkReal x14767=IKcos(j4);
IkReal x14768=(cj5*r00);
IkReal x14769=((1.0)*sj2);
IkReal x14770=((1.0)*x14767);
IkReal x14771=(sj5*x14767);
IkReal x14772=(cj5*x14766);
IkReal x14773=((1.0)*x14766);
IkReal x14774=(sj5*x14773);
evalcond[0]=((((-1.0)*r22*x14770))+(((-1.0)*r21*x14774))+((r20*x14772)));
evalcond[1]=(((x14766*x14768))+(((-1.0)*r02*x14770))+(((-1.0)*r01*x14774)));
evalcond[2]=(((r11*x14771))+(((-1.0)*cj5*r10*x14770))+(((-1.0)*r12*x14773)));
evalcond[3]=((-1.0)+((r10*x14772))+(((-1.0)*r12*x14770))+(((-1.0)*r11*x14774)));
evalcond[4]=((((-1.0)*cj5*r20*x14770))+(((-1.0)*sj1*x14769))+((r21*x14771))+(((-1.0)*r22*x14773))+((cj1*cj2)));
evalcond[5]=((((-1.0)*x14768*x14770))+(((-1.0)*r02*x14773))+(((-1.0)*cj2*sj1))+((r01*x14771))+(((-1.0)*cj1*x14769)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14775=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14775;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x14775);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14776=((1.0)*sj5);
IkReal x14777=((((-1.0)*r00*x14776))+(((-1.0)*cj5*r01)));
j4eval[0]=x14777;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x14776))))));
j4eval[2]=IKsign(x14777);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14778=cj5*cj5;
IkReal x14779=r11*r11;
IkReal x14780=(r11*sj5);
IkReal x14781=(cj5*r10);
IkReal x14782=((r12*r12)+x14779+(((-2.0)*x14780*x14781))+(((-1.0)*x14778*x14779))+((x14778*(r10*r10))));
j4eval[0]=x14782;
j4eval[1]=IKsign(x14782);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x14780))+x14781))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14783=cj5*cj5;
IkReal x14784=r11*r11;
IkReal x14785=(cj5*r10);
IkReal x14786=(r11*sj5);
CheckValue<IkReal> x14787=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x14785*x14786))+(((-1.0)*x14783*x14784))+x14784+((x14783*(r10*r10))))),-1);
if(!x14787.valid){
continue;
}
CheckValue<IkReal> x14788 = IKatan2WithCheck(IkReal(((((-1.0)*x14786))+x14785)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x14788.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14787.value)))+(x14788.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14789=IKcos(j4);
IkReal x14790=IKsin(j4);
IkReal x14791=(cj5*r10);
IkReal x14792=((1.0)*sj2);
IkReal x14793=((1.0)*x14789);
IkReal x14794=(cj5*x14790);
IkReal x14795=(cj5*x14789);
IkReal x14796=((1.0)*sj5*x14790);
evalcond[0]=((((-1.0)*r11*sj5*x14793))+((r12*x14790))+((x14789*x14791)));
evalcond[1]=(((r20*x14794))+(((-1.0)*r21*x14796))+(((-1.0)*r22*x14793)));
evalcond[2]=((((-1.0)*r01*x14796))+(((-1.0)*r02*x14793))+((r00*x14794)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x14793))+(((-1.0)*r11*x14796))+((x14790*x14791)));
evalcond[4]=((((-1.0)*sj1*x14792))+((r20*x14795))+(((-1.0)*r21*sj5*x14793))+((r22*x14790))+((cj1*cj2)));
evalcond[5]=((((-1.0)*r01*sj5*x14793))+((r00*x14795))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x14792))+((r02*x14790)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14797=((1.0)*sj5);
CheckValue<IkReal> x14798 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x14797)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14798.valid){
continue;
}
CheckValue<IkReal> x14799=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x14797))+(((-1.0)*cj5*r01)))),-1);
if(!x14799.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14798.value)+(((1.5707963267949)*(x14799.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14800=IKcos(j4);
IkReal x14801=IKsin(j4);
IkReal x14802=(cj5*r10);
IkReal x14803=((1.0)*sj2);
IkReal x14804=((1.0)*x14800);
IkReal x14805=(cj5*x14801);
IkReal x14806=(cj5*x14800);
IkReal x14807=((1.0)*sj5*x14801);
evalcond[0]=(((x14800*x14802))+(((-1.0)*r11*sj5*x14804))+((r12*x14801)));
evalcond[1]=((((-1.0)*r22*x14804))+((r20*x14805))+(((-1.0)*r21*x14807)));
evalcond[2]=((((-1.0)*r01*x14807))+((r00*x14805))+(((-1.0)*r02*x14804)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x14807))+(((-1.0)*r12*x14804))+((x14801*x14802)));
evalcond[4]=((((-1.0)*r21*sj5*x14804))+((r22*x14801))+((cj1*cj2))+((r20*x14806))+(((-1.0)*sj1*x14803)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*r01*sj5*x14804))+((r00*x14806))+((r02*x14801))+(((-1.0)*cj1*x14803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14808=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14808.valid){
continue;
}
CheckValue<IkReal> x14809 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14809.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14808.value)))+(x14809.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14810=IKcos(j4);
IkReal x14811=IKsin(j4);
IkReal x14812=(cj5*r10);
IkReal x14813=((1.0)*sj2);
IkReal x14814=((1.0)*x14810);
IkReal x14815=(cj5*x14811);
IkReal x14816=(cj5*x14810);
IkReal x14817=((1.0)*sj5*x14811);
evalcond[0]=((((-1.0)*r11*sj5*x14814))+((x14810*x14812))+((r12*x14811)));
evalcond[1]=((((-1.0)*r21*x14817))+(((-1.0)*r22*x14814))+((r20*x14815)));
evalcond[2]=((((-1.0)*r02*x14814))+(((-1.0)*r01*x14817))+((r00*x14815)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x14814))+(((-1.0)*r11*x14817))+((x14811*x14812)));
evalcond[4]=((((-1.0)*r21*sj5*x14814))+((r22*x14811))+((cj1*cj2))+((r20*x14816))+(((-1.0)*sj1*x14813)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*r01*sj5*x14814))+((r00*x14816))+(((-1.0)*cj1*x14813))+((r02*x14811)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14818=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14818);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14818);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14819=(cj5*r10);
IkReal x14820=(r11*sj5);
j4eval[0]=(x14819+(((-1.0)*x14820)));
j4eval[1]=(((sj3*x14820))+(((-1.0)*sj3*x14819)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14821=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14821);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14821);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14822=(r11*sj5);
IkReal x14823=(cj5*r10);
j4eval[0]=(x14823+(((-1.0)*x14822)));
j4eval[1]=(((cj3*x14822))+(((-1.0)*cj3*x14823)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14824=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14824);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14824);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=(((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14825=((1.0)*r10);
CheckValue<IkReal> x14826=IKPowWithIntegerCheck(cj3,-1);
if(!x14826.valid){
continue;
}
CheckValue<IkReal> x14827=IKPowWithIntegerCheck(r22,-1);
if(!x14827.valid){
continue;
}
CheckValue<IkReal> x14828=IKPowWithIntegerCheck((((cj3*r11*sj5))+(((-1.0)*cj3*cj5*x14825))),-1);
if(!x14828.valid){
continue;
}
if( IKabs(((x14826.value)*(x14827.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14828.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x14825)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14826.value)*(x14827.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x14828.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x14825))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14826.value)*(x14827.value)*((((cj2*sj1))+((cj1*sj2))))), ((x14828.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x14825))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14829=IKsin(j4);
IkReal x14830=IKcos(j4);
IkReal x14831=(cj1*cj2);
IkReal x14832=(r11*sj5);
IkReal x14833=(r00*sj5);
IkReal x14834=(cj5*r01);
IkReal x14835=((1.0)*cj3);
IkReal x14836=(r10*sj5);
IkReal x14837=((1.0)*sj2);
IkReal x14838=(cj5*r10);
IkReal x14839=(r01*sj5);
IkReal x14840=(cj2*sj1);
IkReal x14841=(cj5*r00);
IkReal x14842=(cj5*r11);
IkReal x14843=(sj1*x14837);
IkReal x14844=(cj3*x14830);
IkReal x14845=((1.0)*x14829);
IkReal x14846=(sj3*x14830);
evalcond[0]=((-1.0)*r22*x14830);
evalcond[1]=((((-1.0)*x14839*x14845))+((x14829*x14841)));
evalcond[2]=(x14840+((cj1*sj2))+(((-1.0)*r22*x14829*x14835)));
evalcond[3]=((-1.0)+(((-1.0)*x14832*x14845))+((x14829*x14838)));
evalcond[4]=(x14831+(((-1.0)*x14843))+(((-1.0)*r22*sj3*x14845)));
evalcond[5]=(((x14832*x14844))+((sj3*x14842))+(((-1.0)*x14830*x14835*x14838))+((sj3*x14836)));
evalcond[6]=((((-1.0)*x14835*x14836))+(((-1.0)*x14835*x14842))+((x14832*x14846))+(((-1.0)*x14838*x14846)));
evalcond[7]=(x14831+(((-1.0)*x14830*x14835*x14841))+(((-1.0)*x14843))+((x14839*x14844))+((sj3*x14833))+((sj3*x14834)));
evalcond[8]=((((-1.0)*x14840))+(((-1.0)*x14833*x14835))+(((-1.0)*cj1*x14837))+(((-1.0)*x14834*x14835))+(((-1.0)*x14841*x14846))+((x14839*x14846)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14847=(cj5*r10);
IkReal x14848=((1.0)*sj3);
IkReal x14849=(r11*sj5);
CheckValue<IkReal> x14850=IKPowWithIntegerCheck(((((-1.0)*x14849))+x14847),-1);
if(!x14850.valid){
continue;
}
CheckValue<IkReal> x14851=IKPowWithIntegerCheck(((((-1.0)*cj3*x14847))+((cj3*x14849))),-1);
if(!x14851.valid){
continue;
}
if( IKabs(x14850.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14851.value)*(((((-1.0)*r10*sj5*x14848))+(((-1.0)*cj5*r11*x14848)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14850.value)+IKsqr(((x14851.value)*(((((-1.0)*r10*sj5*x14848))+(((-1.0)*cj5*r11*x14848))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14850.value, ((x14851.value)*(((((-1.0)*r10*sj5*x14848))+(((-1.0)*cj5*r11*x14848))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14852=IKsin(j4);
IkReal x14853=IKcos(j4);
IkReal x14854=(cj1*cj2);
IkReal x14855=(r11*sj5);
IkReal x14856=(r00*sj5);
IkReal x14857=(cj5*r01);
IkReal x14858=((1.0)*cj3);
IkReal x14859=(r10*sj5);
IkReal x14860=((1.0)*sj2);
IkReal x14861=(cj5*r10);
IkReal x14862=(r01*sj5);
IkReal x14863=(cj2*sj1);
IkReal x14864=(cj5*r00);
IkReal x14865=(cj5*r11);
IkReal x14866=(sj1*x14860);
IkReal x14867=(cj3*x14853);
IkReal x14868=((1.0)*x14852);
IkReal x14869=(sj3*x14853);
evalcond[0]=((-1.0)*r22*x14853);
evalcond[1]=(((x14852*x14864))+(((-1.0)*x14862*x14868)));
evalcond[2]=(x14863+((cj1*sj2))+(((-1.0)*r22*x14852*x14858)));
evalcond[3]=((-1.0)+(((-1.0)*x14855*x14868))+((x14852*x14861)));
evalcond[4]=(x14854+(((-1.0)*x14866))+(((-1.0)*r22*sj3*x14868)));
evalcond[5]=(((x14855*x14867))+((sj3*x14859))+((sj3*x14865))+(((-1.0)*x14853*x14858*x14861)));
evalcond[6]=(((x14855*x14869))+(((-1.0)*x14861*x14869))+(((-1.0)*x14858*x14859))+(((-1.0)*x14858*x14865)));
evalcond[7]=(x14854+((sj3*x14856))+((sj3*x14857))+(((-1.0)*x14853*x14858*x14864))+(((-1.0)*x14866))+((x14862*x14867)));
evalcond[8]=((((-1.0)*cj1*x14860))+(((-1.0)*x14864*x14869))+(((-1.0)*x14856*x14858))+(((-1.0)*x14857*x14858))+((x14862*x14869))+(((-1.0)*x14863)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14870=(cj5*r10);
IkReal x14871=(r11*sj5);
CheckValue<IkReal> x14872=IKPowWithIntegerCheck((x14870+(((-1.0)*x14871))),-1);
if(!x14872.valid){
continue;
}
CheckValue<IkReal> x14873=IKPowWithIntegerCheck(((((-1.0)*sj3*x14870))+((sj3*x14871))),-1);
if(!x14873.valid){
continue;
}
if( IKabs(x14872.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14873.value)*((((cj3*cj5*r11))+((cj3*r10*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14872.value)+IKsqr(((x14873.value)*((((cj3*cj5*r11))+((cj3*r10*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14872.value, ((x14873.value)*((((cj3*cj5*r11))+((cj3*r10*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14874=IKsin(j4);
IkReal x14875=IKcos(j4);
IkReal x14876=(cj1*cj2);
IkReal x14877=(r11*sj5);
IkReal x14878=(r00*sj5);
IkReal x14879=(cj5*r01);
IkReal x14880=((1.0)*cj3);
IkReal x14881=(r10*sj5);
IkReal x14882=((1.0)*sj2);
IkReal x14883=(cj5*r10);
IkReal x14884=(r01*sj5);
IkReal x14885=(cj2*sj1);
IkReal x14886=(cj5*r00);
IkReal x14887=(cj5*r11);
IkReal x14888=(sj1*x14882);
IkReal x14889=(cj3*x14875);
IkReal x14890=((1.0)*x14874);
IkReal x14891=(sj3*x14875);
evalcond[0]=((-1.0)*r22*x14875);
evalcond[1]=((((-1.0)*x14884*x14890))+((x14874*x14886)));
evalcond[2]=((((-1.0)*r22*x14874*x14880))+x14885+((cj1*sj2)));
evalcond[3]=((-1.0)+(((-1.0)*x14877*x14890))+((x14874*x14883)));
evalcond[4]=(x14876+(((-1.0)*x14888))+(((-1.0)*r22*sj3*x14890)));
evalcond[5]=((((-1.0)*x14875*x14880*x14883))+((x14877*x14889))+((sj3*x14887))+((sj3*x14881)));
evalcond[6]=((((-1.0)*x14883*x14891))+((x14877*x14891))+(((-1.0)*x14880*x14887))+(((-1.0)*x14880*x14881)));
evalcond[7]=(((x14884*x14889))+x14876+(((-1.0)*x14875*x14880*x14886))+(((-1.0)*x14888))+((sj3*x14878))+((sj3*x14879)));
evalcond[8]=((((-1.0)*x14878*x14880))+(((-1.0)*x14879*x14880))+((x14884*x14891))+(((-1.0)*cj1*x14882))+(((-1.0)*x14886*x14891))+(((-1.0)*x14885)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14892=cj5*cj5;
IkReal x14893=(r11*sj3);
IkReal x14894=(cj3*r10);
IkReal x14895=(cj3*r11);
IkReal x14896=(r10*sj3);
IkReal x14897=(cj5*r20*sj5);
IkReal x14898=(r21*x14892);
IkReal x14899=(r20*x14892);
IkReal x14900=((1.0)*cj5*r21*sj5);
CheckValue<IkReal> x14901 = IKatan2WithCheck(IkReal((((r22*sj5*x14896))+((cj5*r22*x14893)))),IkReal(((((-1.0)*x14893*x14900))+((x14896*x14898))+((x14896*x14897))+((x14893*x14899))+(((-1.0)*r21*x14896)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14901.valid){
continue;
}
CheckValue<IkReal> x14902=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+((x14894*x14899))+((r21*x14895))+(((-1.0)*x14895*x14898))+(((-1.0)*x14895*x14897))+(((-1.0)*x14894*x14900)))),-1);
if(!x14902.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14901.value)+(((1.5707963267949)*(x14902.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14903=IKsin(j4);
IkReal x14904=IKcos(j4);
IkReal x14905=(cj1*cj2);
IkReal x14906=((1.0)*r22);
IkReal x14907=(cj5*r01);
IkReal x14908=(r11*sj5);
IkReal x14909=((1.0)*cj3);
IkReal x14910=(cj5*r21);
IkReal x14911=(r00*sj5);
IkReal x14912=(r10*sj5);
IkReal x14913=((1.0)*sj2);
IkReal x14914=(cj5*r10);
IkReal x14915=(r21*sj5);
IkReal x14916=(r01*sj5);
IkReal x14917=(cj2*sj1);
IkReal x14918=(cj5*r00);
IkReal x14919=(cj5*r20);
IkReal x14920=(r20*sj5);
IkReal x14921=(cj5*r11);
IkReal x14922=(sj1*x14913);
IkReal x14923=((1.0)*x14903);
IkReal x14924=(cj3*x14904);
IkReal x14925=((1.0)*x14904);
IkReal x14926=(sj3*x14904);
evalcond[0]=((((-1.0)*x14915*x14923))+((x14903*x14919))+(((-1.0)*x14904*x14906)));
evalcond[1]=(((x14903*x14918))+(((-1.0)*r02*x14925))+(((-1.0)*x14916*x14923)));
evalcond[2]=((-1.0)+(((-1.0)*x14908*x14923))+((x14903*x14914))+(((-1.0)*r12*x14925)));
evalcond[3]=((((-1.0)*x14904*x14909*x14914))+((x14908*x14924))+((sj3*x14912))+(((-1.0)*r12*x14903*x14909))+((sj3*x14921)));
evalcond[4]=((((-1.0)*r12*sj3*x14923))+((x14908*x14926))+(((-1.0)*x14909*x14921))+(((-1.0)*sj3*x14914*x14925))+(((-1.0)*x14909*x14912)));
evalcond[5]=((((-1.0)*x14904*x14909*x14919))+((x14915*x14924))+x14917+((cj1*sj2))+((sj3*x14910))+(((-1.0)*cj3*x14903*x14906))+((sj3*x14920)));
evalcond[6]=(((x14916*x14924))+(((-1.0)*x14904*x14909*x14918))+x14905+((sj3*x14907))+((sj3*x14911))+(((-1.0)*x14922))+(((-1.0)*r02*x14903*x14909)));
evalcond[7]=(((x14915*x14926))+x14905+(((-1.0)*sj3*x14903*x14906))+(((-1.0)*x14909*x14920))+(((-1.0)*x14922))+(((-1.0)*sj3*x14919*x14925))+(((-1.0)*x14909*x14910)));
evalcond[8]=(((x14916*x14926))+(((-1.0)*x14907*x14909))+(((-1.0)*r02*sj3*x14923))+(((-1.0)*x14917))+(((-1.0)*cj1*x14913))+(((-1.0)*sj3*x14918*x14925))+(((-1.0)*x14909*x14911)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14927=((1.0)*sj5);
CheckValue<IkReal> x14928=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x14927))+(((-1.0)*cj5*r01)))),-1);
if(!x14928.valid){
continue;
}
CheckValue<IkReal> x14929 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x14927)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14929.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14928.value)))+(x14929.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14930=IKsin(j4);
IkReal x14931=IKcos(j4);
IkReal x14932=(cj1*cj2);
IkReal x14933=((1.0)*r22);
IkReal x14934=(cj5*r01);
IkReal x14935=(r11*sj5);
IkReal x14936=((1.0)*cj3);
IkReal x14937=(cj5*r21);
IkReal x14938=(r00*sj5);
IkReal x14939=(r10*sj5);
IkReal x14940=((1.0)*sj2);
IkReal x14941=(cj5*r10);
IkReal x14942=(r21*sj5);
IkReal x14943=(r01*sj5);
IkReal x14944=(cj2*sj1);
IkReal x14945=(cj5*r00);
IkReal x14946=(cj5*r20);
IkReal x14947=(r20*sj5);
IkReal x14948=(cj5*r11);
IkReal x14949=(sj1*x14940);
IkReal x14950=((1.0)*x14930);
IkReal x14951=(cj3*x14931);
IkReal x14952=((1.0)*x14931);
IkReal x14953=(sj3*x14931);
evalcond[0]=((((-1.0)*x14942*x14950))+(((-1.0)*x14931*x14933))+((x14930*x14946)));
evalcond[1]=((((-1.0)*x14943*x14950))+(((-1.0)*r02*x14952))+((x14930*x14945)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14952))+(((-1.0)*x14935*x14950))+((x14930*x14941)));
evalcond[3]=(((x14935*x14951))+(((-1.0)*r12*x14930*x14936))+((sj3*x14948))+((sj3*x14939))+(((-1.0)*x14931*x14936*x14941)));
evalcond[4]=(((x14935*x14953))+(((-1.0)*x14936*x14939))+(((-1.0)*x14936*x14948))+(((-1.0)*r12*sj3*x14950))+(((-1.0)*sj3*x14941*x14952)));
evalcond[5]=(x14944+((cj1*sj2))+((sj3*x14947))+(((-1.0)*cj3*x14930*x14933))+((sj3*x14937))+(((-1.0)*x14931*x14936*x14946))+((x14942*x14951)));
evalcond[6]=(x14932+(((-1.0)*x14949))+(((-1.0)*r02*x14930*x14936))+((sj3*x14934))+((sj3*x14938))+(((-1.0)*x14931*x14936*x14945))+((x14943*x14951)));
evalcond[7]=((((-1.0)*sj3*x14946*x14952))+x14932+(((-1.0)*x14936*x14937))+(((-1.0)*x14936*x14947))+(((-1.0)*x14949))+((x14942*x14953))+(((-1.0)*sj3*x14930*x14933)));
evalcond[8]=((((-1.0)*r02*sj3*x14950))+(((-1.0)*sj3*x14945*x14952))+(((-1.0)*x14936*x14938))+(((-1.0)*x14934*x14936))+(((-1.0)*x14944))+(((-1.0)*cj1*x14940))+((x14943*x14953)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14954=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14954.valid){
continue;
}
CheckValue<IkReal> x14955 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14955.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14954.value)))+(x14955.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14956=IKsin(j4);
IkReal x14957=IKcos(j4);
IkReal x14958=(cj1*cj2);
IkReal x14959=((1.0)*r22);
IkReal x14960=(cj5*r01);
IkReal x14961=(r11*sj5);
IkReal x14962=((1.0)*cj3);
IkReal x14963=(cj5*r21);
IkReal x14964=(r00*sj5);
IkReal x14965=(r10*sj5);
IkReal x14966=((1.0)*sj2);
IkReal x14967=(cj5*r10);
IkReal x14968=(r21*sj5);
IkReal x14969=(r01*sj5);
IkReal x14970=(cj2*sj1);
IkReal x14971=(cj5*r00);
IkReal x14972=(cj5*r20);
IkReal x14973=(r20*sj5);
IkReal x14974=(cj5*r11);
IkReal x14975=(sj1*x14966);
IkReal x14976=((1.0)*x14956);
IkReal x14977=(cj3*x14957);
IkReal x14978=((1.0)*x14957);
IkReal x14979=(sj3*x14957);
evalcond[0]=(((x14956*x14972))+(((-1.0)*x14957*x14959))+(((-1.0)*x14968*x14976)));
evalcond[1]=(((x14956*x14971))+(((-1.0)*x14969*x14976))+(((-1.0)*r02*x14978)));
evalcond[2]=((-1.0)+((x14956*x14967))+(((-1.0)*r12*x14978))+(((-1.0)*x14961*x14976)));
evalcond[3]=((((-1.0)*r12*x14956*x14962))+((sj3*x14965))+(((-1.0)*x14957*x14962*x14967))+((sj3*x14974))+((x14961*x14977)));
evalcond[4]=((((-1.0)*x14962*x14965))+(((-1.0)*x14962*x14974))+(((-1.0)*sj3*x14967*x14978))+((x14961*x14979))+(((-1.0)*r12*sj3*x14976)));
evalcond[5]=(x14970+((cj1*sj2))+(((-1.0)*x14957*x14962*x14972))+((sj3*x14963))+(((-1.0)*cj3*x14956*x14959))+((sj3*x14973))+((x14968*x14977)));
evalcond[6]=((((-1.0)*r02*x14956*x14962))+x14958+((x14969*x14977))+(((-1.0)*x14957*x14962*x14971))+(((-1.0)*x14975))+((sj3*x14960))+((sj3*x14964)));
evalcond[7]=((((-1.0)*x14962*x14963))+(((-1.0)*sj3*x14972*x14978))+x14958+(((-1.0)*x14962*x14973))+(((-1.0)*sj3*x14956*x14959))+(((-1.0)*x14975))+((x14968*x14979)));
evalcond[8]=((((-1.0)*cj1*x14966))+(((-1.0)*sj3*x14971*x14978))+(((-1.0)*x14962*x14964))+(((-1.0)*x14970))+((x14969*x14979))+(((-1.0)*r02*sj3*x14976))+(((-1.0)*x14960*x14962)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x14980=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x14980;
j4eval[1]=IKsign(x14980);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x14981=((1.0)*sj5);
IkReal x14982=((((-1.0)*r20*x14981))+(((-1.0)*cj5*r21)));
j4eval[0]=x14982;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x14981))+((cj5*r00))))));
j4eval[2]=IKsign(x14982);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x14983=cj5*cj5;
IkReal x14984=(cj3*r11*r21);
IkReal x14985=((1.0)*cj3*cj5*sj5);
IkReal x14986=(((cj3*r12*r22))+x14984+((cj3*r10*r20*x14983))+(((-1.0)*r10*r21*x14985))+(((-1.0)*r11*r20*x14985))+(((-1.0)*x14983*x14984)));
j4eval[0]=x14986;
j4eval[1]=IKsign(x14986);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14987=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x14987;
j4eval[1]=IKsign(x14987);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14988=((1.0)*sj5);
IkReal x14989=((((-1.0)*r20*x14988))+(((-1.0)*cj5*r21)));
j4eval[0]=x14989;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x14988))+((cj5*r00))))));
j4eval[2]=IKsign(x14989);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14990=cj5*cj5;
IkReal x14991=r11*r11;
IkReal x14992=(r11*sj5);
IkReal x14993=(cj5*r10);
IkReal x14994=((r12*r12)+x14991+(((-1.0)*x14990*x14991))+((x14990*(r10*r10)))+(((-2.0)*x14992*x14993)));
j4eval[0]=x14994;
j4eval[1]=IKsign(x14994);
j4eval[2]=((IKabs(r12))+(IKabs((x14992+(((-1.0)*x14993))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14995=cj5*cj5;
IkReal x14996=r11*r11;
IkReal x14997=(cj5*r10);
IkReal x14998=(r11*sj5);
CheckValue<IkReal> x14999=IKPowWithIntegerCheck(IKsign(((r12*r12)+x14996+(((-2.0)*x14997*x14998))+((x14995*(r10*r10)))+(((-1.0)*x14995*x14996)))),-1);
if(!x14999.valid){
continue;
}
CheckValue<IkReal> x15000 = IKatan2WithCheck(IkReal((x14998+(((-1.0)*x14997)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x15000.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14999.value)))+(x15000.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15001=IKsin(j4);
IkReal x15002=IKcos(j4);
IkReal x15003=(cj5*r00);
IkReal x15004=((1.0)*x15002);
IkReal x15005=(sj5*x15002);
IkReal x15006=(cj5*x15001);
IkReal x15007=((1.0)*x15001);
IkReal x15008=(sj5*x15007);
evalcond[0]=(((r20*x15006))+(((-1.0)*r22*x15004))+(((-1.0)*r21*x15008)));
evalcond[1]=(((x15001*x15003))+(((-1.0)*r02*x15004))+(((-1.0)*r01*x15008)));
evalcond[2]=((((-1.0)*cj5*r10*x15004))+((r11*x15005))+(((-1.0)*r12*x15007)));
evalcond[3]=((1.0)+((r10*x15006))+(((-1.0)*r11*x15008))+(((-1.0)*r12*x15004)));
evalcond[4]=(((cj2*sj1))+((r01*x15005))+(((-1.0)*x15003*x15004))+(((-1.0)*r02*x15007))+((cj1*sj2)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*cj5*r20*x15004))+(((-1.0)*r22*x15007))+((cj1*cj2))+((r21*x15005)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15009=((1.0)*sj5);
CheckValue<IkReal> x15010 = IKatan2WithCheck(IkReal(r02),IkReal((((cj5*r00))+(((-1.0)*r01*x15009)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15010.valid){
continue;
}
CheckValue<IkReal> x15011=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*x15009)))),-1);
if(!x15011.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15010.value)+(((1.5707963267949)*(x15011.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15012=IKsin(j4);
IkReal x15013=IKcos(j4);
IkReal x15014=(cj5*r00);
IkReal x15015=((1.0)*x15013);
IkReal x15016=(sj5*x15013);
IkReal x15017=(cj5*x15012);
IkReal x15018=((1.0)*x15012);
IkReal x15019=(sj5*x15018);
evalcond[0]=((((-1.0)*r21*x15019))+(((-1.0)*r22*x15015))+((r20*x15017)));
evalcond[1]=((((-1.0)*r01*x15019))+((x15012*x15014))+(((-1.0)*r02*x15015)));
evalcond[2]=((((-1.0)*r12*x15018))+(((-1.0)*cj5*r10*x15015))+((r11*x15016)));
evalcond[3]=((1.0)+(((-1.0)*r12*x15015))+(((-1.0)*r11*x15019))+((r10*x15017)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x15014*x15015))+((r01*x15016))+(((-1.0)*r02*x15018)));
evalcond[5]=((((-1.0)*cj5*r20*x15015))+(((-1.0)*sj1*sj2))+((r21*x15016))+(((-1.0)*r22*x15018))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15020=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x15020.valid){
continue;
}
CheckValue<IkReal> x15021 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15021.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15020.value)))+(x15021.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15022=IKsin(j4);
IkReal x15023=IKcos(j4);
IkReal x15024=(cj5*r00);
IkReal x15025=((1.0)*x15023);
IkReal x15026=(sj5*x15023);
IkReal x15027=(cj5*x15022);
IkReal x15028=((1.0)*x15022);
IkReal x15029=(sj5*x15028);
evalcond[0]=((((-1.0)*r21*x15029))+(((-1.0)*r22*x15025))+((r20*x15027)));
evalcond[1]=((((-1.0)*r02*x15025))+(((-1.0)*r01*x15029))+((x15022*x15024)));
evalcond[2]=((((-1.0)*cj5*r10*x15025))+(((-1.0)*r12*x15028))+((r11*x15026)));
evalcond[3]=((1.0)+(((-1.0)*r11*x15029))+((r10*x15027))+(((-1.0)*r12*x15025)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x15028))+(((-1.0)*x15024*x15025))+((cj1*sj2))+((r01*x15026)));
evalcond[5]=((((-1.0)*cj5*r20*x15025))+(((-1.0)*sj1*sj2))+((r21*x15026))+(((-1.0)*r22*x15028))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15030=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x15030;
j4eval[1]=IKsign(x15030);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15031=((1.0)*sj5);
IkReal x15032=((((-1.0)*r20*x15031))+(((-1.0)*cj5*r21)));
j4eval[0]=x15032;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x15031))+((cj5*r00))))));
j4eval[2]=IKsign(x15032);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15033=cj5*cj5;
IkReal x15034=r11*r11;
IkReal x15035=(cj5*r10);
IkReal x15036=(r11*sj5);
IkReal x15037=((((-1.0)*x15033*(r10*r10)))+(((-1.0)*x15034))+((x15033*x15034))+(((-1.0)*(r12*r12)))+(((2.0)*x15035*x15036)));
j4eval[0]=x15037;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x15036))+x15035))));
j4eval[2]=IKsign(x15037);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15038=cj5*cj5;
IkReal x15039=r11*r11;
IkReal x15040=(cj5*r10);
IkReal x15041=(r11*sj5);
CheckValue<IkReal> x15042 = IKatan2WithCheck(IkReal((x15040+(((-1.0)*x15041)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x15042.valid){
continue;
}
CheckValue<IkReal> x15043=IKPowWithIntegerCheck(IKsign(((((2.0)*x15040*x15041))+(((-1.0)*x15038*(r10*r10)))+(((-1.0)*x15039))+(((-1.0)*(r12*r12)))+((x15038*x15039)))),-1);
if(!x15043.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15042.value)+(((1.5707963267949)*(x15043.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15044=IKcos(j4);
IkReal x15045=IKsin(j4);
IkReal x15046=(cj5*r10);
IkReal x15047=((1.0)*x15044);
IkReal x15048=(cj5*x15045);
IkReal x15049=(cj5*x15044);
IkReal x15050=((1.0)*sj5*x15045);
evalcond[0]=((((-1.0)*r11*sj5*x15047))+((x15044*x15046))+((r12*x15045)));
evalcond[1]=((((-1.0)*r22*x15047))+((r20*x15048))+(((-1.0)*r21*x15050)));
evalcond[2]=(((r00*x15048))+(((-1.0)*r01*x15050))+(((-1.0)*r02*x15047)));
evalcond[3]=((1.0)+(((-1.0)*r11*x15050))+((x15045*x15046))+(((-1.0)*r12*x15047)));
evalcond[4]=(((r02*x15045))+((cj2*sj1))+((cj1*sj2))+((r00*x15049))+(((-1.0)*r01*sj5*x15047)));
evalcond[5]=((((-1.0)*r21*sj5*x15047))+((r22*x15045))+(((-1.0)*sj1*sj2))+((r20*x15049))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15051=((1.0)*sj5);
CheckValue<IkReal> x15052=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x15051))+(((-1.0)*cj5*r21)))),-1);
if(!x15052.valid){
continue;
}
CheckValue<IkReal> x15053 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x15051))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15053.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15052.value)))+(x15053.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15054=IKcos(j4);
IkReal x15055=IKsin(j4);
IkReal x15056=(cj5*r10);
IkReal x15057=((1.0)*x15054);
IkReal x15058=(cj5*x15055);
IkReal x15059=(cj5*x15054);
IkReal x15060=((1.0)*sj5*x15055);
evalcond[0]=((((-1.0)*r11*sj5*x15057))+((x15054*x15056))+((r12*x15055)));
evalcond[1]=(((r20*x15058))+(((-1.0)*r22*x15057))+(((-1.0)*r21*x15060)));
evalcond[2]=((((-1.0)*r01*x15060))+(((-1.0)*r02*x15057))+((r00*x15058)));
evalcond[3]=((1.0)+(((-1.0)*r12*x15057))+((x15055*x15056))+(((-1.0)*r11*x15060)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r02*x15055))+(((-1.0)*r01*sj5*x15057))+((r00*x15059)));
evalcond[5]=(((r20*x15059))+(((-1.0)*sj1*sj2))+(((-1.0)*r21*sj5*x15057))+((r22*x15055))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15061=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x15061.valid){
continue;
}
CheckValue<IkReal> x15062 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15062.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15061.value)))+(x15062.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15063=IKcos(j4);
IkReal x15064=IKsin(j4);
IkReal x15065=(cj5*r10);
IkReal x15066=((1.0)*x15063);
IkReal x15067=(cj5*x15064);
IkReal x15068=(cj5*x15063);
IkReal x15069=((1.0)*sj5*x15064);
evalcond[0]=((((-1.0)*r11*sj5*x15066))+((x15063*x15065))+((r12*x15064)));
evalcond[1]=(((r20*x15067))+(((-1.0)*r22*x15066))+(((-1.0)*r21*x15069)));
evalcond[2]=((((-1.0)*r01*x15069))+((r00*x15067))+(((-1.0)*r02*x15066)));
evalcond[3]=((1.0)+((x15064*x15065))+(((-1.0)*r11*x15069))+(((-1.0)*r12*x15066)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r00*x15068))+(((-1.0)*r01*sj5*x15066))+((r02*x15064)));
evalcond[5]=(((r20*x15068))+(((-1.0)*sj1*sj2))+(((-1.0)*r21*sj5*x15066))+((cj1*cj2))+((r22*x15064)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15070=((-1.0)*r20);
IkReal x15072 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x15072)==0){
continue;
}
IkReal x15071=pow(x15072,-0.5);
CheckValue<IkReal> x15073 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x15070),IKFAST_ATAN2_MAGTHRESH);
if(!x15073.valid){
continue;
}
IkReal gconst54=((-1.0)*(x15073.value));
IkReal gconst55=(r21*x15071);
IkReal gconst56=(x15070*x15071);
CheckValue<IkReal> x15074 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x15074.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15074.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15075=((-1.0)*r20);
IkReal x15076=x15071;
CheckValue<IkReal> x15078 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x15075),IKFAST_ATAN2_MAGTHRESH);
if(!x15078.valid){
continue;
}
IkReal x15077=((-1.0)*(x15078.value));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst55;
cj5=gconst56;
j5=x15077;
IkReal gconst54=x15077;
IkReal gconst55=(r21*x15076);
IkReal gconst56=(x15075*x15076);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15079=((-1.0)*r20);
IkReal x15080=x15071;
CheckValue<IkReal> x15082 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x15079),IKFAST_ATAN2_MAGTHRESH);
if(!x15082.valid){
continue;
}
IkReal x15081=((-1.0)*(x15082.value));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst55;
cj5=gconst56;
j5=x15081;
IkReal gconst54=x15081;
IkReal gconst55=(r21*x15080);
IkReal gconst56=(x15079*x15080);
CheckValue<IkReal> x15090=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x15090.valid){
continue;
}
IkReal x15083=x15090.value;
IkReal x15084=(cj3*x15083);
IkReal x15085=(r11*x15084);
IkReal x15086=(r01*x15084);
IkReal x15087=(r00*x15084);
IkReal x15088=(r10*x15084);
IkReal x15089=(r20*r21*x15084);
j4eval[0]=IKsign((((cj3*r02*r12))+((r10*x15087*(r20*r20)))+((r10*r20*r21*x15086))+((r00*r20*r21*x15085))+((r01*x15085*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15091=((-1.0)*r20);
IkReal x15092=x15071;
CheckValue<IkReal> x15094 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x15091),IKFAST_ATAN2_MAGTHRESH);
if(!x15094.valid){
continue;
}
IkReal x15093=((-1.0)*(x15094.value));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst55;
cj5=gconst56;
j5=x15093;
IkReal gconst54=x15093;
IkReal gconst55=(r21*x15092);
IkReal gconst56=(x15091*x15092);
CheckValue<IkReal> x15102=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x15102.valid){
continue;
}
IkReal x15095=x15102.value;
IkReal x15096=(sj3*x15095);
IkReal x15097=(r11*x15096);
IkReal x15098=(r00*x15096);
IkReal x15099=(r01*x15096);
IkReal x15100=(r10*x15096);
IkReal x15101=(r20*r21*x15096);
j4eval[0]=IKsign((((r01*x15097*(r21*r21)))+((r02*r12*sj3))+((r10*r20*r21*x15099))+((r00*r20*r21*x15097))+((r10*x15098*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15103=gconst55*gconst55;
IkReal x15104=gconst56*gconst56;
IkReal x15105=(r11*sj3);
IkReal x15106=((1.0)*r00);
IkReal x15107=(gconst55*gconst56);
IkReal x15108=(cj3*r11);
IkReal x15109=(cj3*r10);
IkReal x15110=((1.0)*r02);
IkReal x15111=(r10*sj3);
IkReal x15112=(r01*x15103);
CheckValue<IkReal> x15113=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*r01*x15107*x15111))+((x15105*x15112))+(((-1.0)*x15105*x15106*x15107))+((r00*x15104*x15111)))),-1);
if(!x15113.valid){
continue;
}
CheckValue<IkReal> x15114 = IKatan2WithCheck(IkReal(((((-1.0)*gconst55*x15109*x15110))+(((-1.0)*gconst56*x15108*x15110)))),IkReal((((x15109*x15112))+(((-1.0)*x15104*x15106*x15108))+(((-1.0)*x15106*x15107*x15109))+((r01*x15107*x15108)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15114.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15113.value)))+(x15114.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15115=IKsin(j4);
IkReal x15116=IKcos(j4);
IkReal x15117=(cj2*sj1);
IkReal x15118=(cj1*sj2);
IkReal x15119=(r00*sj3);
IkReal x15120=(sj1*sj2);
IkReal x15121=(r01*sj3);
IkReal x15122=((1.0)*cj3);
IkReal x15123=(cj1*cj2);
IkReal x15124=(gconst56*sj3);
IkReal x15125=(gconst55*sj3);
IkReal x15126=(cj3*gconst56);
IkReal x15127=((1.0)*x15116);
IkReal x15128=((1.0)*x15115);
IkReal x15129=(gconst55*x15116);
IkReal x15130=(gconst56*x15115);
IkReal x15131=(x15118+x15117);
evalcond[0]=(((r20*x15130))+(((-1.0)*gconst55*r21*x15128))+(((-1.0)*r22*x15127)));
evalcond[1]=((((-1.0)*r02*x15127))+(((-1.0)*gconst55*r01*x15128))+((r00*x15130)));
evalcond[2]=((1.0)+(((-1.0)*r12*x15127))+((r10*x15130))+(((-1.0)*gconst55*r11*x15128)));
evalcond[3]=((((-1.0)*r12*x15115*x15122))+(((-1.0)*gconst56*r10*x15116*x15122))+((cj3*r11*x15129))+((r10*x15125))+((r11*x15124)));
evalcond[4]=(((r11*x15116*x15125))+(((-1.0)*r12*sj3*x15128))+(((-1.0)*gconst56*r11*x15122))+(((-1.0)*gconst55*r10*x15122))+(((-1.0)*r10*x15124*x15127)));
evalcond[5]=(((r20*x15125))+(((-1.0)*gconst56*r20*x15116*x15122))+((r21*x15124))+(((-1.0)*r22*x15115*x15122))+((cj3*r21*x15129))+x15131);
evalcond[6]=((((-1.0)*r02*x15115*x15122))+(((-1.0)*gconst56*r00*x15116*x15122))+x15120+((gconst55*x15119))+(((-1.0)*x15123))+((cj3*r01*x15129))+((gconst56*x15121)));
evalcond[7]=(((x15121*x15129))+(((-1.0)*gconst56*r01*x15122))+(((-1.0)*r02*sj3*x15128))+(((-1.0)*gconst55*r00*x15122))+x15131+(((-1.0)*gconst56*x15119*x15127)));
evalcond[8]=((((-1.0)*r22*sj3*x15128))+(((-1.0)*gconst55*r20*x15122))+((r21*x15116*x15125))+x15123+(((-1.0)*gconst56*r21*x15122))+(((-1.0)*x15120))+(((-1.0)*r20*x15124*x15127)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15132=gconst55*gconst55;
IkReal x15133=gconst56*gconst56;
IkReal x15134=(r11*sj3);
IkReal x15135=(cj3*r01);
IkReal x15136=(gconst55*r10);
IkReal x15137=((1.0)*gconst56);
IkReal x15138=(r00*x15133);
CheckValue<IkReal> x15139=IKPowWithIntegerCheck(IKsign((((cj3*r10*x15138))+((cj3*r02*r12))+(((-1.0)*x15135*x15136*x15137))+(((-1.0)*cj3*gconst55*r00*r11*x15137))+((r11*x15132*x15135)))),-1);
if(!x15139.valid){
continue;
}
CheckValue<IkReal> x15140 = IKatan2WithCheck(IkReal((((r02*sj3*x15136))+((gconst56*r02*x15134)))),IkReal((((x15134*x15138))+(((-1.0)*r01*r10*sj3*x15132))+(((-1.0)*gconst55*r01*x15134*x15137))+((gconst56*r00*sj3*x15136)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15140.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15139.value)))+(x15140.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15141=IKsin(j4);
IkReal x15142=IKcos(j4);
IkReal x15143=(cj2*sj1);
IkReal x15144=(cj1*sj2);
IkReal x15145=(r00*sj3);
IkReal x15146=(sj1*sj2);
IkReal x15147=(r01*sj3);
IkReal x15148=((1.0)*cj3);
IkReal x15149=(cj1*cj2);
IkReal x15150=(gconst56*sj3);
IkReal x15151=(gconst55*sj3);
IkReal x15152=(cj3*gconst56);
IkReal x15153=((1.0)*x15142);
IkReal x15154=((1.0)*x15141);
IkReal x15155=(gconst55*x15142);
IkReal x15156=(gconst56*x15141);
IkReal x15157=(x15143+x15144);
evalcond[0]=((((-1.0)*gconst55*r21*x15154))+(((-1.0)*r22*x15153))+((r20*x15156)));
evalcond[1]=((((-1.0)*r02*x15153))+(((-1.0)*gconst55*r01*x15154))+((r00*x15156)));
evalcond[2]=((1.0)+(((-1.0)*r12*x15153))+((r10*x15156))+(((-1.0)*gconst55*r11*x15154)));
evalcond[3]=((((-1.0)*gconst56*r10*x15142*x15148))+((cj3*r11*x15155))+((r10*x15151))+((r11*x15150))+(((-1.0)*r12*x15141*x15148)));
evalcond[4]=((((-1.0)*gconst56*r11*x15148))+(((-1.0)*r12*sj3*x15154))+(((-1.0)*gconst55*r10*x15148))+(((-1.0)*r10*x15150*x15153))+((r11*x15142*x15151)));
evalcond[5]=((((-1.0)*r22*x15141*x15148))+((r21*x15150))+(((-1.0)*gconst56*r20*x15142*x15148))+x15157+((cj3*r21*x15155))+((r20*x15151)));
evalcond[6]=((((-1.0)*gconst56*r00*x15142*x15148))+((gconst55*x15145))+((gconst56*x15147))+(((-1.0)*x15149))+x15146+(((-1.0)*r02*x15141*x15148))+((cj3*r01*x15155)));
evalcond[7]=((((-1.0)*gconst56*x15145*x15153))+(((-1.0)*r02*sj3*x15154))+(((-1.0)*gconst56*r01*x15148))+x15157+(((-1.0)*gconst55*r00*x15148))+((x15147*x15155)));
evalcond[8]=((((-1.0)*r22*sj3*x15154))+(((-1.0)*gconst55*r20*x15148))+(((-1.0)*r20*x15150*x15153))+(((-1.0)*x15146))+(((-1.0)*gconst56*r21*x15148))+x15149+((r21*x15142*x15151)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15158=IKPowWithIntegerCheck(IKsign((((gconst56*r01))+((gconst55*r00)))),-1);
if(!x15158.valid){
continue;
}
CheckValue<IkReal> x15159 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst55*r21))+((gconst56*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15159.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15158.value)))+(x15159.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15160=IKsin(j4);
IkReal x15161=IKcos(j4);
IkReal x15162=(cj2*sj1);
IkReal x15163=(cj1*sj2);
IkReal x15164=(r00*sj3);
IkReal x15165=(sj1*sj2);
IkReal x15166=(r01*sj3);
IkReal x15167=((1.0)*cj3);
IkReal x15168=(cj1*cj2);
IkReal x15169=(gconst56*sj3);
IkReal x15170=(gconst55*sj3);
IkReal x15171=(cj3*gconst56);
IkReal x15172=((1.0)*x15161);
IkReal x15173=((1.0)*x15160);
IkReal x15174=(gconst55*x15161);
IkReal x15175=(gconst56*x15160);
IkReal x15176=(x15162+x15163);
evalcond[0]=(((r20*x15175))+(((-1.0)*gconst55*r21*x15173))+(((-1.0)*r22*x15172)));
evalcond[1]=((((-1.0)*gconst55*r01*x15173))+(((-1.0)*r02*x15172))+((r00*x15175)));
evalcond[2]=((1.0)+((r10*x15175))+(((-1.0)*gconst55*r11*x15173))+(((-1.0)*r12*x15172)));
evalcond[3]=(((r10*x15170))+((r11*x15169))+(((-1.0)*r12*x15160*x15167))+(((-1.0)*gconst56*r10*x15161*x15167))+((cj3*r11*x15174)));
evalcond[4]=((((-1.0)*gconst56*r11*x15167))+(((-1.0)*r12*sj3*x15173))+(((-1.0)*r10*x15169*x15172))+(((-1.0)*gconst55*r10*x15167))+((r11*x15161*x15170)));
evalcond[5]=((((-1.0)*r22*x15160*x15167))+((r20*x15170))+x15176+((r21*x15169))+(((-1.0)*gconst56*r20*x15161*x15167))+((cj3*r21*x15174)));
evalcond[6]=(((gconst55*x15164))+((cj3*r01*x15174))+((gconst56*x15166))+(((-1.0)*x15168))+x15165+(((-1.0)*gconst56*r00*x15161*x15167))+(((-1.0)*r02*x15160*x15167)));
evalcond[7]=((((-1.0)*gconst56*r01*x15167))+(((-1.0)*gconst56*x15164*x15172))+(((-1.0)*gconst55*r00*x15167))+x15176+((x15166*x15174))+(((-1.0)*r02*sj3*x15173)));
evalcond[8]=(((r21*x15161*x15170))+(((-1.0)*gconst55*r20*x15167))+(((-1.0)*r20*x15169*x15172))+(((-1.0)*r22*sj3*x15173))+(((-1.0)*x15165))+x15168+(((-1.0)*gconst56*r21*x15167)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15177=((-1.0)*r21);
IkReal x15179 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x15179)==0){
continue;
}
IkReal x15178=pow(x15179,-0.5);
CheckValue<IkReal> x15180 = IKatan2WithCheck(IkReal(x15177),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x15180.valid){
continue;
}
IkReal gconst57=((3.14159265358979)+(((-1.0)*(x15180.value))));
IkReal gconst58=(x15177*x15178);
IkReal gconst59=((1.0)*r20*x15178);
CheckValue<IkReal> x15181 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x15181.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15181.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15182=((-1.0)*r21);
CheckValue<IkReal> x15185 = IKatan2WithCheck(IkReal(x15182),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x15185.valid){
continue;
}
IkReal x15183=((1.0)*(x15185.value));
IkReal x15184=x15178;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst58;
cj5=gconst59;
j5=((3.14159265)+(((-1.0)*x15183)));
IkReal gconst57=((3.14159265358979)+(((-1.0)*x15183)));
IkReal gconst58=(x15182*x15184);
IkReal gconst59=((1.0)*r20*x15184);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x15186=((-1.0)*r21);
CheckValue<IkReal> x15189 = IKatan2WithCheck(IkReal(x15186),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x15189.valid){
continue;
}
IkReal x15187=((1.0)*(x15189.value));
IkReal x15188=x15178;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst58;
cj5=gconst59;
j5=((3.14159265)+(((-1.0)*x15187)));
IkReal gconst57=((3.14159265358979)+(((-1.0)*x15187)));
IkReal gconst58=(x15186*x15188);
IkReal gconst59=((1.0)*r20*x15188);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15190=((-1.0)*r21);
CheckValue<IkReal> x15193 = IKatan2WithCheck(IkReal(x15190),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x15193.valid){
continue;
}
IkReal x15191=((1.0)*(x15193.value));
IkReal x15192=x15178;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst58;
cj5=gconst59;
j5=((3.14159265)+(((-1.0)*x15191)));
IkReal gconst57=((3.14159265358979)+(((-1.0)*x15191)));
IkReal gconst58=(x15190*x15192);
IkReal gconst59=((1.0)*r20*x15192);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15194=gconst59*gconst59;
IkReal x15195=gconst58*gconst58;
IkReal x15196=(r11*sj3);
IkReal x15197=(r10*sj3);
IkReal x15198=(cj3*r10);
IkReal x15199=((1.0)*r21);
IkReal x15200=(gconst58*gconst59);
IkReal x15201=(cj3*r11);
IkReal x15202=(r20*x15194);
CheckValue<IkReal> x15203 = IKatan2WithCheck(IkReal((((gconst58*r22*x15197))+((gconst59*r22*x15196)))),IkReal((((x15196*x15202))+(((-1.0)*x15196*x15199*x15200))+((r20*x15197*x15200))+(((-1.0)*x15195*x15197*x15199)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15203.valid){
continue;
}
CheckValue<IkReal> x15204=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+((r21*x15195*x15201))+(((-1.0)*r20*x15200*x15201))+((x15198*x15202))+(((-1.0)*x15198*x15199*x15200)))),-1);
if(!x15204.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15203.value)+(((1.5707963267949)*(x15204.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15205=IKsin(j4);
IkReal x15206=IKcos(j4);
IkReal x15207=(cj2*sj1);
IkReal x15208=(cj1*sj2);
IkReal x15209=(cj3*gconst59);
IkReal x15210=(gconst58*r00);
IkReal x15211=((1.0)*cj3);
IkReal x15212=(gconst58*r01);
IkReal x15213=(gconst58*r11);
IkReal x15214=(cj1*cj2);
IkReal x15215=(r20*sj3);
IkReal x15216=(gconst58*r21);
IkReal x15217=(gconst59*r00);
IkReal x15218=(gconst59*sj3);
IkReal x15219=(gconst58*r10);
IkReal x15220=(sj1*sj2);
IkReal x15221=((1.0)*x15206);
IkReal x15222=((1.0)*x15205);
IkReal x15223=(sj3*x15206);
IkReal x15224=(cj3*x15206);
IkReal x15225=(gconst59*x15205);
IkReal x15226=(x15207+x15208);
evalcond[0]=(((r20*x15225))+(((-1.0)*x15216*x15222))+(((-1.0)*r22*x15221)));
evalcond[1]=((((-1.0)*x15212*x15222))+(((-1.0)*r02*x15221))+((x15205*x15217)));
evalcond[2]=((1.0)+(((-1.0)*r12*x15221))+(((-1.0)*x15213*x15222))+((r10*x15225)));
evalcond[3]=(((sj3*x15219))+((r11*x15218))+(((-1.0)*r10*x15209*x15221))+((x15213*x15224))+(((-1.0)*r12*x15205*x15211)));
evalcond[4]=((((-1.0)*r11*x15209))+(((-1.0)*r12*sj3*x15222))+((x15213*x15223))+(((-1.0)*r10*x15218*x15221))+(((-1.0)*x15211*x15219)));
evalcond[5]=((((-1.0)*r22*x15205*x15211))+((x15216*x15224))+x15226+(((-1.0)*r20*x15209*x15221))+((r21*x15218))+((gconst58*x15215)));
evalcond[6]=((((-1.0)*r02*x15205*x15211))+((sj3*x15210))+(((-1.0)*x15214))+((x15212*x15224))+x15220+(((-1.0)*r00*x15209*x15221))+((r01*x15218)));
evalcond[7]=((((-1.0)*r01*x15209))+(((-1.0)*x15210*x15211))+(((-1.0)*sj3*x15217*x15221))+((x15212*x15223))+x15226+(((-1.0)*r02*sj3*x15222)));
evalcond[8]=((((-1.0)*r21*x15209))+(((-1.0)*x15220))+(((-1.0)*gconst58*r20*x15211))+((x15216*x15223))+x15214+(((-1.0)*r22*sj3*x15222))+(((-1.0)*gconst59*x15215*x15221)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15227=((1.0)*gconst58);
CheckValue<IkReal> x15228 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst59*r00))+(((-1.0)*r01*x15227)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15228.valid){
continue;
}
CheckValue<IkReal> x15229=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x15227))+(((-1.0)*gconst59*r21)))),-1);
if(!x15229.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15228.value)+(((1.5707963267949)*(x15229.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15230=IKsin(j4);
IkReal x15231=IKcos(j4);
IkReal x15232=(cj2*sj1);
IkReal x15233=(cj1*sj2);
IkReal x15234=(cj3*gconst59);
IkReal x15235=(gconst58*r00);
IkReal x15236=((1.0)*cj3);
IkReal x15237=(gconst58*r01);
IkReal x15238=(gconst58*r11);
IkReal x15239=(cj1*cj2);
IkReal x15240=(r20*sj3);
IkReal x15241=(gconst58*r21);
IkReal x15242=(gconst59*r00);
IkReal x15243=(gconst59*sj3);
IkReal x15244=(gconst58*r10);
IkReal x15245=(sj1*sj2);
IkReal x15246=((1.0)*x15231);
IkReal x15247=((1.0)*x15230);
IkReal x15248=(sj3*x15231);
IkReal x15249=(cj3*x15231);
IkReal x15250=(gconst59*x15230);
IkReal x15251=(x15232+x15233);
evalcond[0]=((((-1.0)*r22*x15246))+(((-1.0)*x15241*x15247))+((r20*x15250)));
evalcond[1]=((((-1.0)*x15237*x15247))+(((-1.0)*r02*x15246))+((x15230*x15242)));
evalcond[2]=((1.0)+(((-1.0)*r12*x15246))+((r10*x15250))+(((-1.0)*x15238*x15247)));
evalcond[3]=((((-1.0)*r10*x15234*x15246))+((sj3*x15244))+((r11*x15243))+((x15238*x15249))+(((-1.0)*r12*x15230*x15236)));
evalcond[4]=((((-1.0)*r11*x15234))+(((-1.0)*r12*sj3*x15247))+(((-1.0)*r10*x15243*x15246))+(((-1.0)*x15236*x15244))+((x15238*x15248)));
evalcond[5]=((((-1.0)*r20*x15234*x15246))+((gconst58*x15240))+x15251+((r21*x15243))+((x15241*x15249))+(((-1.0)*r22*x15230*x15236)));
evalcond[6]=((((-1.0)*x15239))+((r01*x15243))+((x15237*x15249))+((sj3*x15235))+x15245+(((-1.0)*r00*x15234*x15246))+(((-1.0)*r02*x15230*x15236)));
evalcond[7]=(((x15237*x15248))+(((-1.0)*sj3*x15242*x15246))+x15251+(((-1.0)*r02*sj3*x15247))+(((-1.0)*r01*x15234))+(((-1.0)*x15235*x15236)));
evalcond[8]=((((-1.0)*gconst59*x15240*x15246))+(((-1.0)*x15245))+(((-1.0)*r21*x15234))+x15239+((x15241*x15248))+(((-1.0)*r22*sj3*x15247))+(((-1.0)*gconst58*r20*x15236)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15252 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst58*r21))+((gconst59*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15252.valid){
continue;
}
CheckValue<IkReal> x15253=IKPowWithIntegerCheck(IKsign((((gconst58*r00))+((gconst59*r01)))),-1);
if(!x15253.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15252.value)+(((1.5707963267949)*(x15253.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15254=IKsin(j4);
IkReal x15255=IKcos(j4);
IkReal x15256=(cj2*sj1);
IkReal x15257=(cj1*sj2);
IkReal x15258=(cj3*gconst59);
IkReal x15259=(gconst58*r00);
IkReal x15260=((1.0)*cj3);
IkReal x15261=(gconst58*r01);
IkReal x15262=(gconst58*r11);
IkReal x15263=(cj1*cj2);
IkReal x15264=(r20*sj3);
IkReal x15265=(gconst58*r21);
IkReal x15266=(gconst59*r00);
IkReal x15267=(gconst59*sj3);
IkReal x15268=(gconst58*r10);
IkReal x15269=(sj1*sj2);
IkReal x15270=((1.0)*x15255);
IkReal x15271=((1.0)*x15254);
IkReal x15272=(sj3*x15255);
IkReal x15273=(cj3*x15255);
IkReal x15274=(gconst59*x15254);
IkReal x15275=(x15256+x15257);
evalcond[0]=((((-1.0)*r22*x15270))+((r20*x15274))+(((-1.0)*x15265*x15271)));
evalcond[1]=((((-1.0)*x15261*x15271))+(((-1.0)*r02*x15270))+((x15254*x15266)));
evalcond[2]=((1.0)+(((-1.0)*x15262*x15271))+(((-1.0)*r12*x15270))+((r10*x15274)));
evalcond[3]=((((-1.0)*r12*x15254*x15260))+(((-1.0)*r10*x15258*x15270))+((sj3*x15268))+((x15262*x15273))+((r11*x15267)));
evalcond[4]=((((-1.0)*r10*x15267*x15270))+(((-1.0)*x15260*x15268))+(((-1.0)*r12*sj3*x15271))+((x15262*x15272))+(((-1.0)*r11*x15258)));
evalcond[5]=(((x15265*x15273))+x15275+((gconst58*x15264))+((r21*x15267))+(((-1.0)*r20*x15258*x15270))+(((-1.0)*r22*x15254*x15260)));
evalcond[6]=(((x15261*x15273))+((sj3*x15259))+(((-1.0)*r00*x15258*x15270))+(((-1.0)*r02*x15254*x15260))+x15269+((r01*x15267))+(((-1.0)*x15263)));
evalcond[7]=(((x15261*x15272))+x15275+(((-1.0)*x15259*x15260))+(((-1.0)*r02*sj3*x15271))+(((-1.0)*r01*x15258))+(((-1.0)*sj3*x15266*x15270)));
evalcond[8]=((((-1.0)*r21*x15258))+((x15265*x15272))+x15263+(((-1.0)*r22*sj3*x15271))+(((-1.0)*gconst58*r20*x15260))+(((-1.0)*x15269))+(((-1.0)*gconst59*x15264*x15270)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15277 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x15277)==0){
continue;
}
IkReal x15276=pow(x15277,-0.5);
CheckValue<IkReal> x15278 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x15278.valid){
continue;
}
IkReal gconst60=((-1.0)*(x15278.value));
IkReal gconst61=((-1.0)*r01*x15276);
IkReal gconst62=(r00*x15276);
CheckValue<IkReal> x15279 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x15279.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15279.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x15282 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x15282.valid){
continue;
}
IkReal x15280=((-1.0)*(x15282.value));
IkReal x15281=x15276;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst61;
cj5=gconst62;
j5=x15280;
IkReal gconst60=x15280;
IkReal gconst61=((-1.0)*r01*x15281);
IkReal gconst62=(r00*x15281);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x15285 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x15285.valid){
continue;
}
IkReal x15283=((-1.0)*(x15285.value));
IkReal x15284=x15276;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst61;
cj5=gconst62;
j5=x15283;
IkReal gconst60=x15283;
IkReal gconst61=((-1.0)*r01*x15284);
IkReal gconst62=(r00*x15284);
CheckValue<IkReal> x15293=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x15293.valid){
continue;
}
IkReal x15286=x15293.value;
IkReal x15287=(cj3*x15286);
IkReal x15288=(r21*x15287);
IkReal x15289=(r10*x15287);
IkReal x15290=(r11*x15287);
IkReal x15291=(r20*x15287);
IkReal x15292=(r00*r01*x15287);
j4eval[0]=IKsign((((r00*r01*r10*x15288))+((cj3*r12*r22))+((r00*r01*r20*x15290))+((r11*x15288*(r01*r01)))+((r20*x15289*(r00*r00)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x15296 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x15296.valid){
continue;
}
IkReal x15294=((-1.0)*(x15296.value));
IkReal x15295=x15276;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst61;
cj5=gconst62;
j5=x15294;
IkReal gconst60=x15294;
IkReal gconst61=((-1.0)*r01*x15295);
IkReal gconst62=(r00*x15295);
CheckValue<IkReal> x15304=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x15304.valid){
continue;
}
IkReal x15297=x15304.value;
IkReal x15298=(sj3*x15297);
IkReal x15299=(r11*x15298);
IkReal x15300=(r21*x15298);
IkReal x15301=(r20*x15298);
IkReal x15302=(r10*x15298);
IkReal x15303=(r00*r01*x15298);
j4eval[0]=IKsign((((r21*x15299*(r01*r01)))+((r00*r01*r20*x15299))+((r00*r01*r10*x15300))+((r10*x15301*(r00*r00)))+((r12*r22*sj3))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15305=gconst61*gconst61;
IkReal x15306=gconst62*gconst62;
IkReal x15307=((1.0)*gconst62);
IkReal x15308=(r10*r21);
IkReal x15309=(gconst61*sj3);
IkReal x15310=(cj3*r11);
IkReal x15311=(cj3*gconst61*r10);
IkReal x15312=(r20*x15306);
CheckValue<IkReal> x15313 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x15307*x15310))+(((-1.0)*r22*x15311)))),IkReal(((((-1.0)*r20*x15307*x15311))+((cj3*x15305*x15308))+(((-1.0)*x15310*x15312))+((gconst61*gconst62*r21*x15310)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15313.valid){
continue;
}
CheckValue<IkReal> x15314=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15307*x15308*x15309))+((r11*r21*sj3*x15305))+(((-1.0)*r11*r20*x15307*x15309))+((r12*r22*sj3))+((r10*sj3*x15312)))),-1);
if(!x15314.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15313.value)+(((1.5707963267949)*(x15314.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15315=IKsin(j4);
IkReal x15316=IKcos(j4);
IkReal x15317=(cj2*sj1);
IkReal x15318=(cj1*sj2);
IkReal x15319=(gconst62*sj3);
IkReal x15320=(cj1*cj2);
IkReal x15321=(gconst61*r11);
IkReal x15322=(gconst61*sj3);
IkReal x15323=((1.0)*cj3);
IkReal x15324=(sj1*sj2);
IkReal x15325=(gconst61*r21);
IkReal x15326=(gconst61*r01);
IkReal x15327=(cj3*gconst62);
IkReal x15328=((1.0)*x15316);
IkReal x15329=((1.0)*x15315);
IkReal x15330=(gconst62*x15315);
IkReal x15331=(cj3*x15316);
IkReal x15332=(x15317+x15318);
evalcond[0]=(((r20*x15330))+(((-1.0)*x15325*x15329))+(((-1.0)*r22*x15328)));
evalcond[1]=(((r00*x15330))+(((-1.0)*r02*x15328))+(((-1.0)*x15326*x15329)));
evalcond[2]=((1.0)+(((-1.0)*x15321*x15329))+(((-1.0)*r12*x15328))+((r10*x15330)));
evalcond[3]=(((r11*x15319))+(((-1.0)*r12*x15315*x15323))+(((-1.0)*gconst62*r10*x15316*x15323))+((r10*x15322))+((x15321*x15331)));
evalcond[4]=((((-1.0)*r12*sj3*x15329))+(((-1.0)*r10*x15319*x15328))+(((-1.0)*gconst62*r11*x15323))+(((-1.0)*gconst61*r10*x15323))+((sj3*x15316*x15321)));
evalcond[5]=((((-1.0)*gconst62*r20*x15316*x15323))+x15332+((x15325*x15331))+((r21*x15319))+(((-1.0)*r22*x15315*x15323))+((r20*x15322)));
evalcond[6]=((((-1.0)*x15320))+((r00*x15322))+((r01*x15319))+(((-1.0)*gconst62*r00*x15316*x15323))+x15324+((x15326*x15331))+(((-1.0)*r02*x15315*x15323)));
evalcond[7]=((((-1.0)*gconst61*r00*x15323))+(((-1.0)*gconst62*r01*x15323))+x15332+(((-1.0)*r02*sj3*x15329))+((r01*x15316*x15322))+(((-1.0)*r00*x15319*x15328)));
evalcond[8]=((((-1.0)*x15324))+((r21*x15316*x15322))+(((-1.0)*gconst62*r21*x15323))+(((-1.0)*gconst61*r20*x15323))+(((-1.0)*r20*x15319*x15328))+x15320+(((-1.0)*r22*sj3*x15329)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15333=gconst62*gconst62;
IkReal x15334=gconst61*gconst61;
IkReal x15335=(r20*sj3);
IkReal x15336=(gconst61*r10);
IkReal x15337=(r22*sj3);
IkReal x15338=(gconst62*r11);
IkReal x15339=(cj3*r21);
IkReal x15340=(cj3*r20);
IkReal x15341=((1.0)*r21*sj3);
CheckValue<IkReal> x15342=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+(((-1.0)*gconst62*x15336*x15339))+(((-1.0)*gconst61*x15338*x15340))+((r11*x15334*x15339))+((r10*x15333*x15340)))),-1);
if(!x15342.valid){
continue;
}
CheckValue<IkReal> x15343 = IKatan2WithCheck(IkReal((((x15336*x15337))+((x15337*x15338)))),IkReal((((r11*x15333*x15335))+(((-1.0)*gconst61*x15338*x15341))+(((-1.0)*r10*x15334*x15341))+((gconst62*x15335*x15336)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15343.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15342.value)))+(x15343.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15344=IKsin(j4);
IkReal x15345=IKcos(j4);
IkReal x15346=(cj2*sj1);
IkReal x15347=(cj1*sj2);
IkReal x15348=(gconst62*sj3);
IkReal x15349=(cj1*cj2);
IkReal x15350=(gconst61*r11);
IkReal x15351=(gconst61*sj3);
IkReal x15352=((1.0)*cj3);
IkReal x15353=(sj1*sj2);
IkReal x15354=(gconst61*r21);
IkReal x15355=(gconst61*r01);
IkReal x15356=(cj3*gconst62);
IkReal x15357=((1.0)*x15345);
IkReal x15358=((1.0)*x15344);
IkReal x15359=(gconst62*x15344);
IkReal x15360=(cj3*x15345);
IkReal x15361=(x15346+x15347);
evalcond[0]=((((-1.0)*r22*x15357))+(((-1.0)*x15354*x15358))+((r20*x15359)));
evalcond[1]=((((-1.0)*x15355*x15358))+(((-1.0)*r02*x15357))+((r00*x15359)));
evalcond[2]=((1.0)+(((-1.0)*x15350*x15358))+((r10*x15359))+(((-1.0)*r12*x15357)));
evalcond[3]=(((x15350*x15360))+(((-1.0)*r12*x15344*x15352))+((r10*x15351))+((r11*x15348))+(((-1.0)*gconst62*r10*x15345*x15352)));
evalcond[4]=(((sj3*x15345*x15350))+(((-1.0)*r12*sj3*x15358))+(((-1.0)*r10*x15348*x15357))+(((-1.0)*gconst61*r10*x15352))+(((-1.0)*gconst62*r11*x15352)));
evalcond[5]=(((r21*x15348))+x15361+((x15354*x15360))+((r20*x15351))+(((-1.0)*gconst62*r20*x15345*x15352))+(((-1.0)*r22*x15344*x15352)));
evalcond[6]=(((r01*x15348))+(((-1.0)*r02*x15344*x15352))+x15353+((x15355*x15360))+(((-1.0)*x15349))+((r00*x15351))+(((-1.0)*gconst62*r00*x15345*x15352)));
evalcond[7]=((((-1.0)*r00*x15348*x15357))+((r01*x15345*x15351))+x15361+(((-1.0)*gconst62*r01*x15352))+(((-1.0)*gconst61*r00*x15352))+(((-1.0)*r02*sj3*x15358)));
evalcond[8]=((((-1.0)*r22*sj3*x15358))+(((-1.0)*gconst62*r21*x15352))+(((-1.0)*r20*x15348*x15357))+x15349+(((-1.0)*gconst61*r20*x15352))+(((-1.0)*x15353))+((r21*x15345*x15351)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15362=((1.0)*gconst61);
CheckValue<IkReal> x15363 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst62*r00))+(((-1.0)*r01*x15362)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15363.valid){
continue;
}
CheckValue<IkReal> x15364=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst62*r21))+(((-1.0)*r20*x15362)))),-1);
if(!x15364.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15363.value)+(((1.5707963267949)*(x15364.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15365=IKsin(j4);
IkReal x15366=IKcos(j4);
IkReal x15367=(cj2*sj1);
IkReal x15368=(cj1*sj2);
IkReal x15369=(gconst62*sj3);
IkReal x15370=(cj1*cj2);
IkReal x15371=(gconst61*r11);
IkReal x15372=(gconst61*sj3);
IkReal x15373=((1.0)*cj3);
IkReal x15374=(sj1*sj2);
IkReal x15375=(gconst61*r21);
IkReal x15376=(gconst61*r01);
IkReal x15377=(cj3*gconst62);
IkReal x15378=((1.0)*x15366);
IkReal x15379=((1.0)*x15365);
IkReal x15380=(gconst62*x15365);
IkReal x15381=(cj3*x15366);
IkReal x15382=(x15368+x15367);
evalcond[0]=((((-1.0)*x15375*x15379))+((r20*x15380))+(((-1.0)*r22*x15378)));
evalcond[1]=((((-1.0)*x15376*x15379))+(((-1.0)*r02*x15378))+((r00*x15380)));
evalcond[2]=((1.0)+((r10*x15380))+(((-1.0)*r12*x15378))+(((-1.0)*x15371*x15379)));
evalcond[3]=(((x15371*x15381))+((r11*x15369))+(((-1.0)*r12*x15365*x15373))+((r10*x15372))+(((-1.0)*gconst62*r10*x15366*x15373)));
evalcond[4]=(((sj3*x15366*x15371))+(((-1.0)*r12*sj3*x15379))+(((-1.0)*gconst62*r11*x15373))+(((-1.0)*r10*x15369*x15378))+(((-1.0)*gconst61*r10*x15373)));
evalcond[5]=(((r20*x15372))+x15382+(((-1.0)*gconst62*r20*x15366*x15373))+((x15375*x15381))+(((-1.0)*r22*x15365*x15373))+((r21*x15369)));
evalcond[6]=((((-1.0)*r02*x15365*x15373))+(((-1.0)*x15370))+((x15376*x15381))+((r00*x15372))+(((-1.0)*gconst62*r00*x15366*x15373))+x15374+((r01*x15369)));
evalcond[7]=((((-1.0)*gconst61*r00*x15373))+(((-1.0)*r02*sj3*x15379))+((r01*x15366*x15372))+(((-1.0)*r00*x15369*x15378))+x15382+(((-1.0)*gconst62*r01*x15373)));
evalcond[8]=((((-1.0)*gconst61*r20*x15373))+(((-1.0)*x15374))+x15370+(((-1.0)*gconst62*r21*x15373))+((r21*x15366*x15372))+(((-1.0)*r20*x15369*x15378))+(((-1.0)*r22*sj3*x15379)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15384 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x15384)==0){
continue;
}
IkReal x15383=pow(x15384,-0.5);
CheckValue<IkReal> x15385 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x15385.valid){
continue;
}
IkReal gconst63=((3.14159265358979)+(((-1.0)*(x15385.value))));
IkReal gconst64=((1.0)*r01*x15383);
IkReal gconst65=((-1.0)*r00*x15383);
CheckValue<IkReal> x15386 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x15386.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15386.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x15389 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x15389.valid){
continue;
}
IkReal x15387=((1.0)*(x15389.value));
IkReal x15388=x15383;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x15387)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x15387)));
IkReal gconst64=((1.0)*r01*x15388);
IkReal gconst65=((-1.0)*r00*x15388);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x15392 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x15392.valid){
continue;
}
IkReal x15390=((1.0)*(x15392.value));
IkReal x15391=x15383;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x15390)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x15390)));
IkReal gconst64=((1.0)*r01*x15391);
IkReal gconst65=((-1.0)*r00*x15391);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15393=gconst65*gconst65;
IkReal x15394=gconst64*gconst64;
IkReal x15395=(r11*r20);
IkReal x15396=(r22*sj3);
IkReal x15397=(gconst64*r10);
IkReal x15398=(gconst65*r11);
IkReal x15399=((1.0)*sj3);
IkReal x15400=((1.0)*cj3*gconst65);
IkReal x15401=(r21*x15394);
CheckValue<IkReal> x15402 = IKatan2WithCheck(IkReal((((x15396*x15398))+((x15396*x15397)))),IkReal(((((-1.0)*gconst64*r21*x15398*x15399))+(((-1.0)*r10*x15399*x15401))+((gconst65*r20*sj3*x15397))+((sj3*x15393*x15395)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15402.valid){
continue;
}
CheckValue<IkReal> x15403=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst64*x15395*x15400))+((cj3*r12*r22))+(((-1.0)*r21*x15397*x15400))+((cj3*r10*r20*x15393))+((cj3*r11*x15401)))),-1);
if(!x15403.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15402.value)+(((1.5707963267949)*(x15403.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15404=IKsin(j4);
IkReal x15405=IKcos(j4);
IkReal x15406=(cj2*sj1);
IkReal x15407=(cj1*sj2);
IkReal x15408=(gconst65*r10);
IkReal x15409=((1.0)*cj3);
IkReal x15410=(gconst65*r21);
IkReal x15411=(sj1*sj2);
IkReal x15412=(gconst64*r00);
IkReal x15413=(gconst65*sj3);
IkReal x15414=(cj1*cj2);
IkReal x15415=(cj3*gconst65);
IkReal x15416=(gconst64*sj3);
IkReal x15417=((1.0)*x15405);
IkReal x15418=((1.0)*x15404);
IkReal x15419=(gconst65*x15404);
IkReal x15420=(x15407+x15406);
IkReal x15421=(cj3*gconst64*x15405);
evalcond[0]=((((-1.0)*gconst64*r21*x15418))+((r20*x15419))+(((-1.0)*r22*x15417)));
evalcond[1]=(((r00*x15419))+(((-1.0)*gconst64*r01*x15418))+(((-1.0)*r02*x15417)));
evalcond[2]=((1.0)+(((-1.0)*r12*x15417))+((x15404*x15408))+(((-1.0)*gconst64*r11*x15418)));
evalcond[3]=(((r11*x15413))+(((-1.0)*r12*x15404*x15409))+((r11*x15421))+(((-1.0)*x15405*x15408*x15409))+((r10*x15416)));
evalcond[4]=(((r11*x15405*x15416))+(((-1.0)*gconst65*r11*x15409))+(((-1.0)*sj3*x15408*x15417))+(((-1.0)*gconst64*r10*x15409))+(((-1.0)*r12*sj3*x15418)));
evalcond[5]=((((-1.0)*gconst65*r20*x15405*x15409))+((r21*x15421))+(((-1.0)*r22*x15404*x15409))+((r20*x15416))+((sj3*x15410))+x15420);
evalcond[6]=((((-1.0)*x15414))+((r01*x15413))+((sj3*x15412))+x15411+(((-1.0)*r02*x15404*x15409))+((r01*x15421))+(((-1.0)*gconst65*r00*x15405*x15409)));
evalcond[7]=((((-1.0)*gconst65*r01*x15409))+(((-1.0)*r00*x15413*x15417))+((r01*x15405*x15416))+(((-1.0)*r02*sj3*x15418))+(((-1.0)*x15409*x15412))+x15420);
evalcond[8]=((((-1.0)*x15411))+(((-1.0)*gconst64*r20*x15409))+(((-1.0)*r20*x15413*x15417))+(((-1.0)*x15409*x15410))+x15414+((r21*x15405*x15416))+(((-1.0)*r22*sj3*x15418)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15422=((1.0)*gconst64);
CheckValue<IkReal> x15423 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst65*r00))+(((-1.0)*r01*x15422)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15423.valid){
continue;
}
CheckValue<IkReal> x15424=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst65*r21))+(((-1.0)*r20*x15422)))),-1);
if(!x15424.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15423.value)+(((1.5707963267949)*(x15424.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15425=IKsin(j4);
IkReal x15426=IKcos(j4);
IkReal x15427=(cj2*sj1);
IkReal x15428=(cj1*sj2);
IkReal x15429=(gconst65*r10);
IkReal x15430=((1.0)*cj3);
IkReal x15431=(gconst65*r21);
IkReal x15432=(sj1*sj2);
IkReal x15433=(gconst64*r00);
IkReal x15434=(gconst65*sj3);
IkReal x15435=(cj1*cj2);
IkReal x15436=(cj3*gconst65);
IkReal x15437=(gconst64*sj3);
IkReal x15438=((1.0)*x15426);
IkReal x15439=((1.0)*x15425);
IkReal x15440=(gconst65*x15425);
IkReal x15441=(x15427+x15428);
IkReal x15442=(cj3*gconst64*x15426);
evalcond[0]=(((r20*x15440))+(((-1.0)*r22*x15438))+(((-1.0)*gconst64*r21*x15439)));
evalcond[1]=((((-1.0)*gconst64*r01*x15439))+(((-1.0)*r02*x15438))+((r00*x15440)));
evalcond[2]=((1.0)+(((-1.0)*r12*x15438))+(((-1.0)*gconst64*r11*x15439))+((x15425*x15429)));
evalcond[3]=((((-1.0)*r12*x15425*x15430))+((r10*x15437))+((r11*x15442))+((r11*x15434))+(((-1.0)*x15426*x15429*x15430)));
evalcond[4]=(((r11*x15426*x15437))+(((-1.0)*r12*sj3*x15439))+(((-1.0)*sj3*x15429*x15438))+(((-1.0)*gconst64*r10*x15430))+(((-1.0)*gconst65*r11*x15430)));
evalcond[5]=((((-1.0)*r22*x15425*x15430))+((sj3*x15431))+x15441+(((-1.0)*gconst65*r20*x15426*x15430))+((r20*x15437))+((r21*x15442)));
evalcond[6]=(((sj3*x15433))+((r01*x15442))+(((-1.0)*x15435))+x15432+((r01*x15434))+(((-1.0)*gconst65*r00*x15426*x15430))+(((-1.0)*r02*x15425*x15430)));
evalcond[7]=((((-1.0)*gconst65*r01*x15430))+((r01*x15426*x15437))+x15441+(((-1.0)*r02*sj3*x15439))+(((-1.0)*r00*x15434*x15438))+(((-1.0)*x15430*x15433)));
evalcond[8]=((((-1.0)*r22*sj3*x15439))+((r21*x15426*x15437))+(((-1.0)*gconst64*r20*x15430))+(((-1.0)*x15432))+x15435+(((-1.0)*x15430*x15431))+(((-1.0)*r20*x15434*x15438)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15443=IKPowWithIntegerCheck(IKsign((((gconst64*r00))+((gconst65*r01)))),-1);
if(!x15443.valid){
continue;
}
CheckValue<IkReal> x15444 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst64*r21))+((gconst65*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15444.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15443.value)))+(x15444.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15445=IKsin(j4);
IkReal x15446=IKcos(j4);
IkReal x15447=(cj2*sj1);
IkReal x15448=(cj1*sj2);
IkReal x15449=(gconst65*r10);
IkReal x15450=((1.0)*cj3);
IkReal x15451=(gconst65*r21);
IkReal x15452=(sj1*sj2);
IkReal x15453=(gconst64*r00);
IkReal x15454=(gconst65*sj3);
IkReal x15455=(cj1*cj2);
IkReal x15456=(cj3*gconst65);
IkReal x15457=(gconst64*sj3);
IkReal x15458=((1.0)*x15446);
IkReal x15459=((1.0)*x15445);
IkReal x15460=(gconst65*x15445);
IkReal x15461=(x15447+x15448);
IkReal x15462=(cj3*gconst64*x15446);
evalcond[0]=((((-1.0)*r22*x15458))+((r20*x15460))+(((-1.0)*gconst64*r21*x15459)));
evalcond[1]=((((-1.0)*r02*x15458))+(((-1.0)*gconst64*r01*x15459))+((r00*x15460)));
evalcond[2]=((1.0)+(((-1.0)*gconst64*r11*x15459))+(((-1.0)*r12*x15458))+((x15445*x15449)));
evalcond[3]=(((r11*x15454))+((r10*x15457))+(((-1.0)*x15446*x15449*x15450))+((r11*x15462))+(((-1.0)*r12*x15445*x15450)));
evalcond[4]=(((r11*x15446*x15457))+(((-1.0)*gconst65*r11*x15450))+(((-1.0)*sj3*x15449*x15458))+(((-1.0)*gconst64*r10*x15450))+(((-1.0)*r12*sj3*x15459)));
evalcond[5]=(((r20*x15457))+((sj3*x15451))+((r21*x15462))+x15461+(((-1.0)*r22*x15445*x15450))+(((-1.0)*gconst65*r20*x15446*x15450)));
evalcond[6]=(((sj3*x15453))+((r01*x15454))+(((-1.0)*gconst65*r00*x15446*x15450))+(((-1.0)*r02*x15445*x15450))+((r01*x15462))+x15452+(((-1.0)*x15455)));
evalcond[7]=((((-1.0)*r02*sj3*x15459))+(((-1.0)*gconst65*r01*x15450))+((r01*x15446*x15457))+x15461+(((-1.0)*r00*x15454*x15458))+(((-1.0)*x15450*x15453)));
evalcond[8]=(((r21*x15446*x15457))+(((-1.0)*r22*sj3*x15459))+x15455+(((-1.0)*x15450*x15451))+(((-1.0)*gconst64*r20*x15450))+(((-1.0)*x15452))+(((-1.0)*r20*x15454*x15458)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15463=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15463);
rxp1_1=(px*r21);
rxp1_2=(r11*x15463);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x15464=(cj5*r10);
IkReal x15465=(r11*sj5);
j4eval[0]=((((-1.0)*x15465))+x15464);
j4eval[1]=(((sj3*x15465))+(((-1.0)*sj3*x15464)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15466=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15466);
rxp1_1=(px*r21);
rxp1_2=(r11*x15466);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x15467=(r11*sj5);
IkReal x15468=(cj5*r10);
j4eval[0]=((((-1.0)*x15467))+x15468);
j4eval[1]=((((-1.0)*cj3*x15468))+((cj3*x15467)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15469=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15469);
rxp1_1=(px*r21);
rxp1_2=(r11*x15469);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=(((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15470=((1.0)*r10);
CheckValue<IkReal> x15471=IKPowWithIntegerCheck(r02,-1);
if(!x15471.valid){
continue;
}
CheckValue<IkReal> x15472=IKPowWithIntegerCheck(sj3,-1);
if(!x15472.valid){
continue;
}
CheckValue<IkReal> x15473=IKPowWithIntegerCheck((((cj3*r11*sj5))+(((-1.0)*cj3*cj5*x15470))),-1);
if(!x15473.valid){
continue;
}
if( IKabs(((x15471.value)*(x15472.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15473.value)*(((((-1.0)*sj3*sj5*x15470))+(((-1.0)*cj5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15471.value)*(x15472.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x15473.value)*(((((-1.0)*sj3*sj5*x15470))+(((-1.0)*cj5*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15471.value)*(x15472.value)*((((cj2*sj1))+((cj1*sj2))))), ((x15473.value)*(((((-1.0)*sj3*sj5*x15470))+(((-1.0)*cj5*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15474=IKsin(j4);
IkReal x15475=IKcos(j4);
IkReal x15476=(cj2*sj1);
IkReal x15477=(cj1*sj2);
IkReal x15478=(r11*sj5);
IkReal x15479=(sj1*sj2);
IkReal x15480=(cj1*cj2);
IkReal x15481=(r21*sj5);
IkReal x15482=((1.0)*cj5);
IkReal x15483=(sj3*sj5);
IkReal x15484=(cj5*sj3);
IkReal x15485=((1.0)*x15474);
IkReal x15486=(cj3*x15475);
IkReal x15487=((1.0)*cj3*sj5);
IkReal x15488=(sj3*x15475);
IkReal x15489=(cj5*x15474);
IkReal x15490=(x15476+x15477);
evalcond[0]=((-1.0)*r02*x15475);
evalcond[1]=((((-1.0)*x15481*x15485))+((r20*x15489)));
evalcond[2]=(x15490+(((-1.0)*r02*sj3*x15485)));
evalcond[3]=((1.0)+((r10*x15489))+(((-1.0)*x15478*x15485)));
evalcond[4]=((((-1.0)*cj3*r02*x15485))+x15479+(((-1.0)*x15480)));
evalcond[5]=(((r10*x15483))+(((-1.0)*r10*x15482*x15486))+((r11*x15484))+((x15478*x15486)));
evalcond[6]=((((-1.0)*cj3*r11*x15482))+(((-1.0)*r10*x15482*x15488))+((x15478*x15488))+(((-1.0)*r10*x15487)));
evalcond[7]=((((-1.0)*r20*x15482*x15486))+((x15481*x15486))+((r21*x15484))+x15490+((r20*x15483)));
evalcond[8]=((((-1.0)*r20*x15482*x15488))+((x15481*x15488))+(((-1.0)*x15479))+x15480+(((-1.0)*cj3*r21*x15482))+(((-1.0)*r20*x15487)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15491=(cj5*r10);
IkReal x15492=((1.0)*sj3);
IkReal x15493=(r11*sj5);
CheckValue<IkReal> x15494=IKPowWithIntegerCheck((x15491+(((-1.0)*x15493))),-1);
if(!x15494.valid){
continue;
}
CheckValue<IkReal> x15495=IKPowWithIntegerCheck((((cj3*x15493))+(((-1.0)*cj3*x15491))),-1);
if(!x15495.valid){
continue;
}
if( IKabs(((-1.0)*(x15494.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15495.value)*(((((-1.0)*r10*sj5*x15492))+(((-1.0)*cj5*r11*x15492)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x15494.value)))+IKsqr(((x15495.value)*(((((-1.0)*r10*sj5*x15492))+(((-1.0)*cj5*r11*x15492))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x15494.value)), ((x15495.value)*(((((-1.0)*r10*sj5*x15492))+(((-1.0)*cj5*r11*x15492))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15496=IKsin(j4);
IkReal x15497=IKcos(j4);
IkReal x15498=(cj2*sj1);
IkReal x15499=(cj1*sj2);
IkReal x15500=(r11*sj5);
IkReal x15501=(sj1*sj2);
IkReal x15502=(cj1*cj2);
IkReal x15503=(r21*sj5);
IkReal x15504=((1.0)*cj5);
IkReal x15505=(sj3*sj5);
IkReal x15506=(cj5*sj3);
IkReal x15507=((1.0)*x15496);
IkReal x15508=(cj3*x15497);
IkReal x15509=((1.0)*cj3*sj5);
IkReal x15510=(sj3*x15497);
IkReal x15511=(cj5*x15496);
IkReal x15512=(x15498+x15499);
evalcond[0]=((-1.0)*r02*x15497);
evalcond[1]=(((r20*x15511))+(((-1.0)*x15503*x15507)));
evalcond[2]=((((-1.0)*r02*sj3*x15507))+x15512);
evalcond[3]=((1.0)+((r10*x15511))+(((-1.0)*x15500*x15507)));
evalcond[4]=((((-1.0)*x15502))+(((-1.0)*cj3*r02*x15507))+x15501);
evalcond[5]=(((x15500*x15508))+((r10*x15505))+((r11*x15506))+(((-1.0)*r10*x15504*x15508)));
evalcond[6]=((((-1.0)*r10*x15504*x15510))+((x15500*x15510))+(((-1.0)*cj3*r11*x15504))+(((-1.0)*r10*x15509)));
evalcond[7]=(((x15503*x15508))+(((-1.0)*r20*x15504*x15508))+((r21*x15506))+x15512+((r20*x15505)));
evalcond[8]=(((x15503*x15510))+(((-1.0)*r20*x15504*x15510))+(((-1.0)*cj3*r21*x15504))+(((-1.0)*r20*x15509))+(((-1.0)*x15501))+x15502);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15513=(cj5*r10);
IkReal x15514=(r11*sj5);
CheckValue<IkReal> x15515=IKPowWithIntegerCheck((x15513+(((-1.0)*x15514))),-1);
if(!x15515.valid){
continue;
}
CheckValue<IkReal> x15516=IKPowWithIntegerCheck(((((-1.0)*sj3*x15513))+((sj3*x15514))),-1);
if(!x15516.valid){
continue;
}
if( IKabs(((-1.0)*(x15515.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15516.value)*((((cj3*cj5*r11))+((cj3*r10*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x15515.value)))+IKsqr(((x15516.value)*((((cj3*cj5*r11))+((cj3*r10*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x15515.value)), ((x15516.value)*((((cj3*cj5*r11))+((cj3*r10*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15517=IKsin(j4);
IkReal x15518=IKcos(j4);
IkReal x15519=(cj2*sj1);
IkReal x15520=(cj1*sj2);
IkReal x15521=(r11*sj5);
IkReal x15522=(sj1*sj2);
IkReal x15523=(cj1*cj2);
IkReal x15524=(r21*sj5);
IkReal x15525=((1.0)*cj5);
IkReal x15526=(sj3*sj5);
IkReal x15527=(cj5*sj3);
IkReal x15528=((1.0)*x15517);
IkReal x15529=(cj3*x15518);
IkReal x15530=((1.0)*cj3*sj5);
IkReal x15531=(sj3*x15518);
IkReal x15532=(cj5*x15517);
IkReal x15533=(x15520+x15519);
evalcond[0]=((-1.0)*r02*x15518);
evalcond[1]=(((r20*x15532))+(((-1.0)*x15524*x15528)));
evalcond[2]=(x15533+(((-1.0)*r02*sj3*x15528)));
evalcond[3]=((1.0)+((r10*x15532))+(((-1.0)*x15521*x15528)));
evalcond[4]=((((-1.0)*x15523))+x15522+(((-1.0)*cj3*r02*x15528)));
evalcond[5]=(((r10*x15526))+(((-1.0)*r10*x15525*x15529))+((x15521*x15529))+((r11*x15527)));
evalcond[6]=((((-1.0)*r10*x15525*x15531))+(((-1.0)*cj3*r11*x15525))+((x15521*x15531))+(((-1.0)*r10*x15530)));
evalcond[7]=(((r20*x15526))+((x15524*x15529))+((r21*x15527))+(((-1.0)*r20*x15525*x15529))+x15533);
evalcond[8]=(((x15524*x15531))+(((-1.0)*r20*x15525*x15531))+(((-1.0)*cj3*r21*x15525))+(((-1.0)*x15522))+x15523+(((-1.0)*r20*x15530)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15534=cj5*cj5;
IkReal x15535=(r11*sj3);
IkReal x15536=(cj3*r10);
IkReal x15537=(cj3*r11);
IkReal x15538=(r10*sj3);
IkReal x15539=(cj5*r20*sj5);
IkReal x15540=(r21*x15534);
IkReal x15541=(r20*x15534);
IkReal x15542=((1.0)*cj5*r21*sj5);
CheckValue<IkReal> x15543 = IKatan2WithCheck(IkReal((((cj5*r22*x15535))+((r22*sj5*x15538)))),IkReal(((((-1.0)*r21*x15538))+((x15538*x15540))+(((-1.0)*x15535*x15542))+((x15538*x15539))+((x15535*x15541)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15543.valid){
continue;
}
CheckValue<IkReal> x15544=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+(((-1.0)*x15536*x15542))+(((-1.0)*x15537*x15540))+((x15536*x15541))+((r21*x15537))+(((-1.0)*x15537*x15539)))),-1);
if(!x15544.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15543.value)+(((1.5707963267949)*(x15544.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15545=IKsin(j4);
IkReal x15546=IKcos(j4);
IkReal x15547=(cj2*sj1);
IkReal x15548=(cj1*sj2);
IkReal x15549=((1.0)*r22);
IkReal x15550=(cj1*cj2);
IkReal x15551=(cj5*r01);
IkReal x15552=(r11*sj5);
IkReal x15553=((1.0)*cj3);
IkReal x15554=(cj5*r21);
IkReal x15555=(r00*sj5);
IkReal x15556=(sj1*sj2);
IkReal x15557=(r10*sj5);
IkReal x15558=(cj5*r10);
IkReal x15559=(r21*sj5);
IkReal x15560=(r01*sj5);
IkReal x15561=(cj5*r00);
IkReal x15562=(cj5*r20);
IkReal x15563=(r20*sj5);
IkReal x15564=(cj5*r11);
IkReal x15565=((1.0)*x15545);
IkReal x15566=(cj3*x15546);
IkReal x15567=((1.0)*x15546);
IkReal x15568=(sj3*x15546);
IkReal x15569=(x15547+x15548);
evalcond[0]=((((-1.0)*x15546*x15549))+(((-1.0)*x15559*x15565))+((x15545*x15562)));
evalcond[1]=((((-1.0)*r02*x15567))+((x15545*x15561))+(((-1.0)*x15560*x15565)));
evalcond[2]=((1.0)+(((-1.0)*x15552*x15565))+(((-1.0)*r12*x15567))+((x15545*x15558)));
evalcond[3]=(((x15552*x15566))+(((-1.0)*r12*x15545*x15553))+((sj3*x15564))+((sj3*x15557))+(((-1.0)*x15546*x15553*x15558)));
evalcond[4]=(((x15552*x15568))+(((-1.0)*sj3*x15558*x15567))+(((-1.0)*r12*sj3*x15565))+(((-1.0)*x15553*x15564))+(((-1.0)*x15553*x15557)));
evalcond[5]=(((x15559*x15566))+(((-1.0)*x15546*x15553*x15562))+((sj3*x15563))+((sj3*x15554))+(((-1.0)*cj3*x15545*x15549))+x15569);
evalcond[6]=((((-1.0)*x15550))+((x15560*x15566))+(((-1.0)*x15546*x15553*x15561))+((sj3*x15555))+((sj3*x15551))+(((-1.0)*r02*x15545*x15553))+x15556);
evalcond[7]=((((-1.0)*x15551*x15553))+((x15560*x15568))+(((-1.0)*sj3*x15561*x15567))+(((-1.0)*r02*sj3*x15565))+(((-1.0)*x15553*x15555))+x15569);
evalcond[8]=(((x15559*x15568))+(((-1.0)*x15556))+(((-1.0)*sj3*x15545*x15549))+(((-1.0)*x15553*x15563))+(((-1.0)*x15553*x15554))+(((-1.0)*sj3*x15562*x15567))+x15550);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15570=((1.0)*sj5);
CheckValue<IkReal> x15571=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x15570))+(((-1.0)*cj5*r21)))),-1);
if(!x15571.valid){
continue;
}
CheckValue<IkReal> x15572 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x15570))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15572.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15571.value)))+(x15572.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15573=IKsin(j4);
IkReal x15574=IKcos(j4);
IkReal x15575=(cj2*sj1);
IkReal x15576=(cj1*sj2);
IkReal x15577=((1.0)*r22);
IkReal x15578=(cj1*cj2);
IkReal x15579=(cj5*r01);
IkReal x15580=(r11*sj5);
IkReal x15581=((1.0)*cj3);
IkReal x15582=(cj5*r21);
IkReal x15583=(r00*sj5);
IkReal x15584=(sj1*sj2);
IkReal x15585=(r10*sj5);
IkReal x15586=(cj5*r10);
IkReal x15587=(r21*sj5);
IkReal x15588=(r01*sj5);
IkReal x15589=(cj5*r00);
IkReal x15590=(cj5*r20);
IkReal x15591=(r20*sj5);
IkReal x15592=(cj5*r11);
IkReal x15593=((1.0)*x15573);
IkReal x15594=(cj3*x15574);
IkReal x15595=((1.0)*x15574);
IkReal x15596=(sj3*x15574);
IkReal x15597=(x15575+x15576);
evalcond[0]=((((-1.0)*x15574*x15577))+((x15573*x15590))+(((-1.0)*x15587*x15593)));
evalcond[1]=((((-1.0)*r02*x15595))+(((-1.0)*x15588*x15593))+((x15573*x15589)));
evalcond[2]=((1.0)+(((-1.0)*r12*x15595))+(((-1.0)*x15580*x15593))+((x15573*x15586)));
evalcond[3]=(((sj3*x15592))+(((-1.0)*x15574*x15581*x15586))+((x15580*x15594))+((sj3*x15585))+(((-1.0)*r12*x15573*x15581)));
evalcond[4]=((((-1.0)*x15581*x15592))+(((-1.0)*sj3*x15586*x15595))+((x15580*x15596))+(((-1.0)*r12*sj3*x15593))+(((-1.0)*x15581*x15585)));
evalcond[5]=(((sj3*x15591))+(((-1.0)*x15574*x15581*x15590))+(((-1.0)*cj3*x15573*x15577))+((sj3*x15582))+x15597+((x15587*x15594)));
evalcond[6]=((((-1.0)*x15574*x15581*x15589))+((sj3*x15579))+(((-1.0)*r02*x15573*x15581))+((sj3*x15583))+x15584+(((-1.0)*x15578))+((x15588*x15594)));
evalcond[7]=((((-1.0)*sj3*x15589*x15595))+(((-1.0)*x15579*x15581))+(((-1.0)*x15581*x15583))+(((-1.0)*r02*sj3*x15593))+x15597+((x15588*x15596)));
evalcond[8]=((((-1.0)*sj3*x15590*x15595))+(((-1.0)*x15584))+(((-1.0)*x15581*x15591))+(((-1.0)*x15581*x15582))+x15578+((x15587*x15596))+(((-1.0)*sj3*x15573*x15577)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15598=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x15598.valid){
continue;
}
CheckValue<IkReal> x15599 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15599.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15598.value)))+(x15599.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15600=IKsin(j4);
IkReal x15601=IKcos(j4);
IkReal x15602=(cj2*sj1);
IkReal x15603=(cj1*sj2);
IkReal x15604=((1.0)*r22);
IkReal x15605=(cj1*cj2);
IkReal x15606=(cj5*r01);
IkReal x15607=(r11*sj5);
IkReal x15608=((1.0)*cj3);
IkReal x15609=(cj5*r21);
IkReal x15610=(r00*sj5);
IkReal x15611=(sj1*sj2);
IkReal x15612=(r10*sj5);
IkReal x15613=(cj5*r10);
IkReal x15614=(r21*sj5);
IkReal x15615=(r01*sj5);
IkReal x15616=(cj5*r00);
IkReal x15617=(cj5*r20);
IkReal x15618=(r20*sj5);
IkReal x15619=(cj5*r11);
IkReal x15620=((1.0)*x15600);
IkReal x15621=(cj3*x15601);
IkReal x15622=((1.0)*x15601);
IkReal x15623=(sj3*x15601);
IkReal x15624=(x15603+x15602);
evalcond[0]=(((x15600*x15617))+(((-1.0)*x15614*x15620))+(((-1.0)*x15601*x15604)));
evalcond[1]=(((x15600*x15616))+(((-1.0)*x15615*x15620))+(((-1.0)*r02*x15622)));
evalcond[2]=((1.0)+((x15600*x15613))+(((-1.0)*r12*x15622))+(((-1.0)*x15607*x15620)));
evalcond[3]=((((-1.0)*x15601*x15608*x15613))+((sj3*x15619))+((sj3*x15612))+((x15607*x15621))+(((-1.0)*r12*x15600*x15608)));
evalcond[4]=(((x15607*x15623))+(((-1.0)*sj3*x15613*x15622))+(((-1.0)*x15608*x15619))+(((-1.0)*x15608*x15612))+(((-1.0)*r12*sj3*x15620)));
evalcond[5]=((((-1.0)*x15601*x15608*x15617))+((x15614*x15621))+(((-1.0)*cj3*x15600*x15604))+x15624+((sj3*x15618))+((sj3*x15609)));
evalcond[6]=((((-1.0)*x15601*x15608*x15616))+(((-1.0)*x15605))+((x15615*x15621))+x15611+((sj3*x15610))+(((-1.0)*r02*x15600*x15608))+((sj3*x15606)));
evalcond[7]=((((-1.0)*r02*sj3*x15620))+(((-1.0)*x15606*x15608))+((x15615*x15623))+x15624+(((-1.0)*x15608*x15610))+(((-1.0)*sj3*x15616*x15622)));
evalcond[8]=(((x15614*x15623))+(((-1.0)*sj3*x15600*x15604))+(((-1.0)*x15611))+(((-1.0)*sj3*x15617*x15622))+x15605+(((-1.0)*x15608*x15609))+(((-1.0)*x15608*x15618)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15625=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15625);
rxp0_2=(py*r00);
rxp1_0=(r21*x15625);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15626=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15626);
rxp0_2=(py*r00);
rxp1_0=(r21*x15626);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[1]=(((cj3*r21*sj5))+(((-1.0)*cj3*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15627=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15627);
rxp0_2=(py*r00);
rxp1_0=(r21*x15627);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=cj3;
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15628=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15628);
rxp0_2=(py*r00);
rxp1_0=(r21*x15628);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15629=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15629);
rxp0_2=(py*r00);
rxp1_0=(r21*x15629);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15630=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15630);
rxp0_2=(py*r00);
rxp1_0=(r21*x15630);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15633=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x15633.valid){
continue;
}
IkReal x15631=x15633.value;
IkReal x15632=(cj0*x15631);
cj4array[0]=(((cj2*sj1*x15632))+((cj1*sj2*x15632)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15634=IKsin(j4);
IkReal x15635=IKcos(j4);
IkReal x15636=(cj5*r20);
IkReal x15637=((1.0)*x15635);
IkReal x15638=((1.0)*sj5*x15634);
evalcond[0]=((-1.0)*r12*x15634);
evalcond[1]=((((-1.0)*r12*x15637))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r21*x15638))+((x15634*x15636)));
evalcond[3]=((((-1.0)*r01*x15638))+((cj5*r00*x15634)));
evalcond[4]=(((r21*sj5*x15635))+(((-1.0)*sj1*sj2))+(((-1.0)*x15636*x15637))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15640=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x15640.valid){
continue;
}
IkReal x15639=x15640.value;
cj4array[0]=((((-1.0)*cj1*cj2*x15639))+((sj1*sj2*x15639)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15641=IKsin(j4);
IkReal x15642=IKcos(j4);
IkReal x15643=(cj5*r00);
IkReal x15644=(r01*sj5);
IkReal x15645=((1.0)*cj0);
IkReal x15646=((1.0)*x15642);
IkReal x15647=((1.0)*x15641);
evalcond[0]=((-1.0)*r12*x15641);
evalcond[1]=((((-1.0)*r12*x15646))+(((-1.0)*x15645)));
evalcond[2]=((((-1.0)*r21*sj5*x15647))+((cj5*r20*x15641)));
evalcond[3]=((((-1.0)*x15644*x15647))+((x15641*x15643)));
evalcond[4]=((((-1.0)*x15643*x15646))+(((-1.0)*cj2*sj1*x15645))+((x15642*x15644))+(((-1.0)*cj1*sj2*x15645)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15648=IKPowWithIntegerCheck(r12,-1);
if(!x15648.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x15648.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15649=IKsin(j4);
IkReal x15650=IKcos(j4);
IkReal x15651=(r01*sj5);
IkReal x15652=(r21*sj5);
IkReal x15653=((1.0)*cj0);
IkReal x15654=((1.0)*x15649);
IkReal x15655=(cj5*x15649);
IkReal x15656=((1.0)*cj5*x15650);
evalcond[0]=((-1.0)*r12*x15649);
evalcond[1]=((((-1.0)*x15652*x15654))+((r20*x15655)));
evalcond[2]=(((r00*x15655))+(((-1.0)*x15651*x15654)));
evalcond[3]=((((-1.0)*r20*x15656))+(((-1.0)*sj1*sj2))+((x15650*x15652))+((cj1*cj2)));
evalcond[4]=((((-1.0)*r00*x15656))+(((-1.0)*cj2*sj1*x15653))+((x15650*x15651))+(((-1.0)*cj1*sj2*x15653)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15657=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15657);
rxp0_2=(py*r00);
rxp1_0=(r21*x15657);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15658=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15658);
rxp0_2=(py*r00);
rxp1_0=(r21*x15658);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15659=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15659);
rxp0_2=(py*r00);
rxp1_0=(r21*x15659);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15662=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x15662.valid){
continue;
}
IkReal x15660=x15662.value;
IkReal x15661=(cj0*x15660);
cj4array[0]=(((cj1*sj2*x15661))+((cj2*sj1*x15661)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15663=IKsin(j4);
IkReal x15664=IKcos(j4);
IkReal x15665=(cj5*r20);
IkReal x15666=((1.0)*sj5);
evalcond[0]=(r12*x15663);
evalcond[1]=((((-1.0)*r12*x15664))+(((-1.0)*cj0)));
evalcond[2]=(((x15663*x15665))+(((-1.0)*r21*x15663*x15666)));
evalcond[3]=(((cj5*r00*x15663))+(((-1.0)*r01*x15663*x15666)));
evalcond[4]=((((-1.0)*sj1*sj2))+(((-1.0)*r21*x15664*x15666))+((cj1*cj2))+((x15664*x15665)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15668=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x15668.valid){
continue;
}
IkReal x15667=x15668.value;
cj4array[0]=(((sj1*sj2*x15667))+(((-1.0)*cj1*cj2*x15667)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15669=IKsin(j4);
IkReal x15670=IKcos(j4);
IkReal x15671=(cj5*r00);
IkReal x15672=((1.0)*cj0);
IkReal x15673=((1.0)*r01*sj5);
evalcond[0]=(r12*x15669);
evalcond[1]=((((-1.0)*x15672))+(((-1.0)*r12*x15670)));
evalcond[2]=((((-1.0)*r21*sj5*x15669))+((cj5*r20*x15669)));
evalcond[3]=(((x15669*x15671))+(((-1.0)*x15669*x15673)));
evalcond[4]=((((-1.0)*cj1*sj2*x15672))+(((-1.0)*x15670*x15673))+(((-1.0)*cj2*sj1*x15672))+((x15670*x15671)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15674=IKPowWithIntegerCheck(r12,-1);
if(!x15674.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x15674.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15675=IKsin(j4);
IkReal x15676=IKcos(j4);
IkReal x15677=((1.0)*sj5);
IkReal x15678=((1.0)*cj0);
IkReal x15679=(cj5*x15676);
IkReal x15680=(cj5*x15675);
evalcond[0]=(r12*x15675);
evalcond[1]=(((r20*x15680))+(((-1.0)*r21*x15675*x15677)));
evalcond[2]=(((r00*x15680))+(((-1.0)*r01*x15675*x15677)));
evalcond[3]=((((-1.0)*sj1*sj2))+((r20*x15679))+(((-1.0)*r21*x15676*x15677))+((cj1*cj2)));
evalcond[4]=((((-1.0)*r01*x15676*x15677))+(((-1.0)*cj1*sj2*x15678))+(((-1.0)*cj2*sj1*x15678))+((r00*x15679)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15681=((-1.0)*r01);
CheckValue<IkReal> x15682 = IKatan2WithCheck(IkReal(r00),IkReal(x15681),IKFAST_ATAN2_MAGTHRESH);
if(!x15682.valid){
continue;
}
IkReal gconst66=((-1.0)*(x15682.value));
IkReal gconst67=((-1.0)*r00);
IkReal gconst68=x15681;
CheckValue<IkReal> x15683 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x15683.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15683.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15684=((-1.0)*r01);
IkReal x15685=((-1.0)*py);
CheckValue<IkReal> x15687 = IKatan2WithCheck(IkReal(r00),IkReal(x15684),IKFAST_ATAN2_MAGTHRESH);
if(!x15687.valid){
continue;
}
IkReal x15686=((-1.0)*(x15687.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15685);
rxp0_2=(py*r00);
rxp1_0=(r21*x15685);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst67;
cj5=gconst68;
j5=x15686;
IkReal gconst66=x15686;
IkReal gconst67=((-1.0)*r00);
IkReal gconst68=x15684;
j4eval[0]=cj3;
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15688=((-1.0)*r01);
IkReal x15689=((-1.0)*py);
CheckValue<IkReal> x15691 = IKatan2WithCheck(IkReal(r00),IkReal(x15688),IKFAST_ATAN2_MAGTHRESH);
if(!x15691.valid){
continue;
}
IkReal x15690=((-1.0)*(x15691.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15689);
rxp0_2=(py*r00);
rxp1_0=(r21*x15689);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst67;
cj5=gconst68;
j5=x15690;
IkReal gconst66=x15690;
IkReal gconst67=((-1.0)*r00);
IkReal gconst68=x15688;
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15692=((-1.0)*r01);
IkReal x15693=((-1.0)*py);
CheckValue<IkReal> x15695 = IKatan2WithCheck(IkReal(r00),IkReal(x15692),IKFAST_ATAN2_MAGTHRESH);
if(!x15695.valid){
continue;
}
IkReal x15694=((-1.0)*(x15695.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15693);
rxp0_2=(py*r00);
rxp1_0=(r21*x15693);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst67;
cj5=gconst68;
j5=x15694;
IkReal gconst66=x15694;
IkReal gconst67=((-1.0)*r00);
IkReal gconst68=x15692;
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=((((-1.0)*cj3*r00*r21))+((cj3*r01*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15696=((1.0)*gconst68);
IkReal x15697=((1.0)*sj2);
CheckValue<IkReal> x15698=IKPowWithIntegerCheck(cj3,-1);
if(!x15698.valid){
continue;
}
CheckValue<IkReal> x15699=IKPowWithIntegerCheck(r12,-1);
if(!x15699.valid){
continue;
}
CheckValue<IkReal> x15700=IKPowWithIntegerCheck((((cj3*gconst67*r21))+(((-1.0)*cj3*r20*x15696))),-1);
if(!x15700.valid){
continue;
}
if( IKabs(((x15698.value)*(x15699.value)*((((cj1*cj2*sj0))+(((-1.0)*sj0*sj1*x15697)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15700.value)*(((((-1.0)*cj1*x15697))+(((-1.0)*cj2*sj1))+(((-1.0)*gconst67*r20*sj3))+(((-1.0)*r21*sj3*x15696)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15698.value)*(x15699.value)*((((cj1*cj2*sj0))+(((-1.0)*sj0*sj1*x15697))))))+IKsqr(((x15700.value)*(((((-1.0)*cj1*x15697))+(((-1.0)*cj2*sj1))+(((-1.0)*gconst67*r20*sj3))+(((-1.0)*r21*sj3*x15696))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15698.value)*(x15699.value)*((((cj1*cj2*sj0))+(((-1.0)*sj0*sj1*x15697))))), ((x15700.value)*(((((-1.0)*cj1*x15697))+(((-1.0)*cj2*sj1))+(((-1.0)*gconst67*r20*sj3))+(((-1.0)*r21*sj3*x15696))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15701=IKsin(j4);
IkReal x15702=IKcos(j4);
IkReal x15703=(gconst67*r21);
IkReal x15704=(cj2*sj0);
IkReal x15705=(r01*sj3);
IkReal x15706=((1.0)*sj1);
IkReal x15707=(gconst67*sj3);
IkReal x15708=((1.0)*gconst68);
IkReal x15709=(cj1*sj2);
IkReal x15710=((1.0)*cj0);
IkReal x15711=(cj3*r01);
IkReal x15712=(cj1*cj2);
IkReal x15713=((1.0)*x15701);
IkReal x15714=(gconst67*x15702);
IkReal x15715=(sj3*x15702);
IkReal x15716=((1.0)*cj3*r20);
IkReal x15717=(gconst68*x15702);
IkReal x15718=(gconst68*x15701);
IkReal x15719=((1.0)*cj3*r00);
evalcond[0]=((((-1.0)*x15710))+(((-1.0)*r12*x15702)));
evalcond[1]=(((r20*x15718))+(((-1.0)*x15703*x15713)));
evalcond[2]=(sj0+(((-1.0)*gconst67*r01*x15713))+((r00*x15718)));
evalcond[3]=((((-1.0)*cj3*r12*x15713))+(((-1.0)*sj0*sj2*x15706))+((cj1*x15704)));
evalcond[4]=((((-1.0)*x15704*x15706))+(((-1.0)*r12*sj3*x15713))+(((-1.0)*sj0*x15709)));
evalcond[5]=(((cj2*sj1))+((r20*x15707))+((cj3*x15702*x15703))+((gconst68*r21*sj3))+x15709+(((-1.0)*cj3*r20*x15702*x15708)));
evalcond[6]=(((x15703*x15715))+(((-1.0)*cj3*r21*x15708))+x15712+(((-1.0)*sj2*x15706))+(((-1.0)*r20*x15708*x15715))+(((-1.0)*gconst67*x15716)));
evalcond[7]=(((x15711*x15714))+((cj0*x15712))+((r00*x15707))+((gconst68*x15705))+(((-1.0)*cj0*sj2*x15706))+(((-1.0)*cj3*r00*x15702*x15708)));
evalcond[8]=((((-1.0)*r00*x15708*x15715))+(((-1.0)*cj0*cj2*x15706))+(((-1.0)*x15709*x15710))+((x15705*x15714))+(((-1.0)*x15708*x15711))+(((-1.0)*gconst67*x15719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15722=IKPowWithIntegerCheck(r12,-1);
if(!x15722.valid){
continue;
}
IkReal x15720=x15722.value;
IkReal x15721=((1.0)*sj0);
CheckValue<IkReal> x15723=IKPowWithIntegerCheck(sj3,-1);
if(!x15723.valid){
continue;
}
if( IKabs((x15720*(x15723.value)*(((((-1.0)*cj2*sj1*x15721))+(((-1.0)*cj1*sj2*x15721)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x15720)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15720*(x15723.value)*(((((-1.0)*cj2*sj1*x15721))+(((-1.0)*cj1*sj2*x15721))))))+IKsqr(((-1.0)*cj0*x15720))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15720*(x15723.value)*(((((-1.0)*cj2*sj1*x15721))+(((-1.0)*cj1*sj2*x15721))))), ((-1.0)*cj0*x15720));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15724=IKsin(j4);
IkReal x15725=IKcos(j4);
IkReal x15726=(gconst67*r21);
IkReal x15727=(cj2*sj0);
IkReal x15728=(r01*sj3);
IkReal x15729=((1.0)*sj1);
IkReal x15730=(gconst67*sj3);
IkReal x15731=((1.0)*gconst68);
IkReal x15732=(cj1*sj2);
IkReal x15733=((1.0)*cj0);
IkReal x15734=(cj3*r01);
IkReal x15735=(cj1*cj2);
IkReal x15736=((1.0)*x15724);
IkReal x15737=(gconst67*x15725);
IkReal x15738=(sj3*x15725);
IkReal x15739=((1.0)*cj3*r20);
IkReal x15740=(gconst68*x15725);
IkReal x15741=(gconst68*x15724);
IkReal x15742=((1.0)*cj3*r00);
evalcond[0]=((((-1.0)*r12*x15725))+(((-1.0)*x15733)));
evalcond[1]=((((-1.0)*x15726*x15736))+((r20*x15741)));
evalcond[2]=(((r00*x15741))+(((-1.0)*gconst67*r01*x15736))+sj0);
evalcond[3]=((((-1.0)*sj0*sj2*x15729))+(((-1.0)*cj3*r12*x15736))+((cj1*x15727)));
evalcond[4]=((((-1.0)*r12*sj3*x15736))+(((-1.0)*sj0*x15732))+(((-1.0)*x15727*x15729)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*cj3*r20*x15725*x15731))+((cj3*x15725*x15726))+((r20*x15730))+((gconst68*r21*sj3))+x15732);
evalcond[6]=((((-1.0)*cj3*r21*x15731))+(((-1.0)*sj2*x15729))+x15735+(((-1.0)*r20*x15731*x15738))+((x15726*x15738))+(((-1.0)*gconst67*x15739)));
evalcond[7]=(((x15734*x15737))+((gconst68*x15728))+(((-1.0)*cj3*r00*x15725*x15731))+((r00*x15730))+(((-1.0)*cj0*sj2*x15729))+((cj0*x15735)));
evalcond[8]=((((-1.0)*r00*x15731*x15738))+(((-1.0)*x15732*x15733))+(((-1.0)*x15731*x15734))+(((-1.0)*gconst67*x15742))+((x15728*x15737))+(((-1.0)*cj0*cj2*x15729)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15744=IKPowWithIntegerCheck(r12,-1);
if(!x15744.valid){
continue;
}
IkReal x15743=x15744.value;
CheckValue<IkReal> x15745=IKPowWithIntegerCheck(cj3,-1);
if(!x15745.valid){
continue;
}
if( IKabs((x15743*(x15745.value)*((((cj1*cj2*sj0))+(((-1.0)*sj0*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x15743)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15743*(x15745.value)*((((cj1*cj2*sj0))+(((-1.0)*sj0*sj1*sj2))))))+IKsqr(((-1.0)*cj0*x15743))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15743*(x15745.value)*((((cj1*cj2*sj0))+(((-1.0)*sj0*sj1*sj2))))), ((-1.0)*cj0*x15743));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15746=IKsin(j4);
IkReal x15747=IKcos(j4);
IkReal x15748=(gconst67*r21);
IkReal x15749=(cj2*sj0);
IkReal x15750=(r01*sj3);
IkReal x15751=((1.0)*sj1);
IkReal x15752=(gconst67*sj3);
IkReal x15753=((1.0)*gconst68);
IkReal x15754=(cj1*sj2);
IkReal x15755=((1.0)*cj0);
IkReal x15756=(cj3*r01);
IkReal x15757=(cj1*cj2);
IkReal x15758=((1.0)*x15746);
IkReal x15759=(gconst67*x15747);
IkReal x15760=(sj3*x15747);
IkReal x15761=((1.0)*cj3*r20);
IkReal x15762=(gconst68*x15747);
IkReal x15763=(gconst68*x15746);
IkReal x15764=((1.0)*cj3*r00);
evalcond[0]=((((-1.0)*x15755))+(((-1.0)*r12*x15747)));
evalcond[1]=(((r20*x15763))+(((-1.0)*x15748*x15758)));
evalcond[2]=(sj0+(((-1.0)*gconst67*r01*x15758))+((r00*x15763)));
evalcond[3]=(((cj1*x15749))+(((-1.0)*sj0*sj2*x15751))+(((-1.0)*cj3*r12*x15758)));
evalcond[4]=((((-1.0)*x15749*x15751))+(((-1.0)*r12*sj3*x15758))+(((-1.0)*sj0*x15754)));
evalcond[5]=(((cj3*x15747*x15748))+((cj2*sj1))+(((-1.0)*cj3*r20*x15747*x15753))+((r20*x15752))+((gconst68*r21*sj3))+x15754);
evalcond[6]=(x15757+(((-1.0)*r20*x15753*x15760))+(((-1.0)*sj2*x15751))+((x15748*x15760))+(((-1.0)*gconst67*x15761))+(((-1.0)*cj3*r21*x15753)));
evalcond[7]=((((-1.0)*cj0*sj2*x15751))+((gconst68*x15750))+((r00*x15752))+((x15756*x15759))+((cj0*x15757))+(((-1.0)*cj3*r00*x15747*x15753)));
evalcond[8]=(((x15750*x15759))+(((-1.0)*r00*x15753*x15760))+(((-1.0)*cj0*cj2*x15751))+(((-1.0)*x15753*x15756))+(((-1.0)*x15754*x15755))+(((-1.0)*gconst67*x15764)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x15765 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x15765.valid){
continue;
}
IkReal gconst69=((3.14159265358979)+(((-1.0)*(x15765.value))));
IkReal gconst70=((1.0)*r00);
IkReal gconst71=((1.0)*r01);
CheckValue<IkReal> x15766 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x15766.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15766.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15767=((-1.0)*py);
CheckValue<IkReal> x15769 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x15769.valid){
continue;
}
IkReal x15768=((1.0)*(x15769.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15767);
rxp0_2=(py*r00);
rxp1_0=(r21*x15767);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15768)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15768)));
IkReal gconst70=((1.0)*r00);
IkReal gconst71=((1.0)*r01);
j4eval[0]=cj3;
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15770=((-1.0)*py);
CheckValue<IkReal> x15772 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x15772.valid){
continue;
}
IkReal x15771=((1.0)*(x15772.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15770);
rxp0_2=(py*r00);
rxp1_0=(r21*x15770);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15771)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15771)));
IkReal gconst70=((1.0)*r00);
IkReal gconst71=((1.0)*r01);
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15773=((-1.0)*py);
CheckValue<IkReal> x15775 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x15775.valid){
continue;
}
IkReal x15774=((1.0)*(x15775.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15773);
rxp0_2=(py*r00);
rxp1_0=(r21*x15773);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15774)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15774)));
IkReal gconst70=((1.0)*r00);
IkReal gconst71=((1.0)*r01);
IkReal x15776=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=((((-1.0)*r01*r20*x15776))+((r00*r21*x15776)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15777=((1.0)*sj2);
IkReal x15778=((1.0)*gconst71);
CheckValue<IkReal> x15779=IKPowWithIntegerCheck(cj3,-1);
if(!x15779.valid){
continue;
}
CheckValue<IkReal> x15780=IKPowWithIntegerCheck(r12,-1);
if(!x15780.valid){
continue;
}
CheckValue<IkReal> x15781=IKPowWithIntegerCheck((((cj3*gconst70*r21))+(((-1.0)*cj3*r20*x15778))),-1);
if(!x15781.valid){
continue;
}
if( IKabs(((x15779.value)*(x15780.value)*((((cj1*cj2*sj0))+(((-1.0)*sj0*sj1*x15777)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15781.value)*(((((-1.0)*cj1*x15777))+(((-1.0)*cj2*sj1))+(((-1.0)*gconst70*r20*sj3))+(((-1.0)*r21*sj3*x15778)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15779.value)*(x15780.value)*((((cj1*cj2*sj0))+(((-1.0)*sj0*sj1*x15777))))))+IKsqr(((x15781.value)*(((((-1.0)*cj1*x15777))+(((-1.0)*cj2*sj1))+(((-1.0)*gconst70*r20*sj3))+(((-1.0)*r21*sj3*x15778))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15779.value)*(x15780.value)*((((cj1*cj2*sj0))+(((-1.0)*sj0*sj1*x15777))))), ((x15781.value)*(((((-1.0)*cj1*x15777))+(((-1.0)*cj2*sj1))+(((-1.0)*gconst70*r20*sj3))+(((-1.0)*r21*sj3*x15778))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15782=IKsin(j4);
IkReal x15783=IKcos(j4);
IkReal x15784=(gconst71*r21);
IkReal x15785=((1.0)*cj3);
IkReal x15786=(cj1*cj2);
IkReal x15787=(gconst70*r01);
IkReal x15788=((1.0)*sj1);
IkReal x15789=(gconst70*r00);
IkReal x15790=(cj1*sj2);
IkReal x15791=((1.0)*cj0);
IkReal x15792=(gconst71*r20);
IkReal x15793=(gconst71*r01);
IkReal x15794=(gconst71*r00);
IkReal x15795=(gconst70*r20);
IkReal x15796=((1.0)*x15782);
IkReal x15797=(sj3*x15783);
IkReal x15798=(gconst71*x15782);
IkReal x15799=(gconst70*r21*x15783);
evalcond[0]=((((-1.0)*x15791))+(((-1.0)*r12*x15783)));
evalcond[1]=((((-1.0)*gconst70*r21*x15796))+((x15782*x15792)));
evalcond[2]=(sj0+(((-1.0)*x15787*x15796))+((x15782*x15794)));
evalcond[3]=(((sj0*x15786))+(((-1.0)*sj0*sj2*x15788))+(((-1.0)*r12*x15782*x15785)));
evalcond[4]=((((-1.0)*r12*sj3*x15796))+(((-1.0)*sj0*x15790))+(((-1.0)*cj2*sj0*x15788)));
evalcond[5]=(((cj2*sj1))+((sj3*x15784))+(((-1.0)*x15783*x15785*x15792))+x15790+((cj3*x15799))+((sj3*x15795)));
evalcond[6]=((((-1.0)*x15792*x15797))+(((-1.0)*sj2*x15788))+x15786+(((-1.0)*x15785*x15795))+((gconst70*r21*x15797))+(((-1.0)*x15784*x15785)));
evalcond[7]=((((-1.0)*cj0*sj2*x15788))+((sj3*x15789))+(((-1.0)*x15783*x15785*x15794))+((cj0*x15786))+((sj3*x15793))+((cj3*x15783*x15787)));
evalcond[8]=((((-1.0)*x15785*x15789))+(((-1.0)*x15794*x15797))+((x15787*x15797))+(((-1.0)*x15785*x15793))+(((-1.0)*cj0*cj2*x15788))+(((-1.0)*x15790*x15791)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15802=IKPowWithIntegerCheck(r12,-1);
if(!x15802.valid){
continue;
}
IkReal x15800=x15802.value;
IkReal x15801=((1.0)*sj0);
CheckValue<IkReal> x15803=IKPowWithIntegerCheck(sj3,-1);
if(!x15803.valid){
continue;
}
if( IKabs((x15800*(x15803.value)*(((((-1.0)*cj2*sj1*x15801))+(((-1.0)*cj1*sj2*x15801)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x15800)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15800*(x15803.value)*(((((-1.0)*cj2*sj1*x15801))+(((-1.0)*cj1*sj2*x15801))))))+IKsqr(((-1.0)*cj0*x15800))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15800*(x15803.value)*(((((-1.0)*cj2*sj1*x15801))+(((-1.0)*cj1*sj2*x15801))))), ((-1.0)*cj0*x15800));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15804=IKsin(j4);
IkReal x15805=IKcos(j4);
IkReal x15806=(gconst71*r21);
IkReal x15807=((1.0)*cj3);
IkReal x15808=(cj1*cj2);
IkReal x15809=(gconst70*r01);
IkReal x15810=((1.0)*sj1);
IkReal x15811=(gconst70*r00);
IkReal x15812=(cj1*sj2);
IkReal x15813=((1.0)*cj0);
IkReal x15814=(gconst71*r20);
IkReal x15815=(gconst71*r01);
IkReal x15816=(gconst71*r00);
IkReal x15817=(gconst70*r20);
IkReal x15818=((1.0)*x15804);
IkReal x15819=(sj3*x15805);
IkReal x15820=(gconst71*x15804);
IkReal x15821=(gconst70*r21*x15805);
evalcond[0]=((((-1.0)*x15813))+(((-1.0)*r12*x15805)));
evalcond[1]=(((x15804*x15814))+(((-1.0)*gconst70*r21*x15818)));
evalcond[2]=(sj0+((x15804*x15816))+(((-1.0)*x15809*x15818)));
evalcond[3]=((((-1.0)*sj0*sj2*x15810))+(((-1.0)*r12*x15804*x15807))+((sj0*x15808)));
evalcond[4]=((((-1.0)*r12*sj3*x15818))+(((-1.0)*sj0*x15812))+(((-1.0)*cj2*sj0*x15810)));
evalcond[5]=(((cj2*sj1))+((sj3*x15817))+((cj3*x15821))+((sj3*x15806))+(((-1.0)*x15805*x15807*x15814))+x15812);
evalcond[6]=(((gconst70*r21*x15819))+(((-1.0)*x15814*x15819))+(((-1.0)*sj2*x15810))+(((-1.0)*x15806*x15807))+x15808+(((-1.0)*x15807*x15817)));
evalcond[7]=(((sj3*x15811))+((sj3*x15815))+((cj0*x15808))+((cj3*x15805*x15809))+(((-1.0)*x15805*x15807*x15816))+(((-1.0)*cj0*sj2*x15810)));
evalcond[8]=((((-1.0)*x15812*x15813))+((x15809*x15819))+(((-1.0)*cj0*cj2*x15810))+(((-1.0)*x15816*x15819))+(((-1.0)*x15807*x15811))+(((-1.0)*x15807*x15815)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15823=IKPowWithIntegerCheck(r12,-1);
if(!x15823.valid){
continue;
}
IkReal x15822=x15823.value;
CheckValue<IkReal> x15824=IKPowWithIntegerCheck(cj3,-1);
if(!x15824.valid){
continue;
}
if( IKabs((x15822*(x15824.value)*((((cj1*cj2*sj0))+(((-1.0)*sj0*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x15822)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15822*(x15824.value)*((((cj1*cj2*sj0))+(((-1.0)*sj0*sj1*sj2))))))+IKsqr(((-1.0)*cj0*x15822))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15822*(x15824.value)*((((cj1*cj2*sj0))+(((-1.0)*sj0*sj1*sj2))))), ((-1.0)*cj0*x15822));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15825=IKsin(j4);
IkReal x15826=IKcos(j4);
IkReal x15827=(gconst71*r21);
IkReal x15828=((1.0)*cj3);
IkReal x15829=(cj1*cj2);
IkReal x15830=(gconst70*r01);
IkReal x15831=((1.0)*sj1);
IkReal x15832=(gconst70*r00);
IkReal x15833=(cj1*sj2);
IkReal x15834=((1.0)*cj0);
IkReal x15835=(gconst71*r20);
IkReal x15836=(gconst71*r01);
IkReal x15837=(gconst71*r00);
IkReal x15838=(gconst70*r20);
IkReal x15839=((1.0)*x15825);
IkReal x15840=(sj3*x15826);
IkReal x15841=(gconst71*x15825);
IkReal x15842=(gconst70*r21*x15826);
evalcond[0]=((((-1.0)*r12*x15826))+(((-1.0)*x15834)));
evalcond[1]=((((-1.0)*gconst70*r21*x15839))+((x15825*x15835)));
evalcond[2]=(sj0+(((-1.0)*x15830*x15839))+((x15825*x15837)));
evalcond[3]=((((-1.0)*r12*x15825*x15828))+((sj0*x15829))+(((-1.0)*sj0*sj2*x15831)));
evalcond[4]=((((-1.0)*sj0*x15833))+(((-1.0)*r12*sj3*x15839))+(((-1.0)*cj2*sj0*x15831)));
evalcond[5]=((((-1.0)*x15826*x15828*x15835))+((cj2*sj1))+((cj3*x15842))+((sj3*x15827))+x15833+((sj3*x15838)));
evalcond[6]=((((-1.0)*x15835*x15840))+((gconst70*r21*x15840))+(((-1.0)*sj2*x15831))+(((-1.0)*x15828*x15838))+(((-1.0)*x15827*x15828))+x15829);
evalcond[7]=((((-1.0)*x15826*x15828*x15837))+(((-1.0)*cj0*sj2*x15831))+((cj3*x15826*x15830))+((sj3*x15836))+((sj3*x15832))+((cj0*x15829)));
evalcond[8]=((((-1.0)*x15833*x15834))+(((-1.0)*cj0*cj2*x15831))+(((-1.0)*x15837*x15840))+(((-1.0)*x15828*x15836))+(((-1.0)*x15828*x15832))+((x15830*x15840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15844=IKPowWithIntegerCheck(r12,-1);
if(!x15844.valid){
continue;
}
IkReal x15843=x15844.value;
CheckValue<IkReal> x15845=IKPowWithIntegerCheck(cj3,-1);
if(!x15845.valid){
continue;
}
if( IKabs((x15843*(x15845.value)*((((cj1*cj2*sj0))+(((-1.0)*sj0*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x15843)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15843*(x15845.value)*((((cj1*cj2*sj0))+(((-1.0)*sj0*sj1*sj2))))))+IKsqr(((-1.0)*cj0*x15843))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15843*(x15845.value)*((((cj1*cj2*sj0))+(((-1.0)*sj0*sj1*sj2))))), ((-1.0)*cj0*x15843));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15846=IKsin(j4);
IkReal x15847=IKcos(j4);
IkReal x15848=(cj2*sj0);
IkReal x15849=((1.0)*cj3);
IkReal x15850=(cj5*r21);
IkReal x15851=(cj5*r01);
IkReal x15852=((1.0)*sj1);
IkReal x15853=(r20*sj5);
IkReal x15854=(r01*sj5);
IkReal x15855=(r00*sj5);
IkReal x15856=(cj5*r00);
IkReal x15857=(cj5*r20);
IkReal x15858=(cj0*cj1);
IkReal x15859=((1.0)*sj2);
IkReal x15860=((1.0)*x15846);
IkReal x15861=((1.0)*x15847);
IkReal x15862=(r21*sj5*x15847);
evalcond[0]=((((-1.0)*r12*x15861))+(((-1.0)*cj0)));
evalcond[1]=(((x15846*x15857))+(((-1.0)*r21*sj5*x15860)));
evalcond[2]=(sj0+((x15846*x15856))+(((-1.0)*x15854*x15860)));
evalcond[3]=(((cj1*x15848))+(((-1.0)*sj0*sj2*x15852))+(((-1.0)*r12*x15846*x15849)));
evalcond[4]=((((-1.0)*cj1*sj0*x15859))+(((-1.0)*x15848*x15852))+(((-1.0)*r12*sj3*x15860)));
evalcond[5]=(((cj2*sj1))+((cj1*sj2))+((sj3*x15850))+((sj3*x15853))+(((-1.0)*x15847*x15849*x15857))+((cj3*x15862)));
evalcond[6]=(((sj3*x15862))+(((-1.0)*sj3*x15857*x15861))+(((-1.0)*sj2*x15852))+((cj1*cj2))+(((-1.0)*x15849*x15853))+(((-1.0)*x15849*x15850)));
evalcond[7]=(((cj2*x15858))+((cj3*x15847*x15854))+((sj3*x15855))+((sj3*x15851))+(((-1.0)*x15847*x15849*x15856))+(((-1.0)*cj0*sj2*x15852)));
evalcond[8]=(((sj3*x15847*x15854))+(((-1.0)*cj0*cj2*x15852))+(((-1.0)*sj3*x15856*x15861))+(((-1.0)*x15849*x15851))+(((-1.0)*x15849*x15855))+(((-1.0)*x15858*x15859)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15863=((1.0)*sj5);
IkReal x15864=((1.0)*cj5);
CheckValue<IkReal> x15865=IKPowWithIntegerCheck(((((-1.0)*r01*x15863))+((cj5*r00))),-1);
if(!x15865.valid){
continue;
}
CheckValue<IkReal> x15866=IKPowWithIntegerCheck((((cj3*r21*sj5))+(((-1.0)*cj3*r20*x15864))),-1);
if(!x15866.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x15865.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15866.value)*(((((-1.0)*r21*sj3*x15864))+(((-1.0)*cj2*sj1))+(((-1.0)*r20*sj3*x15863))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x15865.value)))+IKsqr(((x15866.value)*(((((-1.0)*r21*sj3*x15864))+(((-1.0)*cj2*sj1))+(((-1.0)*r20*sj3*x15863))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x15865.value)), ((x15866.value)*(((((-1.0)*r21*sj3*x15864))+(((-1.0)*cj2*sj1))+(((-1.0)*r20*sj3*x15863))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15867=IKsin(j4);
IkReal x15868=IKcos(j4);
IkReal x15869=(cj2*sj0);
IkReal x15870=((1.0)*cj3);
IkReal x15871=(cj5*r21);
IkReal x15872=(cj5*r01);
IkReal x15873=((1.0)*sj1);
IkReal x15874=(r20*sj5);
IkReal x15875=(r01*sj5);
IkReal x15876=(r00*sj5);
IkReal x15877=(cj5*r00);
IkReal x15878=(cj5*r20);
IkReal x15879=(cj0*cj1);
IkReal x15880=((1.0)*sj2);
IkReal x15881=((1.0)*x15867);
IkReal x15882=((1.0)*x15868);
IkReal x15883=(r21*sj5*x15868);
evalcond[0]=((((-1.0)*r12*x15882))+(((-1.0)*cj0)));
evalcond[1]=((((-1.0)*r21*sj5*x15881))+((x15867*x15878)));
evalcond[2]=(sj0+(((-1.0)*x15875*x15881))+((x15867*x15877)));
evalcond[3]=((((-1.0)*r12*x15867*x15870))+(((-1.0)*sj0*sj2*x15873))+((cj1*x15869)));
evalcond[4]=((((-1.0)*cj1*sj0*x15880))+(((-1.0)*x15869*x15873))+(((-1.0)*r12*sj3*x15881)));
evalcond[5]=(((cj2*sj1))+((cj1*sj2))+((cj3*x15883))+((sj3*x15874))+((sj3*x15871))+(((-1.0)*x15868*x15870*x15878)));
evalcond[6]=((((-1.0)*sj2*x15873))+(((-1.0)*sj3*x15878*x15882))+(((-1.0)*x15870*x15871))+(((-1.0)*x15870*x15874))+((sj3*x15883))+((cj1*cj2)));
evalcond[7]=(((cj2*x15879))+(((-1.0)*cj0*sj2*x15873))+((cj3*x15868*x15875))+((sj3*x15876))+((sj3*x15872))+(((-1.0)*x15868*x15870*x15877)));
evalcond[8]=((((-1.0)*cj0*cj2*x15873))+(((-1.0)*sj3*x15877*x15882))+(((-1.0)*x15870*x15876))+(((-1.0)*x15870*x15872))+((sj3*x15868*x15875))+(((-1.0)*x15879*x15880)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15884=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x15884.valid){
continue;
}
CheckValue<IkReal> x15885=IKPowWithIntegerCheck(r12,-1);
if(!x15885.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x15884.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x15885.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x15884.value)))+IKsqr(((-1.0)*cj0*(x15885.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x15884.value)), ((-1.0)*cj0*(x15885.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15886=IKsin(j4);
IkReal x15887=IKcos(j4);
IkReal x15888=(cj2*sj0);
IkReal x15889=((1.0)*cj3);
IkReal x15890=(cj5*r21);
IkReal x15891=(cj5*r01);
IkReal x15892=((1.0)*sj1);
IkReal x15893=(r20*sj5);
IkReal x15894=(r01*sj5);
IkReal x15895=(r00*sj5);
IkReal x15896=(cj5*r00);
IkReal x15897=(cj5*r20);
IkReal x15898=(cj0*cj1);
IkReal x15899=((1.0)*sj2);
IkReal x15900=((1.0)*x15886);
IkReal x15901=((1.0)*x15887);
IkReal x15902=(r21*sj5*x15887);
evalcond[0]=((((-1.0)*r12*x15901))+(((-1.0)*cj0)));
evalcond[1]=(((x15886*x15897))+(((-1.0)*r21*sj5*x15900)));
evalcond[2]=(sj0+(((-1.0)*x15894*x15900))+((x15886*x15896)));
evalcond[3]=((((-1.0)*r12*x15886*x15889))+(((-1.0)*sj0*sj2*x15892))+((cj1*x15888)));
evalcond[4]=((((-1.0)*cj1*sj0*x15899))+(((-1.0)*x15888*x15892))+(((-1.0)*r12*sj3*x15900)));
evalcond[5]=(((cj2*sj1))+((cj1*sj2))+((sj3*x15893))+((sj3*x15890))+(((-1.0)*x15887*x15889*x15897))+((cj3*x15902)));
evalcond[6]=((((-1.0)*sj2*x15892))+((sj3*x15902))+(((-1.0)*x15889*x15890))+(((-1.0)*x15889*x15893))+(((-1.0)*sj3*x15897*x15901))+((cj1*cj2)));
evalcond[7]=(((cj2*x15898))+((cj3*x15887*x15894))+(((-1.0)*cj0*sj2*x15892))+((sj3*x15891))+((sj3*x15895))+(((-1.0)*x15887*x15889*x15896)));
evalcond[8]=((((-1.0)*cj0*cj2*x15892))+(((-1.0)*x15898*x15899))+(((-1.0)*x15889*x15891))+(((-1.0)*x15889*x15895))+(((-1.0)*sj3*x15896*x15901))+((sj3*x15887*x15894)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15903=((1.0)*sj5);
CheckValue<IkReal> x15904=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x15904.valid){
continue;
}
CheckValue<IkReal> x15905 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*cj5*r00))+(((-1.0)*cj0*r01*x15903))+((cj5*r10*sj0))+(((-1.0)*r11*sj0*x15903)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15905.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15904.value)))+(x15905.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15906=IKsin(j4);
IkReal x15907=IKcos(j4);
IkReal x15908=(r11*sj5);
IkReal x15909=(cj2*sj0);
IkReal x15910=(cj5*sj3);
IkReal x15911=((1.0)*sj1);
IkReal x15912=(r21*sj5);
IkReal x15913=(r01*sj5);
IkReal x15914=(sj3*sj5);
IkReal x15915=(cj3*cj5);
IkReal x15916=(cj0*cj2);
IkReal x15917=(sj0*sj2);
IkReal x15918=(cj1*sj2);
IkReal x15919=((1.0)*cj0);
IkReal x15920=((1.0)*x15907);
IkReal x15921=((1.0)*x15906);
IkReal x15922=(cj3*x15907);
IkReal x15923=((1.0)*x15915);
IkReal x15924=((1.0)*cj3*sj5);
IkReal x15925=(cj5*x15906);
IkReal x15926=(sj3*x15907);
evalcond[0]=((((-1.0)*x15912*x15921))+((r20*x15925))+(((-1.0)*r22*x15920)));
evalcond[1]=(sj0+((r00*x15925))+(((-1.0)*r02*x15920))+(((-1.0)*x15913*x15921)));
evalcond[2]=(((r10*x15925))+(((-1.0)*x15908*x15921))+(((-1.0)*r12*x15920))+(((-1.0)*x15919)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*cj3*r22*x15921))+(((-1.0)*r20*x15915*x15920))+((r21*x15910))+((x15912*x15922))+((r20*x15914))+x15918);
evalcond[4]=((((-1.0)*r20*x15924))+(((-1.0)*r21*x15923))+((x15912*x15926))+(((-1.0)*r20*x15910*x15920))+(((-1.0)*sj2*x15911))+(((-1.0)*r22*sj3*x15921))+((cj1*cj2)));
evalcond[5]=(((cj1*x15916))+((x15913*x15922))+(((-1.0)*r00*x15915*x15920))+((r00*x15914))+((r01*x15910))+(((-1.0)*cj3*r02*x15921))+(((-1.0)*cj0*sj2*x15911)));
evalcond[6]=((((-1.0)*cj3*r12*x15921))+((cj1*x15909))+((r11*x15910))+((x15908*x15922))+(((-1.0)*x15911*x15917))+((r10*x15914))+(((-1.0)*r10*x15915*x15920)));
evalcond[7]=((((-1.0)*r02*sj3*x15921))+(((-1.0)*r00*x15910*x15920))+((x15913*x15926))+(((-1.0)*x15918*x15919))+(((-1.0)*x15911*x15916))+(((-1.0)*r00*x15924))+(((-1.0)*r01*x15923)));
evalcond[8]=((((-1.0)*r10*x15924))+((x15908*x15926))+(((-1.0)*r12*sj3*x15921))+(((-1.0)*r11*x15923))+(((-1.0)*x15909*x15911))+(((-1.0)*r10*x15910*x15920))+(((-1.0)*cj1*x15917)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15927=((1.0)*sj5);
CheckValue<IkReal> x15928 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x15927))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15928.valid){
continue;
}
CheckValue<IkReal> x15929=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x15927))+(((-1.0)*cj5*r01)))),-1);
if(!x15929.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15928.value)+(((1.5707963267949)*(x15929.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15930=IKsin(j4);
IkReal x15931=IKcos(j4);
IkReal x15932=(r11*sj5);
IkReal x15933=(cj2*sj0);
IkReal x15934=(cj5*sj3);
IkReal x15935=((1.0)*sj1);
IkReal x15936=(r21*sj5);
IkReal x15937=(r01*sj5);
IkReal x15938=(sj3*sj5);
IkReal x15939=(cj3*cj5);
IkReal x15940=(cj0*cj2);
IkReal x15941=(sj0*sj2);
IkReal x15942=(cj1*sj2);
IkReal x15943=((1.0)*cj0);
IkReal x15944=((1.0)*x15931);
IkReal x15945=((1.0)*x15930);
IkReal x15946=(cj3*x15931);
IkReal x15947=((1.0)*x15939);
IkReal x15948=((1.0)*cj3*sj5);
IkReal x15949=(cj5*x15930);
IkReal x15950=(sj3*x15931);
evalcond[0]=((((-1.0)*r22*x15944))+((r20*x15949))+(((-1.0)*x15936*x15945)));
evalcond[1]=((((-1.0)*r02*x15944))+sj0+((r00*x15949))+(((-1.0)*x15937*x15945)));
evalcond[2]=((((-1.0)*r12*x15944))+(((-1.0)*x15932*x15945))+(((-1.0)*x15943))+((r10*x15949)));
evalcond[3]=(((cj2*sj1))+((x15936*x15946))+(((-1.0)*cj3*r22*x15945))+((r21*x15934))+((r20*x15938))+(((-1.0)*r20*x15939*x15944))+x15942);
evalcond[4]=((((-1.0)*r22*sj3*x15945))+((x15936*x15950))+(((-1.0)*r20*x15934*x15944))+(((-1.0)*sj2*x15935))+(((-1.0)*r21*x15947))+(((-1.0)*r20*x15948))+((cj1*cj2)));
evalcond[5]=(((x15937*x15946))+((r00*x15938))+((r01*x15934))+(((-1.0)*r00*x15939*x15944))+(((-1.0)*cj3*r02*x15945))+((cj1*x15940))+(((-1.0)*cj0*sj2*x15935)));
evalcond[6]=((((-1.0)*r10*x15939*x15944))+((r11*x15934))+((cj1*x15933))+((x15932*x15946))+(((-1.0)*x15935*x15941))+(((-1.0)*cj3*r12*x15945))+((r10*x15938)));
evalcond[7]=((((-1.0)*r00*x15934*x15944))+((x15937*x15950))+(((-1.0)*r01*x15947))+(((-1.0)*r00*x15948))+(((-1.0)*x15935*x15940))+(((-1.0)*r02*sj3*x15945))+(((-1.0)*x15942*x15943)));
evalcond[8]=((((-1.0)*r10*x15934*x15944))+(((-1.0)*r12*sj3*x15945))+((x15932*x15950))+(((-1.0)*cj1*x15941))+(((-1.0)*r10*x15948))+(((-1.0)*x15933*x15935))+(((-1.0)*r11*x15947)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15951=((1.0)*sj5);
CheckValue<IkReal> x15952=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x15951)))),-1);
if(!x15952.valid){
continue;
}
CheckValue<IkReal> x15953 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x15951)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15953.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15952.value)))+(x15953.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15954=IKsin(j4);
IkReal x15955=IKcos(j4);
IkReal x15956=(r11*sj5);
IkReal x15957=(cj2*sj0);
IkReal x15958=(cj5*sj3);
IkReal x15959=((1.0)*sj1);
IkReal x15960=(r21*sj5);
IkReal x15961=(r01*sj5);
IkReal x15962=(sj3*sj5);
IkReal x15963=(cj3*cj5);
IkReal x15964=(cj0*cj2);
IkReal x15965=(sj0*sj2);
IkReal x15966=(cj1*sj2);
IkReal x15967=((1.0)*cj0);
IkReal x15968=((1.0)*x15955);
IkReal x15969=((1.0)*x15954);
IkReal x15970=(cj3*x15955);
IkReal x15971=((1.0)*x15963);
IkReal x15972=((1.0)*cj3*sj5);
IkReal x15973=(cj5*x15954);
IkReal x15974=(sj3*x15955);
evalcond[0]=(((r20*x15973))+(((-1.0)*x15960*x15969))+(((-1.0)*r22*x15968)));
evalcond[1]=(sj0+(((-1.0)*r02*x15968))+((r00*x15973))+(((-1.0)*x15961*x15969)));
evalcond[2]=((((-1.0)*x15967))+(((-1.0)*x15956*x15969))+((r10*x15973))+(((-1.0)*r12*x15968)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*cj3*r22*x15969))+((r20*x15962))+((x15960*x15970))+(((-1.0)*r20*x15963*x15968))+((r21*x15958))+x15966);
evalcond[4]=((((-1.0)*r22*sj3*x15969))+(((-1.0)*r20*x15958*x15968))+(((-1.0)*sj2*x15959))+((x15960*x15974))+((cj1*cj2))+(((-1.0)*r20*x15972))+(((-1.0)*r21*x15971)));
evalcond[5]=((((-1.0)*r00*x15963*x15968))+((cj1*x15964))+((r01*x15958))+(((-1.0)*cj0*sj2*x15959))+((r00*x15962))+((x15961*x15970))+(((-1.0)*cj3*r02*x15969)));
evalcond[6]=((((-1.0)*x15959*x15965))+((x15956*x15970))+((r11*x15958))+((r10*x15962))+((cj1*x15957))+(((-1.0)*cj3*r12*x15969))+(((-1.0)*r10*x15963*x15968)));
evalcond[7]=((((-1.0)*x15959*x15964))+(((-1.0)*x15966*x15967))+((x15961*x15974))+(((-1.0)*r00*x15972))+(((-1.0)*r01*x15971))+(((-1.0)*r00*x15958*x15968))+(((-1.0)*r02*sj3*x15969)));
evalcond[8]=((((-1.0)*x15957*x15959))+(((-1.0)*cj1*x15965))+((x15956*x15974))+(((-1.0)*r12*sj3*x15969))+(((-1.0)*r11*x15971))+(((-1.0)*r10*x15958*x15968))+(((-1.0)*r10*x15972)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15975=r21*r21;
IkReal x15976=cj5*cj5;
IkReal x15977=r20*r20;
IkReal x15978=(cj5*r21);
IkReal x15979=(r20*sj5);
IkReal x15980=(r21*sj5);
IkReal x15981=(sj1*sj2);
IkReal x15982=(cj1*cj2);
IkReal x15983=(cj5*r20);
IkReal x15984=((1.0)*cj3*r22);
IkReal x15985=(cj3*r20*r21);
IkReal x15986=(cj3*cj5*sj5);
IkReal x15987=(sj3*x15975);
CheckValue<IkReal> x15988 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x15981))+((r22*x15982))+(((-1.0)*x15978*x15984))+(((-1.0)*x15979*x15984)))),IkReal((((x15975*x15986))+((x15982*x15983))+(((-1.0)*x15981*x15983))+((x15980*x15981))+(((-1.0)*x15980*x15982))+(((-2.0)*x15976*x15985))+(((-1.0)*x15977*x15986))+x15985)),IKFAST_ATAN2_MAGTHRESH);
if(!x15988.valid){
continue;
}
CheckValue<IkReal> x15989=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+(((-1.0)*x15976*x15987))+((sj3*x15976*x15977))+(((-2.0)*sj3*x15978*x15979))+x15987)),-1);
if(!x15989.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15988.value)+(((1.5707963267949)*(x15989.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x15990=IKsin(j4);
IkReal x15991=IKcos(j4);
IkReal x15992=((1.0)*r22);
IkReal x15993=(cj5*sj3);
IkReal x15994=((1.0)*r21);
IkReal x15995=(r20*sj5);
IkReal x15996=(cj3*cj5);
IkReal x15997=(r21*sj5*x15991);
IkReal x15998=((1.0)*r20*x15991);
evalcond[0]=((((-1.0)*x15991*x15992))+(((-1.0)*sj5*x15990*x15994))+((cj5*r20*x15990)));
evalcond[1]=(((r21*x15993))+((cj2*sj1))+(((-1.0)*cj3*x15990*x15992))+((cj1*sj2))+((sj3*x15995))+((cj3*x15997))+(((-1.0)*x15996*x15998)));
evalcond[2]=((((-1.0)*sj1*sj2))+((sj3*x15997))+(((-1.0)*x15994*x15996))+(((-1.0)*sj3*x15990*x15992))+(((-1.0)*x15993*x15998))+((cj1*cj2))+(((-1.0)*cj3*x15995)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15999=(cj5*sj4);
IkReal x16000=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x15999))+((r01*x16000))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x15999))+(((-1.0)*r11*x16000))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x15999))+((r01*x16000))+((cj4*r02))))+IKsqr((((r10*x15999))+(((-1.0)*r11*x16000))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x15999))+((r01*x16000))+((cj4*r02))), (((r10*x15999))+(((-1.0)*r11*x16000))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x16001=IKcos(j0);
IkReal x16002=IKsin(j0);
IkReal x16003=((0.125)*sj5);
IkReal x16004=(r10*sj3);
IkReal x16005=(cj3*r00);
IkReal x16006=(cj5*sj4);
IkReal x16007=((1.0)*sj2);
IkReal x16008=((1.0)*sj4);
IkReal x16009=(r01*sj5);
IkReal x16010=(cj3*r10);
IkReal x16011=(cj5*r01);
IkReal x16012=((0.3)*sj2);
IkReal x16013=((1.0)*cj3);
IkReal x16014=(cj5*r11);
IkReal x16015=(cj4*sj3);
IkReal x16016=(r00*sj3);
IkReal x16017=(cj3*cj4);
IkReal x16018=(cj2*sj1);
IkReal x16019=((1.0)*sj5);
IkReal x16020=(r11*sj5);
IkReal x16021=((1.0)*cj4);
IkReal x16022=(cj5*x16021);
IkReal x16023=(sj1*x16002);
IkReal x16024=(cj1*x16001);
IkReal x16025=(cj1*x16002);
IkReal x16026=((1.0)*x16001);
IkReal x16027=(sj1*x16001);
evalcond[0]=(x16002+((r00*x16006))+(((-1.0)*r02*x16021))+(((-1.0)*x16008*x16009)));
evalcond[1]=(((r10*x16006))+(((-1.0)*x16008*x16020))+(((-1.0)*x16026))+(((-1.0)*r12*x16021)));
evalcond[2]=((((-0.125)*x16002))+(((-0.3)*x16001*x16018))+(((-1.0)*px))+(((-1.0)*x16012*x16024))+((r00*x16003))+(((0.125)*x16011))+(((-0.35)*x16027)));
evalcond[3]=(((r10*x16003))+(((-0.3)*x16002*x16018))+(((-1.0)*py))+(((-1.0)*x16012*x16025))+(((0.125)*x16001))+(((0.125)*x16014))+(((-0.35)*x16023)));
evalcond[4]=((((-1.0)*x16007*x16027))+(((-1.0)*x16005*x16022))+((x16009*x16017))+((sj5*x16016))+(((-1.0)*cj3*r02*x16008))+((sj3*x16011))+((cj2*x16024)));
evalcond[5]=((((-1.0)*cj3*r12*x16008))+(((-1.0)*x16007*x16023))+((sj5*x16004))+((x16017*x16020))+((sj3*x16014))+(((-1.0)*x16010*x16022))+((cj2*x16025)));
evalcond[6]=((((-1.0)*x16011*x16013))+(((-1.0)*x16007*x16024))+(((-1.0)*cj5*r00*x16015))+((x16009*x16015))+(((-1.0)*x16005*x16019))+(((-1.0)*r02*sj3*x16008))+(((-1.0)*x16018*x16026)));
evalcond[7]=((((-1.0)*x16007*x16025))+(((-1.0)*x16010*x16019))+(((-1.0)*r12*sj3*x16008))+(((-1.0)*x16002*x16018))+(((-1.0)*x16004*x16022))+((x16015*x16020))+(((-1.0)*x16013*x16014)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16028=r21*r21;
IkReal x16029=cj5*cj5;
IkReal x16030=r20*r20;
IkReal x16031=(cj5*r20);
IkReal x16032=(cj1*sj2);
IkReal x16033=(r20*sj3);
IkReal x16034=((1.0)*r21);
IkReal x16035=((2.0)*r21);
IkReal x16036=(cj2*sj1);
IkReal x16037=(cj3*x16029);
IkReal x16038=(cj5*sj3*sj5);
IkReal x16039=((1.0)*x16028);
CheckValue<IkReal> x16040 = IKatan2WithCheck(IkReal((((r22*sj5*x16033))+((cj5*r21*r22*sj3))+((r22*x16036))+((r22*x16032)))),IkReal(((((-1.0)*x16038*x16039))+((x16029*x16033*x16035))+(((-1.0)*sj5*x16032*x16034))+(((-1.0)*x16033*x16034))+((x16031*x16032))+((x16031*x16036))+((x16030*x16038))+(((-1.0)*sj5*x16034*x16036)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16040.valid){
continue;
}
CheckValue<IkReal> x16041=IKPowWithIntegerCheck(IKsign((((cj3*(r22*r22)))+(((-1.0)*x16037*x16039))+((x16030*x16037))+(((-1.0)*cj3*sj5*x16031*x16035))+((cj3*x16028)))),-1);
if(!x16041.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x16040.value)+(((1.5707963267949)*(x16041.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x16042=IKsin(j4);
IkReal x16043=IKcos(j4);
IkReal x16044=((1.0)*r22);
IkReal x16045=(cj5*sj3);
IkReal x16046=((1.0)*r21);
IkReal x16047=(r20*sj5);
IkReal x16048=(cj3*cj5);
IkReal x16049=(r21*sj5*x16043);
IkReal x16050=((1.0)*r20*x16043);
evalcond[0]=((((-1.0)*sj5*x16042*x16046))+((cj5*r20*x16042))+(((-1.0)*x16043*x16044)));
evalcond[1]=(((cj2*sj1))+((cj3*x16049))+((r21*x16045))+((cj1*sj2))+(((-1.0)*x16048*x16050))+(((-1.0)*cj3*x16042*x16044))+((sj3*x16047)));
evalcond[2]=((((-1.0)*cj3*x16047))+(((-1.0)*sj3*x16042*x16044))+(((-1.0)*sj1*sj2))+((sj3*x16049))+((cj1*cj2))+(((-1.0)*x16046*x16048))+(((-1.0)*x16045*x16050)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x16051=(cj5*sj4);
IkReal x16052=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x16051))+((r01*x16052))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x16051))+(((-1.0)*r11*x16052))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x16051))+((r01*x16052))+((cj4*r02))))+IKsqr((((r10*x16051))+(((-1.0)*r11*x16052))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x16051))+((r01*x16052))+((cj4*r02))), (((r10*x16051))+(((-1.0)*r11*x16052))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x16053=IKcos(j0);
IkReal x16054=IKsin(j0);
IkReal x16055=((0.125)*sj5);
IkReal x16056=(r10*sj3);
IkReal x16057=(cj3*r00);
IkReal x16058=(cj5*sj4);
IkReal x16059=((1.0)*sj2);
IkReal x16060=((1.0)*sj4);
IkReal x16061=(r01*sj5);
IkReal x16062=(cj3*r10);
IkReal x16063=(cj5*r01);
IkReal x16064=((0.3)*sj2);
IkReal x16065=((1.0)*cj3);
IkReal x16066=(cj5*r11);
IkReal x16067=(cj4*sj3);
IkReal x16068=(r00*sj3);
IkReal x16069=(cj3*cj4);
IkReal x16070=(cj2*sj1);
IkReal x16071=((1.0)*sj5);
IkReal x16072=(r11*sj5);
IkReal x16073=((1.0)*cj4);
IkReal x16074=(cj5*x16073);
IkReal x16075=(sj1*x16054);
IkReal x16076=(cj1*x16053);
IkReal x16077=(cj1*x16054);
IkReal x16078=((1.0)*x16053);
IkReal x16079=(sj1*x16053);
evalcond[0]=((((-1.0)*x16060*x16061))+x16054+((r00*x16058))+(((-1.0)*r02*x16073)));
evalcond[1]=((((-1.0)*x16060*x16072))+((r10*x16058))+(((-1.0)*x16078))+(((-1.0)*r12*x16073)));
evalcond[2]=((((0.125)*x16063))+(((-1.0)*px))+(((-0.125)*x16054))+(((-0.3)*x16053*x16070))+((r00*x16055))+(((-1.0)*x16064*x16076))+(((-0.35)*x16079)));
evalcond[3]=((((0.125)*x16066))+((r10*x16055))+(((-0.3)*x16054*x16070))+(((-1.0)*py))+(((0.125)*x16053))+(((-1.0)*x16064*x16077))+(((-0.35)*x16075)));
evalcond[4]=(((x16061*x16069))+(((-1.0)*cj3*r02*x16060))+(((-1.0)*x16059*x16079))+(((-1.0)*x16057*x16074))+((sj3*x16063))+((cj2*x16076))+((sj5*x16068)));
evalcond[5]=((((-1.0)*cj3*r12*x16060))+((x16069*x16072))+(((-1.0)*x16059*x16075))+((sj5*x16056))+(((-1.0)*x16062*x16074))+((sj3*x16066))+((cj2*x16077)));
evalcond[6]=((((-1.0)*x16070*x16078))+((x16061*x16067))+(((-1.0)*r02*sj3*x16060))+(((-1.0)*x16059*x16076))+(((-1.0)*x16063*x16065))+(((-1.0)*x16057*x16071))+(((-1.0)*cj5*r00*x16067)));
evalcond[7]=((((-1.0)*x16059*x16077))+(((-1.0)*x16054*x16070))+(((-1.0)*x16056*x16074))+(((-1.0)*x16065*x16066))+(((-1.0)*r12*sj3*x16060))+(((-1.0)*x16062*x16071))+((x16067*x16072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "27ed4e0e1680c90d5cceec8f55728f32"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
